#!perl

=head1 NAME

qlsim - Simulated DRAMA task for -loop task option

=head1 SYNOPSIS

   qlsim -name SCU2 -flagfile sa.ok

=head1 DESCRIPTION

When testing the ORAC-DR pipeline in "Quick Look" mode (aka the "task"
looping option) data are made available to the DR via DRAMA parameters.
This simulator provides a surrogate acquisition task using the standard
QL parameter interface.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<-name>

This is the name that the task will use in the DRAMA message system.
If not specified, it will use the name QLSIM.

=item B<-flagfile>

The name of a standard ORAC-DR multi-frame flag file. The flag file
will contain the names of input data files relative to ORAC_DATA_IN.
These files will be stored into the QL parameter at at the specified
rate (see the C<-refresh> option). This is a mandatory option.

=item B<-raw>

Do not try to read data file contents from the flagfile. Simply publish
the filename in the FILENAME parameter.

=item B<-refresh>

The rate at which data will be presented to the pipeline (in seconds).
Defaults to 2 seconds. Floating point values will be converted to integers
(using the ceil() function).

=item B<-loop>

By default, the task will exit when it runs out of files. When this
option is enabled the task will start from the beginning again when
it gets to the end.

=item B<-internal>

Server Quick Look data generated internally on a 40x32 grid. Supercedes
all other options, will continue indefinitely.

=item B<-spikes>

Randomly adds a spike to images.

=item B<-help>

Provide simple help information.

=item B<-man>

Provides the manual page.

=item B<-version>

The version of the simulator.

=back

=head1 ACTIONS

This is a DRAMA task with the following actions (in addition to the
core actions that all perl DRAMA tasks have):

=over 4

=item B<UPDATE>

This is the internal action that reschedules itself at the refresh
rate, updating the internal parameters. It should not be called
from an external source.

=back

=head1 PARAMETERS

This is a DRAMA task with parameters matching those expected by ORAC-DR:

=over 4

=item B<QL>

This is the SDS parameter monitored by ORAC-DR. It consists of the following
SDS components:

=over 8

=item B<TIMESTAMP>

The Unix epoch seconds for when the parameter was written

=item B<FILENAME>

The name of the file to be read by ORAC-DR. This component is mandatory
unless the IMAGE component is present. It takes priority over IMAGE
if both are present.

=item B<IMAGE>

A structure containing the processed image. Must be present if FILENAME
is not present. This structure contains DATA_ARRAY (a 2-d image)
and FITS (character array) components.

=item B<FRAMENUM>

Frame number. Monotonically increases each time a parameter
is updated.

=back

=back

=cut

$| = 1;

use warnings;
use strict;
use Carp;
use Getopt::Long;
use Pod::Usage;
use POSIX ();
use Astro::FITS::Header::NDF;
use Time::HiRes;
#use Jit;
use NDF;
use Starlink::AST;
use Astro::FITS::Header::AST;
use DRAMA;
use Sds::Tie;

# ORAC-DR library path
use lib $ENV{ORAC_PERL5LIB};
use ORAC::Inst::Defn qw/ orac_determine_inst_classes /;

# Boundary start time for delayed start
# Current time must divide exactly by this number before publishing of
# sequence numbers will start. This allows multiple QL sim tasks to
# synchronize. We do the delay after the initial read of the files.
my $DELAY_FACTOR = 10;


# Buffer sizes
# Override the outgoing message size
$DRAMA::BUFSIZE = 500000;
$DRAMA::MESSAGEBYTES = 150000;
$DRAMA::MAXMESSAGES  = 1;

# Options
my ($help, $man, $version, $refresh, $name, $flagfile, $loop, $rawmode,
    $internal, $spikes);
my $opt_status = GetOptions("help" => \$help,
			    "man" => \$man,
			    "flagfile=s" => \$flagfile,
			    "version" => \$version,
			    "refresh=s" => \$refresh,
			    "name=s" => \$name,
			    "loop" => \$loop,
			    "raw" => \$rawmode,
			    "internal" => \$internal,
			    "spikes"  => \$spikes,
			   );

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($version) {
  my $id = '$Id$ ';
  print "QuickLook simulator data source for ORAC-DR pipeline\n";
  print " CVS revision: $id\n";
  exit;
}

# handle defaults
$refresh ||= 2.0;
$name    ||= "QLSIM";

# error checks
die "-flagfile option is mandatory\n"
  unless (defined $flagfile || defined $internal);

if (defined $flagfile && !defined $internal) {
  die "Supplied flagfile ($flagfile) does not exist\n"
    unless -e $flagfile;
}

# ORAC_DATA_IN is required for us to read the file
if (!$internal && !exists $ENV{ORAC_DATA_IN}) {
  warn "\$ORAC_DATA_IN is required when serving the IMAGE data. Falling back to FILENAME\n";
}

# if we do not have ORAC_INSTRUMENT defined we will default
# to simply serving the files without attempting to handle
# subframes. If FRM_CLASS is defined we will ask the frame itself
# for details of all the components.
my $FRM_CLASS;
if (!$internal) {
  if (!exists $ENV{ORAC_INSTRUMENT}) {
    warn "\$ORAC_INSTRUMENT not defined. Falling back to safe mode.";
  } else {
    my @classes = orac_determine_inst_classes( $ENV{ORAC_INSTRUMENT} );
    $FRM_CLASS = $classes[0] if @classes;
  }
}

# Cache of filenames that are waiting to be sent
# Only used if $FRM_CLASS is defined
my @FILECACHE;

# The format of the files stored in the filecache. Assume
# it is the same for all files in the cache (it should be)
my $IMAGE_FORMAT;

# open the flagfile so that we can start reading files from it
# and to make sure we can before we start DRAMA
# This is a global for simplicity
my $FH;
if (!$internal) {
  open $FH, "< $flagfile"
    or die "Error opening file $flagfile: $!";
}

# Dummy fits header
my $FITS_Hdr;
if ($internal) {
  my @cards = map { Astro::FITS::Header::Item->new(Card => $_) } grep /\w/, <DATA>;
  $FITS_Hdr = new Astro::FITS::Header( Cards => \@cards );
}

# Initialise DRAMA
DPerlInit( $name );
#Jit::Init( $name );

# Register the actions
my $status = new DRAMA::Status;
if (!$internal) {
  Dits::DperlPutActions("UPDATE",\&update_param,undef,0,undef,$status);
} else {
  # No external file access
  Dits::DperlPutActions("UPDATE",\&update_param_internal,undef,0,undef,$status);
}

# Get the parameter object
my $sdp = Dits::GetParId();

# Create the QL structure
my $qlsds = Sds->Create("QL", undef, Sds::STRUCT, 0, $status );
$qlsds->Create( "TIMESTAMP", undef,Sds::DOUBLE, 0.0, $status );
$qlsds->Create( "FRAMENUM", undef,Sds::INT, 0.0, $status );
$qlsds->Create( "DATAVALID", undef,Sds::INT, 0.0, $status );

# Store it in the parameter system
$sdp->Create('', 'SDS', $qlsds);

# Convert refresh rate to an integer using ceil();
$refresh = POSIX::ceil( $refresh );
print "Refreshing parameters every $refresh seconds\n";

# Reschedule to 0.3 second less than that value
my $drama_refresh = $refresh - 0.3;
print "DRAMA refresh = $drama_refresh\n";
# Create the rescheduling timescale
my $DELAY = Dits::DeltaTime( int($drama_refresh), 1E6 * ($drama_refresh - int($drama_refresh)));

# Sequence number
my $SEQNUM = 1;

# Maximum sequence number before resetting (internal mode only)
my $MAXSEQ = 10;

# Only delay once
my $DONE_DELAY = 0;

# call ourselves
DRAMA::obey $name, "UPDATE";

# event loop
Dits::MainLoop( $status );

exit;

# actions

# UPDATE Action - Internal version

sub update_param_internal {
  my $status = shift;
  return $status unless $status->Ok;
  print "Enter (internal) UPDATE action...\n";

  # cut and paste hell

  # Set the timestamp
  set_timestamp( $status );

  # and sequence number
  set_seqnum( $status );

  # Create a PDL
  my $image = PDL::Core::ones( 40,32 );
  put_image( $image, $FITS_Hdr);
  $qlsds->List( $status );
  # trigger parameter update
  $sdp->Update($qlsds, $status);

  # reschedule
  Dits::PutDelay( $DELAY, $status );
  Dits::PutRequest( Dits::REQ_WAIT, $status );
}

# UPDATE Action
my $ENTRY_COUNT = 0;
sub update_param {
  my $status = shift;
  return $status unless $status->Ok;
  $ENTRY_COUNT ++;
  print "$name: Enter UPDATE action...(entry number $ENTRY_COUNT)\n";

  # first we need to see whether there is a file pending in the
  # file cache
  my $nextfile = shift(@FILECACHE);

  # if we are in multi-frame mode we will be publishing the
  # data in "IMAGE"-mode. Else we will use FILENAME-mode
  my $image_mode;

  # check whether we need to read from the flagfile
  if (defined $nextfile) {
    $image_mode = 1;
    print "Retrieved file from cache...\n";

  } elsif (!defined $nextfile) {
    # Reset DONE_DELAY flag to ensure synchronization of
    # parameters. Unfortunately this will insert a delay at the start
    # of each new file, giving the pipeline free time to catch up if
    # necessary.
    $DONE_DELAY = 0;
    # no name, look on disk in the flagfile
    $nextfile = <$FH>;
    chomp($nextfile) if defined $nextfile;

    # if we have a frame class defined we should use it now
    # to find whether we have multiple components.
    # else we just pass ths filename onto the system
    # and publish it as a filename
    if (defined $nextfile && $nextfile =~ /\w/ &&
	defined $FRM_CLASS && !$rawmode) {

      # first see if the file exists in ORAC_DATA_IN or relative
      # to the current directory
      my $filepath;
      if (-e $nextfile) {
	$filepath = $nextfile;
      } else {
	if (exists $ENV{ORAC_DATA_IN} &&
	    -e File::Spec->catfile( $ENV{ORAC_DATA_IN}, $nextfile)) {
	  $filepath = File::Spec->catfile( $ENV{ORAC_DATA_IN}, $nextfile);
	}
      }

      # now we know whether the file exists and where it is located
      # if we have not located the file we simply go to FILENAME
      # mode and assume that the monitoring ORAC-DR will find it.
      if (defined $filepath) {
	# canonicalize
	$filepath = mycanonpath( $filepath );
	print "Retrieved file from file: $filepath with $FRM_CLASS\n";



	# create the relevant frame object
	my $Frm = $FRM_CLASS->new( $filepath );

	if (defined $Frm) {
	  print "Got frame $Frm\n";

	  # Ask it for the files
	  my @files = $Frm->files;

	  # and store the format
	  $IMAGE_FORMAT = $Frm->rawformat;

	  use Data::Dumper;
#	  print Dumper(\@files);

	  # the next file will be the first file in this list
	  $nextfile = shift(@files);

	  # IMAGE-mode?
	  if (scalar(@files) > 0) {
	    # if we have files remaining, then we enter IMAGE mode
	    # and store the rest in the file cach
	    $image_mode = 1;
	    @FILECACHE = @files;
	  } else {
	    # make sure the rawsuffix is appended to the file
	    # if we have a single file
	    $nextfile .= $Frm->rawsuffix
	      if (defined $Frm->rawsuffix && $nextfile !~ /\./);
	  }

	}

      }

    }

  }

  # delay the start to allow other tasks to hit the same tick
  unless ($DONE_DELAY) {
    &delay_start() ;
    $DONE_DELAY = 1;
  }

  # do we have something? Else finish up or reopen the file
  if (defined $nextfile && $nextfile =~ /\w/) {
    print "Processing file: $nextfile\n";

    # We have global access to the QL structure
    # Lazy, so use a tie for exploration
    tie my %QL, "Sds::Tie", $qlsds;
#    $QL{FILENAME} = $nextfile;

    # Find the timestamp
    set_timestamp( $status );

    # and sequence number
    set_seqnum( $status );

    # Find the FILENAME (or create it)
    if ($status->Ok) {
      if ($image_mode) {
	# read the image
	croak "Fatal error: IMAGE mode requested without associated format defined\n" unless defined $IMAGE_FORMAT;
	if ($IMAGE_FORMAT eq 'HDS' ||
	    $IMAGE_FORMAT eq 'NDF') {

	  require PDL::IO::NDF;
	  my $image = PDL::IO::NDF::rndf( $nextfile );

	  if (defined $image) {

	    # Add spikes if required
	    if ($spikes) {
	      # 50% chance
	      if (rand(1) < 0.5) {
		# calculate the mean
		my ($mean, $rms, $median, $min, $max) = $image->stats();

		# pick a random pixel
		my @dims = $image->dims();
		my @spike_coords = map { int(rand($_)) } @dims;

		$image->set(@spike_coords, (5* $mean));

	      }
	    }

	    # reread the FITS header since we do not have the Frm
	    # object
	    my $fits;
	    eval {
	      $fits = new Astro::FITS::Header::NDF( File => $nextfile );
	    };
	    $fits = new Astro::FITS::Header() if (!defined $fits);

	    # Now find .WCS and convert to FITS
	    my $lstatus = &NDF::SAI__OK;
	    err_begin( $lstatus );
	    ndf_begin( );
	    ndf_find( &NDF::DAT__ROOT, $nextfile, my $indf, $lstatus );
	    my $wcs = ndfGtwcs( $indf, $lstatus );
	    ndf_annul($indf,$lstatus);
	    err_end($lstatus);
	    ndf_end($lstatus);

	    if (defined $wcs) {
	      my $wcshead = new Astro::FITS::Header::AST( FrameSet => $wcs,
                                                          Encoding => undef );
	      $fits->splice( 0, 0, $wcshead->allitems);
	    }

	    # put the information into the parameter
	    put_image( $image, $fits );

	  } else {

	    croak "Error reading $nextfile into a PDL\n";

	  }

	} else {
	  croak "Do not know (yet) how to read files of format $IMAGE_FORMAT\n";
	}

      } else {
	if (exists $QL{FILENAME}) {
	  my $fil = $qlsds->Find("FILENAME", $status);
	  $fil->PutStringArrayExists( [ $nextfile ], $status, 1 );
	} else {
	  $qlsds->PutStringArray( [ $nextfile ], "FILENAME" );
	}
      }
    }

    $qlsds->List( $status );
    # trigger parameter update
    $sdp->Update($qlsds, $status);

    # reschedule
    Dits::PutDelay( $DELAY, $status );
    Dits::PutRequest( Dits::REQ_WAIT, $status );
  } else {
    # nothing else in the file
    # do we start from the start?
    if ($loop) {
      # reopen the file
      close($FH);
      open $FH, "< $flagfile" or die "Error reopening flagfile $flagfile: $!";

      # reschedule immediately so we serve the next file without an obvious delay
      DRAMA::MsgOut( $status, "Loop switch enabled. Restarting from the top");
      Dits::PutRequest( Dits::REQ_STAGE, $status );
    } else {
      # abort
      Dits::PutRequest( Dits::REQ_EXIT(), $status );
      close($FH);
    }
  }

  return $status;
}

# Put image data into the SDS parameter
sub put_image {
  my ($image, $fits) = @_;

  my %STRUCT;
  $STRUCT{DATA_ARRAY} = $image;
  $STRUCT{FITS} = [ split ("\n","$fits") ];

  # Need to remove previous IMAGE structures
  DRAMA::ErsPush();
  my $lstat = new DRAMA::Status;
  {
    my $imsds = $qlsds->Find( "IMAGE", $lstat );
    if ($imsds) {
      # force out-of-scope destroy
      $imsds->flags(1,1,1);
    }
  }
  $lstat->Annul() unless $lstat->Ok;
  DRAMA::ErsPop;

  # write the data to the structure
  $qlsds->PutHash( \%STRUCT, "IMAGE", $status );
}

sub set_timestamp {
  my $status = shift;
  my $t = $qlsds->Find( "TIMESTAMP", $status );
  my $dv = $qlsds->Find( "DATAVALID", $status );
  my $now = Time::HiRes::time();

  # want to hit an integer second
  if ($now - int($now) < 0.95) {
    my $sleep = POSIX::ceil($now) - 0.05 - $now;
    Time::HiRes::sleep( $sleep );
  }

  $now = Time::HiRes::time();
  print "$name: Timestamp=$now\n";
  $t->PutPdl( PDL::Core::pdl( $now ) )
    if (defined $t && $status->Ok);
  $dv->PutPdl( PDL::Core::long( 1 ) )
    if (defined $dv && $status->Ok);
}

# routine to calculate how long to sleep to hit a "round number" on the clock.
# Sleeps for that long (so DRAMA task is not responsive)
sub delay_start {
  my $now = Time::HiRes::time();
  my $remainder = int($now) % $DELAY_FACTOR;
  my $frac = $now - int($now);

  # The 0.05 is to make sure we enter a new second
  my $sleep = $DELAY_FACTOR - ($remainder + $frac) + 0.05;
  print "$name: Sleeping for $sleep seconds\n";
  return Time::HiRes::sleep( $sleep );
}

# Set the sequence number in SDS and increments it
# uses the global

sub set_seqnum {
  my $status = shift;
  my $s = $qlsds->Find( "FRAMENUM", $status );
  print "$name: Frame number=$SEQNUM\n";
  $s->PutPdl( PDL::Core::long( $SEQNUM ) )
    if (defined $s && $status->Ok);
  $SEQNUM++;
  # The real system resets the sequence number
  $SEQNUM = 1 if ($internal && $SEQNUM > $MAXSEQ);
}

# canonicalize path

sub mycanonpath {
  my $path = shift;
  croak "Only works on absolute paths: not $path\n"
    unless File::Spec->file_name_is_absolute( $path );

  my ($vol, $dir, $file) = File::Spec->splitpath( $path );

  my @dirs = File::Spec->splitdir( $dir );

  my @newdirs;
  for my $d (@dirs) {
    if ( $d eq File::Spec->updir ) {
      pop(@newdirs);
    } elsif ($d eq File::Spec->curdir) {
      # no action
    } else {
      push(@newdirs, $d );
    }
  }

  return File::Spec->catpath( $vol, File::Spec->catdir(@newdirs), $file );
}


=head1 SEE ALSO

L<DRAMA>, L<ORAC::Loop>.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2005 Particle Physics and Astronomy Research Council.
Copyright (C) 2007 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

# dummy fits header
__DATA__
COMMENT   '        '           / -- Telescope specific parameters --
TELESCOP= 'JCMT    '           / Name of telescope
ORIGIN  = 'SMURF SCUBA-2 simulator'/ Origin of file
OBSGEO-X=         -1601185.365 / x,y,z triplet for JCMT
OBSGEO-Y=         -5041977.547 / relative to centre of the Earth
OBSGEO-Z=           3554875.87 / [m]
ALT-OBS =               4092.0 / [m] Height of observatory above sea level
LAT-OBS =        19.8258323669 / [deg] Latitude of observatory
LONG-OBS=        204.520278931 / [deg] East longitude of observatory
ETAL    =                  1.0 / Telescope efficiency
COMMENT   '        '           / -- Observation & date parameters --
OBSID   = 'SCUBA-2_1_20060301T000000'/ Unique observation ID
OBJECT  = 'SMURF   '           / Object Name
STANDARD=                    F / True if source is a calibrator
OBSNUM  =                    1 / Observation Number
NSUBSCAN=                    1 / Sub-scan Number
OBSEND  =                    F / True if frame is last in current observation
UTDATE  = '20060301'           / UT date as a string in yyyymmdd format
DATE-OBS= '2006-03-01T00:00:00.000'/ Date and time (UTC) of start of sub-scan
DATE-END= '2006-03-01T00:00:00.000'/ Date and time (UTC) of end of sub-scan
DUT1    =                  0.0 / [d] UT1 - UTC correction
INSTAP  = '        '           / Instrument aperture
INSTAP_X=                  0.0 / [arcsec] X focal plane offset
INSTAP_Y=                  0.0 / [arcsec] Y focal plane offset
AMSTART =     1.06433815252624 / Air mass at start
AMEND   =     1.06438056313379 / Air mass at end
AZSTART =     189.113719518147 / [deg] Azimuth at sub-scan start
AZEND   =     189.234280866448 / [deg] Azimuth at sub-scan end
ELSTART =     69.9762927759412 / [deg] Elevation at sub-scan start
ELEND   =     69.9700293730418 / [deg] Elevation at sub-scan end
LSTSTART= '00:12:43.8812'      / LST at start of sub-scan
LSTEND  = '00:12:53.9036'      / LST at end of sub-scan
COMMENT   '        '           / -- Environment parameters --
ATSTART =                  5.0 / [deg C] Ambient temperature at start
ATEND   =                  5.0 / [deg C] Ambient temperature at end
WVMTAUST=             0.052583 / WVM tau at start
WVMTAUEN=             0.052583 / WVM tau at end
SEEINGST=                  1.0 / Seeing at start
SEEINGEN=                  1.0 / Seeing at end
COMMENT   '        '           / -- OMP & ORAC-DR parameters --
PROJECT = 'M08AC00 '           / The proposal ID for the PROJECT
RECIPE  = 'ARRAY_TESTS'           / The ORAC-DR recipe
DRGROUP = '        '           / Name of group to combine current observation wi
MSBID   = '        '           / ID of min schedulable block
MSBTID  = '        '           / Translation ID of MSB
SURVEY  = '        '           / Survey Name
COMMENT   '        '           / -- SCUBA-2 specific parameters --
INSTRUME= 'SCUBA-2 '           / Instrument name - SCUBA-2
SHUTTER =         1            / Shutter position for dark frames
FILTER  = '850     '           / filter used
WAVELEN =              0.00085 / [m] Wavelength
COMMENT   '        '           / -- Mapping parameters --
SAM_MODE= 'SCAN    '           / Sample mode: STARE, DREAM or SCAN
SW_MODE = 'NONE    '           / Switch mode: CHOP, PSSW, FREQ, or NONE
OBS_TYPE= 'SCIENCE '           / Observation type -  Science, Pointing or Focus
JIGL_CNT=                    0 / Number of points in DREAM pattern
JIGL_NAM= '        '           / Name containing DREAM jiggle offsets
JIGL_PA =                  0.0 / Number of points in DREAM pattern
JIGL_CRD= '        '           / Coord frame of jiggle pattern
JIG_SCAL=                  0.0 / [arcsec] SMU jiggle pattern scale factor
DRMWGHTS= '        '           / Name of DREAM weights file
MAP_HGHT=     2469.47926865683 / [arcsec] Map height
MAP_PA  =                  0.0 / [deg] Map PA
MAP_WDTH=     2132.67227524994 / [arcsec] Map width
LOCL_CRD= '        '           / Local offset coordinate system
MAP_X   =                  0.0 / [arcsec] Map X offset
MAP_Y   =    -80.2350879694748 / [arcsec] Map Y offset
SCAN_CRD= '?sS    '           / Scan coordinate system
SCAN_VEL=                600.0 / [arcsec/s] Requested scanning rate
SCAN_DY =                216.0 / [arcsec] Sample spacing perpendicular to scan
SCAN_PA =            0.4636476 / [deg] Scan PA relative to N in SCAN_CRD system
SCAN_PAT= 'PONG    '           / Scanning pattern
COMMENT   '        '           / -- JOS parameters --
STEPTIME=                0.005 / [s] Time interval between samples
COMMENT   '        '           / -- Integration time-related parameters --
INT_TIME=                  0.0 / [s] Time spent integrating on source
N_SUB   =                    0 / Number of sub-scans written to file
COMMENT   '        '           / -- SMU-specific parameters --
ALIGN_DX=                  0.0 / SMU tables X axis alignment offset
ALIGN_DY=                  0.0 / SMU tables Y axis alignment offset
FOCUS_DZ=                  0.0 / SMU tables Z axis focus offset
DAZ     =                  0.0 / SMU azimuth pointing offset
DEL     =                  0.0 / SMU elevation pointing offset
UAZ     =                  0.0 / User azimuth pointing offset
UEL     =                  0.0 / User elevation pointing offset
COMMENT   '        '           / -- Miscellaneous --
OCSCFG  = 'config.xml' / Name of OCS Configuration XML file defining the observa
SIMULATE=                    T / True if data produced by simulator
SIM_SMU =                    T / True if SMU data are simulated
SIM_RTS =                    T / True if RTS data are simulated
SIM_TCS =                    T / True if TCS data are simulated
STATUS  = 'NORMAL  '           / Status at obs. end - NORMAL or ABORT
POL_CONN=                    F / True if polarimeter is in the beam
FTS_CONN=                    F / True if FTS is used
MEANWVM =   0.0528389294463016 / Mean zenith tau at 225 GHz from WVM
TRACKSYS= 'ICRS '              / Coordinate system
BASEC1  =                    0 / Base position
BASEC2  =                    0 / Base position
