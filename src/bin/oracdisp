#!/usr/local/bin/perl -w
#
#  oracdisp
#
#     - Controls the ORACDR display environment
#     - This program is run from the ORACDR pipeline
#     
#
#  Authors:
#     Frossie Economou (JAC)
#     Tim Jenness (JAC)
#
#  History:
#     $Log$
#     Revision 1.3  1999/03/27 00:49:36  timj
#     Use Z instead of Y for datamodel
#
#     Revision 1.2  1999/03/26 04:56:30  frossie
#     changed #!/bin/perl to #!/local/bin/perl for ROE
#
#     Revision 1.1  1999/03/24 04:11:41  timj
#     moved from ../gui/
#
#     Revision 1.13  1999/03/04 04:23:16  timj
#     Add new CUT, Z* parameters to GRAPH type
#
#     Revision 1.12  1999/03/01 21:03:48  timj
#     Add support for modify, delteAll, ClearSelection buttons
#     Tidy up TYPE usage.
#     Allow modify to work with highlighting.
#
#     Revision 1.11  1999/03/01 01:35:01  timj
#     Add VECTOR
#     Start simplifaction of TYPE code
#
#     Revision 1.10  1999/02/23 03:24:27  timj
#     Add histogram mode
#
#     Revision 1.9  1999/02/23 01:59:33  timj
#     Fix spurious warning with -length (a 5.004_04 problem)
#
#     Revision 1.8  1999/02/23 01:56:42  timj
#     Use Tk::ProgressBar from the Tk-GBARR distribution.
#
#     Revision 1.7  1998/09/25 03:16:33  timj
#     Make sure that -v and -h dump message to STDOUT without loading Tk.
#
#     Revision 1.6  1998/09/23 23:41:44  frossie
#     Pick up disp.data from ORAC_DATA_OUT
#
#     Revision 1.5  1998/09/17 18:58:59  timj
#     Turn on GAIA support
#
#     Revision 1.4  1998/07/20 06:47:29  timj
#     Turn off red bar when moving cursor in text widget
#
#     Revision 1.3  1998/07/19 00:02:30  timj
#     Up date oracdisp so that it recognises command line options for the
#     input and output files.
#
#     The menus have been changed so that the TOOL can not be selected
#     with incompatible REGIONs or WINDOWs. The UIs have been updated
#     to relfect the required change.
#
#     Section has been renamed Region in the UIs.
#
#     Revision 1.2  1998/07/15 03:10:13  timj
#     Now works with four display types.
#     Can add and delete display entries.
#     Can write to disk.
#
#     Revision 1.1  1998/07/14 21:24:44  timj
#     First demo release
#
#

#
# Notes:
#   Uses the Tk::ProgressBar from the Tk-GBARR distribution.


# Want to do the options reading as early as possible so that
# if the -h or -v options are used we do not have to start up 
# a window

# Options handling
use Getopt::Long;


use vars qw/$VERSION $help $version $optin $optout/;

BEGIN {

  # Need version number here
  '$Revision$ ' =~ /.*:\s(.*)\s\$/ && ($VERSION = $1);

  my $result = GetOptions("help" => \$help,
			  "version" => \$version,
			  "in=s" => \$optin,
			  "out=s" => \$optout
			 );

  $help = 1 unless $result == 1; # Print help if unknown option

# Help text
if ($help) {
  print qq/
 Usage:
\toracdisp [-h] [-v] [-in=file] [-out=file]
 Options:
   -h[elp]\tThis message
   -v[ersion]\tVersion number
   -in=f\tName of input display definition file
   -out=f\tName of output display definition file
/;
  exit;
}

  # Version number
  if ($version) {
    print "oracdisp: Version $VERSION\n";
    print "[Perl version: $]]\n";
    exit;
  }

}


BEGIN {
  unless (exists $ENV{ORAC_DIR}) {
    print "Warning: The ORAC_DIR environment variable is not defined.\n";
    print "         This may cause problems. (setting to /tmp)\n";
    $ENV{ORAC_DIR} = "/tmp"; # Turn of -w warnings
  }
}

	  

# Make sure that UI files can be read
use lib "$ENV{ORAC_DIR}/gui";


use strict;

use subs qw/update_status image_ui graph_ui datamodel_ui sigma_ui 
  histogram_ui vector_ui /;

# Generic variables
use vars qw/$MW $BAR $TKSTATUS $TOPLEVEL/;

# Menus
use vars qw/ %TOOL_TYPES %TOOLS @TYPES/;

# Variables related to global state of sytem
use vars qw/%STATUS %DEFAULTS @SELECT_LIST @UNDOBUFFER $CURRENT
  $CURRENT_TAG
  /;

# Lengths
use vars qw/ %LENGTH /;

# Widgets
use vars qw/ $UNDO_but /;

# Variables related to definition file
use vars qw/ $InDefnFile $OutDefnFile $DefaultDefnFile/;


# Start up Tk early and put up a status bar

BEGIN {

  use Tk;
  use Tk::ProgressBar;

  # Create a new main window
  $MW = MainWindow->new;
  $MW->positionfrom('user');
  $MW->geometry('+40+40');
  $MW->title('ORACDR display configuration utility');
  $MW->iconname('ORACdisp');

  $TKSTATUS = $MW->Label(qw(-width 40 -anchor w -foreground blue),
		       -text => "Obslog $VERSION ...");
  $TKSTATUS->grid(-row => 0, -column => 0, -sticky => 'w'); 
  $BAR = $MW->ProgressBar(-from =>0, -to=>100, 
                            -width=>270, '-length'=>15,
                            -blocks => 20, -anchor => 'e',
                            -colors => [0, 'blue'],
                            -relief => 'sunken',
                            -borderwidth => 3,
                            -troughcolor => 'grey',
                           )->grid(-sticky => 's');
  $MW->update;
}

# Read file reader
use IO::File;

# Tool options
%TOOLS = (
	  KAPVIEW => {
		      WINDOW => [ 0..4 ],
		      REGION => [ 0..8 ]
		     },
	  P4 => {
		 WINDOW => [ 0..4 ],
		 REGION => [ 0..8 ]
		},
	  GAIA => {
		   WINDOW => [ 0..3 ],
		   REGION => [ 0 ]
		  }
	 );


# Order of TYPES in notebook
@TYPES = qw/ IMAGE GRAPH SIGMA DATAMODEL HISTOGRAM VECTOR /;

# Find the length of the longest TYPE so that we can simplify
# formatting

$LENGTH{TYPE} = 0;
foreach (@TYPES) {
  my $len = length($_);
  $LENGTH{TYPE} = $len if $len > $LENGTH{TYPE};
}

# Find the length of the longest display TOOL

$LENGTH{TOOL} = 0;
foreach (keys %{TOOLS}) {
  my $len = length($_);
  $LENGTH{TOOL} = $len if $len > $LENGTH{TOOL};
}

$LENGTH{ID} = 9; # Guess at length of ID

# Allows tools per type

%TOOL_TYPES = (
	       IMAGE => [ qw / KAPVIEW P4 GAIA/],
	       GRAPH => [ qw /KAPVIEW P4/],
	       SIGMA => [ qw /KAPVIEW/],
	       DATAMODEL => [ qw / KAPVIEW / ],
	       HISTOGRAM => [ qw / KAPVIEW / ],
	       VECTOR    => [ qw / KAPVIEW / ]
	      );


# Default Name of definition file
# this can also be read from the command line
# as an option in order to override this default.
$DefaultDefnFile = "$ENV{ORAC_DATA_OUT}/disp.dat";

# This is the actual display definition as stored in memory
# It is an array of hashes
# The ID entry in each hash is 'suffix'
# use &update_defn to update the status widget
# use &write_defn to write the defn to a file
# could treat this as an object....(cf ORAC::Index)
my @DispDefn = ();


# Configure the default behaviour
%DEFAULTS = (
	     'IMAGE' => {
			 TOOL => 'KAPVIEW',
			 REGION => 0,
			 WINDOW => 0,
			 SUFFIX => 'RAW',
			 XAUTOSCALE => 1,
			 YAUTOSCALE => 1,
			 ZAUTOSCALE => 1,
			 XMIN => 0,
			 YMIN => 0,
			 ZMIN => 0,
			 XMAX => 100,
			 YMAX => 100,
			 ZMAX => 100
			},
	     'GRAPH' => {
			 TOOL => 'KAPVIEW',
			 REGION => 0,
			 WINDOW => 0,
			 SUFFIX => 'RAW',
			 XAUTOSCALE => 1,
			 YAUTOSCALE => 1,
			 ZAUTOSCALE => 1,
			 XMIN => 0,
			 YMIN => 0,
			 ZMIN => 0,
			 XMAX => 100,
			 YMAX => 100,
			 ZMAX => 100,
			 CUT  => 'X'
			},
	     'DATAMODEL' => {
			     TOOL => 'KAPVIEW',
			     REGION => 0,
			     WINDOW => 0,
			     SUFFIX => 'RAW',
			     XAUTOSCALE => 1,
			     ZAUTOSCALE => 1,
			     XMIN => 0,
			     ZMIN => 0,
			     XMAX => 100,
			     ZMAX => 100
			    },
	     'SIGMA' => {
			 TOOL => 'KAPVIEW',
			 REGION => 0,
			 WINDOW => 0,
			 SUFFIX => 'RAW',
			 RANGE  => 5,
			 DASHED => 3	   
			},
	     'HISTOGRAM' => {
			     TOOL => 'KAPVIEW',
			     REGION => 0,
			     WINDOW => 0,
			     SUFFIX => 'RAW',
			     XAUTOSCALE => 1,
			     YAUTOSCALE => 1,
			     ZAUTOSCALE => 1,
			     XMIN => 0,
			     YMIN => 0,
			     ZMIN => 0,
			     XMAX => 100,
			     YMAX => 100,
			     ZMAX => 100,
			     NBINS => 20
			    },
	     'VECTOR' => {
			  TOOL => 'KAPVIEW',
			  REGION => 0,
			  WINDOW => 0,
			  SUFFIX => 'RAW',
			  XAUTOSCALE => 1,
			  YAUTOSCALE => 1,
			  ZAUTOSCALE => 1,
			  XMIN => 0,
			  YMIN => 0,
			  ZMIN => 0,
			  XMAX => 100,
			  YMAX => 100,
			  ZMAX => 100,
			  ANGROT => 0,
			 },
	     );

# Now configure the widget default values
&set_default_status(keys %DEFAULTS);


# Okay now we are really starting

update_status('Reading NoteBook module..', 10);
require Tk::NoteBook;
update_status('Reading Tk::Menu module..', 20);
require Tk::Menu;

update_status('Reading DialogBox module..', 25);
require Tk::DialogBox;

update_status('Reading Read-only text widget..',30);
require Tk::ROText;

update_status('Reading notebook definitions..', 40);

foreach my $page (@TYPES) {
  my $str = lc($page) . '.ui.pl';
  do "$str";
}

# Configure the input and output display definition files
if (defined $optin) {
  $InDefnFile = $optin;
} else {
  $InDefnFile = $DefaultDefnFile;
}

if (defined $optout) {
  $OutDefnFile = $optout;
} else {
  $OutDefnFile = $InDefnFile;
}



# 1 - Create frames in top window
# 2 - Create frames inside these and pack
# 3 - Pack all the toplevel frames into the MainWindow
# 4 - Start event loop

update_status('Configure toplevel frames...', 60);

# Declare all the frame variables
my $MBar_f; # The Top row of menu buttons
my $NB_f;   # The notebook frame
my $State_f; # The listbox containing the current state

# Global widgets
my $CurrDefn; # The listbox widget that contains the current definitions
my $NB;       # The notebook widget
my %NB_pages; # The notebook pages

# Actually create the frame objects
$MBar_f = $MW->Frame(-relief =>'flat', -borderwidth => 2);
$NB_f   = $MW->Frame( -relief => 'groove', -borderwidth => 2);
$State_f = $MW->Frame(-relief => 'groove', -borderwidth => 2);

# Now create the top level menu bar
update_status 'Creating menubar...', 60;
&create_topmenu($MBar_f);

# Now create the notebook widget
update_status 'Creating notebook entries...', 70;
&create_notebook($NB_f);

# Now create the lower window containing the current state
# of the settings
update_status 'Creating lower window...', 80;
&create_state($State_f);

# Update the bar to show that we have finished loading (No startup time!)
update_status 'Complete', 99;

# Now that we have created all the widgets we can pack them into the
# main window

# Remove the STATUS and BAR
$TKSTATUS->destroy if defined $TKSTATUS;
$BAR->destroy if defined $BAR;

# Pack the frames into the mainwindow
$MBar_f->grid(-sticky => 'nswe');
$NB_f->grid(-sticky => 'nsew');
$State_f->grid(-sticky => 'nsew');

# Start the event loop
MainLoop;


############################# S U B S ################################

# Subroutines abound....

# create_topmenu
#  This routine creates the row of buttons along the top
# of the main window.
# contains things such as Exit and About buttons

sub create_topmenu {
  my $frame = shift;

  my $about;
  $about = $frame->Button(-text=>'About',
			    -relief=>'raised',
			    -command=>sub{&aboutwin($about)})->pack(-side=>'right');

  my $quit = $frame->Button(-text=>'Exit',
			     -relief=>'raised',
			     -command=>sub{&close_oracdisp})->pack(-side=>'left');

}

# This routine formats and packs the NoteBook
# Argument is the frame in which it should be packed
# Assumes that the UI frame code has been 'required' earlier

sub create_notebook {
  my $frame = shift;

  # Create the notebook
  $NB = $frame->NoteBook(-ipadx => 6, -ipady => 6);
  
  # Now declare the entries
  # and set up a raise command

  foreach my $page (@TYPES) {

    $NB_pages{$page} = $NB->add(lc($page), -label => ucfirst(lc($page)), -underline => 0,
				-raisecmd => \&onNBraise);

    # Populate the page
    my $sub = lc($page) . '_ui';
    no strict 'refs';
    &{$sub}($NB_pages{$page});    
  }


  # Pack the pages into the required frame
  $NB->pack(-expand => 'yes',
	    -fill => 'both',
	    -padx => 5, -pady => 5,
	    -side => 'top');
}

# Sub to create the list widget at the bottom of the screen that 
# contains the current display configuration

sub create_state {
  my $frame = shift;

  # Create a text widget for the data with an attached Scroll bar
  # This becomes a Global variable so that
  # we can always access the widget for updating entired
  $CurrDefn = $frame->Scrolled('ROText',
			       -scrollbars => 'se',
			       -wrap => 'none',
			       -setgrid => 1,
			       -height=>8,
			       -width =>30
			      )->pack(-side =>'top',-fill => 'both');
  $CurrDefn->bindtags(qw/widget_demo/); # Remove all bindings except dummy

  # Add a button that will write the state to file
  my $configure_but = $frame->Button(-text => 'Configure',
				     -relief => 'raised',
				     -command => \&write_defn
				    )->pack(-side=>'left');

  # Add a DeleteAll button
  my $deleteAll_but = $frame->Button(-text => 'Delete All',
				     -relief => 'raised',
				     -command => \&delete_all_entries
				    )->pack(-side => 'left');;


  # A button to delete highlighted entries
  # Looks in the global variable @SELECT_LIST for a list of indices to
  # remove
  my $delete_but = $frame->Button(-text => 'Delete Selection',
				  -relief => 'raised',
				  -command => \&delete_entry_from_defn
				 )->pack(-side=>'left');

  # An undo button. Uses @UNDOBUFFER
  # Global so that we can change the state
  $UNDO_but = $frame->Button(-text => 'Undo',
			     -relief => 'raised',
			     -state  => 'disabled',
			     -command => \&undo_delete
			    )->pack(-side => 'left');


  # Button to clear the current delete selection
  my $clearSelection = $frame->Button(-text => 'Clear Selection',
				     -relief => 'raised',
				     -command => \&clear_delete_selection
				    )->pack(-side => 'left');;

  
  # Now fill the widget with the contents of the default state
  # Read in the default configuration from file
  # This sets the state in the defn array
  &read_defn;

  # Now run the task that fills the text widget with entries
  &update_defn;

}
  
# This sub is invoked every time the NoteBook entry is raised
# to the front. It makes sure that the 'update' button is disabled
# and that the current selection is unset.
# This is necessary so that a selection can be updated only when
# it is current (ie when an entry is selected in the listbox 
# we keep track of the update unless another image type is selected.
# this means that everything can be configured except the display type.
# This may not be good. Will need to discuss

sub onNBraise {
  # Unset the current selection
  undef $CURRENT;

  # Remove the highlighting associated with the current selection
  $CurrDefn->tag('configure',$CURRENT_TAG,
	     -background=>undef) if defined $CURRENT_TAG;

  # Remove the tag associated with current
  undef $CURRENT_TAG;

}



# This sub inserts text into a widget and sets a tag
# Carriage returns are not appended.
#
# args:  Window object, text, list of tags to associate with line

sub insert_text {

  my $w = shift;
  my $text = shift;

  # Get the start position from the current state of the object
  my $start = $w->index('insert');

  # Insert the text
  $w->insert('insert', $text);

  # Remove all tags on this position
  foreach my $tag ($w->tag('names', $start)) {
    # Im not sure this does anything at all :-)
    $w->tag('remove', $tag, $start, 'insert');
  }

  # If a list has been supplied then set the tags
  if (@_) {
    my @tags = @_;
    foreach my $tag (@tags) {
      $w->tag('add', $tag, $start, 'insert');
    }
  }

}


# This routine closes down the GUI
sub close_oracdisp {
  $MW->destroy if Exists($MW);
}

# This routine pops up a window telling us all abour oracdisp

sub aboutwin {
  my $aboutbut = shift;

  # Turn off the button that called this
  $aboutbut->configure(-state=>'disabled') if defined $aboutbut;

  my $f = $MW->DialogBox(-title => 'About oracdisp', -buttons => ["OK"]);

  $f->Label(-text =>"ORACDISP\n\nBy: Frossie Economou and Tim Jenness\n\nOracDisp Version: $VERSION\nTk Version: $Tk::VERSION\nPerl Version: $]")->pack;

  # One problem with using a dialog box is that the window
  # grabs focus. If this is a pain I will rewrite using my own
  # widgets
  my $result = $f->Show;

  if ($result && defined $aboutbut) {
    $aboutbut->configure(-state=>'normal');
  }
  

}


# This subroutine updates the display widget on startup

sub update_status {
 
    my($status_text, $something) = @_;
 
    $TKSTATUS->configure(-text => "$status_text ...");
    $BAR->value($something);
    if (defined $TOPLEVEL) {
      $TOPLEVEL->update;
    } else {
      $MW->update;
    }
 
}

# Subroutine to read the current definition from disk
# The name of the file is stored in the global variable $InDefnFile
# This routine is almost exactly the same as the reader in
# ORAC::Display::parse_file_defn

sub read_defn {

  # Reset the current definition
  @DispDefn = ();

  # Open the file
  my $file = new IO::File("< $InDefnFile");

  # If the file is okay....
  if (defined $file) {
    
    # Probably want to skip all lines containing comments
    foreach my $line (<$file>) {

      chop $line;  # Get rid of carriage return

      next unless defined $line;
      next unless $line =~ /./;

      # Parse the line and convert to hash
      my $href = Disp_TextToH($line);

      next unless defined $href;
      # Now store the hash on the stack
      push(@DispDefn, $href);

    }

  } else {
    warn ("Definition file ($InDefnFile) could not be opened");
  }

  return;
}

# update_defn 
#   This routine takes the definition array and copies it into
#   the status widget
# The global defintion is stored in @DispDefn

sub update_defn {

  # This routine simply runs through @DispDefn and constructs a 
  # string that is then displayed 

  # Allow modification in the widget
  $CurrDefn->configure(-state => 'normal');

  # Clear the widget
  $CurrDefn->delete('1.0', 'end');

  # Clear all tags
  $CurrDefn->tag('delete', $CurrDefn->tag('names'));

  # Now loop through @DispDefn
  for my $i (0..$#DispDefn) {

    my $defn = $DispDefn[$i];
    
    # Tag name
    my $tag = "d$i";
    
    # Convert to a string
    my $text = Disp_HtoFormatText($defn);

    next unless defined $text;

    # And insert this text into the widget and tag it with $i
    &insert_text($CurrDefn, "$text\n", $tag, 'normal', 'selected');

    # If $CURRENT is set we can put that tag back
    # Note that we have to reset CURRENT_TAG since that
    # may no longer be correct if we have been deleting entries
    if (defined $CURRENT) {
      if ($defn eq $CURRENT) {
	$CurrDefn->tag('configure', $tag, -background=>'red');
	$CURRENT_TAG = $tag;
      }
    }

    # Now configure this tag so that it recongises when 
    # the mouse arrives and leaves
    $CurrDefn->tag('bind', $tag, '<Any-Enter>' => 
		   sub {shift->tag('configure', $tag,
				   -relief => 'raised',
				   -borderwidth => 2
				  )}
		  );

    $CurrDefn->tag('bind', $tag, '<Any-Leave>' => 
		   sub {shift->tag('configure', $tag,
				   -relief => 'flat',
				  )}
		  );

    # Now we should configure it so that something happens when 
    # we double click
    # All we really need to do is associate the command with
    # the 
    $CurrDefn->tag('bind', $tag, 
		   '<Double-1>' => sub {&reflect_defn($defn);
					my $widg = shift;
					# If CURRENT is already set 
					# We have to clear the previous tag
					if (defined $CURRENT) {
					  $widg->tag('configure',$CURRENT_TAG,
						    -background=>undef);
					}

					# Now store the current value
					$CURRENT = $defn;
					$CURRENT_TAG = $tag;
					$widg->tag('configure',$tag,
						  -background=>'red');
				      }
		  );

    # Configure the Single Button release such that it can
    # turn on or off selection
    $CurrDefn->tag('bind', $tag,
		   '<ButtonRelease-1>' =>
		   sub { my $index = substr($tag, 1);
			 my $widg = shift;

			 # Check to see whether the index is
			 # already stored
			 if (grep(/^$index$/,@SELECT_LIST) > 0) {
			   # Already in so remove it
			   @SELECT_LIST = grep(!/^$index$/,@SELECT_LIST);
			   $widg->tag('configure',$tag,
				     -foreground => undef);
			 } else {
			   push(@SELECT_LIST, $index);
			   $widg->tag('configure',$tag,
				     -foreground => 'blue');
			 }

		       }
		  );

  }

  # Disable the box so that people cant write in it
  $CurrDefn->configure(-state => 'disabled');


}

# WRITE_DEFN
#   Write a display definition to disk
#   More or less the sames as update_defn
#   except we write to a file

sub write_defn {

  # Open the file for writing
  # Open the file
  my $file = new IO::File("> $OutDefnFile");

  # If the file is okay....
  if (defined $file) {
    
    # Now loop through @DispDefn
    for (my $i =0; $i <= $#DispDefn; $i++) {

      my $defn = $DispDefn[$i];
    
      # Convert to a string
      my $text = Disp_HtoText($defn);
      
      next unless defined $text;

      # Print to the file
      print $file $text . "\n";

    }

    # Dialog box
    my $f = $MW->DialogBox(-title => 'Update', -buttons => ["OK"]);
    $f->Label(-bitmap => 'info')->pack;
    $f->Label(-text => "Display configuration written to disk")->pack;
    $f->Show;

  } else {

    # Dialog box
    my $f = $MW->DialogBox(-title => 'Update', -buttons => ["OK"]);
    $f->Label(-bitmap => 'error')->pack;
    $f->Label(-text => "Error writing configuration to disk\nFile: $OutDefnFile\n$!\n")->pack;
    $f->Show;

  }

}


# Routine to take an entry in @DispDefn and convert it to a string
# suitable writing to a file. This version should be the same form
# that reads the definition file in the ORAC::Display system.
# In fact these should all be in the same class.....
# Expects a hash reference as input

sub Disp_HtoText {
  # First arg is the hash reference
  my $href = shift;

  die 'Not a hash reference' unless ref($href) eq 'HASH';

  my %hash = %{$href};

  # Now the first bit of the string is just the ID
  my $string;
  if (exists $hash{'ID'}) {
    $string = $hash{'ID'};
  } else {
    print "GUI_Error::: ID key is missing\n";
    return undef;
  }
  
  foreach my $key (keys %hash) {
    next if $key eq 'ID';
    $string .= " " . $key . "=$hash{$key}";
  }

  # Return the string
  return $string;
}


# Routine to take an entry in @DispDefn and convert it to a string
# suitable for display in the GUI (ie the order is fixed and
# some of the equals signs are dropped - eg for TYPE and TOOL)
# Expects a hash reference as input

sub Disp_HtoFormatText {
  # First arg is the hash reference
  my $href = shift;

  die 'Not a hash reference' unless ref($href) eq 'HASH';

  my %hash = %{$href};

  # Now look for ID TOOL and TYPE since these are special
  my @prefix;
  foreach my $tag (qw/ID TYPE TOOL/) {
    if (exists $hash{$tag}) {
      push(@prefix, uc($hash{$tag}) . ' 'x ($LENGTH{$tag} - length($hash{$tag})));
    } else {
      print "GUI_Error::: $tag key is missing\n";
      return undef;
    }

    # Delete the key since we have already 'used' it
    delete $hash{$tag};

  }

  # Create the first part of the string from the special keywords
  my $string = join(" ",@prefix);
  
  foreach my $key (reverse sort keys %hash) {
    $string .= " " . $key . "=$hash{$key}";
  }

  # Return the string
  return $string;
}





# Routine to convert a text line (as stored on the text widget or
# in a Definition File and convert it to a hash

sub Disp_TextToH {
  my $text = shift;

  # Return immediately if there was nothing there
  return undef unless defined $text;

  # Strip leading spaces
  $text =~ s/^\s+//;

  # Skip  blank lines
  return undef  unless defined $text;
  
  # Skip comments 
  return if $text =~ /^\#/;
      
  # Now we need to split up the line
  my @bits = split(/\s+/, $text);

  # We are generating a hash
  my %hash = ();

  # We know the first key
  $hash{'ID'} = shift(@bits);

  return unless defined $text;

  # Now loop through the remainder and split on equals
  foreach my $key (@bits) {
    my ($hkey, $value) = split(/=/,$key);
    $hkey = uc($hkey);
    $hash{$hkey} = $value;
  }

  return \%hash;

}


# Routine to update the NoteBook item so that it reflects the
# selected Defintion entry.
# Args:  Hash reference (might change this to a number since that would
#           be the obvious OO interface)

sub reflect_defn {
  my $href = shift;

#  print "Process: ". Disp_HtoText($href) . "\n";

  # Now we need to process the line to decide on the required
  # NoteBook entry and then set the variables

  # Take a copy of the entry hash
  my %defn = %$href;

  # First display type
  # If TYPE does not exist then we are in trouble
  if (exists $defn{TYPE}) {

    my $type = $defn{TYPE};
    
    # Raise it
    $NB->raise(lc($type));

    # TYPE is upper case in the STATUS hash
    $type = uc($type);

    # Do it the long way first
    $STATUS{$type}{SUFFIX} = $defn{ID} if exists $defn{ID};
    $STATUS{$type}{XAUTOSCALE} = $defn{XAUTOSCALE} if exists $defn{XAUTOSCALE};
    $STATUS{$type}{YAUTOSCALE} = $defn{YAUTOSCALE} if exists $defn{YAUTOSCALE};
    $STATUS{$type}{ZAUTOSCALE} = $defn{ZAUTOSCALE} if exists $defn{ZAUTOSCALE};
    $STATUS{$type}{TOOL} = uc($defn{TOOL}) if exists $defn{TOOL};
    $STATUS{$type}{REGION} = $defn{REGION} if exists $defn{REGION};
    $STATUS{$type}{WINDOW} = $defn{WINDOW} if exists $defn{WINDOW};
    $STATUS{$type}{XMIN} = $defn{XMIN} if exists $defn{XMIN};
    $STATUS{$type}{XMAX} = $defn{XMAX} if exists $defn{XMAX};
    $STATUS{$type}{YMIN} = $defn{YMIN} if exists $defn{YMIN};
    $STATUS{$type}{YMAX} = $defn{YMAX} if exists $defn{YMAX};
    $STATUS{$type}{ZMIN} = $defn{ZMIN} if exists $defn{ZMIN};
    $STATUS{$type}{ZMAX} = $defn{ZMAX} if exists $defn{ZMAX};
    $STATUS{$type}{RANGE} = $defn{RANGE} if exists $defn{RANGE};
    $STATUS{$type}{DASHED} = $defn{DASHED} if exists $defn{DASHED};
    $STATUS{$type}{NBINS} = $defn{NBINS} if exists $defn{NBINS};

  } else {
    print "Display type is not available.....:\n";
    print Disp_HtoText($href) . "\n";
  }

}


# Create menus. The TOOL is a special menu since the contents
# of window and region depend on tool.
#
#  Args: display type (IMAGE, GRAPH, etc), tool menu button, remainder
#   The menubutton widgets are for the TOOL (the main one), window
#   and section

sub create_menus {
  my ($type, $toolw, $winw, $regw) = @_;

  $type = uc($type);
  
  
  foreach my $entry (@{$TOOL_TYPES{$type}}) {
    
    # Create tool menu
    # When the command is exectued, the variable is updated and
    # the WINDOW and REGION windows are updated.
    $toolw->command(-label => $entry,
		    -command => sub {
		      $STATUS{$type}{TOOL} = $entry;
		      &reconfig_menu($winw, $type, $entry, 'WINDOW');
		      &reconfig_menu($regw, $type, $entry, 'REGION');
		    } );

    # Special case - disable the GAIA item
    #$toolw->menu->entryconfigure('end', -state => 'disabled')
    #   if $entry eq 'GAIA';
    
  }

  # Now setup the WINDOW menu using the current state of type
  &reconfig_menu($winw, $type, $STATUS{$type}{TOOL}, 'WINDOW');
  &reconfig_menu($regw, $type, $STATUS{$type}{TOOL}, 'REGION');

}


# reconfig_menu($w, $type, $tool, $menu)
#   Configures menu $w (name $menu - WINDOW,REGION...), 
#   in type $type (IMAGE,GRAPH..) so that it is oncistent
#   with tool $tool (could use the global variable for this)
#  If the current state of the menubutton does not match any 
#  of the menu entries the value is changed to the first menu
#  entry.

sub reconfig_menu {

  my ($w, $type, $tool, $menu) = @_;
  
  $type = uc($type);
  $tool = uc($tool);
  $menu = uc($menu);
  

  # Need to clear the menu
  $w->menu->delete(0,'end');

  my $okay = 0;
  
  # Now create a new one
  foreach my $item (@{$TOOLS{$tool}{$menu}}) {

    $w->command( -label   => $item,
		 -command => sub { $STATUS{$type}{$menu} = $item }
	       );

    # Compare current state with each item
    $okay = 1 if $item eq $STATUS{$type}{$menu};
  }

  # If nothing matched the current state, change the current state
  $STATUS{$type}{$menu} = $ {$TOOLS{$tool}{$menu}}[0]
     unless $okay;
 
}


# Sub to modify the current entry. Usually called by the 'Modify'
# button present on each notebook page

sub modify_current {

  # Find the page name
  my $page = shift;

  # The assumption is that we are modifying the $CURRENT definition
  # This is similar to add_entry except that we dont create a new one

  # Check to see if $CURRENT is defined - if it is not
  # then do nothing [BUTTON SHOULD BE DISABLED SO THAT THIS
  # DOESNT HAPPEN]
 
  if (defined $CURRENT) {

    # Read the selected page and overwrite the values in $CURRENT
    %{ $CURRENT } = % { &read_page($page) };

    update_defn;

  } else {
    print 'There is no current selection to be modified\n';
  }

}

# subroutine to add entries to the display list.
# Argument is the page name (eg histogram, image)
# so that we know which to read.

sub add_entry {
  my $page = shift;

  my $href = &read_page($page);

  # Now store this in the array
  push(@DispDefn, $href);

  # Now update the list box
  update_defn;


}


# Sub to read the relevant notebook page and store the information
# in a hash. A hash reference is returned.

sub read_page {

  # Read the page type from @_ and convert to upper case
  my $type = uc(shift);

  # Create a new hash to store the page values in
  my %values = ();

  # Now store the TYPE and the ID in the hash
  # since these are the 'special' keys
  $values{TYPE} = $type;
  $values{ID}   = $STATUS{$type}{SUFFIX};

  # Now simply copy all the values from $STATUS{$type}
  # to %values
  %values = (%values, %{$STATUS{$type}});

  # And delete the SUFFIX key that we already have
  delete $values{SUFFIX};

  # Return the hash reference
  return \%values;

}


# This subroutine copies the default values to the STATUS array
# It is run during initialisation and whenever the REVERT button is
# pushed
#
#  Arguments is TYPE {GRAPH|IMAGE|SIGMA|etc}

sub set_default_status {

  my @types = @_;

  # Cant just copy the new hashref in since this would change the
  # scalar references inside the hash that are linked to the widgets
  # Do it long hand setting each in turn

  foreach my $type (@types) {
    foreach my $key (keys %{$DEFAULTS{$type}}) {
      $STATUS{$type}{$key} = $DEFAULTS{$type}{$key};
    }
  }

}


# Sub to delete the specified entries from DispDefn
# Uses the contents of @SELECT_LIST to provide the indices

sub delete_entry_from_defn {

  # Set up a local copy
  my @local = ();

  # Reset the UNDO buffer
  @UNDOBUFFER = ();

  # Need to work out which indices ARE allowed
  # ie those that are not in @SELECT_LIST
  for (my $i=0; $i <= $#DispDefn; $i++) {
    # Copy it across if the index is not in the selected list
    if (grep(/^$i$/,@SELECT_LIST) == 0) {
      push(@local, $DispDefn[$i]);
    } else {
      # Store in the UNDO buffer
      push(@UNDOBUFFER, $DispDefn[$i]);
      
      # Enable the undo button
      $UNDO_but->configure(-state => 'normal');
    }
  }

  # Copy back to DispDefn
  @DispDefn = @local;

  # The selection list should be reset after a deletion
  @SELECT_LIST = ();

  # Redraw the listbox
  &update_defn;

}


# UNDO a delete from the list box

sub undo_delete {
  # Now need to copy the contents of the UNDO buffer back onto
  # the DispDefn
  push(@DispDefn, @UNDOBUFFER);

  # Disable the button
  $UNDO_but->configure(-state => 'disabled');

  # Update the window
  &update_defn;
}

# Clear the currently selected delete list
# And the CURRENT definition

sub clear_delete_selection {
  @SELECT_LIST = ();
  $CURRENT = undef;
  $CURRENT_TAG = undef;
  &update_defn;
}

# Subroutien to delete all entries.
# This populates the UNDO  buffer and turns on the UNDO button

sub delete_all_entries { 
  # Copy all entries to the undo buffer
  @UNDOBUFFER = @DispDefn;

  # Enable the UNDO button
  $UNDO_but->configure(-state => 'normal');

  # Clear the entries
  @DispDefn = (); 

  # Update the display
  &update_defn 
}

