#!/local/bin/perl -w

=head1 NAME

oracdr_parse_recipe - parse a recipe and write to standard output

=head1 SYNOPSIS

 oracdr_parse_recipe RECIPE_NAME
 oracdr_parse_recipe -debug SCUBA_NOISE
 oracdr_parse_recipe -syntax REDUCE_DARK

=head1 DESCRIPTION

Simply prints an expanded ORAC-DR recipe. Allows recipes to be examined
without having to run up C<oracdr> itself. Used mainly for debugging
purposes.

=head1 OPTIONS AND ARGUMENTS

This section describes the supported command line options.
Minimum matching is supported.

=over 4

=item B<-help>

Print a brief help message and exit.

=item B<-man>

Print the manual page and exit.

=item B<-debug>

The recipe is parsed and translated to include debugging
information.

=item B<-syntax>

Perform a syntax check on the recipe rather than writing the
recipe contents to STDOUT.

=item B<-listprim>

When syntax checking, list the primitives that were used by the recipe.

=item B<-mode>

Some recipes make use of the observing mode to control which primitive
should be read. This option allows the user to specify a mode that will
be used for decision making.

=item B<-recsuffix>

Modify the recipe search algorithm such that a recipe variant can be
selected if available. For example with `C<-recsuffix QL>' a recipe
named MYRECIPE_QL would be picked up in preference to MYRECIPE.

Multiple suffices can be supplied using a comma separator.

 -recsuffix QL1,QL2

=back

=head1 ENVIRONMENT

The following environment variables must be set:

=over 4

=item B<ORAC_INSTRUMENT>

The instrument to be used to create recipes.

=item B<ORAC_PERL5LIB>

Location of the ORAC Perl modules (if they are not installed in a standard
location).

=item B<ORAC_DIR>

Location of the ORAC-DR system. Required in order to locate recipes.

=back

=head1 SEE ALSO

L<ORAC::Recipe>

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.edu<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Science and Technology Facilities Council.
Copyright (C) 2000-2001 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

use strict;
use lib $ENV{"ORAC_PERL5LIB"};
use Pod::Usage;
use Getopt::Long;
use ORAC::Recipe;
use ORAC::Error qw / :try /;
use ORAC::Constants qw / :status /;
use ORAC::Frame;

my %options = (
	       "help" => 0,
	       "man"  => 0,
	       "debug" => 0,
	       "syntax" => 0,
               "listprim" => 0,
               "mode" => undef,
               "recsuffix" => '',
	      );

GetOptions(\%options,
           "help",
           "man",
	   "debug",
	   "syntax",
           "listprim",
           "mode=s",
           "recsuffix=s"
          ) || pod2usage(2);

pod2usage(1)  if ($options{help});
pod2usage(-verbose => 2)  if ($options{man});

# Read the recipe name
unless (@ARGV) {
  die "Usage: oracdr_parse_recipe RECIPE_NAME\n";
}

my $RecipeName = shift;

my $Frm;
if (defined $options{mode}) {
  $Frm = ORAC::Frame->new();
  $Frm->uhdr( "ORAC_OBSERVATION_MODE", $options{mode} );
}

# Read instrument from $ORAC_INSTRUMENT

unless (exists $ENV{ORAC_INSTRUMENT}) {
  die("No intrument specified in \$ORAC_INSTRUMENT. Please set to one of IRCAM, UFTI, SCUBA etc.\n");
}

my $instrument = uc($ENV{ORAC_INSTRUMENT});

# Parse recsuffix, convert comma separated list to array
if (exists $options{recsuffix} && defined $options{recsuffix}) {
  $options{recsuffix} = [ split /,/, $options{recsuffix}];
} else {
  $options{recsuffix} = [];
}


# Create new recipe object
my $recipe;
try {
   $recipe = new ORAC::Recipe( NAME => $RecipeName,
			       INSTRUMENT => $instrument,);
   $recipe->debug(1) if $options{debug};
   $recipe->frame( $Frm ) if defined $Frm;
   $recipe->suffices( @{$options{recsuffix}} );

   if ($options{syntax}) {
      my @primitives = $recipe->check_syntax;
      print "Recipe Syntax OK\n" or die "Error printing success message\n";
      if ($options{listprim}) {
        print "Using the following primitives:\n";
        print "\t$_\n" for @primitives;
      }
   } else {
     print $recipe->as_string(). "\n";
   }

}
catch ORAC::Error::FatalError with
{
   my $Error = shift;
   print "Error: $Error\n";
   exit 1;
}
otherwise
{
   my $Error = shift;
   print "Error: $Error\n";
   exit 1;
};



