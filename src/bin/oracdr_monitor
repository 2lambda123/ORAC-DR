#!/usr/bin/perl -w

=head1 NAME

oracdr_monitor - monitor the ORAC-DR pipeline output

=head1 SYNOPSIS

  oracdr_monitor

  oracdr_monitor --tty

  oracdr_monitor -nodisplay

=head1 DESCRIPTION

This program monitors the output from ORAC-DR log files in the
ORAC_DATA_OUT directory. If a new log file is created (e.g. by a
restart of ORAC-DR) the program will automatically begin monitoring
the new one.

If an X-display is running it sends the output to an Xwindow
similar to the standard ORAC-DR logging window. If there is no
display the output is sent to standard output.

By default the data display is enabled to monitor the live pipeline
display requests. On startup only new display requests are handled (any
pending from earlier in the pipeline processing are ignored). The data
display can be disabled using the C<-nodisplay> option.

=head1 OPTIONS

=over 4

=item B<--help>

List help text. This prints a summary of this document.

=item B<--man>

Print the full documentation.

=item B<--version>

Print the version number.

=item B<--tty>

This sends the output to the current xterm. It is automatically
selected if the DISPLAY environment variable is unset.

=item B<--nodisplay>

Disable display monitoring. Ignored if DISPLAY environment variable
is not set.

=item B<-skip>

If display monitoring is enabled, by default the monitor will attempt to process
every request even if that means it falls behind the pipeline. With this option
only the most recent request will be handled with the exception that Group
display requests are always processed.

=item B<--useloc>

Use the location "declared" by a file in ORAC_LOCATION_DIR (default
/jac_sw/oracdr-locations) as ORAC_DATA_OUT.

=item B<--recsuffix>

Specifies a preferred recipe suffix.  This affects the pipeline location
file used if the C<--useloc> option is given.

=back

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2001 Particle Physics and Astronomy Research Council.
Copyright (C) 2007 Science and Technology Facilties Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

use strict;
require 5.006;
use vars qw/ $VERSION /;
use Fcntl qw/ SEEK_END SEEK_CUR /;
use IO::Handle;

BEGIN {
    if (!$ENV{ORAC_PERL5LIB} && exists $ENV{ORAC_DIR}) {
      $ENV{ORAC_PERL5LIB} = File::Spec->catdir($ENV{ORAC_DIR}, "lib","perl5");
    }
}
use lib $ENV{"ORAC_PERL5LIB"};

#  Version number - do this before anything else so that we dont have to
#  wait for all the modules to load - very quick
BEGIN {
  use ORAC::Version;
  $VERSION = ORAC::Version->getVersion;

  #  Check for version number request - do this before real options handling
  foreach (@ARGV) {
    if (/-vers/) {
      print " oracdr_monitor: ORAC-DR monitor version $VERSION\n";
      print " Using PERL version: $]\n";
      exit;
    }
  }
}


use File::Spec;
use Getopt::Long;
use Pod::Usage;

use Tk;
use Tk::TextANSIColor;
use File::Temp qw/ tempdir /;

use ORAC::Basic qw/ orac_setup_display orac_chdir_output_dir /;
use ORAC::Core qw/orac_retrieve_location/;
use ORAC::Event;
use ORAC::Frame;
use ORAC::Display;
use ORAC::Xorac;

# Process Tk command line options
Tk::CmdLine::SetArguments();

# Parse options
my ($opt_help, $opt_man, $opt_tty, $opt_nodisplay, $opt_skip);

my %opt = ();
my $status = GetOptions(
                        "help" => \$opt_help,
                        "man"  => \$opt_man,
                        "tty"  => \$opt_tty,
                        "skip" => \$opt_skip,
                        "nodisplay" => \$opt_nodisplay,
                        'recsuffix=s' => \$opt{'recsuffix'},
                        'useloc' => \$opt{'useloc'},
                       );

pod2usage(1) if $opt_help;
pod2usage(-exitstatus => 0, -verbose => 2) if $opt_man;

# If the display is not set use tty
unless (exists $ENV{DISPLAY}) {
  $opt_tty  = 1;
}

# If "useloc" is requested, retrieve ORAC_DATA_OUT from the location file.
if ($opt{'useloc'}) {
  my $dir = orac_retrieve_location(%opt);

  unless (defined $dir) {
    print STDERR "Could not determine pipeline directory from location file\n";
    exit(1);
  }

  $ENV{'ORAC_DATA_OUT'} = $dir;
}
elsif (not (exists $ENV{ORAC_DATA_OUT} && defined $ENV{ORAC_DATA_OUT})) {
  # No point continuing if ORAC_DATA_OUT is not set
  print STDERR "ORAC_DATA_OUT must be set before running this program\n";
  print STDERR "(Or give the --useloc option to try to use a location file\n";
  exit(1);
}

# We need to make sure that the display system does not interfere with the
# running pipeline. We therefore use temporary directories. Note that
# we override ORACDR_TMP even if it has been set externally. We do this
# because it's generally set by a routine that expects it to be used by the
# pipeline and not the monitor.
my $tempdir = tempdir( CLEANUP => 1 );
$ENV{ORACDR_TMP} = $tempdir;
$ENV{GAIA_TEMP_DIR} = $tempdir;
$ENV{'ORAC_HISTORY_DIR'} = $tempdir;

# If explicitly instructed, we do use RTD_REMOTE_DIR
if (exists $ENV{ORAC_RESPECT_RTD_REMOTE} &&
   defined $ENV{RTD_REMOTE_DIR}) {
  # we just use the value that is coming in from outside
} else {
  # set a local value and then tell the system to respect it
  $ENV{RTD_REMOTE_DIR} = $tempdir;
  $ENV{ORAC_RESPECT_RTD_REMOTE} = 1;
}

# New Tk window
my $MW = new MainWindow;
$MW->title('ORAC-DR monitor');

my %hdls;

# If we are running on a tty
if ($opt_tty) {
  # We dont want a main window
  $MW->withdraw;

  # our filehandles
  %hdls = (
           Message => \*STDOUT,
           Warning => \*STDOUT,
           Error   => \*STDERR,
           Result  => \*STDOUT,
          );

} else {

  # Create the text widgets for receiving the data and tie them to
  # an ORAC::Print object

# New frame for the top messages
my $frame = $MW->Frame->pack(-padx => 0, -pady => 5);

# Create easy exit button
$frame->Button( -text=>'Exit ORAC-DR monitor',
                -activeforeground => 'white',
                -activebackground => 'blue',
                -command => sub {$MW->destroy();})->pack(-side =>"left");

ORAC::Event->register('Tk' => $MW);
my (undef, $TEXT1, $TEXT2, $TEXT3, $TEXT4) = xorac_log_window('Tk', undef);

# Store the tied filehandles so they can be passed to the callback
%hdls = (
         Message => $TEXT1,
         Warning => $TEXT2,
         Error   => $TEXT3,
         Result  => $TEXT4,
        );

}

# Setup a repeating callback that checks for the newest file.
# This allows for people killing
# and restarting the pipeline without having to restart the monitor

# Start it first - there is a problem with this if we end
# up displaying all the contents of the file before the text widget
# is displayed. The "end" is not shown so the scrolling does not follow
# the end of the text. The kluge is either to delay this for the
# repeat to kick in (but that could take 5 seconds or more) or
# we display the text widget immediately using update
# and then configure the callback.

$MW->update;

# This calls itself from the mainloop
monitor_file($MW, 'log', \&open_log_file, \&deal_with_line, \%hdls, []);

# Create a display object unless display is disabled
# We need to chdir to the ORAC_DATA_OUT so that the files are local
if (!$opt_nodisplay) {
  orac_chdir_output_dir(0);
  my $Display = orac_setup_display( monitor => 1 );
  if (defined $Display) {
    monitor_file($MW, 'display', \&open_display_file, \&deal_with_display, \%hdls, [$Display]);
  }
}

# Start the event loop
MainLoop;

exit;


sub monitor_file {
  my ($w, $name, $open_func, $line_func, $hdls, $extra_args) = @_;

  my $i = -1;
  my $fh = undef;
  my $buff = '';

  my $handler; $handler = sub {
    unless ($i = ($i + 1) % 4) {
      eval {
        my $prev_fh = $fh;
        $fh = $open_func->($hdls, @$extra_args);
        $buff = '' if (defined $prev_fh) && ($fh != $prev_fh);
      };
      if ($@) {
        print STDERR "Error checking for new $name file: $@\n";
      }
    }

    if (defined $fh) {
      eval {
        while (read $fh, $buff, 256, length($buff)) {
          while (my $len = 1 + index $buff, "\n") {
            $line_func->($w, $hdls, substr($buff, 0, $len, ''), @$extra_args);
          }
        }
        $line_func->($w, $hdls, undef, @$extra_args);
      };
      if ($@) {
        print STDERR "Error monitoring $name file: $@\n";
      }
      eval {
        seek($fh, 0, SEEK_CUR);
      };
    }

    $w->after(500, $handler);
  };

  $w->after(500, $handler);
}


# Check to see which file is currently in use.

{
my $name;
my $fh;

sub open_log_file {
  my $hdls = shift;

  # Get the newest filename
  my $newest = find_log_file();

  # Is file there? Otherwise try again later.
  if (defined $newest) {

    # Is it different
    if (!defined $name or $newest ne $name) {

      if (defined $fh) {
        # Close the old one
        close($fh); # dont care about status
        undef $fh;
      }

      # Need to open it
      open( $fh, "< $newest") or do {
        my $err = $!;
        for my $k (qw/Warning/) {
          my $outfh = $hdls->{$_};
          print $outfh "ORAC-DR monitor: monitoring abandoned - could not open file $newest: $err\n";
        }
        return;
      };

      # Mention that we are using a new file
      foreach (qw/Warning/) {
        my $outfh  = $hdls->{$_};
        print $outfh "ORAC-DR monitor: monitoring file $newest\n";
      }
      print STDERR "Monitoring file $newest\n";

      # Store the new filename
      $name = $newest;
    }
  }

  return $fh;
}
}


# Subroutine to read a line from a filehandle and print it to somewhere
sub deal_with_line {
  my $w = shift;
  my $hdls = shift;
  my $line = shift;

  return unless defined $line;

  # Does this look like the instrument setting of an "ORAC Environment" block?
  if ($line =~ '^\tInstrument : (\w+)$') {
    $w->title('ORAC-DR monitor: ' . $1);
  }

  if ($line =~ /Error:|Err:/) {
    my $hdl = $hdls->{"Error"};
    print $hdl $line;
  } elsif ($line =~ /Warning:/) {
    my $hdl = $hdls->{"Warning"};
    print $hdl $line;
  } elsif ($line =~ /#\d+:/) {
    my $hdl = $hdls->{'Result'};
    print $hdl $line;
  } else {
    my $hdl = $hdls->{"Message"};
    print $hdl $line;
  }

}

# Find the most recent oracdr log file in ORAC_DATA_OUT
# Returns the name of the file, including the directory name

# Returns undef if the data directory is not there or if no
# log file exists

sub find_log_file {

  # Check the data dir exists
  return undef unless (exists $ENV{ORAC_DATA_OUT}
                       && defined $ENV{ORAC_DATA_OUT}
                       && -d $ENV{ORAC_DATA_OUT});

  my $datadir = $ENV{ORAC_DATA_OUT};

  # Read the directory
  opendir(DIR, $datadir) or return undef;
  my @files = grep /^\.oracdr_.*\.log$/, readdir(DIR);
  closedir(DIR) or return undef;

  # No point continuing
  return undef unless @files;

  # generate the full path [this only works on unix unless
  # we first split $datadir into chunks]
  @files = map { File::Spec->catfile($datadir, $_) } @files;

  # Run stat on each of the files and store the result in an array
  # ref along with the filename
  my @stat = map { [ $_, stat($_) ] } @files;

  # See which of these files is the newest
  my @sorted = sort { $a->[10] <=> $b->[10] } @stat;

  # Newest is at the end of the sorted array

  return $sorted[-1]->[0];
}

{
my $curpos;
my $curfh;
my $is_configured;

sub open_display_file {
  my $hdls = shift;
  my $Display = shift;

  # Get the display system to open the file for read
  my $fh = $Display->monitor_handle;
  if ($fh) {

    # if the filehandle has changed we
    # reset the current position. Indicates that the pipeline reopened the file.
    if (defined $curfh && $fh != $curfh) {
      close($curfh);
      $curpos = undef;
      for (qw/Warning/) {
        my $outfh = $hdls->{$_};
        print $outfh "ORAC-DR monitor: opening new display file\n";
      }
    }

    # This could be a reopened filehandle or the same one as last time
    # so we need to find out where the file marker is positioned in order
    # to determine whether it has moved or not.
    my $thispos;
    eval {
      $thispos = tell($fh);
    };

    if (defined $thispos && (!defined $curpos || $thispos < $curpos)) {
      # The position in the file has shrunk (so the pipeline has
      # reopened it). So we need to seek to the
      # end

      unless ($is_configured) {
        # Seek to the end of the file so as not to get hit with lots
        # of old display requests
        seek($fh, 0, SEEK_END );
      }

      # Store the current position (ie the end of the file when we opened it)
      $curpos = tell($fh);

      # Store the filehandle
      $curfh = $fh;
    }

    # if the file has been read since the last check we sync up curpos
    # to make sure we can detect shrinkage. Should be moot if the ORAC::Display
    # class correctly reopens the file and we detect the inode change
    if (defined $curpos && defined $thispos && $thispos > $curpos) {
      $curpos = $thispos;
    }

  }

  $is_configured = 1;
  return $fh;
}
}

# Callback for trigger for display requests
{
my $previous;
sub deal_with_display {
  my $w = shift;
  my $hdls = shift;
  my $line = shift;
  my $Display = shift;

  my $length = 0;
  if (defined $line) {
    chomp($line);
    $length = length($line);
  }

  # if we get a line store it for later and only execute it if
  # we get an EOF condition in the next update. This allows us to
  # keep up with the data taking and to drop the occassional frame
  # from the display. We expect Group display requests to come at a slower
  # rate and to be more permanent so we do not skip Group display requests.
  if ($length > 0) {
    if (!$opt_skip) {
      # skipping is disabled so we always process
      process_display_request( $Display, $line );
    } else {
      if ($line =~ /^Group/) {
        # A group file so mandatory display
        process_display_request( $Display, $line );
        $previous = undef;
      } else {
        # A Frame so we store this in the cache to process when idle
        $previous = $line;
      }
    }
  } else {
    # Process any pending request
    if (defined $previous) {
      process_display_request( $Display, $previous );
      $previous = undef;
    }
  }
}
}

sub process_display_request {
  my ($Display, $line) = @_;
  eval { $Display->process_monitor_request( $line ); };
  if ($@) {
    print $@;
  }
  return;
}
