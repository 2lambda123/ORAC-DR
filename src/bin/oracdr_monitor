#!/usr/bin/perl -w

=head1 NAME

oracdr_monitor - monitor the ORAC-DR pipeline output

=head1 SYNOPSIS

  oracdr_monitor

  oracdr_monitor --tty

  oracdr_monitor -nodisplay

=head1 DESCRIPTION

This program monitors the output from ORAC-DR log files in the
ORAC_DATA_OUT directory. If a new log file is created (e.g. by a
restart of ORAC-DR) the program will automatically begin monitoring
the new one.

If an X-display is running it sends the output to an Xwindow
similar to the standard ORAC-DR logging window. If there is no
display the output is sent to standard output.

By default the data display is enabled to monitor the live pipeline
display requests. On startup only new display requests are handled (any
pending from earlier in the pipeline processing are ignored). The data
display can be disabled using the C<-nodisplay> option.

=head1 OPTIONS

=over 4

=item B<--help>

List help text. This prints a summary of this document.

=item B<--man>

Print the full documentation.

=item B<--version>

Print the version number.

=item B<--tty>

This sends the output to the current xterm. It is automatically
selected if the DISPLAY environment variable is unset.

=item B<--nodisplay>

Disable display monitoring. Ignored if DISPLAY environment variable
is not set.

=item B<-skip>

If display monitoring is enabled, by default the monitor will attempt to process
every request even if that means it falls behind the pipeline. With this option
only the most recent request will be handled with the exception that Group
display requests are always processed.

=back

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2001 Particle Physics and Astronomy Research Council.
Copyright (C) 2007 Science and Technology Facilties Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

use strict;
require 5.006;
use vars qw/ $VERSION /;
use Fcntl qw/ SEEK_END SEEK_CUR /;
use IO::Handle;

BEGIN {
    if (!$ENV{ORAC_PERL5LIB} && exists $ENV{ORAC_DIR}) {
      $ENV{ORAC_PERL5LIB} = File::Spec->catdir($ENV{ORAC_DIR}, "lib","perl5");
    }
}
use lib $ENV{"ORAC_PERL5LIB"};

# H A N D L E  V E R S I O N -----------------------------------------------

#  Version number - do this before anything else so that we dont have to
#  wait for all the modules to load - very quick
BEGIN {
  use ORAC::Version;
  $VERSION = ORAC::Version->getVersion;

  #  Check for version number request - do this before real options handling
  foreach (@ARGV) {
    if (/-vers/) {
      print " oracdr_monitor: ORAC-DR monitor version $VERSION\n";
      print " Using PERL version: $]\n";
      exit;
    }
  }
}

# No point continuing if ORAC_DATA_OUT is not set
BEGIN {
  unless (exists $ENV{ORAC_DATA_OUT} && defined $ENV{ORAC_DATA_OUT}) {
    print STDERR "ORAC_DATA_OUT must be set before running this program\n";
    exit(1);
  }
}


use File::Spec;
use Getopt::Long;
use Pod::Usage;

use Tk;
use Tk::IO;
use Tk::TextANSIColor;
use File::Temp qw/ tempdir /;

use ORAC::Basic qw/ orac_setup_display orac_chdir_output_dir /;
use ORAC::Event;
use ORAC::Frame;
use ORAC::Display;
use ORAC::Xorac;

# Process Tk command line options
Tk::CmdLine::SetArguments();

# Parse options
my ($opt_help, $opt_man, $opt_tty, $opt_nodisplay, $opt_skip);

my $status = GetOptions(
                        "help" => \$opt_help,
                        "man"  => \$opt_man,
                        "tty"  => \$opt_tty,
                        "skip" => \$opt_skip,
                        "nodisplay" => \$opt_nodisplay,
                       );

pod2usage(1) if $opt_help;
pod2usage(-exitstatus => 0, -verbose => 2) if $opt_man;

# If the display is not set use tty
unless (exists $ENV{DISPLAY}) {
  $opt_tty  = 1;
}

# This is the current file name
my $CURRENT;

# The current filehandle
my $CURRENT_FH;

# The current Display monitor filehandle
my $CURRENT_DISP_FH;

# We need to make sure that the display system does not interfere with the
# running pipeline. We therefore use temporary directories. Note that
# we override ORACDR_TMP even if it has been set externally. We do this
# because it's generally set by a routine that expects it to be used by the
# pipeline and not the monitor.
my $tempdir = tempdir( CLEANUP => 1 );
$ENV{ORACDR_TMP} = $tempdir;
$ENV{GAIA_TEMP_DIR} = $tempdir;

# If explicitly instructed, we do use RTD_REMOTE_DIR
if (exists $ENV{ORAC_RESPECT_RTD_REMOTE} &&
   defined $ENV{RTD_REMOTE_DIR}) {
  # we just use the value that is coming in from outside
} else {
  # set a local value and then tell the system to respect it
  $ENV{RTD_REMOTE_DIR} = $tempdir;
  $ENV{ORAC_RESPECT_RTD_REMOTE} = 1;
}

# New Tk window
my $MW = new MainWindow;
$MW->title('ORAC-DR monitor');

my %hdls;

# If we are running on a tty
if ($opt_tty) {
  # We dont want a main window
  $MW->withdraw;

  # our filehandles
  %hdls = (
           Message => \*STDOUT,
           Warning => \*STDOUT,
           Error   => \*STDERR,
           Result  => \*STDOUT,
          );

} else {

  $MW->protocol('WM_DELETE_WINDOW' => [\&Cancel, $MW, \$CURRENT_FH]);

  # Create the text widgets for receiving the data and tie them to
  # an ORAC::Print object

# This requires some code repetition from ORAC::Xorac but for now
# I do this because
# 1 - I don't want the pause button
# 2 - I want the exit button to do something different
# Not very good reasons on the whole

# New frame for the top messages
my $frame = $MW->Frame->pack(-padx => 0, -pady => 5);

# Create easy exit button
$frame->Button( -text=>'Exit ORAC-DR monitor',
                -activeforeground => 'white',
                -activebackground => 'blue',
                -command => [\&Cancel, $MW, \$CURRENT_FH])->pack(-side =>"left");

ORAC::Event->register('Tk' => $MW);
my (undef, $TEXT1, $TEXT2, $TEXT3, $TEXT4) = xorac_log_window('Tk', undef);

# Store the tied filehandles so they can be passed to the callback
%hdls = (
         Message => $TEXT1,
         Warning => $TEXT2,
         Error   => $TEXT3,
         Result  => $TEXT4,
        );

}

# Setup a repeating callback that checks for the newest file
# and then sets up a fileevent on it. This allows for people killing
# and restarting the pipeline without having to restart the monitor

# Start it first - there is a problem with this if we end
# up displaying all the contents of the file before the text widget
# is displayed. The "end" is not shown so the scrolling does not follow
# the end of the text. The kluge is either to delay this for the
# repeat to kick in (but that could take 5 seconds or more) or
# we display the text widget immediately using update
# and then configure the fileevent

$MW->update;

# This calls itself from the mainloop
# Can either check using "tail -f" or using fileevent
# Use fileevent by default since it can shows the full log file
# Use tail -f if you only want to start viewing the log file
# from the end

#check_file_using_tail( $MW, \$CURRENT, \$CURRENT_FH, \%hdls);
check_file_using_fileevent( $MW, \$CURRENT, \$CURRENT_FH, \%hdls);

# Create a display object unless display is disabled
# We need to chdir to the ORAC_DATA_OUT so that the files are local
if (!$opt_nodisplay) {
  orac_chdir_output_dir(0);
  my $Display = orac_setup_display( monitor => 1 );
  if (defined $Display) {
    check_display_file_using_fileevent( $MW, $Display, \$CURRENT_DISP_FH,
                                      \%hdls);
  }
}

# Start the event loop
MainLoop;

exit;

# Cancel everything and exit

sub Cancel {
  my $w = shift;
  my $fhref = shift;
  my $fh = $$fhref;

  # A Tk::IO object
  if (defined $fh && $fh->can("kill")) {
    $fh->kill("TERM");
    $$fhref = undef; # clear it
  }

  # Remove window
  $MW->destroy;

}

# Check to see which file is currently in use. If we find a new one,
# reconfigure Tk::IO using tail -f
# This is neater than using a fileevent on the logging file (because
# of EOF problems) but does rely on an external process

# Also it only shows the last few lines of a currently active log file
# and has problems shutting down the pipe when we exit
# Not recommended.

sub check_file_using_tail {
  my ($w, $nref, $fhref, $hdls) = @_;

  my $fh  = $$fhref;
  my $name= $$nref;

  # Uses globals for the file handle and filename
  # if we subroutine-ize this then just pass them in from the repeat
  # + $MW

  # Get the newest filename
  my $newest = &find_log_file();

  # No file we will just have to try again later
  goto RECHECKTAIL unless defined $newest;

  # Is it different
  if (!defined $name or $newest ne $name) {

    # Close the old one
    $fh->kill("TERM") if defined $fh;;

    # Need to open it
    $fh = new Tk::IO( -linecommand => [\&deal_with_line, $w, $hdls] );
    $fh->exec("tail -f $newest");

    # Store the object
    $$fhref = $fh;

    # Mention that we are using a new file
    foreach (qw/Warning/) {
      my $outfh = $hdls->{$_};
      print $outfh "ORAC-DR monitor: monitoring file $newest\n";
    }

    # Store the new filename
    $$nref = $newest;

  }

 RECHECKTAIL:
  # Recheck everything again in XX milli seconds
  $w->after(2000, [\&check_file_using_tail, $w,
                 $nref, $fhref, $hdls]);


  return;
}

# Check to see which file is currently in use. If we find a new one,
# reconfigure fileevent. If we have an EOF disable the fileevent
# and try again in XX seconds

# The fileevent is very susceptible to race conditions between
# starting the fileevent and worrying about EOF

sub check_file_using_fileevent {
  my ($w, $nref, $fhref, $hdls) = @_;

  my $fh  = $$fhref;
  my $name= $$nref;

  # Get the newest filename
  my $newest = &find_log_file();

  # No file there, try again later
  goto RECHECKFEV unless defined $newest;

  # Is it different
  if (!defined $name or $newest ne $name) {

    if (defined $fh) {
      # Clear previous fileevent (should happen automatically)
      $w->fileevent( $fh, 'readable' ,'')
        if $w->fileevent( $fh, 'readable');

      # Close the old one
      close($fh); # dont care about status
      undef $fh;

    }

    # Need to open it
    open( $fh, "< $newest") or do {
      my $err = $!;
      for my $k (qw/Warning/) {
        my $outfh = $hdls->{$_};
        print $outfh "ORAC-DR monitor: monitoring abandoned - could not open file $newest: $err\n";
      }
      return;
    };

    # Mention that we are using a new file
    foreach (qw/Warning/) {
      my $outfh  = $hdls->{$_};
      print $outfh "ORAC-DR monitor: monitoring file $newest\n";
    }
    print STDERR "Monitoring file $newest\n";

    # Store it
    $$fhref = $fh;

    # Associate with a fileevent
    $w->fileevent( $$fhref, 'readable', [\&deal_with_fileevent,
                                         $w, $fhref, $hdls]);

    # Store the new filename
    $$nref = $newest;

  }

 RECHECKFEV:
  # Recheck everything again in XX milli seconds
  $w->after(2000, [\&check_file_using_fileevent, $w,
                 $nref, $fhref, $hdls]);

  return;
}


# Subroutine to read a line from a filehandle and print it to somewhere
sub deal_with_line {
  my $w = shift;
  my $hdls = shift;
  my $line = shift;

  # Does this look like the instrument setting of an "ORAC Environment" block?
  if ($line =~ '^\tInstrument : (\w+)$') {
    $w->title('ORAC-DR monitor: ' . $1);
  }

  if ($line =~ /Error:|Err:/) {
    my $hdl = $hdls->{"Error"};
    print $hdl $line;
  } elsif ($line =~ /Warning:/) {
    my $hdl = $hdls->{"Warning"};
    print $hdl $line;
  } elsif ($line =~ /#\d+:/) {
    my $hdl = $hdls->{'Result'};
    print $hdl $line;
  } else {
    my $hdl = $hdls->{"Message"};
    print $hdl $line;
  }

}

# Callback for filevent. Given a widget, and ref to filehandle and
# hash of filehandles as args
# called by fileevent

sub deal_with_fileevent {
  my $w = shift;
  my $fhref = shift;
  my $fh = $$fhref;
  my $hdls = shift;

  my $line = <$fh>;

  my $length;
  if (defined $line) {
    $length = length($line);
  } else {
    $length = 0;
  }

  if ($length > 0) {
    deal_with_line($w, $hdls, $line);
  } else {
    # Disable the fileevent if we have EOF
    $w->fileevent($fh, 'readable', '');

    # Restart it in XX milli seconds. Need to make sure we only restart
    # fileevent if one is not currently registered. This lets us
    # deal with the case where we have opened a new file in the meantime
    $w->after(501, [ \&restart_fileevent, $w, $fhref, $hdls, $fh]);
  }

}

# Restart the fileeevent monitoring if there is no fileevent
# currently associated with this filehandle.
# recieves a widget object and ref to a filehandle.
# + output file handles

sub restart_fileevent {
  my $w = shift;
  my $fhref = shift;
  my $hdls = shift;
  my $old = shift;

  return unless defined $$fhref;

  # Only restart this fileevent if the filehandle we have
  # now is the same one we were reading when the after() was set up
  # This seems to be more relaiable test than reading from fileevent
  # and checking for undef
  if ($old eq $$fhref) {
    # Restart fileeevent
    $w->fileevent( $$fhref, 'readable', [\&deal_with_fileevent,
                                         $w, $fhref, $hdls]);
  }

}

# Find the most recent oracdr log file in ORAC_DATA_OUT
# Returns the name of the file, including the directory name

# Returns undef if the data directory is not there or if no
# log file exists

sub find_log_file {

  # Check the data dir exists
  return undef unless (exists $ENV{ORAC_DATA_OUT}
                       && defined $ENV{ORAC_DATA_OUT}
                       && -d $ENV{ORAC_DATA_OUT});

  my $datadir = $ENV{ORAC_DATA_OUT};

  # Read the directory
  opendir(DIR, $datadir) or return undef;
  my @files = grep /^\.oracdr_.*\.log$/, readdir(DIR);
  closedir(DIR) or return undef;

  # No point continuing
  return undef unless @files;

  # generate the full path [this only works on unix unless
  # we first split $datadir into chunks]
  @files = map { File::Spec->catfile($datadir, $_) } @files;

  # Run stat on each of the files and store the result in an array
  # ref along with the filename
  my @stat = map { [ $_, stat($_) ] } @files;

  # See which of these files is the newest
  my @sorted = sort { $a->[10] <=> $b->[10] } @stat;

  # Newest is at the end of the sorted array

  return $sorted[-1]->[0];
}

# This routine configures the file event monitoring for changes to the
# display file.

# Arguments:
#   - Mainwindow
#   - Display object
#   - Reference to variable to contain open monitor file handle

# If an EOF occurs retry

{
my $curpos = undef;
sub check_display_file_using_fileevent {
  my ($w, $Display, $fhref, $hdls) = @_;

  # Get the display system to open the file for read
  my $fh = $Display->monitor_handle;
  if ($fh) {

    # if the filehandle has changed we disable the fileevent
    # and reset the current position. Indicates that the pipeline reopened the file.
    if (defined $$fhref && $fh != $$fhref) {
      $w->fileevent( $$fhref, 'readable', '' ) if $w->fileevent($$fhref, 'readable');
      $curpos = undef;
      for (qw/Warning/) {
        my $outfh = $hdls->{$_};
        print $outfh "ORAC-DR monitor: opening new display file\n";
      }
    }

    # This could be a reopened filehandle or the same one as last time
    # so we need to find out where the file marker is positioned in order
    # to determine whether it has moved or not.
    # Sometimes we get a Tk::Event::IO error when it can't find the TELL method.
    # we just try again if this happens.
    my $thispos;
    eval {
      $thispos = CORE::tell( $fh );
    };
#    if ($@) {
#      print STDERR "Got the TELL error with curpos = ".
#       (defined $curpos ? $curpos : "<undef>") . " and thispos = ".
#       (defined $thispos ? $thispos : "<undef>")." for $fh\n";
#    }

    if (defined $thispos && (!defined $curpos || $thispos < $curpos)) {
      # The position in the file has shrunk (so the pipeline has
      # reopened it). So we need to set up a new filevent and seek to the
      # end

      # Seek to the end of the file so as not to get hit with lots
      # of old display requests
      CORE::seek($fh, 0, SEEK_END );

      # Store the current position (ie the end of the file when we opened it)
      $curpos = CORE::tell( $fh );

      # Store the filehandle
      $$fhref = $fh;

      # And setup the fileevent
      $w->fileevent( $$fhref, 'readable', [\&deal_with_fileevent_display,
                                           $w, $Display, $fhref, $hdls]);
    }

    # if the file has been read since the last check we sync up curpos
    # to make sure we can detect shrinkage. Should be moot if the ORAC::Display
    # class correctly reopens the file and we detect the inode change
    if (defined $curpos && defined $thispos && $thispos > $curpos) {
      $curpos = $thispos;
    }

  }

  # Recheck to see if the file appears again
  $w->after(2000, [\&check_display_file_using_fileevent, $w,
                   $Display, $fhref, $hdls]);

}
}

# Callback for fileevent trigger for display requests
{
my $previous;
sub deal_with_fileevent_display {
  my $w = shift;
  my $Display = shift;
  my $fhref = shift;
  my $hdls = shift;

  my $fh = $$fhref;
  my $line = <$fh>;

  my $length = 0;
  if (defined $line) {
    chomp($line);
    $length = length($line);
  }

  # if we get a line store it for later and only execute it if
  # we get an EOF condition in the next update. This allows us to
  # keep up with the data taking and to drop the occassional frame
  # from the display. We expect Group display requests to come at a slower
  # rate and to be more permanent so we do not skip Group display requests.
  if ($length > 0) {
    if (!$opt_skip) {
      # skipping is disabled so we always process
      process_display_request( $Display, $line );
    } else {
      if ($line =~ /^Group/) {
        # A group file so mandatory display
        process_display_request( $Display, $line );
        $previous = undef;
      } else {
        # A Frame so we store this in the cache to process when idle
        $previous = $line;
      }
    }
  } else {
    # Process any pending request
    if (defined $previous) {
      process_display_request( $Display, $previous );
      $previous = undef;
    }

    # Disable fileevent with EOF
    $w->fileevent( $$fhref, 'readable', '');
    seek($$fhref, 0, SEEK_CUR);

    # and restart to see if we have cleared the EOF
    $w->after(501, [ \&restart_display_fileevent, $w, $Display, $fhref, $hdls, $fh ] );
  }
}
}

sub restart_display_fileevent {
  my $w = shift;
  my $Display = shift;
  my $fhref = shift;
  my $hdls = shift;
  my $old = shift;

  return unless defined $$fhref;

  if ($old eq $$fhref) {
    # same file handle
    $w->fileevent( $$fhref, 'readable', [\&deal_with_fileevent_display,
                                         $w, $Display, $fhref, $hdls]);
  }
}

sub process_display_request {
  my ($Display, $line) = @_;
  eval { $Display->process_monitor_request( $line ); };
  if ($@) {
    print $@;
  }
  return;
}
