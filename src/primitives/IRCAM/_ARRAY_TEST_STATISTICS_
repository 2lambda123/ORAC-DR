# _ARRAY_TEST_STATISTICS_
#
# Tasks: KAPPA - HISTAT, STATS

# Create the results file if needed.
# ==================================
       
# Create a results file if one does not exist.
     my $results = "array_tests.results";
     my $openresult;
     if ( !(-e $results) ) {
        $openresult = ">array_tests.results";
        open( RESULTS, $openresult );
        orac_print "Creating a new results file called $results\n";

# Write the column headings into the result file.
        print RESULTS "UT Date / Hour    STARE_RN    ND_STARE_RN    Dark Current\n";
        print RESULTS "--------------    --------    -----------    ------------\n\n";

     } else {
        $openresult = ">>array_tests.results";
        open( RESULTS, $openresult );
     };

# Compute the statistics.
# =======================

# Wait until all the array tests are completed.
     if ( $Grp->num == 7 ) {

# Set some parameters, currently assigned the IRCAM values.
        my $scale = 59.0;

# Obtain the names of the group members.
        my @frames = $Grp->membernames;

# Difference the first two useable frames.  The first array_test frame
# is ignored.
        $Mon{"kappa_mon"}->obeyw("sub","in1=$frames[1] in2=$frames[2] out=array_test");

# Find the standard deviation of the difference frame.
        $Mon{"kappa_mon"}->obeyw("stats","ndf=array_test");
        ( my $ORAC_STATUS, my $stare_sigma ) = $Mon{"kappa_mon"}->get("stats","sigma");
        my $stare_rn = $stare_sigma / 1.414214 * 6.0;

# Difference the next two (ND_STARE) frames.
        $Mon{"kappa_mon"}->obeyw("sub","in1=$frames[3] in2=$frames[4] out=array_test");

# Find the standard deviation of the difference frame.
        $Mon{"kappa_mon"}->obeyw("stats","ndf=array_test");
        ( $ORAC_STATUS, my $nd_stare_sigma ) = $Mon{"kappa_mon"}->get("stats","sigma");
        my $nd_stare_rn = $nd_stare_sigma / sqrt(2.0) * 6.0;

# Difference the next two useable frames.
        $Mon{"kappa_mon"}->obeyw("sub","in1=$frames[5] in2=$frames[7] out=array_test");

# Find the median of the difference frame.
        $Mon{"kappa_mon"}->obeyw("histat","ndf=array_test");
        ($ORAC_STATUS, my $median) = $Mon{"kappa_mon"}->get("histat","median");
        my $dark = $median / $scale * 6.0;

# Obtain the date and time.
        my $utdate = $Frm->hdr( "IDATE" );
        my $uthour = $Frm->hdr( "RUTSTART" );

# Remove the temporary file.
        unlink( "array_test" );

# Output the results.
# ===================

# Write the results to the engineering file, which is then closed.
        printf RESULTS "%8s %5.2f %10.3f %13.3f %14.3f\n", $utdate, $uthour, $stare_rn, $nd_stare_rn, $dark;
        close( RESULTS );

# Format the results to give a sensible number of decimal places.
# Make the format sufficiently large and then remove any leading
# spaces.
        my $fs_stare_rn = sprintf( "%10.3f", $stare_rn );
        $fs_stare_rn =~ s/ //g;
        my $fs_nd_stare_rn = sprintf( "%10.3f", $nd_stare_rn );
        $fs_nd_stare_rn =~ s/ //g;
        my $fs_dark = sprintf( "%10.3f", $dark );
        $fs_dark =~ s/ //g;

# Report the results to the user.
        orac_print "\n";
        orac_print "STARE    mode readout noise (e-) = $fs_stare_rn\n";
        orac_print "ND_STARE mode readout noise (e-) = $fs_nd_stare_rn\n";
        orac_print "Dark current (e-/sec)            = $fs_dark\n";
        orac_print "\n";

# Report upon the status of the results.
# ======================================

# STARE readout noise.  May need to make the nominal value a parameter.
        if ( $stare_rn < 30.0 ) {
           orac_warn "STARE readout noise is LOW with respect to nominal 56e-\n";
        } elsif ( $stare_rn > 70.0 ) {
           orac_warn "STARE readout noise is HIGH with respect to nominal 56e-\n";
        } else {
           orac_print "** STARE readout noise is nominal **\n";
        };

# ND_STARE readout noise.  May need to make the nominal value a parameter.
        if ( $nd_stare_rn < 20.0 ) {
           orac_warn "ND_STARE readout noise is LOW with respect to nominal 38e-\n";
        } elsif ( $nd_stare_rn > 50.0 ) {
           orac_warn "ND_STARE readout noise is HIGH with respect to nominal 38e-\n";
        } else {
           orac_print "** ND_STARE readout noise is nominal **\n";
        };

# Dark current.  May need to make the nominal value a parameter.
        if ( $dark < 0.0 ) {
           orac_warn "Dark current is NEGATIVE, wierd; nominal is 0 to 5e-/sec\n\n";
        } elsif ( $dark > 10.0 ) {
           orac_warn "Dark current is HIGH with respect to nominal 0 to 5e-/sec\n\n";
        } else {
           orac_print "** Dark current is nominal **\n\n";
        };
     };
