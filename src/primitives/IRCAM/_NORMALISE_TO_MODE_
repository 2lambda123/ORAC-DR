# _NORMALISE_TO_MODE_  -*-perl-*-
#
# Normalises frames to the mode of a reference frame.
#
# TASK: KAPPA - CMULT
#

# Test whether or not this is an object frame.
    if ($Frm->hdr(OBSTYPE) =~ /OBJECT/ || $Frm->hdr(OBSTYPE) =~ /SKY/) {

# Find the clipped mean (effectively the mode) for the frame.
       _CLIPPED_MEAN_
       $mode = $_CLIPPED_MEAN_{RESULT};

# Generate the input and output filenames.
       ($in,$out) = $Frm->inout("_nm");

# Determine whether or not this is the first frame, and hence whether or
# not a reference mode is needed.
       if ( $Grp->num == 0 ) {
          $refmode = $mode;
          orac_print "Orac says: Mode for reference frame $in is $refmode\n";
       }

# Evaluate the normalisation factor.  
       if ( $mode > 1.0E-7 ) {
          $norm_factor = $refmode / $mode;
          orac_print "Orac says: Mode for frame $in is $mode\n";
          orac_print "Orac says: Normalisation for frame $in is $norm_factor\n\n";

       } else {
          orac_err "Unable to normalise frame $in.  Mode ($mode) is too small.\n";
       };

# Normalise the current frame to the current reference frame.
       $header = "in=$in out=$out scalar=$norm_factor title=\'Normalised to mode\'";
       $Mon{"kappa_mon"}->obeyw("cmult","$header");

# Report the processing.
       orac_print "Orac says: $in to $out: Data normalised \n";

# Record the new file name in the frame object.
       $Frm->file($out);                         # obligatory update step

# Display the image.
       _DISPLAY_FRAME_IMAGE_

    };
