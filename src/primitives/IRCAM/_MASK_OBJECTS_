# _MASK_OBJECTS_     -*- perl -*-
#
# Detects objects within an image (should be approximately flat-fielded)
# and masks the objects.
#
# TASK: KAPPA - ARDMASK.
#

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ||
         $Frm->hdr( "OBSTYPE" ) eq "SKY" ) {

# Generate the input and output file names.
       ( my $in, my $out ) =  $Frm->inout( "_om" );

# Mask the objects using the ARD file
# ===================================

# Generate the ARD file name using the raw frame name.
       my $maskfile = ($_MASK_OBJECTS_{MASKFILE} || $Frm->file . "_objects.ard");

# Test whether or not the mask file exists.
       my ( $header, $hidden );
       if ( -e $maskfile ) {

# Specify the parameters.
          $header = "in=$in out=$out title=\'Objects masked\'";
          $hidden = "ardfile=$maskfile cosys=w";

# Mask the object ellipses with bad pixels.
          $Mon{"kappa_mon"}->obeyw("ardmask","$header $hidden");

# Report the processing.
          orac_print "Orac says: $in to $out: objects masked\n";

       } else {

# Make a copy of the input file, so that scripts which use templates
# to combine data, such as _MAKE_FLAT_FROM_GROUP_ do not try to
# access a non-existent file.
          $Mon{"ndfpack_mon"}->obeyw("ndfcopy","in=$in out=$out");

       }

# Record the new file name in the frame object.
       $Frm->file( $out );                      # obligatory update step

# Display the image.
       _DISPLAY_FRAME_IMAGE_

    };
