# _SUBTRACT_SKY_EXTENDED_          -*-perl-*-
#
# Subtracts a sky frame for extended objects.
#
# TASK: KAPPA - CSUB
#
# Imports:
#    _MAKE_FLAT_FROM_NORMALISED_EXTENDED_ : FLAT_MEDIAN
#    _NORMALISE_TO_MODE_EXTENDED_         : SKY_FREQ SKY_OFFSET(2)
#

# This should only be performed on OBJECT frames.
    if ($Frm->hdr(OBSTYPE) =~ /OBJECT/ || $Frm->hdr(OBSTYPE) =~ /SKY/) {

# Obtain the cycle frequency of skies.  A value of 2 means the object and
# sky frames alternate.
       $cycle = $Frm->hdr( "SKY_FREQ" );
       
# Test whether or not this is an object frame or a sky frame. 
       $class = $Frm->hdr( "TARGET_OR_SKY" );

# Test whether or not this is an object frame or a sky frame.   This
# assumes a sequence: cycle-1 object frames, sky frame, cycle-1 object
# frames, sky frame,...  He we want a blank-sky frame.  This means that
# the set of object frames since the previous sky frame can now be
# sky-subtracted.  There must also be a suitable flat.  The criterion for
# that is that there must be at least three blank-sky frames.
       if ( $class =~ /sky/ && ($Grp->num + 1) >= 3 * $cycle ) {

# Record the current sky frame.
          $curframe = $Frm->file;

# Form a subgroup comprising the target frames.
# Obtain the number of object frames to sky subtract.
          $targrp = $Grp->subgrp( TARGET_OR_SKY => "target" );
          $numfiles = $targrp->num + 1;

# Form a list of the input and output target file names for CCDPACK tasks.
          ( $inref, $outref ) = $targrp->inout( "_ss" );

# Import the median of the reference sky frame.
          $median = $_MAKE_FLAT_FROM_NORMALISED_EXTENDED_{FLAT_MEDIAN};

# Process each file in turn because there are no wildcarded file names
# in CSUB.
          for ( my $j = 0; $j < $numfiles; $j++ ) {

# Generate the input and output file names.
             $in = @$inref[$j];
             $out = @$outref[$j];

# Find the sky number corresponding to the object frame.  The minus 1 is
# because the list excludes the blank-sky frames.
             $skyindex = int( $j / ( $cycle - 1 ) ) + 1;

# Import the offsets with respect to this of the sky frames which just
# bracket the current observation.
             $sky_before = $_NORMALISE_TO_MODE_EXTENDED_{SKY_OFFSET}[$skyindex-1];
             $sky_after = $_NORMALISE_TO_MODE_EXTENDED_{SKY_OFFSET}[$skyindex];

# Derive the sky offset for the current object frame by interpolation
# between the median values of the last two sky medians (i.e. the pair
# which most closely bracket the object frame).
             $linterp = ( $j % ( $cycle - 1 ) + 1 ) / $cycle;
             $offset = $median - $sky_before + 
                       $linterp * ( $sky_before - $sky_after );

# Specify the parameters.
             $header = "in=$in scalar=$offset out=$out title=\'Sky subtracted\'";

# Note all sky frames and data frames should have the same exposure time.
# In theory we could take care of by the Cal object and the headers.
             $Mon{"kappa_mon"}->obeyw("csub","$header");

# Report the processing status.
             orac_print "Orac says: $in to $out: Sky subtracted\n";

# Now update the output filename in the Frame object.
             $Frm->file($out);

# Display the image.
             _DISPLAY_FRAME_IMAGE_
          }

# Update the target group.
          $targrp->membernames(@$outref);

# Restore the current file.
# Record the current sky frame.
          $Frm->file($curframe);


       };
    };
