# _MAKE_MOSAIC_QUADRANT_OPTIMISED_     -*- perl -*-
#
# Forms a mosaic for Quadrant jittering.
#
# TASK: KAPPA - TRANJOIN; CCDPACK - TRANLIST, MAKEMOS
#

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ($Frm->hdr(OBSTYPE) =~ /OBJECT/) {

# Can generate a mosaic when there are a multiple of four object frames,
# each with the source located in a different quadrant.
       if ( ( $Grp->num + 1 ) % 4 == 0 ) {

# Specify the mosaic suffix.
          $osuffix = "_mos";

# Form a list of input file names for the CCDPACK tasks.  We need to
# generate an input list for TRANJOIN and TRANNDF and an output list
# using a hard-wired suffix of '_trn'
          ($inref, $outref) = $Grp->inout('_trn');

# Inquire the number of files to be processed.
          $numfiles = @$inref;

# Convert the list to a comma-separated list as needed by CCDPACK (GRP).
          $objlist = join(",", @$inref);
          $outlist= join(",", @$outref);

# Concatenate rotation to transformation
# ======================================

# Specify the other parameters for the TRANJOIN stage.
          $hidden = "in2=".$Cal->rotation." dest=first"; 

# Join the rotation transformation to each of the CCDPACK extensions.
# The rotation transformation follows the shift-of-origin and is stored
# in the '_ff' frame.  Unfortunately, CCDEDIT doesn't support joining
# transformations, and KAPPA/TRANJOIN does operate on lists of files.
# Write the input file names to the text files.
          foreach $flatted (@$inref) {
             $header = "in1=${flatted}.more.ccdpack.transform";
             $Mon{"kappa_mon"}->obeyw("tranjoin","$header $hidden accept");
          }

# Report the status.
          orac_print "Orac says: Rotation transformation joined\n";

# Resampling
# ==========

# Create text files to hold the list of input and output files, one per line.
# This is needed because the command may be long for a four-cycle quadrant
# jitter.  Expanded lists of files may make the command line too long for the
# ADAM message system.
          unlink ("tranndf.inlist", "tranndf.outlist");
          open (INLIST, ">tranndf.inlist");
          open (OUTLIST, ">tranndf.outlist");
          $numfiles = @$inref;
          for ( $i = 0; $i < $numfiles; $i++ ) {
             print INLIST @$inref[$i],"\n";
             print OUTLIST @$outref[$i],"\n";
          }
          close (INLIST);
          close (OUTLIST);

# Inquire the original bounds.
#          $xl = $Frm->hdr(RDOUT_X1);
#          $yl = $Frm->hdr(RDOUT_Y1);
#          $xu = $Frm->hdr(RDOUT_X2);
#          $yu = $Frm->hdr(RDOUT_Y2);

# Assign the other parameters.  Use the original bounds.
          $header = "in='^tranndf.inlist' out='^tranndf.outlist'";
          $hidden = "shape=auto method=linint";
#          $hidden = "shape=specify lbound=[".$xl.",".$yl."] ubound=[".$xu.",".$yu."]";

# Shift and resample the flat-field object frames.  This determines
# the bounds automatically.  It takes the origin from the first object
# frame.
          $Mon{"ccdpack_reg"}->obeyw("tranndf","$header $hidden");

# Report the processing status.
          orac_print "Orac says: Frames $objlist resampled\n";

# Reset CCDPACK registration parameters.
          $ORAC_STATUS = $Mon{"ccdpack_reg"}->control('par_reset');

# Make mosaic.
# ============

# Derive a reasonable number of overlaps to generate a mosaic with
# small steps between former quadrants, yet not make all the possible
# comparisons for efficiency.
          $optov = 2 + int( ( $Grp->num + 4 ) / 4 );

# Assign other parameters.  The scale might become a user parameter.
# We should presumably set the Grp output name when we construct
# $outname.  Do not change the output name if we have already
# appended the output suffix the previous time around.
          $outname = $Grp->file . $osuffix unless $Grp->file =~ /$osuffix$/;
          $header = "in='^tranndf.outlist' out=$outname title=Mosaic";
          $hidden = "zero optov=$optov";

# Make the mosaic correcting for differences in offset.
          $Mon{"ccdpack_reg"}->obeyw("makemos","$header $hidden");
          unlink ("tranndf.inlist", "tranndf.outlist");

# Set the group name in the Group object...
          $Grp->file($outname);

# ...and read the header.
          $Grp->header($Grp->readhdr);

# Report the processing status.
          orac_print "Orac says: mosaic $outname formed\n";

# Display the resultant mosaic.
          _DISPLAY_GROUP_IMAGE_

       };
    };
