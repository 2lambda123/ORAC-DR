#+
# Name:
#    _POL_JITTER_STEER_
#
# Purpose:
#    Steers processing for POL_JITTER recipes.
#
# Language:
#    Perl5
#
# Description: 
#    This primitive creates the groups needed by POL_JITTER recipes (see
#    the Groups topic).  It also controls processing for POL_JITTER
#    recipes through the steering headers listed below. 
#
# Steering Headers:
#    CYCLE_NUMBER = INTEGER
#       Number of the cycle, a cycle being a set of frames to complete a
#       pass through the recipe.  The first cycle is 0.
#    DO_APHOT = LOGICAL
#       Whether or not perform aperture photometry.  Photometry is
#       performed once the polarisation maps are made.
#    JITTER_NUMBER = INTEGER
#       The number of frames in the jitter.
#    MAKE_MOSAIC = LOGICAL
#       Whether or not register the jittered images by beam and make a 
#       mosaic for the current waveplate angle.  Each mosaic is made once
#       all the jittered target frames for a given waveplate angle in a
#       cycle are available.
#    REFERENCE_FRAME = LOGICAL
#       A true value specifies the reference frame for normalisation
#       purposes.  It is true for the first frame and false for all
#       subsequent frames in the observation.  It is currently not used.
#    REGISTER_IMAGES = LOGICAL
#       Whether or not to register and resample the e- and o-beam mosaics.
#    TARGET_OR_SKY = CHARACTER
#       This is "target" for a target frame, and "sky" for a sky calibration
#       frame.  All frames should be target.
#
# Groups:
#    The following groups of frames are created, each retained by storing
#    a reference in the $Grp user header.  They are listed below by their 
#    header names.
#
#       EBEAM_GROUP   The target sections for the e-beam.
#       MOSAIC_GROUP  Mosaics at the four waveplate positions for each beam.
#       OBEAM_GROUP   The target sections for the o-beam.
#
#    They all inherit the main group's headers and user headers.
#    MOSAIC_GROUP's file has the same name as the main group's file.  The 
#    filename of EBEAM_GROUP has an additional "_e" suffix.  Likewise
#    the filename of the OBEAM_GROUP has an "_o" suffix.
#
# Arguments:
#    NUMBER = INTEGER (Given)
#       The number of frames in the jitter.  The minimum is 3. [9]
#
# Notes:
#    -  This primitive is suitable for both UFTI and IRCAM.
#    -  Processing only occurs for object and sky frames.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Arguments and Selection
# =======================

# This should only be performed on OBJECT frames.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" || 
         $Frm->hdr( "OBSTYPE" ) eq "SKY" ) {

# Obtain the number of frames in the jitter pattern.
       my $number = max( 3, ( $_POL_JITTER_STEER_{NUMBER} || 3 ) );

# Create beam groups.
# ===================

# We need new groups to store the extracted and processed e-beam and
# o-beam images.  To preserve them between iterations we keep their
# reference count at one by storing references in the main Grp's user
# header.
       my $fn = $Grp->num + 1;
       if ( ( $fn - 1 )  == 0 ) {

# e-beam
# ------
# Create the group of e-beam frames and inherit the group file name from
# the main group with an appropriate suffix.
          my $eGrp = $Grp->new;
          $eGrp->file( $Grp->file . "_e" );

# Propagate the headers to the new group.
          %{ $eGrp->hdr } = %{ $Grp->hdr };
          %{ $eGrp->uhdr } = %{ $Grp->uhdr };

# Store the pointer to the group in the main Group user header.
          $Grp->uhdr( "EBEAM_GROUP", $eGrp );

# o-beam
# ------
# Create the group of e-beam frames and inherit the group file name from
# the main group with an appropriate suffix.
          my $oGrp = $Grp->new;
          $oGrp->file( $Grp->file . "_o" );

# Propagate the headers to the new group.
          %{ $oGrp->hdr } = %{ $Grp->hdr };
          %{ $oGrp->uhdr } = %{ $Grp->uhdr };

# Store the pointer to the group in the main Group user header.
          $Grp->uhdr( "OBEAM_GROUP", $oGrp );

# Create mosaic group.
# ====================

# This group will store the eight mosaics formed by combining the jittered
# images.  There are eight because of the two beams and four waveplate
# angles.

# Create the mosaic group.
          my $mosGrp = $Grp->new;
          $mosGrp->file( $Grp->file );

# Propagate the headers to the new group.
          %{ $mosGrp->hdr } = %{ $Grp->hdr };
          %{ $mosGrp->uhdr } = %{ $Grp->uhdr };

# Store the pointer to the group in the main Group user header.
          $Grp->uhdr( "MOSAIC_GROUP", $mosGrp );
       }

# Assign the steering headers.
# ============================

# There are four waveplate angles.
       my $nangle = 4;
       my $totframe = $nangle * $number;

# Specify the first frame as the frame whose mode will be the
# reference for the normalisation of frames.
       if ( ( $fn - 1 )  == 0 ) {
          $Frm->hdr( "REFERENCE_FRAME", 1 );
       } else {
          $Frm->hdr( "REFERENCE_FRAME", 0 );
       }

# Specify during processing of which frames should the flat be created,
# flat-field creation with objects masked, a mosaic created, and
# aperture photometry performed.
       if ( $fn % $totframe == 0 ) {
          $Frm->hdr( "DO_APHOT", 1 );
          $Frm->hdr( "REGISTER_IMAGES", 1 );

       } else {
          $Frm->hdr( "DO_APHOT", 0 );
          $Frm->hdr( "REGISTER_IMAGES", 0 );
       }

# Frames are jittered then the waveplate is moved.  Indicate when to
# combine the jittered data at a given waveplate position.
       if ( $fn % $number == 0 ) {
          $Frm->hdr( "MAKE_MOSAIC", 1 );
       } else {
          $Frm->hdr( "MAKE_MOSAIC", 0 );
       }

# Insert the cycle number of the set of frames.
       $Frm->hdr( "CYCLE_NUMBER", int( $Grp->num / $totframe ) );

# Insert the number of frames in the jitter.
       $Frm->hdr( "JITTER_NUMBER", $number );

# All frames are target.  Some more-general primitives need to select 
# targets from sky frames.
       $Frm->hdr( "TARGET_OR_SKY", "target" );
    }

# Podule
# ======

=head1 NAME

_POL_JITTER_STEER_ -- Steers processing for POL_JITTER recipes.

=head1 DESCRIPTION

This primitive creates the groups needed by POL_JITTER recipes (see
the Groups topic).  It also controls processing for POL_JITTER
recipes through the steering headers listed below. 

=head1 STEERING HEADERS

=over 4

=item CYCLE_NUMBER = INTEGER

Number of the cycle, a cycle being a set of frames to complete a
pass through the recipe.  The first cycle is 0.

=item DO_APHOT = LOGICAL

Whether or not perform aperture photometry.
Photometry is performed once the polarisation maps are made.

=item JITTER_NUMBER = INTEGER

The number of frames in the jitter.

=item MAKE_MOSAIC = LOGICAL

Whether or not register the jittered images by beam and make a 
mosaic for the current waveplate angle.  Each mosaic is made once
all the jittered target frames for a given waveplate angle in a
cycle are available.

=item REGISTER_IMAGES = LOGICAL

Whether or not to register and resample the e- and o-beam mosaics.

=item REFERENCE_FRAME = LOGICAL

A true value specifies the reference frame for normalisation
purposes.  It is true for the first frame and false for all
subsequent frames in the observation.  It is currently not used.

=item TARGET_OR_SKY = CHARACTER

This is "target" for a target frame, and "sky" for a sky calibration
frame.  All frames should be target.

=back

=head1 GROUPS

The following groups of frames are created, each retained by storing
a reference in the $Grp user header.  They are listed below by their 
header names.

   EBEAM_GROUP   The target sections for the e-beam.
   MOSAIC_GROUP  Mosaics at the four waveplate positions for each beam.
   OBEAM_GROUP   The target sections for the o-beam.

They all inherit the main group's headers and user headers.
MOSAIC_GROUP's file has the same name as the main group's file.  The 
filename of EBEAM_GROUP has an additional "_e" suffix.  Likewise
the filename of the OBEAM_GROUP has an "_o" suffix.

=head1 ARGUMENTS

=over 4

=item NUMBER = INTEGER (Given)

The number of frames in the jitter.  The minimum is 3. [9]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for both UFTI and IRCAM.

=item *

Processing only occurs for object and sky frames.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
