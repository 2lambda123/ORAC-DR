# _MAKE_FLAT_FROM_NORMALISED_EXTENDED_    -*- perl -*-
#
# Forms a flat-field from a group of object frames.  Each member of the
# group is expected to be of blaank sky and be zero-point normalised to
# one of the frames.  The primitive uses a median to combine pre-normalised
# frames pixel by pixel.
#
# TASK: CCDPACK - MAKECAL, KAPPA - CDIV, KAPPA - STATS
#
# Arguments:
#    FLAT_MEDIAN = REAL (Returned)
#       The median value of the reference sky frame.

# This should only be performed on object frames.
    if ( $Frm->hdr(OBSTYPE) =~ /OBJECT/ || $Frm->hdr(OBSTYPE) =~ /SKY/ ) {

# Obtain the cycle frequency of skies.  A value of 2 means the object and
# sky frames alternate.
       $cycle = $Frm->hdr( "SKY_FREQ" );
       
# Test whether or not this is an object frame or a sky frame. 
       $class = $Frm->hdr( "TARGET_OR_SKY" );

# Test whether or not this is a target frame or a sky frame.   This
# assumes a sequence: cycle-1 target frames, sky frame, cycle-1 target
# frames, sky frame,...  We can generate a flat field when the frame
# group includes at least three blank-sky frames.
       if ( $class =~ /sky/ && ($Grp->num + 1) >= 3 * $cycle ) {

# Form a list of the blank-sky file names for CCDPACK tasks by using a
# subgroup.
          $skygrp = $Grp->subgrp( TARGET_OR_SKY => "sky" );
          $numfiles = $skygrp->num + 1;

# Form a list of input file names for MAKECAL from the other members
# of the group.  This is not as obvious as it sounds since we are
# trying to do this by looking at the current file values for each
# Frame object in the loop.  First time around everything is fine.
# Second time around we realise that the previous frames now have the
# wrong names since they have been flat-fielded etc.  We now have to
# construct the input names from the template.  The template is the
# current sky frame name.
          $skygrp->template($Frm->file);

# Obtain an array of the filenames of the sub-group members.
          @objects = $skygrp->membernames;

# Form a comma-separated list of the object frames.
          $objlist = join(",", @objects);

# Create text file to hold the list of input files, one per line.  This
# is needed because expanded lists of files may make the command line too
# long for the ADAM message system.
          unlink ("objlist.inlist");
          open (INLIST, ">objlist.inlist");
          for ( my $i = 0; $i < $numfiles; $i++ ) {
             print INLIST @objects[$i],"\n";
          }
          close (INLIST);

# Assign the other parameters.  Note that output flat is hardwired for
# the moment.
          $uflat = $Grp->name."_uflat";
          $header = "in='^objlist.inlist' out=$uflat";
          $hidden = "sigmas=2.0 expose=1 reset accept"; 
          $user = "method=median";

# Median filter the intra-normalised sky frames to produce an un-normalised
# flatfield.
          $Mon{"ccdpack_red"}->obeyw("makecal","$header $user $hidden");
          unlink ("objlist.inlist");

# Obtain the mean of the combined frame.
          $Mon{"kappa_mon"}->obeyw("histat","ndf=$uflat");

# Extract the mean of the frame.  Export the value for later sky subtraction.
          ($ORAC_STATUS, $median) = $Mon{"kappa_mon"}->get("histat","median");
          $_MAKE_FLAT_FROM_NORMALISED_EXTENDED_{FLAT_MEDIAN} = $median;

# Assign the parameters.  Note that output flat is hardwired for the moment.
          $out = $Grp->name."_flat";
          $header = "in=$uflat out=$out scalar=$median title=\'Flat field\'";

# Normalise the flat field to have a mean of one.
          $Mon{"kappa_mon"}->obeyw("cdiv","$header");
          unlink ($uflat.".sdf");

# Set the current flat in the calibration object.
          _FILE_FLAT_ NAME=$out
     
# Report the status of the processing.
          orac_print "Orac says: frames $objlist used for flat\n";

# Display the image.
          _DISPLAY_FLAT_IMAGE_

       };
    };
