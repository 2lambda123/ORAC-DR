#+
# Name:
#    _FLAT_FIELD_MASKED_GROUP_
#
# Purpose:
#    Self-flat fields a group of frames.
#
# Language:
#    Perl5
#
# Description:
#    This primitive creates and applies self-flat field for the current
#    group of frames.  It makes a flat from the group and then divides
#    the group members by that flat field.  There is also optional
#    object masking to make an improved flat; objects in the flattened
#    frames are detected above brightness and size thresholds, and the
#    frames combined to make a new flat field.  The improved flat is 
#    then applied to the original input group.  Four other primitives
#    do most of the work.
#
# Notes:
#    -  This primitive is suitable for both UFTI and IRCAM.
#    -  Processing only occurs for object and sky frames, and when the
#    steering header MAKE_FLAT is true, and only for frames in the
#    current recipe cycle, as given by steering header CYCLE_NUMBER.
#    -  The steering header JITTER_NUMBER defines the number of
#    frames in a cycle.
#    -  Frame normalisation is with respect to a reference level of the
#    first frame, stored in the first frame's header REFERENCE_LEVEL. 
#    If this is not defined, as would be the case on the first cycle,
#    the mode of the reference is calculated.  The reference mode is
#    then stored in variable $_NORMALISE_TO_MODE_refmode for the
#    normalising routine to access for subsequent frames..
#
# Arguments:
#    MASK = LOGICAL (Given)
#       Perform object masking only if it is true.
#
# Output Data:
#    None.  However, the invoked primitives _MAKE_FLAT_FROM_GROUP_,
#    _DIVIDE_BY_FLAT_FROM_GROUP_, _MAKE_OBJECTS_MASK_, and
#    _MASK_OBJECTS_ do create new frames.  The bottom line is that
#    a flat field frame is filed and indexed, and there are
#    flat-fielded frames each inheriting the corresponding input
#    frame's name but with an _ff suffix.  Various intermediate
#    frames are normally removed by a tidy primitive.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Selection
# =========
#
# This should only be performed on OBJECT frames.
    if ( ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ||
           $Frm->hdr( "OBSTYPE" ) eq "SKY" ) &&
           $Frm->hdr( "MAKE_FLAT" ) ) {

# Determine whether or not to mask objects.
# =========================================

# Use the MASK argument.
       my $mask_obj;
       if ( defined $_FLAT_FIELD_MASKED_GROUP_{MASK} ) {
          $mask_obj = $_FLAT_FIELD_MASKED_GROUP_{MASK};
       } else {
          $mask_obj = 1;
       }

# Obtain the reference level.
# ===========================

# The aim is to make a flat field, first (and perhaps only) by combining
# the jittered frames.  This is straightforward.  In contrast, if object
# masking is applied, biases can be introduced as the objects move to
# different locations on the detector each with a different response
# in the flat field.  Merely taking a median at each pixel will
# preferentially select values from certain frames.  Thus there has to 
# be an allowance for these systematic differences before the data are
# combined to give representative relative intensities.  We nominate
# one frame, the first in the group, to be the reference frame against
# which we scale the modal values of the other frames.

# As the routine which evaluates the mode (_NORMALISE_TO_MODE_)
# operates on a sub-group of a cycle of the jitter/recipe, after the
# first cycle it cannot access a reference mode from the reference frame.
# Therefore, the reference mode must be obtained before the sub-group is
# created.  If we are processing the reference frame, there will not be
# a reference mode in its header yet.  _NORMALISE_TO_MODE_ detects this;
# it then determines the reference mode and writes it to the header of 
# the reference frame.  The group header only exists at this point once
# a first cycle mosaic has been generated, hence the $Grp->hdr
# method cannot be used to propagate the reference level.

# Determine whether or not this is the first frame, and hence whether or
# not a reference mode is needed.  Notice the scope of the variable
# _NORMALISE_TO_MODE_refmode includes the _NORMALISE_TO_MODE_ primitive,
# and so we don't have to pass parameters down two levels.  The name
# is therefore chosen to avoid potential clashes.
       my $_NORMALISE_TO_MODE_refmode;
       if ( $mask_obj ) {   
          if ( $Grp->num > 0 ) {

# Recall the reference level from the reference frame within the group.
             my $refFrm = $Grp->frame( 0 );
             $_NORMALISE_TO_MODE_refmode = $refFrm->hdr( "REFERENCE_LEVEL" );

# Find the clipped mean (effectively the mode) for the reference
# frame if it's not already determined.  Make the reference frame the
# current frame temporarily.  Store the value for later frames.
             if ( ! ( defined $_NORMALISE_TO_MODE_refmode ) ) {
                my $Frm = $refFrm;
                _CLIPPED_MEAN_
                $_NORMALISE_TO_MODE_refmode = $_CLIPPED_MEAN_{RESULT};
             }
          }
       }

# Group manipulations.
# ====================

# Create a group based upon the current frame name.
       $Grp->template( $Frm->file );

# Record the group identifier.
       my $mainGrp = $Grp;

# Obtain the number of frames in the jitter or cycle.  Nine is the expected
# maximum number.
       my $period = ( $Frm->hdr( "JITTER_NUMBER" ) || 9 );

# Specify the cycle number.
       my $cycleno = $Frm->hdr( "CYCLE_NUMBER" );

# Extract from the main group those frames belonging to this group.
       my $cycleGrp = $Grp->subgrp( CYCLE_NUMBER => $cycleno );

# Make this the main group for the moment.
       $Grp = $cycleGrp;

# Record the group members at this point.
       my @sky_names = $Grp->membernames;

# Make and apply the unmasked flat field.
# =======================================

# Make a first pass at a flat using the jittered frames of the group.
       _MAKE_FLAT_FROM_GROUP_

# Reset the group names to be the ones to flat field.
       $Grp->membernames( @sky_names );

# Apply the flat field.
       _DIVIDE_BY_FLAT_FROM_GROUP_

# Make and apply the object mask.
# ===============================

# Test whether or not it is time to mask objects.  Use global
# argument first, then frame by frame.
       if ( $mask_obj ) {
          my $maskobjects = $Frm->hdr( "MASK_OBJECTS" );
          my ( @maskfiles, @masked_names, $maskfile, $file );
          if ( $maskobjects ) {

# Create an array to store the names of the mask files. 
             @maskfiles = ();

# Compute a mask of the objects for each member of the flat-field
# group, using a local $Frm.
             foreach $Frm ( $Grp->members ) {
                _MAKE_OBJECTS_MASK_

# Record the mask filename into an array.
                push ( @maskfiles, $_MAKE_OBJECTS_MASK_{MASKFILE} );
             }

# Create an array to store the names of the masked datasets. 
             @masked_names = ();

# Mask the objects in each frame.  Make a copy of the @sky_names
# so we can shift its elements.  Again use a local $Frm.
             my @local_sky_names = @sky_names;
             foreach $Frm ( $Grp->members ) {
                $file = shift( @local_sky_names );
                $maskfile = shift( @maskfiles );
                $Frm->file( $file );

# Normalise the frames to each other.
                _NORMALISE_TO_MODE_

# Mask the objects.
                _MASK_OBJECTS_ MASKFILE=$maskfile

# Record the masked (or unmasked file if the masking has failed)
# filename into an array.
                push ( @masked_names, $Frm->file );
             }

# Set the group names to be the masked ones to form improved flat field.
             $Grp->membernames( @masked_names );

# Make and apply the improved flat field.
# =======================================

# Generate the new flat field using the jittered masked frames.
             _MAKE_FLAT_FROM_NORMALISED_GROUP_ 

# Reset the group names to be the ones to flat field.
             $Grp->membernames( @sky_names );

# Apply the better flat field.
             _DIVIDE_BY_FLAT_FROM_GROUP_
          }
       }

# Restore the original group.
       $Grp = $mainGrp;
       $Grp->template( $Frm->file );
    }

# Podule
# ======

=head1 NAME

_FLAT_FIELD_MASKED_GROUP_ -- Self-flat fields a group of frames.

=head1 DESCRIPTION

This primitive creates and applies self-flat field for the current
group of frames.  It makes a flat from the group and then divides
the group members by that flat field.  There is also optional
object masking to make an improved flat; objects in the flattened
frames are detected above brightness and size thresholds, and the
frames combined to make a new flat field.  The improved flat is 
then applied to the original input group.  Four other primitives
do most of the work.

=head1 NOTES

=over 4

=item *

This primitive is suitable for both UFTI and IRCAM.

=item *

Processing only occurs for object and sky frames, and when the
steering header MAKE_FLAT is true, and only for frames in the current
recipe cycle, as given by steering header CYCLE_NUMBER.

=item *

The steering header JITTER_NUMBER defines the number of
frames in a cycle.

=item *

Frame normalisation is with respect to a reference level of the
first frame, stored in the first frame's header REFERENCE_LEVEL. 
If this is not defined, as would be the case on the first cycle,
the mode of the reference is calculated.  The reference mode is
then stored in variable $_NORMALISE_TO_MODE_refmode for the
normalising routine to access for subsequent frames..

=back

=head1 ARGUMENTS

=over 4

=item MASK = LOGICAL (Given)

Perform object masking only if it is true.

=back

=head1 OUTPUT DATA

None.  However, the invoked
primitives _MAKE_FLAT_FROM_GROUP_, _DIVIDE_BY_FLAT_FROM_GROUP_, _MAKE_OBJECTS_MASK_,
and _MASK_OBJECTS_ do create new frames.  The bottom line is that
a flat field frame is filed and indexed, and there are
flat-fielded frames each inheriting the corresponding input
frame's name but with an _ff suffix.  Various intermediate
frames are normally removed by a tidy primitive.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
