# _GENERATE_OFFSETS_       -*- perl -*-
#
# Find the offsets between the frames. 
#
# TASK: CCDPACK - FINDOBJ, FINDOFF, REGISTER
#
# Arguments:
#    COMPLETE = REAL (Given)
#       Completeness of matched features for registration between two frames
#       to be accepted.  It must be in the range 0.2 to 1.0. [0.4]
#    MINPIX = INTEGER (Given)
#       Minimum number of contguous pixels above the PERCENTILE level
#       to be considered a registration feature.  It must be at least 6. [6]
#    PERCENTILE = REAL (Given)
#       Percentile threshold for locating objects to register frames. 
#       It must be in the range 75 to 99.9. [96]

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->hdr(OBSTYPE) eq "OBJECT" || $Frm->hdr(OBSTYPE) eq "SKY" ) {

# Test whether or not it is time to make a mosaic.
       $makemos = $Frm->hdr( "MAKE_MOSAIC" );
       if ( $makemos ) {

# Form a list of input file names for CCDPACK tasks.
          @objects = $Grp->membernames;

# Convert list to comma-separated list.
          $objlist = join(",", @objects);

# Create text file to hold the list of input files, one per line.  This
# is needed because expanded lists of files may make the command line too
# long for the ADAM message system.
          unlink ("objlist.inlist$$");
          open (INLIST, ">objlist.inlist$$");
          print INLIST join( "\n", @objects ), "\n";
          close (INLIST);

# Find objects
# ============

# Obtain the parameters for the detection.
          $percentile = ( $_GENERATE_OFFSETS_{PERCENTILE} || 96 );
          $minpix = ( $_GENERATE_OFFSETS_{MINPIX} || 6 );

# Specify the other parameters for the FINDOBJ stage.
          $header = "in='^objlist.inlist$$' outlist=\'*.find\'";
          $hidden = "percentile=$percentile minpix=$minpix";

# Locate and centroid the objects with connected pixels above a threshold
# in all the flat-fielded object frames.  Write their co-ordinates and
# peak values into .find text files.  The exact values of threshold
# percentile and minpix requires some tuning and FINDOBJ to continue
# when no objects are found in any of the list of input data.
          $Mon{"ccdpack_reg"}->obeyw("findobj","$header $hidden accept");

# Derive offsets
# ==============

# Obtain the parameter for the detection.
          $complete = ( $_GENERATE_OFFSETS_{COMPLETE} || 0.4 );
          $complete = max( 0.2, min( 1.0, $complete) );

# Specify the other parameters for the FINDOFF stage.  Srt a lower
# threshold for completeness due to spurious images on UFTI.
          $header = "inlist='^objlist.inlist$$' outlist=\'*.off\'";
          $hidden = "error=1 complete=$complete"; 

# Pattern match using the co-ordinate lists.  It uses a fast algorithm
# first, but resorts to a slower one, if patterns aren't matched.
# Store the offsets in .off text files.
          $go_status =  $Mon{"ccdpack_reg"}->obeyw("findoff","$header $hidden accept");
 
# Test whether or not registration was achieved.  If not find approximate
# offsets from the headers or finding the displacement of an object
# within a central box.  It assumes the first frame has the object centred.
# As we can't pass a group as an argument, for now use the fixed group name
# of reggrp expected by _FIND_APPROX_OFFSETS_.
          if ( $go_status != ORAC__OK ) {
#             _FIND_APPROX_OFFSETS_ GROUP=$Grp
             $reggrp = $Grp;
             _FIND_APPROX_OFFSETS_
          }

# Register
# ========

# Specify the other parameters for the REGISTER stage.
          $header = "inlist='^objlist.inlist$$'";
          $hidden = "fittype=1"; 

# Register the frames using a shift of origin.  Create the CCDPACK
# TRANSFORM extensions.
          $Mon{"ccdpack_reg"}->obeyw("register","$header $hidden accept");
          unlink ("objlist.inlist$$");

# Report processing status.
          orac_print "Orac says: frames $objlist registered\n";

       };
    };
