#+
# Name:
#    _GENERATE_OFFSETS_NOD
#
# Purpose:
#    Finds the offsets between the frames in a NOD recipe.
#
# Description:
#    This primitive finds the pixel offsets between the target frames  
#    in the current $Grp of a NOD recipe.  The primitive itself
#    forms a subgroup for the current cycle from the group containing
#    difference pairs, accessed by the internal group header
#    DIFFERENCE_GROUP.  It then passes the subgroup to other primitives
#    to do the bulk of the work.  When argument TELEOFF is true,
#    _TELE_OFFSETS_ is invoked and the derived offsets are used to
#    register with a shift of origin; otherwise _GENERATE_OFFSETS_ is
#    the work horse.
#
# Language:
#    Perl5
#
# Arguments:
#    COMPLETE = REAL (Given)
#       Completeness of matched features for registration between two 
#       frames to be accepted.  It must be in the range 0.2 to 1.0. [0.4]
#    MINPIX = INTEGER (Given)
#       Minimum number of contiguous pixels above the PERCENTILE level
#       to be considered a registration feature.  It must be at least 6.
#       [9]
#    PERCENTILE = REAL (Given)
#       Percentile threshold for locating objects to register frames. 
#       It must be in the range 75 to 99.9.  [98]
#    TELEOFF = LOGICAL (Given)
#       If true (1), it will just use the telescope offsets to register.
#       If false (0), it will attempt automatic registration.  [0]
#
# Notes:
#    -  This primitive is suitable for both UFTI and IRCAM.
#    -  Processing only occurs for object and sky frames, and when 
#    steering header MAKE_MOSAIC is true.
#    -  The _GENERATE_OFFSETS_ argument CENTRAL_SOURCE is TRUE.
#    Thus matching the centroids of a central source is attempted if
#    automatic registration fails.
#    -  The frames registered using telescope offsets are reported.
#
# Tasks:
#    CCDPACK: REGISTER; KAPPA: WCSFRAME.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Arguments
# =========

# Determine whether or not telescope offsets should only be used.
    my $usetele = $_GENERATE_OFFSETS_NOD_{TELEOFF};
    $usetele = defined( $usetele ) ? $usetele : 0;

# Obtain the parameters for the detection.
    my ( $complete, $minpix, $percentile );
    if ( ! $usetele ) {
       $percentile = ( $_GENERATE_OFFSETS_NOD_{PERCENTILE} || 98 );
       $minpix = ( $_GENERATE_OFFSETS_NOD_{MINPIX} || 9 );
       $complete = ( $_GENERATE_OFFSETS_NOD_{COMPLETE} || 0.4 );
    }

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ||
         $Frm->hdr( "OBSTYPE" ) eq "SKY" ) {

# Test whether or not it is time to make a mosaic.
       my $makemos = $Frm->hdr( "MAKE_MOSAIC" );
       if ( $makemos ) {

# Make a local $Grp containing just the differenced pairs.
          {
             my $Grp = $Grp->uhdr( "DIFFERENCE_GROUP" );

# Obtain the cycle number.  Default to zero if undefined, so that recipes
# which do not support this feature will continue to work.
             my $cycleno = $Frm->hdr( "CYCLE_NUMBER" );
             $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Select those members in the current cycle.
             my $cycleGrp = $Grp->subgrp( CYCLE_NUMBER => $cycleno );

# Start a new Grp context.
             {
                my $Grp = $cycleGrp;

# Telescope offsets
# =================
                if ( $usetele ) {

# Form a list of input file names for CCDPACK tasks.
                   my @objects = $Grp->membernames;

# Convert list to comma-separated list.
                   my $objlist = join( ",", @objects );

# Create text file to hold the list of input files, one per line.  This
# is needed because expanded lists of files may make the command line too
# long for the ADAM message system.
                   unlink( "objlist.inlist$$" );
                   open( INLIST, ">objlist.inlist$$" );
                   print INLIST join( "\n", @objects ), "\n";
                   close( INLIST );

# Use telescope offsets from the headers.
                   _TELE_OFFSETS_

# Set the co-ordinate system to pixels.
# =====================================

# This is needed because CCDPACK v3.0, which is in the same release
# as KAPPA v0.14-3 uses the WCS.  CCDPACK/REGISTER has a new USEWCS
# parameter which defaults to true, meaning convert the pixel
# co-ordinates in the .off files into the current co-ordinate system
# of each NDF.  We use pixel co-ordinates throughout.  By making the
# change here the REGISTER command line remains unchanged.
                   my ( $header, $hidden );
                   if ( $KAPPA_VERSION_MINOR > 13 ) {
                      $header = "ndf='^objlist.inlist$$' frame=pixel";
                      $Mon{"ndfpack_mon"}->obeyw("wcsframe", "$header");
                   }

# Register
# ========

# Specify the other parameters for the REGISTER stage.
                   $header = "inlist='^objlist.inlist$$'";
                   $hidden = "fittype=1";

# Register the frames using a shift of origin.  Create the CCDPACK
# TRANSFORM extensions.
                   $Mon{"ccdpack_reg"}->obeyw("register","$header $hidden accept");
                   unlink( "objlist.inlist$$" );

# Report processing status.
                   orac_print "Orac says: frames $objlist registered\n";

                } else {

# Generate the offsets
# ====================

# Call the generic primitive which does most of the work.  Use central
# source as a backup.
                   _GENERATE_OFFSETS_ PERCENTILE=$percentile MINPIX=$minpix COMPLETE=$complete CENTRAL_SOURCE=TRUE
                }

# End of scope of local $Grp aka $cycleGrp.
             }

# End of scope of local $Grp aka $diffGrp.
          }
       }
    }

# Podule
# ======

=head1 NAME

_GENERATE_OFFSETS_NOD_ -- Finds the offsets between the frames in a NOD recipe.

=head1 DESCRIPTION

This primitive finds the pixel offsets between the target frames in
the current $Grp of a NOD recipe.  The primitive itself forms a
subgroup for the current cycle from the group containing difference
pairs, accessed by the internal group header DIFFERENCE_GROUP.  It
then passes the subgroup to other primitives to do the bulk of the
work.  When argument TELEOFF is true, L<_TELE_OFFSETS_|_TELE_OFFSETS_>
is invoked and the derived offsets are used to register with a shift
of origin; otherwise L<_GENERATE_OFFSETS_|_GENERATE_OFFSETS_> is the
work horse.

=head1 ARGUMENTS

=over 4

=item COMPLETE = REAL (Given)

Completeness of matched features for registration between two 
frames to be accepted.  It must be in the range 0.2 to 1.0. [0.4]

=item MINPIX = INTEGER (Given)

Minimum number of contiguous pixels above the PERCENTILE level
to be considered a registration feature.  It must be at least 6.
[9]

=item PERCENTILE = REAL (Given)

Percentile threshold for locating objects to register frames. 
It must be in the range 75 to 99.9.  [98]

=item TELEOFF = LOGICAL (Given)

If true (1), it will just use the telescope offsets to register.
If false (0), it will attempt automatic registration.  [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for both UFTI and IRCAM.

=item *

Processing only occurs for object and sky frames, and when 
steering header MAKE_MOSAIC is true.

=item *

The _GENERATE_OFFSETS_ argument CENTRAL_SOURCE is TRUE.
Thus matching the centroids of a central source is attempted if
automatic registration fails.

=item *

The frames registered using telescope offsets are reported.

=back

=head1 TASKS

CCDPACK: REGISTER; KAPPA: WCSFRAME.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
