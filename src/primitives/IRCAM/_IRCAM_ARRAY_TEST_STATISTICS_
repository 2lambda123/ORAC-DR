#+
# Name:
#    _IRCAM_ARRAY_TEST_STATISTICS_
#
# Purpose:
#    Determines the state of the IRCAM detector for the ARRAY_TESTS
#    recipe.
#
# Language:
#    Perl5
#
# Description:
#    This primitive evaluates the STARE and ND_STARE readout noises in
#    electrons and the dark current in electrons per second for IRCAM.
#    The script also reports these statistics, indicating whether or 
#    not they are nominal.  At UKIRT, the results are also logged to a
#    text file, /ukirt_sw/logs/ircam3_array_tests.log, to monitor
#    secular trends.
#
#    The primitive expects sets of eight frames.  In each set the first
#    refresh frame is ignored, then come two STARE and two ND_STARE
#    frames, followed by a dark, an ignored refresh frame, and another
#    a dark.
#
# Notes:
#    -  An exposure time of 59 seconds and an ADU factor of 6 are
#    assumed.
#    -  If the log file does not exist, a new one is created containing
#    a two-line heading, and the fact is reported.
#    -  The log file stores the results in a fixed columnar format.
#    -  The STARE noise is the standard deviation per frame of the
#    second and third frames subtracted, and converted from counts to
#    electrons.  ND_STARE is calculated in the same fashion for the
#    fourth and fifth frames.
#    -  The dark current is the median of the dark count normalised to
#    unit time and converted to electrons.
#    -  The nominal STARE and NDF_STARE readout noises are 56 and 38
#    electrons respectively, and the nominal dark current is 0 to 5
#    electron per second.
#
# Deficiencies:
#    -  There is no validation of the frame types.
#    -  Hardwired ADU and exposure times.
#
# Tasks:
#    KAPPA: HISTAT, STATS, SUB.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Create the results file if needed.
# ==================================

# Test if we are in a UKIRT environment.
     if ( -e "/ukirt_sw/logs" ) {

# Create a results file if one does not exist.
        my $results = "/ukirt_sw/logs/ircam3_array_tests.log";
        if ( !( -e $results ) ) {
           open( RESULTS, ">$results" ) || die "Could not open $results because:\n$!\n";
           orac_print "Creating a new results file called $results\n";

# Write the column headings into the result file.
           print RESULTS "UT Date / Hour    STARE_RN    ND_STARE_RN    Dark Current\n";
           print RESULTS "--------------    --------    -----------    ------------\n\n";

        } else {
           open( RESULTS, ">>$results" );
        }
     }

# Compute the statistics.
# =======================

# Wait until all the array tests are completed.  Should be eight frames.
# Change to be "every eight frames" rather than "eight frames".
#     if ( $Grp->num == 7 ) {
     if ( ( $Grp->num + 1 ) % 8 ==0 ) {

# Set some parameters, currently assigned the IRCAMDR values.
        my $scale = 59.0;
        my $adu = 6.0;

# Obtain the names of the group members.
        my @frames = $Grp->membernames;

# Difference the first two useable frames.  The first array_test frame
# is ignored.
        $Mon{"kappa_mon"}->obeyw("sub","in1=$frames[1] in2=$frames[2] out=array_test");

# Find the standard deviation of the difference frame.
        $Mon{"kappa_mon"}->obeyw("stats","ndf=array_test");
        ( my $ORAC_STATUS, my $stare_sigma ) = $Mon{"kappa_mon"}->get("stats","sigma");
        my $stare_rn = $stare_sigma / sqrt(2.0) * $adu;

# Difference the next two (ND_STARE) frames.
        $Mon{"kappa_mon"}->obeyw("sub","in1=$frames[3] in2=$frames[4] out=array_test");

# Find the standard deviation of the difference frame.
        $Mon{"kappa_mon"}->obeyw("stats","ndf=array_test");
        ( $ORAC_STATUS, my $nd_stare_sigma ) = $Mon{"kappa_mon"}->get("stats","sigma");
        my $nd_stare_rn = $nd_stare_sigma / sqrt(2.0) * $adu;

# Difference the next two useable frames.
        $Mon{"kappa_mon"}->obeyw("sub","in1=$frames[5] in2=$frames[7] out=array_test");

# Find the median of the difference frame.
        $Mon{"kappa_mon"}->obeyw("histat","ndf=array_test");
        ($ORAC_STATUS, my $median) = $Mon{"kappa_mon"}->get("histat","median");
        my $dark = $median / $scale * $adu;

# Obtain the date and time.
        my $utdate = $Frm->hdr( "IDATE" );
        my $uthour = $Frm->hdr( "RUTSTART" );

# Remove the temporary file.
        _DELETE_A_FRAME_ FRAME=array_test

# Output the results.
# ===================

# Write the results to the engineering file, which is then closed.
        printf RESULTS "%8s %5.2f %10.3f %13.3f %14.3f\n", $utdate, $uthour, $stare_rn, $nd_stare_rn, $dark;
        close( RESULTS );

# Format the results to give a sensible number of decimal places.
# Make the format sufficiently large and then remove any leading
# spaces.
        my $fs_stare_rn = sprintf( "%10.3f", $stare_rn );
        $fs_stare_rn =~ s/ //g;
        my $fs_nd_stare_rn = sprintf( "%10.3f", $nd_stare_rn );
        $fs_nd_stare_rn =~ s/ //g;
        my $fs_dark = sprintf( "%10.3f", $dark );
        $fs_dark =~ s/ //g;

# Report the results to the user.
        orac_print "\n";
        orac_print "STARE    mode readout noise (e-) = $fs_stare_rn\n";
        orac_print "ND_STARE mode readout noise (e-) = $fs_nd_stare_rn\n";
        orac_print "Dark current (e-/sec)            = $fs_dark\n";
        orac_print "\n";

# Report upon the status of the results.
# ======================================

# STARE readout noise.  May need to make the nominal value a parameter.
        if ( $stare_rn < 30.0 ) {
           orac_warn "STARE readout noise is LOW with respect to nominal 56e-\n";
        } elsif ( $stare_rn > 70.0 ) {
           orac_warn "STARE readout noise is HIGH with respect to nominal 56e-\n";
        } else {
           orac_print "** STARE readout noise is nominal **\n";
        };

# ND_STARE readout noise.  May need to make the nominal value a parameter.
        if ( $nd_stare_rn < 20.0 ) {
           orac_warn "ND_STARE readout noise is LOW with respect to nominal 38e-\n";
        } elsif ( $nd_stare_rn > 50.0 ) {
           orac_warn "ND_STARE readout noise is HIGH with respect to nominal 38e-\n";
        } else {
           orac_print "** ND_STARE readout noise is nominal **\n";
        };

# Dark current.  May need to make the nominal value a parameter.
        if ( $dark < 0.0 ) {
           orac_warn "Dark current is NEGATIVE, wierd; nominal is 0 to 5e-/sec\n\n";
        } elsif ( $dark > 10.0 ) {
           orac_warn "Dark current is HIGH with respect to nominal 0 to 5e-/sec\n\n";
        } else {
           orac_print "** Dark current is nominal **\n\n";
        }
     }

# Podule
# ======

=head1 NAME

_IRCAM_ARRAY_TEST_STATISTICS_ -- Determines the state of the IRCAM detector for the ARRAY_TESTS recipe.

=head1 DESCRIPTION

This primitive evaluates the STARE and ND_STARE readout noises in
electrons and the dark current in electrons per second for IRCAM.
The script also reports these statistics, indicating whether or 
not they are nominal.  At UKIRT, the results are also logged to a
text file, F</ukirt_sw/logs/ircam3_array_tests.log>, to monitor
secular trends.

The primitive expects sets of eight frames.  In each set the first
refresh frame is ignored, then come two STARE and two ND_STARE
frames, followed by a dark, an ignored refresh frame, and another
a dark.

=head1 NOTES

=over 4

=item *

An exposure time of 59 seconds and an ADU factor of 6 are
assumed.

=item *

If the log file does not exist, a new one is created containing
a two-line heading, and the fact is reported.

=item *

The log file stores the results in a fixed columnar format.

=item *

The STARE noise is the standard deviation per frame of the
second and third frames subtracted, and converted from counts to
electrons.  ND_STARE is calculated in the same fashion for the
fourth and fifth frames.

=item *

The dark current is the median of the dark count normalised to
unit time and converted to electrons.

=item *

The nominal STARE and NDF_STARE readout noises are 56 and 38
electrons respectively, and the nominal dark current is 0 to 5
electron per second.

=back

=head1 DEFICIENCIES

=over 4

=item *

There is no validation of the frame types.

=item *

Hardwired ADU and exposure times.

=back

=head1 TASKS

KAPPA: HISTAT, STATS, SUB.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998--2000 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
