# -*-cperl-*-

=head1 NAME

_CREATE_FAKEMAP_FRAME_ - create a fake map to add to timeseries

=head1 SYNOPSIS

 _CREATE_FAKEMAP_FRAME_

=head1 DESCRIPTION

This primitive creates a suitable fake map to add to the timeseries
data when making the data map. The input map is obtained from the
C<FAKEMAP_MAP> recipe parameter. If no input map is specified the
primitive will create a Gaussian of unit height at the map centre in
pixel coordinates (scaled by the C<FAKESCALE> parameter), provided the
C<FWHM> parameter is given. Alternatively, the gaussian will be
centred at the position denoted by the C<FAKEMAP_OFFSET> ecipe
parameter.

The parameters are all derived from recipe parameters: see the
documentation for the L<REDUCE_SCAN_FAKEMAP|REDUCE_SCAN_FAKEMAP>
recipe for the list of supported parameters.

The user may provide the name of a file from which to obtain the map
bounds. If no input file is given, SMURF C<makemap> is used to test
the size of the output image, from which the required pixel bounds can
be obtained. A blank template is created with these pixel bounds. The
template will have WCS added if the fake map is to have the same pixel
scale as the output map.

The name of the fake map is stored for retrieval at the map-making
stage.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<LIKE>

Name of a file from which to obtain map bounds. No default.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (write messages).

=back

=head1 EXTERNAL TASKS

=over 4

=item KAPPA

NDFCOPY, NDFTRACE, WCSALIGN, WCSSLIDE

=item SMURF

MAKEMAP

=item ORAC-DR PRIMITIVES

_ADD_WCS_TO_IMAGE, _CREATE_PSF_IMAGE_, _CREATE_REFERENCE_IMAGE_, _GET_PIXEL_SCALE_

=back

=head1 OUTPUT DATA

The current Frame uhdr contains two new entries: C<FAKEMAP> which
contains the name of the fake map (written to $ORAC_DATA_OUT) and
C<FAKESCALE>, the scaling parameter used by the map maker to scale the
fake map.

=head1 OUTPUT FILES

Two files with the suffice C<_ref> and C<_fakemap> for the map
template and fake map (which is derived from the template). These
files are added to the intermediates array so they can be deleted at
the end of the recipe.

=head1 NOTES

=over 2

=item *

The gaussian will be shifted by an integer number of pixels to ensure
the peak value remains unchanged.

=item *

If B<LIKE> is unspecified, the Frame must contain raw data from which
a map can be made.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011,2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should I be verbose? (default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Retrieve parameters
my $inputmap = $Frm->uhdr("RECPAR_FAKEMAP_MAP");

my $basemap = ORAC::TempFile->new();
my $fwhm;
if ($inputmap) {
  orac_print "Creating a fake map from $inputmap:\n";
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$inputmap out=$basemap trim trimwcs");
} else {
  # If the input map is not defined, create a gaussian of the specified
  # properties
  $fwhm = $Frm->uhdr("RECPAR_FAKEMAP_FWHM");
  orac_print "Creating gaussian fakemap:";
}
my $fakescale = (defined $Frm->uhdr("RECPAR_FAKEMAP_SCALE"))
  ? $Frm->uhdr("RECPAR_FAKEMAP_SCALE") : 1.0;

# Defined name of fakemap to use
my $fakemap = $Frm->inout("_fakemap");
$fakemap = $Frm->strip_subscan($fakemap);

my $regrid = ($Frm->uhdr("RECPAR_FAKEMAP_REGRID")) ? $Frm->uhdr("RECPAR_FAKEMAP_REGRID") : 0;

my $like = get_prim_arg($_PRIM_ARGS_, "LIKE", undef);

# Obtain pixel bounds for output map
orac_print " Deriving pixel bounds... ";
my ($reflon, $reflat, $pixsize, @bounds);
if ($like) {
  $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$like");
  my ($ORAC_STATUS, @lbound) = $Mon{ndfpack_mon}->get("ndftrace","lbound");
  push(@bounds, @lbound[0..1]);
  ($ORAC_STATUS, my @ubound) = $Mon{ndfpack_mon}->get("ndftrace","ubound");
  push(@bounds, @ubound[0..1]);
  ($ORAC_STATUS, my @pixscale) = $Mon{ndfpack_mon}->get("ndftrace","fpixscale");
  $pixsize = 0.5 *($pixscale[0] + $pixscale[1]);
  _GET_MAP_CENTRE_ IMAGE=$like
  ($reflon, $reflat) = @{$_GET_MAP_CENTRE_{XYPOS}};
} else {
  my $inlist = write_file_list( $Frm->files );
  $Mon{smurf_mon}->obeyw("makemap","in=^$inlist out=! method=rebin");
  (my $ORAC_STATUS, @bounds) = $Mon{smurf_mon}->get("makemap","lbound");
  ($ORAC_STATUS, my @ubound) = $Mon{smurf_mon}->get("makemap","ubound");
  push(@bounds, @ubound);
  ($ORAC_STATUS, $reflon) = $Mon{smurf_mon}->get("makemap","reflon");
  ($ORAC_STATUS, $reflat) = $Mon{smurf_mon}->get("makemap","reflat");
  ($ORAC_STATUS, $pixsize) = $Mon{smurf_mon}->get("makemap","pixsize");
}

# Create a template image - maps are made using the tracking
# coordinate system by default
orac_print "creating template... ";
my $system = $Frm->hdr("TRACKSYS");
my $coords = new Astro::Coords( ra => $reflon, dec => $reflat,
                                units => 'sex', type => $system )
  if ($regrid);
_CREATE_REFERENCE_IMAGE_ PIXEL_SCALE=$pixsize SYSTEM=$system COORDS=$coords BOUNDS=\@bounds VERBOSE=0 GROUP=0 ADDWCS=$regrid
my $template = $_CREATE_REFERENCE_IMAGE_{REFIMAGE};

# Create the Gaussian input map now if necessary
unless ($inputmap) {
  # Check FWHM - it must be at least half the pixel scale to get a result
  my $halfpix = $pixsize/2.0;
  if ($fwhm < $halfpix) {
    orac_warn "FWHM (".(sprintf "%g", $fwhm)." arcsec) too small compared with pixel size (".(sprintf "%g", $pixsize)." arcsec)\n Setting FWHM = ".(sprintf "%g", $halfpix)." arcsec\n";
    $fwhm = $halfpix;
    $Frm->uhdr("RECPAR_FAKEMAP_FWHM", $fwhm);
  }

  # Create a Gaussian of unit height - let makemap scale it to the
  # desired peak using the fakescale parameter
  _CREATE_PSF_IMAGE_ RADIUS=$fwhm PSF=$basemap PIXSIZE=$pixsize SMOOTH=0 VERBOSE=$verbose

  # Add WCS to the Gaussian if necessary
  if ( $Frm->uhdr("RECPAR_FAKEMAP_OFFSET") || $regrid ) {
    _ADD_WCS_TO_IMAGE_ IMAGE=$basemap PIXEL_SCALE=$pixsize COORDS=$coords GROUP=0 VERBOSE=0 SYSTEM=$system
  }

  # Convert given fakescale from Jy/beam to pW, or use a pre-defined value
  if (defined $Grp->uhdr("FAKESCALE")) {
    $fakescale = $Grp->uhdr("FAKESCALE");
  } else {
    $fakescale /= $Cal->gain($Frm->uhdr("ORAC_FILTER"), "BEAM");
  }
}

# Shift the position of the original map if requested - note that in
# order to accurately assess the effect of filtering by the map-making
# process, the gaussian must be shifted an integer number of pixels
if (defined $Frm->uhdr("RECPAR_FAKEMAP_OFFSET")) {
  _GET_PIXEL_SCALE_ IMAGE=$basemap VERBOSE=0
  my @offset_pix = map { int($_/$_GET_PIXEL_SCALE_{PIXSCALE}) } @{$Frm->uhdr("RECPAR_FAKEMAP_OFFSET")};
  $Frm->uhdr("FAKEMAP_OFFSET_PIXELS", \@offset_pix);
  my @offset = map { sprintf "%.0f", ($_ * $_GET_PIXEL_SCALE_{PIXSCALE}) } @offset_pix;
  orac_print "\n  Shifting input WCS by ($offset[0],$offset[1]) arcsec, ";
  # The given offsets are how far the *source* should move - negate
  # these to turn them into offsets applied to the WCS
  my $args = "stype=absolute abs=[".(-$offset[0]).",".(-$offset[1])."] ndf=$basemap";
  $Mon{kappa_mon}->obeyw("wcsslide","$args");
}

# Regrid the input image if necessary
my $aligned = ORAC::TempFile->new();
if ($regrid) {
  orac_print "aligning image to output pixel bounds - ";
  my $args = "method=bilinear out=$aligned lbnd=! ubnd=! in=$basemap ref=$template";
  $Mon{kappa_mon}->obeyw("wcsalign","$args");
  $basemap = $aligned;
}

# Now create the fakemap to use with ndfcopy
$Mon{ndfpack_mon}->obeyw("ndfcopy","in=$basemap out=$fakemap like=$template");
$fakemap .= ".sdf" unless ($fakemap =~ /.sdf$/);
$Frm->uhdr("FAKEMAP", $fakemap);
$Frm->uhdr("FAKESCALE", $fakescale);
$Frm->uhdr("FAKEMAP_FWHM", $fwhm) if ($fwhm);
$Frm->push_intermediates($template,$fakemap);
orac_print "done\n";

# Write a FITS hdr to the file
my $fitshdr = $Frm->fits;
$fitshdr->writehdr( File => $fakemap );
