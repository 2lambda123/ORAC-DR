# -*-cperl-*-

=head1 NAME

_GET_PIXEL_SCALE_ - Determine the pixel scale for a given image

=head1 SYNOPSIS

 _GET_PIXEL_SCALE_ IMAGE=$Frm->file

 _GET_PIXEL_SCALE_ IMAGE=$Frm->file DERIVE=1 WANTMAP=1

=head1 DESCRIPTION

This primitive determines the pixel scale for a given image by
examining the information in the WCS extension. The calculation is
carried out by defining triplets of PIXEL positions in the image,
converting these into positions in the desired output frame (e.g. SKY)
and then using astDistance to compute the distance in radians between
the positions in the x- and y-directions respectively. Since field
distortion will change the scale across the image, the average of the
four corners plus the mid-point is returned.

The primitive aborts if there is no SKY frame in the image.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<DERIVE>

Flag to denote whether to derive the pixel scale from the image
manually or use the value reported by NDFTRACE. Default is 0 (use
NDFTRACE).

=item B<IMAGE>

Name of image. No default.

=item B<UNITS>

Units for returned pixel scale. Valid units are radians, arcsec,
arcmin or degrees. Default is arcsec.

=item B<VERBOSE>

Flag to indicate whether informational messages should be
given to the user. Default is 1 (true).

=item B<WANTMAP>

A flag to denote whether or not the caller wants a copy of the
pixel-to-sky coordinate mapping. If true, set to false if B<DERIVE> is
false. Default is 0 (false).

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item KAPPA

NDFTRACE

=back

=head1 OUTPUT DATA

On completion, the primitive hash C<%_GET_PIXEL_SCALE_>
contains the following keys:

=over 4

=item AREA

Pixel area in units**2

=item MAPPING

The pixel-to-sky mapping (an AstMapping object). Undef if B<WANTMAP>
is false.

=item PIXSCALE

The average pixel scale in the requested units.

=item RESULTS

Array reference with pixel scales in the X and Y directions in the
requested units.

=back

=head1 KNOWN ISSUES

The checking for the presence of the SKY frame is not very
sophisticated, and only relies on seeing if a variable is left unset.

Output frames other than SKY are not yet supported.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>,
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 Science and Technology Facilities Council.
Copyright (C) 2005-2007, 2010 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Load AST module
use Starlink::AST;

# Set the input file
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;
my $in = get_prim_arg($_PRIM_ARGS_, "IMAGE", $Obj->file);
# Throw an error if no input image
orac_throw "Error: _GET_PIXEL_SCALE_ requires a file as input \n"
  unless defined $in;

# Should I be verbose? (default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Values will be returned in these units:
my $units = get_prim_arg($_PRIM_ARGS_, "UNITS", "arcsec");

# Do we want to return the mapping?
my $wantmap = get_prim_arg($_PRIM_ARGS_, "WANTMAP", 0);

# Are we being asked to derive it ourselves? Default is no.
my $derive = get_prim_arg($_PRIM_ARGS_, "DERIVE", 0);

# DERIVE must be true if WANTMAP is specified
if ($wantmap) {
  $derive = 1;
}

# Initialise the results array
$_PRIM_ARGS_->{RESULTS} = [];

my $ORAC_STATUS;
my ($avxscale, $avyscale) = (0.0, 0.0);
my $mapping = undef;
my $in_unit;

if ( $derive ) {
  my $indomain = "PIXEL";
  # Check the desired output frame - default is SKY
  my $outdomain = "SKY";

  # Get the image properties
  _GET_DIMENSIONS_ FILE=$in
  my @dims = @{ $_GET_DIMENSIONS_{DIMS} };

  my ($skyimage, $skyimagefile);
  my $infile = $in;

  # If there are more than 2 dimensions, copy out the sky image
  if ( @dims > 2 ) {
    $skyimage = new ORAC::TempFile;
    $skyimagefile = $skyimage->file;
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$in(,,1) trim trimwcs out=$skyimagefile");
    $infile = $skyimagefile;
  }

  # Get PIXEL bounds for image
  my $lboundref = $_GET_DIMENSIONS_{LBOUND};
  my ($xmin, $ymin) = ($lboundref->[0], $lboundref->[1]);
  my $uboundref = $_GET_DIMENSIONS_{UBOUND};
  my ($xmax, $ymax) = ($uboundref->[0], $uboundref->[1]);

  # Create FrameSet from the WCS info in the input file
  my $frameset = $Frm->read_wcs( $infile );

  # Frame numbers corresponding to the given in/out domain names
  my $indom;
  my $outdom = -1;
  # Number of Frames in the FrameSet
  my $nframes = $frameset->Get( 'Nframe' );

  # Loop over the number of domains in the FrameSet to set the Frame
  # number for the specified domain
  for my $i (1 .. $nframes) {
    my $tmp_frame = $frameset->GetFrame( $i );
    my $domain = $tmp_frame->Get( 'Domain' );
    $indom = $i if ($domain eq $indomain);
    $outdom = $i if ($domain eq $outdomain);
  }

  # Check that the SKY domain exists - not fancy as it only
  # checks whether $outdom is unset
  orac_throw "Error: Image has no SKY domain \n" if ($outdom == -1);

  # Retrieve the output SkyFrame
  my $outframe = $frameset->GetFrame( $outdom );

  # Retrieve mapping between PIXEL and SKY domains
  $mapping = $frameset->GetMapping( $indom, $outdom );

  # Loop over 5 positions to calculate X and Y scale and calculate average
  my (@xpixels, @ypixels);
  for my $posindex (1..5) {
    # Set up arrays of positions to use in pixel coords: four corners
    # plus centre.
    if ( $posindex == 1 ) {
      @xpixels = ($xmin, $xmin, $xmin+1);
      @ypixels = ($ymin, $ymin+1, $ymin);
    } elsif ( $posindex == 2 ) {
      @xpixels = ($xmin, $xmin, $xmin+1);
      @ypixels = ($ymax, $ymax-1, $ymax);
    } elsif ( $posindex == 3 ) {
      @xpixels = ($xmax, $xmax, $xmax-1);
      @ypixels = ($ymax, $ymax-1, $ymax);
    } elsif ( $posindex == 4 ) {
      @xpixels = ($xmax, $xmax, $xmax-1);
      @ypixels = ($ymin, $ymin+1, $ymin);
    } elsif ( $posindex == 5 ) {
      my $xmid = int( $xmax - $xmin );
      my $ymid = int( $ymax - $ymin );
      @xpixels = ($xmid, $xmid+1, $xmid);
      @ypixels = ($ymid, $ymid, $ymid+1);
    }

    # Convert pixel positions into sky positions using the mapping we
    # derived earlier
    (my $xskyref, my $yskyref) = $mapping->Tran2( \@xpixels, \@ypixels, 1);

    # Output positions on the sky
    my @xsky = ($xskyref->[0], $xskyref->[1], $xskyref->[2] );
    my @ysky = ($yskyref->[0], $yskyref->[1], $yskyref->[2] );

    # Use astDistance to calculate the distance on the sky between the positions
    my $pt1 = [ $xsky[0], $ysky[0] ] ;
    my $pt2 = [ $xsky[2], $ysky[2] ] ;
    my $xscale = $outframe->Distance($pt1, $pt2);

    $pt2 = [ $xsky[1], $ysky[1] ] ;
    my $yscale = $outframe->Distance($pt1, $pt2);

    # Add to sum
    $avxscale += $xscale;
    $avyscale += $yscale;
  }
  # Calculate average value to use
  $avxscale /= 5;
  $avyscale /= 5;

  # Using radians
  $in_unit = "rad";

} else {
  # Alternatively, use ndftrace to get the pixel scale. This may or
  # may not be a better estimate. Note this always returns arcsec.
  $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$in");
  ($ORAC_STATUS, $avxscale, $avyscale) = $Mon{ndfpack_mon}->get("ndftrace","fpixscale");
  $in_unit = "arcsec";
}

# Now convert to correct output units
$avxscale = Astro::Coords::Angle->new( $avxscale, units => $in_unit)->in_format( $units );
$avyscale = Astro::Coords::Angle->new( $avyscale, units => $in_unit)->in_format( $units );

# Store the results in the hash
$_PRIM_ARGS_->{RESULTS} = [$avxscale, $avyscale];
$_PRIM_ARGS_->{PIXSCALE} = 0.5 * ($avxscale + $avyscale);
$_PRIM_ARGS_->{AREA} = $avxscale*$avyscale;

# If the caller would like access to the mapping then store that too
if ( $wantmap ) {
  $_PRIM_ARGS_->{MAPPING} = $mapping
}

# Format for pretty printing
if ($verbose) {
  $avxscale = sprintf "%6.2f", $avxscale;
  $avyscale = sprintf "%6.2f", $avyscale;
  orac_print " (X, Y) pixel scale is ($avxscale, $avyscale) $units\n";
  orac_print "Successfully calculated pixel scale for image\n";
}

