# -*-cperl-*-

=head1 NAME

_SCUBA2_ENG_HELLO_ - introductory primitive for the engineering pipeline

=head1 SYNOPSIS

_SCUBA2_ENG_HELLO_

=head1 DESCRIPTION

Introductory primitive for the engineering pipeline.

=head1 OUTPUT DATA

Sets the C<OBSEND> and C<BATCH> uhdr entries for the current Frame.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia.  All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Determination the observation type
my $obstype = lc($Frm->uhdr("ORAC_OBSERVATION_TYPE"));

# Determine the sequence type - define as MIXED if SEQ_TYPE subheaders
# are present
my $seq_type = ( defined $Frm->hdr("SEQ_TYPE") ) ? $Frm->hdr("SEQ_TYPE") : "MIXED";

# Flag to denote batch processing -
my $batch = ($seq_type eq "MIXED") ? 1 : 0;
$Frm->uhdr("BATCH", $batch);

# See if the OBSEND flag is set
my $obsend = ( $Frm->hdrval("OBSEND",-1) ) ? 1 : 0;
# Pass this value on to the current Frame
$Frm->uhdr("OBSEND", $obsend);

if ($obstype eq "nep") {
  # NEP: SEQ_TYPE = BIASSAW, FASTFLAT, or NOISE
  # Pass-through for NOISE only

  # Immediately quit for the BIAS ramp
  if ( $seq_type eq "BIASSAW" ) {
    orac_print "Skipping bias ramp sequence\n";
    return ORAC__TERM;
  } elsif ( $seq_type eq "FASTFLAT" ) {
    # Process FASTFLAT data and then quit
    _PROCESS_FASTFLAT_
    orac_print "Fastflat (heater ramp) data processing complete\n";
    return ORAC__TERM;
  } elsif ( $seq_type eq "MIXED" ) {
    # OK this is offline processing - don't worry about this for now
  }

  my $bias = $Frm->hdr("DETBIAS");
  my $heat = $Frm->hdr("PIXHEAT");
  if ($batch) {
    # Write out the ranges here
    my @bias = sort($Frm->hdrvals("DETBIAS"));
    my @heat = sort($Frm->hdrvals("PIXHEAT"));
    $bias = "$bias[0] to $bias[-1]";
    $heat = "$heat[0] to $heat[-1]";
  }
  orac_print "Processing ".($Frm->nfiles)." noise files for bias = $bias and heater = $heat\n";

} elsif ($obstype =~ /^iv_curves/) {
  # IV_CURVES_H or _M

} elsif ($obstype eq "ramp") {
  # RAMP

} elsif ($obstype eq "open_loop_g") {
  # OPEN_LOOP_G

}
