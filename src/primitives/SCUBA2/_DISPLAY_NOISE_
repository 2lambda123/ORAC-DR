# -*-cperl-*-

=head1 NAME

_DISPLAY_NOISE_ - Display bolometer noise

=head1 SYNOPSIS

_DISPLAY_NOISE_

=head1 DESCRIPTION

This primitive displays the bolometer noise data in a Kapview
window. Each noise image in the current Frame object is displayed in
turn, each in a separate Kapview window. An image is displayed on the
left side and a histogram on the right. The statistics (mean, median
and sigma) are reported.

The scale for the display (both the image and the histogram) is set by
the median noise value multiplied by the C<THRESH> parameter.

=head1 ARGUMENTS

This primitive supports the following arguments:

=over 4

=item B<COMP>

Component to display. Supported values are C<DATA> and C<ERR>. Default
is C<DATA>.

=item B<LOGFILE>

Flag to denote whether or not to write a log file. Default is 1 (yes).

=item B<THRESH>

Upper limit for display in units of the median noise. Default is 4.

=back

=head1 EXTERNAL TASKS

The following external tasks are used by this primitive:

=over 4

=item KAPPA:

SETTITLE, WCSFRAME

=item ORAC-DR PRIMITIVES:

_ADD_LOG_ENTRY_, _FIND_IMAGE_STATISTICS_

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Log file, C<log.bolonoise>

=head1 LOGFILE FORMAT

The log file C<log.bolonoise> contains the following entries:

=over 4

=item UT

The UT date in C<YYYYMMDD.frac> format.

=item HST

The time of the observation in Hawaii.

=item Obs

The observation number.

=item Subarray

The relevant subarray name.

=item Median

Median noise in pA Hz**-0.5.

=item Mean

Mean noise in pA Hz**-0.5.

=item Mode

Mode noise value in pA Hz**-0.5.

=item Nbol

Number of bolometers used in noise calculation.

=item NEP_eff

Effective NEP in W Hz**-0.5

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2010 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Which component is being displayed?
my $comp = lc(get_prim_arg( $_PRIM_ARGS_, "COMP", "data" ));
# Reset comp if we get something we don't recognize
$comp = "data" unless ( $comp =~ /^err/ );

# Write out a log file?
my $uselog = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);

# Threshold for displaying noise data - limit to 10 otherwise what's
# the point?
my $thr = get_prim_arg( $_PRIM_ARGS_, "THRESH", 4 );
$thr = 10 if ($thr > 10);

# Set the units - they should be the same for all files...
my $file = $Frm->file;
$Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$file");
my ($ORAC_STATUS, $units) = $Mon{ndfpack_mon}->get("ndftrace","units");
my $nepunits = $units;
$nepunits =~ s/pA/W/;

# Loop over each file in the current Frame
for my $i ( 1 .. $Frm->nfiles ) {

  # Only continue if noise data actually exists in the Frame
  last unless ($Frm->uhdr("NOISE"));

  my $noisefile = $Frm->file($i);
  my $window = $i - 1;
  my $subarray = $Frm->hdrval("SUBARRAY",$window);

  # Find statistics for reporting
  _FIND_IMAGE_STATISTICS_ IMAGE=$noisefile HISTAT=1 COMP=$comp VERBOSE=0
  my $min = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MIN};
  my $max = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MAX};

  my $mean = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEAN};
  my $median = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEDIAN};
  my $mode = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MODE};

  my $zmin = 0.0;
  my $zmax = $thr * $median;

  my $numgood = $_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMGOOD};

  # Threshold the data at ZMAX and determine how many bolometers lie
  # above that cut
  my $thresh = new ORAC::TempFile;
  my $threshfile = $thresh->file;
  my $thrargs = "in=$noisefile out=$threshfile thrhi=$zmax newhi=bad thrlo=0 newlo=0";
  $Mon{kappa_mon}->obeyw("thresh","$thrargs");
  _FIND_IMAGE_STATISTICS_ IMAGE=$threshfile HISTAT=1 COMP=$comp VERBOSE=0
  my $nthrgood = $_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMGOOD};

  # Check that we have good bolometers
  if ( $numgood > 0 ) {

    orac_print "Noise statistics for subarray $subarray ($numgood bolometers):\n", "green";
    orac_print " Median  = $median $units\n", "green";
    orac_print " Mean    = $mean $units\n", "green";
    orac_print " Mode    = $mode $units\n", "green";

    # Calculate effective NEP for this image
    my $nepfile = $noisefile . ".more.smurf.nep";
    _CALCULATE_EFFECTIVE_NEP_ IN=$nepfile
    my $effnep = $_CALCULATE_EFFECTIVE_NEP_{EFFNEP};
    if ( $effnep ) {
      $effnep = sprintf "%5.3e", $effnep;
      orac_print " NEP_eff = $effnep  $nepunits\n", "green";
    } else {
      $effnep = "*****";
    }

    $zmax = sprintf "%5.3e", $zmax;
    my $threshpc = sprintf "%2.0f", 100.0 * $nthrgood / $numgood;
    orac_print "Display shows $nthrgood bolometers ($threshpc %) below $zmax $units ($thr*median)\n\n", "green";

    # Set the title of the noise image to something meaningful
    my $obs = $Frm->hdr("OBSNUM");
    my $extra = "";
    if ($Frm->uhdr("QUICKLOOK")) {
	$extra = ($uselog) ? "/ Scan " .$Frm->hdr("NSUBSCAN") : "(mean)";
    }
    my $args = "ndf=$noisefile title='Noise map for $subarray / Obs $obs $extra'";
    $Mon{ndfpack_mon}->obeyw("settitle","$args");

    my %options = ( WINDOW => $window, ZMIN => 0, ZMAX => $zmax,
		    ZAUTOSCALE => 0, TITLE => "Noise histogram ($units)" );

    $Display->display_data($Frm, \%options, -1);

    if ($uselog) {
      my $logtype = "bolonoise";
      my @names = ("Subarray", "Median", "Mean", "Mode", "Nbol", "NEP_eff");
      my @values = ($subarray, $median, $mean, $mode, $numgood, $effnep);
      _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names PARLIST=BRIEF
    }
  } else {
    orac_warn "Skipping display of $noisefile - no good bolometers\n";
  }

}
