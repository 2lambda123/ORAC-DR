# -*-cperl-*-

=head1 NAME

_DISPLAY_NOISE_ - Display bolometer noise

=head1 SYNOPSIS

_DISPLAY_NOISE_

=head1 DESCRIPTION

This primitive displays the bolometer noise data in a Kapview
window. The subarrays are mosaicked in the focal plane and this image
is displayed, allowing a direct comparison of the relative noise in
each subarray. The noise image is displayed in the top row and a
histogram in the bottom row. The statistics (mean, median and sigma)
and effective NEP are reported separately for each subarray.

The scale for the display (both the image and the histogram) is set by
the median noise value multiplied by the C<THRESH> parameter.

=head1 ARGUMENTS

This primitive supports the following arguments:

=over 4

=item B<COMP>

Component to display. Supported values are C<DATA> and C<ERR>. Default
is C<DATA>.

=item B<LOGFILE>

Flag to denote whether or not to write a log file. Default is 1 (yes).

=item B<THRESH>

Upper limit for display in units of the median noise. Default is 4.

=back

=head1 EXTERNAL TASKS

The following external tasks are used by this primitive:

=over 4

=item KAPPA:

NDFTRACE, SETTITLE, THRESH

=item ORAC-DR PRIMITIVES:

_ADD_LOG_ENTRY_, _CALCULATE_ARRAY_NEP_, _FIND_IMAGE_STATISTICS_, _MAKE_MOSAIC_FPLANE_

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Log file, C<log.bolonoise>.

The mosaic of the noise images has a suffix C<_noimos> or C<_avnoimos>
for the noise and average-noise mosaics respectively

=head1 LOGFILE FORMAT

The log file C<log.bolonoise> contains the following entries:

=over 4

=item UT

The UT date in C<YYYYMMDD.frac> format.

=item HST

The time of the observation in Hawaii.

=item Obs

The observation number.

=item Subarray

The relevant subarray name.

=item Median

Median noise in pA Hz**-0.5.

=item Mean

Mean noise in pA Hz**-0.5.

=item Mode

Mode noise value in pA Hz**-0.5.

=item Nbol

Number of bolometers used in noise calculation.

=item NEP_eff

Effective NEP in W Hz**-0.5

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2011 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Only continue if noise data actually exists in the Frame
return ORAC__OK unless ($Frm->uhdr("NOISE"));

# Which component is being displayed?
my $comp = lc(get_prim_arg( $_PRIM_ARGS_, "COMP", "data" ));
# Reset comp if we get something we don't recognize
$comp = "data" unless ( $comp =~ /^err/ );

# Write out a log file?
my $uselog = get_prim_arg( $_PRIM_ARGS_, "LOGFILE", 1 );

# Threshold for displaying noise data - limit to 10 times the median
# otherwise what's the point?
my $thr = get_prim_arg( $_PRIM_ARGS_, "THRESH", 4 );
$thr = 10 if ($thr > 10);

# Set the units - they should be the same for all files...
my $file = $Frm->file;
$Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$file");
my ($ORAC_STATUS, $units) = $Mon{ndfpack_mon}->get("ndftrace","units");
my $nepunits = $units;
$nepunits =~ s/pA/W/;

# Retrieve the hash (reference) with the number of bolometers used in
# the NEP calculations
my $nepgoodbol = $Frm->uhdr("NEPGOODBOL");

my $plotmax = 0;
my $sumnumgood = 0;
# Loop over each file in the current Frame
for my $i ( 1 .. $Frm->nfiles ) {
  my $noisefile = $Frm->file($i);
  my $subarray = $Frm->hdrval("SUBARRAY",$i-1);
  my $nbol = (defined $nepgoodbol) ? $nepgoodbol->{$subarray} : 0;

  if ($nbol > 0) {

  # Find statistics for reporting
  _FIND_IMAGE_STATISTICS_ IMAGE=$noisefile HISTAT=1 COMP=$comp VERBOSE=0
  my $min = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MIN};
  my $max = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MAX};
  my $mean = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEAN};
  my $median = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEDIAN};
  my $mode = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MODE};
  my $numgood = $_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMGOOD};
  $sumnumgood += $numgood;

  my $zmax = $thr * $median;
  $plotmax = $zmax if ($zmax > $plotmax);

  # Check that we have good bolometers
  if ( $numgood > 0 ) {
    my $noise = "Noise";
    if ($Frm->uhdr("QUICKLOOK") && !$uselog) {
      $noise = "Mean noise";
    } elsif ($Frm->uhdr("ORAC_OBJECT") eq "DARK") {
      $noise = "Dark noise";
    }
    orac_print "$noise statistics for subarray $subarray ($numgood bolometers):\n", "green";
    orac_print " Median  = $median $units\n", "green";
    orac_print " Mean    = $mean $units\n", "green";
    orac_print " Mode    = $mode $units\n", "green";

    # Calculate effective NEP for this image
    my $nepfile = $noisefile . ".more.smurf.nep";
    _CALCULATE_ARRAY_NEP_ IN=$nepfile
    my $effnep = $_CALCULATE_ARRAY_NEP_{NEPVAL};
    if ( $effnep ) {
      $effnep = sprintf "%5.3e", $effnep;
      orac_print " NEP_eff = $effnep  $nepunits\n", "green";
    } else {
      orac_warn "Unable to calculate effective NEP\n";
      $effnep = "*****";
    }

    if ($uselog) {
      my $logtype = "bolonoise";
      my @names = ("Subarray", "Median", "Mean", "Mode", "Nbol", "NEP_eff", "Shutter");
      my @values = ($subarray, $median, $mean, $mode, $numgood, $effnep, $Frm->hdr("SHUTTER"));
      _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names PARLIST=BRIEF
    }
  } else {
    orac_warn "Skipping analysis of $noisefile - no good bolometers\n";
  }
} else {
  orac_warn "Skipping analysis of $subarray - no good bolometers\n";
}
}

# If there are good bolometers, proceed with making a mosaic and displaying it
if ($sumnumgood > 0) {
  # Reference subarray
  my $short = ($Frm->uhdr("ORAC_FILTER") =~ /450/) ? 1 : 0;
  my $refsub =  ($short) ? "s4d" : "s8b";
  # Mosaic noise files
  my %ref;
  # The current Frame should contain 1 file per subarray
  my @files = $Frm->files;
  foreach my $file (@files) {
    # Never trust the filenames...
    my $fitshdr = new Astro::FITS::Header::NDF( File => $file );
    $ref{lc($fitshdr->value("SUBARRAY"))} = $file;
  }
  my $ref = $ref{$refsub};
  unless ($ref) {
    # Pick first one...
    my @subs = sort keys %ref;
    $refsub = $subs[0];
    $ref = $ref{$refsub};
  }
  # Output file name for responsivity mosaic: _noimos
  my $noimos = "_noimos";
  my $wave = ($short) ? "450 um" : "850 um";
  # Set the title of the noise image to something meaningful
  my $obs = $Frm->hdr("OBSNUM");
  my $extra = "";
  if ($Frm->uhdr("QUICKLOOK")) {
    $extra = "/ scan " .$Frm->hdr("NSUBSCAN"). " (QL)";
  } elsif ($Frm->uhdr("SUMMIT")) {
    $extra = "/ scan " .$Frm->hdr("NSUBSCAN"). " (SUMMIT)";
  }
  my $title = "$wave noise: obs $obs $extra";
  if ($Frm->uhdr("AVNOISE")) {
    $noimos = "_avnoimos";
    $title = "Average noise (".($Frm->uhdr("AVNOISE"))." files)";
  }

  my $out = $Frm->rewrite_outfile_subarray(scalar($Frm->inout($noimos)));
  my @out;

  my %refimage = ( refsub => $refsub, refimage => $ref );
  _MAKE_MOSAIC_FPLANE_ INFILES=\@files OUT=$out REFERENCE=\%refimage

  my $args = "ndf=$out title='$title'";
  $Mon{ndfpack_mon}->obeyw("settitle","$args");

  # Threshold the data at ZMAX and determine how many bolometers lie
  # above that cut
  my $thresh = new ORAC::TempFile;
  my $threshfile = $thresh->file;
  my $thrargs = "in=$out out=$threshfile thrhi=$plotmax newhi=bad thrlo=0 newlo=0";
  $Mon{kappa_mon}->obeyw("thresh","$thrargs");
  _FIND_IMAGE_STATISTICS_ IMAGE=$threshfile COMP=$comp VERBOSE=0
  my $nthrgood = $_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMGOOD};
  $plotmax = sprintf "%5.3e", $plotmax;
  my $threshpc = sprintf "%2.0f", 100.0 * $nthrgood / $sumnumgood;
  orac_print "Histogram shows $nthrgood bolometers ($threshpc %) below $plotmax $units\n\n", "green";

  my $tmpFrm = $Frm->new();
  $tmpFrm->files($out);
  my %options = ( ZMIN => 0, ZMAX => $plotmax, WINDOW => 1,
		  ZAUTOSCALE => 0, TITLE => $title );

  $Display->display_data($tmpFrm, \%options, -1);
  $Frm->push_intermediates($out);
} else {
    orac_warn "Skipping display of focal-plane mosaic - no good bolometers\n";
}
