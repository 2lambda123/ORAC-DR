# -*-cperl-*-

=head1 NAME

_RETRIEVE_GOOD_DATA_FRAME_ - retrieve files with good flatfields

=head1 SYNOPSIS

_RETRIEVE_GOOD_DATA_FRAME_

=head1 DESCRIPTION

This primitive examines the flatfield solutions from the current Frame
object and returns a list of data files for those subarrays which have
good flatfield solutions.

The files with good flatfield solutions are returned in the primitive
hash as a list (C<FILES>) or indexed by subarray (C<FILES_SUB>). If
there are no good flatfields, neither key is defined. Note that the
list of files in C<FILES> has the fastflats at the end of the list if
requested to accommodate the summit pipeline.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<FASTFLATS>

Flag to denote whether to return the raw fastflat files along with the
data. Default is 1 (yes).

=item B<FRAME>

The Frame object from which good files are retrieved. Default is
C<$Frm>.

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 2

=item ORAC-DR PRIMITIVES

_RETRIEVE_FASTFLATS_

=back

=head1 OUTPUT DATA

The primitive hash contains two entries if successful: C<FILES> is an
array reference with the list of files and C<FILES_SUB> which contains
a hash reference of the files indexed by subarray.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2012 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $Frmobj = get_prim_arg($_PRIM_ARGS_, "FRAME", $Frm);

my $incfastflats = get_prim_arg($_PRIM_ARGS_, "FASTFLATS", 1);

# Localize $Frm here to enable flatfield retrieval
{
  my $Frm = $Frmobj;

  # Retrieve the list of datafiles in current Frame
  my %allfiles = $Frm->get_files_by_subarray;
  my (%goodfiles, @goodfiles);
  if ($Frm->uhdr("FLATFIELD")) {
    # If the data are flatfielded, then by definition they will be good
    %goodfiles = %allfiles;
    @goodfiles = $Frm->files;
  } else {
    # First step - retrieve the flatfield solutions to determine which
    # subarrays have good solutions
    _RETRIEVE_FASTFLATS_ TYPE=SOL
    my %subarrays = %{$_RETRIEVE_FASTFLATS_{NBOLO_SUB}}
      if (defined $_RETRIEVE_FASTFLATS_{NBOLO_SUB});
    my $nbolosum = $_RETRIEVE_FASTFLATS_{NBOLO_SUM};

    if (%subarrays) {
      # Store data files with good flatfields
      foreach my $subarray (sort keys %allfiles) {
	$goodfiles{$subarray} = $allfiles{$subarray} if ($subarrays{$subarray} > 0);
      }
      @goodfiles = map { @{$goodfiles{$_}} } sort keys %goodfiles;

      # Retrieve and store raw flatfield files if necessary. Note this
      # must be done as a separate step to ensure the summit pipeline
      # creates unique filenames for flatfielded data.
      my %fastflats;
      if ($incfastflats && $nbolosum > 0) {
	_RETRIEVE_FASTFLATS_ TYPE=RAW
	if (defined $_RETRIEVE_FASTFLATS_{FASTFLATS_SUB}) {
	  %fastflats = %{$_RETRIEVE_FASTFLATS_{FASTFLATS_SUB}};
	  foreach my $subarray (sort keys %goodfiles) {
	    my @files = @{$goodfiles{$subarray}};
	    push(@files, $fastflats{$subarray});
	    $goodfiles{$subarray} = \@files;
	  }
	  # Adding the fastflats to the end of the list is necessary
	  # for the summit pipeline
	  push(@goodfiles, @{$_RETRIEVE_FASTFLATS_{FASTFLATS}});
	} else {
	  orac_err "Flatfield solutions were found, but no corresponding raw files\n";
	}
      }

      # Store the results or issue a warning
      unless (%goodfiles) {
	orac_warn "All flatfields failed - unable to retrieve any good data\n";
      }
    } else {
      # Only warn for the SUMMIT and QL pipelines
      orac_warn "Unable to retrieve flatfield solutions - assuming all data are good\n"
	if ($Frm->uhdr("SUMMIT") || $Frm->uhdr("QUICKLOOK"));
      %goodfiles = %allfiles;
      @goodfiles = $Frm->files;;
    }
  }
  $_PRIM_ARGS_->{FILES_SUB} = \%goodfiles;
  $_PRIM_ARGS_->{FILES} = [ @goodfiles ];

} # Temporary override of $Frm goes out of scope here
