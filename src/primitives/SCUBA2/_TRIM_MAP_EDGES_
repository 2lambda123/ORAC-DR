# -*-cperl-*-

=head1 NAME

_TRIM_MAP_EDGES_ - trim the edges of a map to create a map of given size

=head1 SYNOPSIS

 _TRIM_MAP_EDGES_

 _TRIM_MAP_EDGES_ METHOD=circle RADIUS=1800

 _TRIM_MAP_EDGES_ GROUP=1

=head1 DESCRIPTION

This primitive is designed to trim an input image to the size given by
the map parameters in the header or to a user-specified size. Its
primary use is to remove noisy data at the edge of a map.

The default output map size is given by the C<MAP_WDTH> and
C<MAP_HGHT> FITS header values for a rectangular output map, or the
smaller of the two input image dimensions if the output map is to be
circular.

The user may specify the desired map width and height or a map radius
(for a circular output region) via recipe parameters.

If given as recipe parameters, the requested map size is checked
against the input image dimensions and the smaller of the two sizes is
used for the output image.

=head1 ARGUMENTS

This primitive supports the following arguments.

=over 2

=item B<GROUP>

If true, use the current Group file, otherwise use the current
Frame. Default is 0 (false).

=item B<METHOD>

Crop method to use. May be C<rectangle> to create a rectangular output
map or C<circle> to created a circular output map. May be overridden
with the C<CROP_METHOD> recipe parameter. Default is C<rectangle>.

=item B<RADIUS>

Radius of circular output map in arcsec. Only accessed if
B<METHOD>=C<circle>. Default is half the smallest map dimension. A
value of 0 will use the smaller of the C<MAP_WDTH> and C<MAP_HGHT>
FITS headers.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is true.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

NDFCOPY, NDFTRACE

=item ORAC-DR primitives:

_CROP_IMAGE_REGION_, _MASK_IMAGE_

=back

=head1 OUTPUT DATA

The current object is updated with the trimmed file and tagged
C<crop>.

=head1 OUTPUT FILES

Creates output file with the suffix C<_crop>.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;

if ($Obj->file_exists) {
  my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);
  $verbose = $Frm->uhdr("RECPAR_VERBOSE") if (defined $Frm->uhdr("RECPAR_VERBOSE"));

  # Input file
  my $in = $Obj->file;
  # Output file name is taken from the recipe parameter iff a single
  # file is to be processed
  my $out = $Obj->inout("_crop");

  orac_print "Trimming image to specified map size\n";

  # Check the input map dimensions and pixel scale
  $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$in");
  my ($ORAC_STATUS, @dims) = $Mon{ndfpack_mon}->get("ndftrace","dims");
  ($ORAC_STATUS, my @pixscale) = $Mon{ndfpack_mon}->get("ndftrace","fpixscale");
  my $mapwidth = $pixscale[0]*$dims[0];
  my $maphght = $pixscale[1]*$dims[1];
  # Define default map size as the smallest dimension
  my $mapsize = ($dims[0] < $dims[1]) ? $mapwidth : $maphght;

  my $trimtype = lc(get_prim_arg($_PRIM_ARGS_, "METHOD", "rectangle"));
  $trimtype = $Frm->uhdr("RECPAR_CROP_METHOD")
    if (defined $Frm->uhdr("RECPAR_CROP_METHOD") &&
	$Frm->uhdr("RECPAR_CROP_METHOD") !~ /^stat/i);

  if ($trimtype eq "circle") {
    my $halfmapsize = 0.5*$mapsize;
    my $mapradius = get_prim_arg($_PRIM_ARGS_, "RADIUS", $halfmapsize);
    $mapradius = $Frm->uhdr("RECPAR_MAP_RADIUS")
      if (defined $Frm->uhdr("RECPAR_MAP_RADIUS"));

    # Map radius cannot exceed the existing map size: set radius to
    # half the smallest map dimension
    if ($mapradius > $halfmapsize) {
      $mapradius = $halfmapsize;
      orac_warn "Output image radius cannot exceed input map size ($mapradius arcsec)\n"
    } elsif ($mapradius == 0) {
      # "autoscale" from FITS header
      $mapradius = ($Frm->hdr("MAP_HGHT") < $Frm->hdr("MAP_WDTH")) ?
	0.5*$Frm->hdr("MAP_HGHT") : 0.5*$Frm->hdr("MAP_WDTH");
    }
    orac_print "Output image will be a circle of radius $mapradius arcsec\n" if $verbose;
    # Trim image to the specified radius
    my $masked = $Obj->inout("_tmpmask");
    _MASK_IMAGE_ INVERT=1 IMAGE=$in MASKED=$masked RADIUS=$mapradius
    # Shrink the image by eliminating bad pixels around the edge
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$masked out=$out trimbad");
  } else {
    # Output image will be rectangular: check for recipe parameters
    # for overrides to the map size. It's not necessary to check if
    # they are smaller than the existing map dimensions as KAPPA
    # regionmask deals with that itself.
    my $extraparams = "";
    my $newwidth = $Frm->uhdr("RECPAR_MAP_WIDTH")
      if (defined $Frm->uhdr("RECPAR_MAP_WIDTH"));
    my $newheight = $Frm->uhdr("RECPAR_MAP_HEIGHT")
      if (defined $Frm->uhdr("RECPAR_MAP_HEIGHT"));

    $extraparams .= " WIDTH=$newwidth" if (defined $newwidth);
    $extraparams .= " HEIGHT=$newheight" if (defined $newheight);

    if ( $extraparams ne "" ) {
      orac_print "Output image will have".$extraparams." arcsec\n" if $verbose;
    } else {
      orac_print "Trimming $in...\n" if $verbose;
    }

    # Trim image to the specified size
    _CROP_IMAGE_REGION_ IN=$in OUT=$out $extraparams
  }

  # Store trimmed file
  $Obj->files($out);
  $Obj->tagset("crop");
}
