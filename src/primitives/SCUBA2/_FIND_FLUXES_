# -*-cperl-*-

=head1 NAME

_FIND_FLUXES_ - Determine the peak and integrated flux of a source

=head1 SYNOPSIS

 _FIND_FLUXES_ RADIUS=30

 _FIND_FLUXES_ TAG=matchfilt

=head1 DESCRIPTION

Finds the peak and total flux of source in an image by fitting and
aperture photometry.

The current object is not updated.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<FITBOX>

Size of region to use in fitting the source in pixels. No default so
the relevant primitives can determine their own.

=item B<GROUP>

If true, use the current Group file as input, otherwise use the
current Frame. Default is 0 (false: use current Frame).

=item B<IMAGE>

Name of an image to use in calculations. Overrides all other methods
of obtaining the image (B<GROUP> and B<TAG>).

=item B<LOGFILE>

A flag to indicate whether log files should be written containing the
results of the flux and noise calculations. Default is true.

=item B<RADIUS>

Radius of aperture to use for aperture photometry. Default is 30
arcsec.

=item B<TAG>

The image with the given tag will be retrieved and used if the tag
exists in the current object. Default is C<undef> which will use the
current file in the object.

=item B<VERBOSE>

Flag to indicate whether informational messages should be
given to the user. Default is true.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item ORAC-DR PRIMITIVES

_ADD_LOG_ENTRY_, _APERTURE_PHOTOMETRY_, _FIND_MAP_PEAK_

=back

=head1 NOTES

This primitive is designed to work on a single image and will abort if
the current object contains more than one file.

Data should be calibrated before calling this primitive so that
meaningful values are logged.

=head1 OUTPUT DATA

The primitive hash returns no keys if the user specifies writing the
results to a logfile. If no logfile is to be written then the
following keys are set:

=over 4

=item INTFLUX

Reference to array of integrated fluxes. Undef if no sources found.

=item PEAKFLUX

Reference to array of peak fluxes. Undef if no sources found.

=back

=head1 OUTPUT FILES

The results are written to a log file called C<log.flux>.

=head1 LOGFILE FORMAT

The logfile has the following columns:

=over 2

=item UT

The UT date in C<YYYYMMDD.frac> format.

=item HST

The time of the observation in Hawaii.

=item Obs

The observation number.

=item Source

The source name.

=item Mode

The observing mode.

=item Filter

The filter associated with the current result.

=item Elevation

The elevation of the observation (deg).

=item CSO

Equivalent CSO tau derived from the tau used to reduce
the observation.

=item Tau

The mean optical depth at the observing wavelength.

=item Name

Name of file.

=item Peak

Peak flux in current units.

=item ErrPk

Uncertainty in peak flux (in same units).

=item Total

Total flux in current units * area. Will be C<NaN> if flux could not
be determined.

=item Err

Uncertainty in total flux (in same units).

=item Radius

Radius of aperture used in aperture photometry.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2007-2008,2013 the University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Determine if the user wants to use the current Grp or Frm image
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ( $group ) ? $Grp : $Frm;
my $image_default = $Obj->file if ($Obj->nfiles == 1 && $Obj->file_exists);

my $image_tag = get_prim_arg($_PRIM_ARGS_, "TAG", undef);
if ($image_tag && $Obj->tagexists($image_tag)) {
  $Obj->tagset("find_fluxes");
  $Obj->tagretrieve($image_tag);
  $image_default = $Obj->file;
}

my $image = get_prim_arg($_PRIM_ARGS_, "IMAGE", $image_default);
my $proceed = (defined $image) ? 1 : 0;

# Initialize the log files if necessary
my ($pklog, $intlog);

if ($proceed) {
  # Write logfiles (default to yes)
  my $uselog = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);

  # Should I be verbose? (Default to yes)
  my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

  # Set aperture radius - default is 30 arcsec
  my $radius = get_prim_arg($_PRIM_ARGS_, "RADIUS", 30);

  # Initial guess at source position
  my $initpos = get_prim_arg($_PRIM_ARGS_, "INITPOS", undef);

  # Leave the default undef so _FIND_MAP_PEAK_ will work its dynamic
  # default magic
  my $fitbox = get_prim_arg($_PRIM_ARGS_, "FITBOX", undef);

  # Find the peak signal in the image
  _FIND_MAP_PEAK_ GROUP=$group FITPEAK=1 INITPOS=$initpos PLOTFIT=1 FITBOX=$fitbox

  # Find the integrated intensity within the given aperture. Note that
  # the image should have a flat background in order to obtain an
  # accurate result. Also, the peak position is not necessary as the
  # photometry routine will perform centroiding before calculating the flux.
  _APERTURE_PHOTOMETRY_ RADIUS=$radius VERBOSE=0 GROUP=$group

  my %results = ( TOTALFLUX => $_APERTURE_PHOTOMETRY_{TOTALFLUX},
		  TOTALFLUXERR => $_APERTURE_PHOTOMETRY_{TOTALFLUXERR},
		  PEAK => $_FIND_MAP_PEAK_{PEAK},
		  PEAKERR => $_FIND_MAP_PEAK_{PEAKERR},
		  POSITION => $_FIND_MAP_PEAK_{POSITION},
		  FITPAR => $_FIND_MAP_PEAK_{BEAM}
	       );

  # Now provide feedback to user - print to screen and/or write to log file
  if ($verbose || $uselog) {
    my $peak = (defined $results{PEAK}) ? (sprintf "%.2f", $results{PEAK}) : "NaN";
    my $peakerr = (defined $results{PEAKERR}) ? (sprintf "%.2f", $results{PEAKERR})
      : 0.0;
    my $totalflux = ( defined $results{TOTALFLUX}) ? (sprintf "%.2f", $results{TOTALFLUX}) : "NaN";
    my $totalfluxerr = ( defined $results{TOTALFLUXERR}) ? (sprintf "%.2f", $results{TOTALFLUXERR}) : 0.0;
    if ($verbose) {
      orac_print "Fluxes for ".($Obj->hdr("OBJECT"))." ($image):\n";
      orac_print " Peak  = $peak +/- $peakerr\n";
      orac_print " Total = $totalflux +/- $totalfluxerr\n";
    }
    if ($uselog) {
      # Write a log file
      orac_print "Storing results in log.flux\n";
      my $logtype = "flux";
      my @names = ("Name", "Peak", "ErrPk", "Total", "Err", "Radius");
      my @values = ( $image, $peak, $peakerr, $totalflux, $totalfluxerr, $radius );
      _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names
    }
  }

  $_FIND_FLUXES_{RESULTS} = \%results;
}
$Obj->tagretrieve("find_fluxes") if (defined $image_tag && $Obj->tagexists($image_tag));
