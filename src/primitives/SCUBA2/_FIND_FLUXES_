# -*-cperl-*-

=head1 NAME

_FIND_FLUXES_ - Determine the peak and integrated flux of sources in image

=head1 SYNOPSIS

_FIND_FLUXES_ RADIUS=30

=head1 DESCRIPTION

Finds the peak and total flux of all sources in an image either by
fitting or aperture photometry.

The total flux can be determined by fitting a Sersic profile to the
source and integrating underneath that profile using a standard
integral solution. If the fit is poor (defined by the axis ratio
falling outside a pre-defined range) then the default aperture
photometry method is used instead.

The frame object is not updated.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

If true, use the current Group file as input, otherwise use the
current Frame. Default is 0 (false: use current Frame).

=item B<LOGFILE>

A flag to indicate whether log files should be written containing the
results of the flux and noise calculations. Default is true.

=item B<RADIUS>

Radius of apertures to use for aperture photometry (if USEPSF is 0)
and/or noise estimates. Default is 20 arcsec. A special value of -1
may be specified in which case the aperture is set by the major and
minor axes of the object.

=item B<USEPSF>

A flag to indicate whether to calculate the source flux from either a
fit the source using the Kappa PSF function or using an aperture
photometry method. Default is to use aperture photometry (USEPSF = 0).

=item B<VERBOSE>

Flag to indicate whether informational messages should be
given to the user. Default is true.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

WCSATTRIB

=item ORAC-DR PRIMITIVES

_FIND_INTEGRATED_INTENSITY_, _FIT_SOURCE_, _FIND_SOURCES_,
_GET_PIXEL_SCALE_, _GET_LOG_PARAMETERS_

=back

=head1 NOTES

This primitive is designed to work on a single image and will abort if
the current Frame object contains more than one file.

Data should be calibrated before calling this primitive so that
meaningful values are logged.

=head1 OUTPUT DATA

The primitive hash returns no keys if the user specifies writing the
results to a logfile. If no logfile is to be written then the
following keys are set:

=over 4

=item INTFLUX

Reference to array of integrated fluxes. Undef if no sources found.

=item PEAKFLUX

Reference to array of peak fluxes. Undef if no sources found.

=back

=head1 OUTPUT FILES

The following log files are created:

=over 4

=item C<log.peak>

Log of peak flux values.

=item C<log.integrated>

Log of integrated flux values.

=back

=head1 LOGFILE FORMAT

The logfiles have the following columns:

=over 4

=item UT

The UT date in C<YYYYMMDD.frac> format.

=item HST

The time of the observation in Hawaii.

=item Obs

The observation number.

=item Source

The source name.

=item Mode

The observing mode.

=item Filter

The filter associated with the current result.

=item Elevation

The elevation of the observation.

=item CSO

Equivalent CSO tau derived from the tau used to reduce
the observation.

=item Tau

The tau value used for the reduction.

=item Seeing

The seeing value as stored in the header.

=item ID

Source ID.

=item RA

J2000 Right Ascension of source in sexagesimal format.

=item Dec

J2000 Declination of source in sexagesimal format.

=item Peak / Flux

Peak or total flux (for C<log.peak> and C<log.integrated>
respectively).

=item FWHM

FWHM in arcsec. Not written for C<log.integrated>.

=item Units

Units of flux measurement.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2007-2008 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Write logfiles (default to yes)
my $uselog = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);

# Should I be verbose? (Default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Check the desired flux calculation method.
my $usepsf = get_prim_arg($_PRIM_ARGS_, "USEPSF", 0);

# Set aperture radius - default is 20 arcsec
my $radius = get_prim_arg($_PRIM_ARGS_, "RADIUS", 20);

# Initialize the log files if necessary
my ($pklog, $intlog);

# Determine if the user wants to use the current Grp or Frm image
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $in;
my $Obj = ( $group ) ? $Grp : $Frm;
if ( $Obj->nfiles == 1 ) {
  $in = $Obj->file;
} else {
  orac_throw "Error: _FIND_FLUXES_ must be run after images have been combined\n";
}

# What if the Group file does not exist yet?
if ( $group  && $Grp->file_exists ) {
  my (@intfluxes, @pkfluxes);

  # Are the data calibrated?
  # If we are observing a standard source then just find the centroid.

  # Find all of the sources in the current frame
  _FIND_SOURCES_ IMAGE=$in
  # Retrieve catalogue
  my $catalogue = $_FIND_SOURCES_{CATALOGUE};

  # Extractor does not understand offset coordinate systems, so we
  # must check and ensure we are working in an absolute system. In
  # practice, this means setting SkyRefIs = Ignored, AlignOffset = 0
  # and System = ICRS. These attributes are reset on successful exit.
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=get name=system(1)");
  my ($ORAC_STATUS, $cosys_in) = $Mon{ndfpack_mon}->get("wcsattrib","value");
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=get name=skyrefis");
  ($ORAC_STATUS, my $skyrefis) = $Mon{ndfpack_mon}->get("wcsattrib","value");
  my $offset = ( lc($skyrefis) eq "origin" ) ? 1 : 0;
  if ( $offset ) {
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=mset setting='system(1)=icrs,skyrefis=ignored,alignoffset=0'");
  }

  # Check that the catalogue has sources in it
  if ( $catalogue->sizeof > 0 ) {
    # Check if installed version of Kappa has a PSF task we can use
    if ( $usepsf && starversion_lt('kappa', 'V0.15-0')) {
      # warn
      orac_warn "Your kappa version is too old to use PSF. Using stats to find total flux\n";
      $usepsf = 0;
    }

    # Define a flux conversion which allows the calculated `flux' to be
    # converted into a real value depending on whether the data are
    # calibrated in `per beam' or `per square arcsec' units (or even
    # uncalibrated).
    my $fluxcorr;
    # Determine Pixel scale in arcsec
    _GET_PIXEL_SCALE_ IMAGE=$in VERBOSE=0
    my $pixelarea = $_GET_PIXEL_SCALE_{AREA};
    my $units = $Obj->uhdr("ORAC_DATA_UNITS");
    if ($units =~ /beam/) {
      # Retrieve beam dimensions
      my $fwhm = $Cal->fwhm;
      # Load constants such as pi for calculating beam area
      use Astro::PAL qw/ :constants /;
      my $beamarea = DPI * $fwhm * $fwhm / 4.0; # sq arcsec
      $fluxcorr = ($usepsf) ? $beamarea : $beamarea/$pixelarea ;
    } elsif ($units =~ /arcsec/) {
      $fluxcorr = ($usepsf) ? 1.0 : 1.0/$pixelarea;
    } elsif ($units =~ /pW/) { # pW is effectively pW/pixel
      $fluxcorr = ($usepsf) ? $pixelarea : 1.0;
    } else {
      orac_throw "Error: unknown units, $units \n";
    }
    # The flux units will be data_units * area (for calibrated data), so
    # strip off the per beam or per arcsec**2 portion of the units
    # string. Uncalibrated data will be unchanged
    my @fluxunits = split(/\//, $units, 2);

    my $ORAC_STATUS;

    # Inform user what's going on if desired...
    if ( $verbose ) {
      my $fitmethod;
      if ($usepsf) {
	$fitmethod = "fitting a PSF";
      } else {
	$fitmethod = "aperture photometry";
      }
      orac_print "Calculating fluxes by $fitmethod\n";
    }

    # Define all the parameters we might need
    my ($amp, $fwhm, $axisr, $totalflux);

    # Set up log file entries - these will be the same for all sources in the field
    if ($uselog) {
      my $time = gmtime();
      # Peak fluxes
      $pklog = new ORAC::LogFile("log.peak");
      $pklog->header("#Peak flux log file - created on $time UT",
		     "#\n# UT                HST   Obs Source       Mode         Filter  El CSO    Tau  Seeing ID    RA          Dec       Peak       FWHM Units",
		     "#----------------------------------------------------------------------------------------------------------------------------------------");
      # Integrated fluxes
      $intlog = new ORAC::LogFile("log.integrated");
      $intlog->header("#Integrated flux log file - created on $time UT",
		      "#\n# UT                HST   Obs Source       Mode         Filter El CSO    Tau  Seeing ID    RA          Dec       Flux Units",
		      "#---------------------------------------------------------------------------------------------------------------------------");
    }
    # Retrieve logging parameters anyway
    _GET_LOG_PARAMETERS_ GROUP=$group
    my ( $uttime, $hst, $obsnum, $src, $mode, $filter, $el, $cso, $tau, $see )
      = @{ $_GET_LOG_PARAMETERS_{PARAMS} };

    # Loop over all sources in the catalogue and run desired
    # flux-calculation method
    for my $i ( 1 .. $catalogue->sizeof ) {
      my $source = $catalogue->starbyindex( $i - 1 ); # Catalogue is 0-indexed
      # Retrieve Astro::Coords object associated with current source
      my $coords = $source->coords;
      my @xy = ($coords->ra, $coords->dec);

      if ( $usepsf ) {
	# Fit the source
	_FIT_SOURCE_ METHOD=PSF IMAGE=$in XYPOS=\@xy VERBOSE=0
	my $amplitude = $_FIT_SOURCE_{AMPLITUDE};
	$amp = $amplitude->[0];
	my $flux = $_FIT_SOURCE_{TOTALFLUX};
	$totalflux = $flux->[0];
	my $minfwhm = $_FIT_SOURCE_{MINFWHM};
	$fwhm = $minfwhm->[0];
	$axisr = $_FIT_SOURCE_{AXISR};
	# Calculate geometric mean FWHM for logging
	$fwhm *= sqrt($axisr);
      } else {
	# Use an aperture photometry method
	_FIND_INTEGRATED_INTENSITY_ RADIUS=$radius IMAGE=$in XYPOS=\@xy
	$totalflux = $_FIND_INTEGRATED_INTENSITY_{TOTALFLUX};
	$amp = $_FIND_INTEGRATED_INTENSITY_{PEAKFLUX};
	$fwhm = $Cal->fwhm;
      }

      # Convert flux to meaningful units
      $totalflux /= $fluxcorr;

      # Write info to log file if requested
      if ( $uselog ) {
	# Format for printing
	$totalflux = sprintf "%6.3f", $totalflux;
	$amp = sprintf "%6.3f", $amp;
	$fwhm = sprintf "%6.2f", $fwhm;
	# Set source ID - assumes there will be <100 objects in image
	my $srcnum = sprintf "%02d", $i;

	# Write the entry:
	$pklog->addentry( "$uttime $hst $obsnum $src $mode   $filter   $el $cso $tau $see  $srcnum $xy[0] $xy[1]  $amp  $fwhm $fluxunits[0]");
	$intlog->addentry("$uttime $hst $obsnum $src $mode   $filter   $el $cso $tau $see  $srcnum $xy[0] $xy[1]  $totalflux $fluxunits[0]");
      } else {
	push (@intfluxes, $totalflux);
	push (@pkfluxes, $amp);
      }
    }
  } else {
    # Issue an error and skip the rest
    orac_warn "Unable to determine fluxes, no sources found\n";
  }

  # Reset WCS to input
  if ( $offset ) {
    my $args = "ndf=$in mode=mset setting='system(1)=".$cosys_in.",skyrefis=origin,alignoffset=1'";
    $Mon{ndfpack_mon}->obeyw("wcsattrib","$args");
  }

  unless ($uselog) {
    $_FIND_FLUXES_{INTFLUX} = ($catalogue->sizeof) ? \@intfluxes : undef;
    $_FIND_FLUXES_{PEAKFLUX} = ($catalogue->sizeof) ? \@pkfluxes : undef;
  }

}
