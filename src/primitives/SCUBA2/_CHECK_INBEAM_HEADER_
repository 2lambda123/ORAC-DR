# vim: syn=perl

=head1 NAME

_CHECK_INBEAM_HEADER - Checks the INBEAM header

=head1 SYNOPSIS

_CHECK_INBEAM_HEADER_ POL2=0 FTS2=0

=head1 DESCRIPTION

This primitive can be called to check that the INBEAM header
contains certain elements and does not contain other elements.

=head1 NOTES

For each possible inbeam component, there are three possibilities:

=over 4

=item True argument given

This primitive checks that the component is in the INBEAM header.

=item False argument (other than undef) given

This primitive checks that the component is not in the INBEAM header.

=item Argument not given (or set to undef)

This primitive does not check whether the component is in the INBEAM header
or not.

=back

The following components are supported:

=over 4

=item FTS2

=item POL2

=back

=head1 AUTHOR

Graham Bell E<lt>g.bell@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Define the INBEAM checks that we can perform.  This hash is indexed
# by the possible primitive arguments.  Each check is a reference to
# a subroutine which takes a list of INBEAM header components.
my %checks = (
    'FTS2' => sub {
        # Look for a specific FTS-2 header in the INBEAM header.
        return scalar grep {lc($_) eq 'fts2'} @_;
    },
    'POL2' => sub {
        # Look for any INBEAM components starting with "pol".
        return scalar grep {$_ =~ /^pol/i} @_;
    },
);

my @inbeam = split ' ', $Frm->hdrval('INBEAM');

while (my ($comp, $check) = each %checks) {
    my $request = get_prim_arg($_PRIM_ARGS_, $comp, undef);

    # If request is undef, do not check this component.
    next unless defined $request;

    my $actual = $check->(@inbeam);

    if ($request and not $actual) {
        orac_termerr($comp . ' is not in the beam.');
    }
    elsif ($actual and not $request) {
        orac_termerr($comp . ' is in the beam but is not wanted.');
    }
}
