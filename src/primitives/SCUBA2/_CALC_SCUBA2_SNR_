# -*-cperl-*-

=head1 NAME

_CALC_SCUBA2_SNR_ - calculate a signal-to-noise ratio image

=head1 SYNOPSIS

 _CALC_SCUBA2_SNR_

 _CALC_SCUBA2_SNR_ GROUP=1 STORE=1

=head1 DESCRIPTION

Creates a signal-to-noise ratio image using the data and variance
components of a given file. Some basic statistics are reported on
completion.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

Flag to denote whether to use the current Group or Frame file. Default
is 0 (use the current Frame).

=item B<IN>

Name of input image. Use file determined by the B<GROUP> parameter
above if not specified.

=item B<OUT>

Name of output image. Default is to use the C<inout> method to create
an output file with the suffix C<_snr>.

=item B<STORE>

A flag to denote whether or not the output image is to be stored in
the current Frame or Group. Default is 0 (no).

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 1 (yes).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

MAKESNR

=item ORAC-DR PRIMITIVES

_FIND_IMAGE_STATISTICS_

=back

=head1 OUTPUT DATA

The Frame uhdr contains the entry C<SNRMAP> which is 1 if the
signal-to-noise ratio image was calculated and stored in the current
object, zero otherwise.

=head1 OUTPUT FILES

If left to use defaults, creates a file with the suffix
C<_snr>. Otherwise creates the output file specified by the B<OUT>
parameter.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2012 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Is the input file from the current Frame or Group?
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;

my $proceed = 1;
if ( $group ) {
  $proceed = $Grp->lastmember($Frm);
}

if ( $proceed ) {
  # Verbose flag
  my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

  # Is the output file to be stored in the current object?
  my $store = get_prim_arg($_PRIM_ARGS_, "STORE", 0);

  # Obtain input image - default to current file in given object
  my $in = get_prim_arg($_PRIM_ARGS_, "IN", $Obj->file);

  # For Group processing, it may be that the desired input file is the
  # matched-filtered output which is stored as the second file in the Group
  my $use_mf = get_prim_arg($_PRIM_ARGS_, "USE_MF", 0);
  $in = $Obj->file(2) if ($group && $use_mf);

  # Obtain output image - use object inout method if not specified
  my $out = get_prim_arg($_PRIM_ARGS_, "OUT", undef);
  $out = $Obj->inout("_snr") unless ($out);

  # Only do this if the file actually has a VARIANCE component.
  $Mon{ndfpack_mon}->obeyw("ndftrace", "ndf=$in");
  my ($ORAC_STATUS, $hasvar) = $Mon{ndfpack_mon}->get("ndftrace", "variance");

  my $results;
  if( $hasvar eq "TRUE" ) {
    # Use all data by setting minvar=0
    $Mon{kappa_mon}->obeyw("makesnr","in=$in out=$out minvar=0");

    my $region = ($group && defined $Grp->uhdr("WHITEN_BOX")) ? $Grp->uhdr("WHITEN_BOX") : 0;
    # Report some basic statistics
    _FIND_IMAGE_STATISTICS_ IMAGE=$out VERBOSE=0 HISTAT=0 REGION=$region
    $results = $_FIND_IMAGE_STATISTICS_{RESULTS};

    if ($verbose) {
      my $min = sprintf "%5.2f", $results->{MIN};
      my $max = sprintf "%5.2f", $results->{MAX};
      my $sigma = sprintf "%5.2f", $results->{SIGMA};
      my $numgood = $results->{NUMGOOD};
      my $extra = ($region) ? " (whitened)" : "";
      orac_print "SNR image range $min to $max: sigma = $sigma from $numgood pixels$extra\n";
    }

    # We need to set the PRODUCT header properly in the output regardless
    # of whether we are storing it in the Object or not. If we are not
    # we go through the motions anyhow. The reason is that we propagate a
    # PRODUCT header with value "reduced" which is now incorrect.
    my $thisObj = $Obj;
    if (!$store) {
      $thisObj = $Obj->new();
    }

    # Update PRODUCT and store filenames in object
    my $prevsync = $thisObj->allow_header_sync;
    $thisObj->allow_header_sync(1);
    $thisObj->product( "snr" );
    $thisObj->files($out);
    $thisObj->allow_header_sync( $prevsync );

    # Store a Frame uhdr entry to indicate it now contains a S/N map
    $Frm->uhdr("SNRMAP",$store);
  } else {
    orac_warn "No SNR created: input file, $in, has no variance component\n";
  }
  $_CALC_SCUBA2_SNR_{RESULTS} = $results;
}
