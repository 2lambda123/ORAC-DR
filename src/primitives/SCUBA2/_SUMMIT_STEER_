# -*-cperl-*-

=head1 NAME

_SUMMIT_STEER_ - steering primitive for the Summit pipeline

=head1 SYNOPSIS

_SUMMIT_STEER_

=head1 DESCRIPTION

This primitive checks and sets a number of uhdr entries which dictate
the processing of data in the Summit pipeline.

If the percentage completion criteria are satisfied and a new Group
image has been created, no further processing will take place; the
recipe simply exits.

This primitive should ONLY be called in summit recipes (denoted by
the C<_SUMMIT> suffix).

=head1 OUTPUT DATA

The Frame has two new uhdr entries called C<SUMMIT> and C<TCS_INDEX>.
The former is a flag to indicate that the smmit pipeline is running;
the latter stores the final TCS index entry (in the JCMT state
structure) for data in the current Frame.

The Group uhdr has the entry C<LAST_INDEX> set to 1 if it a) does not
exist or b) exists but is less than the current TCS index indicating a
new observation has started. (This flag is later updated with the
value of the current Frame C<TCS_INDEX> when data are processed into a
map.)

If a new observation corresponding to an existing Group has started,
the C<NEWIMAGE>, C<OBSCOMP> and C<SCANCOMP> flags are reset to 0.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2010 University of British Columbia.  All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# This is the summit pipeline
$Frm->uhdr("SUMMIT", 1);

# Store current TCS_INDEX - this will be VAL__BADI for dark data but
# this shouldn't affect any of the decision making below.
$Frm->uhdr("TCS_INDEX", $Frm->jcmtstate("TCS_INDEX", "end"));

# Check and set the LAST_INDEX flag
if ( defined $Grp->uhdr("LAST_INDEX") ) {
  # If it exists already check if a new observation has started and
  # reset it to the current value. A new obs has started if the
  # TCS_INDEX is now less than the LAST_INDEX. Note that this will not
  # store a new value of LAST_INDEX if it is already 1, but if that's
  # the case then it won't matter.
  if ( $Frm->uhdr("TCS_INDEX") < $Grp->uhdr("LAST_INDEX")) {
    $Grp->uhdr("LAST_INDEX",1);
    # Reset percentage and scan-pattern completion and new image flags
    # so we process data from a new observation
    $Grp->uhdr("OBSCOMP",0);
    $Grp->uhdr("SCANCOMP",0);
    $Grp->uhdr("NEWIMAGE",0);
  }
} else {
  # No pre-existing value so set it to 1
  $Grp->uhdr("LAST_INDEX", 1);
}

# Now that we've checked for a new observation, ignore new data if a
# new Group image was created from SCAN data using the
# percentage-completion criterion - easiest option is just to
# terminate the recipe
if ( $Grp->uhdr("NEWIMAGE") && $Grp->uhdr("OBSCOMP") ) {
  orac_warn "Percentage completion criteria satisifed - skipping remaining data\n";
  return ORAC__TERM;
}
