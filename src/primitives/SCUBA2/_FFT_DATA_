# -*-perl-*-

=head1 NAME

_FFT_DATA_ - Fourier transform time stream data

=head1 SYNOPSIS

 _FFT_DATA_ POWER=1

=head1 DESCRIPTION

This primitive calculates the forward Fourier transform for all files
in the current Frame object with time stream data. The datafiles are
first concatenated if requested in order to sample low frequencies
effectively.

The Frame is updated with the new output files.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<CONCAT>

Flag to denote whether or not to concatenate the data before computing
the FFT. Default is 1 (yes).

=item B<POLAR>

Flag to indicate whether the FFT is written in Polar form. Default is
0 (no).

=item B<POWER>

Flag to indicate whether the FFT is written in Polar form with squared
amplitudes. Default is 0 (no). If true, then B<POLAR> is also set to
true.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item SMURF:

SC2CONCAT, SC2FFT

=back

=head1 NOTES

This primitives works on Frames only. At the moment only forward
transforms are supported.

=head1 OUTPUT FILES

Creates an output file with a suffix of C<_fft>, corresponding to each
input file.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>,

=head1 COPYRIGHT

Copyright (C) 2008 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Check for input arguments

# Concatenate the data?
my $concat = get_prim_arg( $_PRIM_ARGS_, "CONCAT", 1 );

# Is the FT to be written in Polar form?
my $polar = get_prim_arg( $_PRIM_ARGS_, "POLAR", 0 );
$polar = ($polar) ? "polar" : "nopolar";

# Is the FT to be written in Polar form with squared amplitudes?
my $power = get_prim_arg( $_PRIM_ARGS_, "POWER", 0);
# Use power flag to set some other things before setting to a string
my ($ext, $ftpow) = ($power) ? ("_pow", "power spectrum")
                             : ("_fft", "Fourier transform");
# Set power to a string for passing to sc2fft
$power = ($power) ? "power" : "nopower";

# Polar must be true if power is true
$polar = "polar" if ( $power eq "power" );

# Should I be verbose (default to no)
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 0);

# Announce what's going on
orac_print "Calculating $ftpow for current data:\n";

# Concatenate time streams if requested
if ( $concat ) {
  # Calculate the number of files per subarray to see if we actually
  # need to concatenate
  my $nsubarrays = $Frm->numsubarrays;
  my $nfiles = $Frm->nfiles;
  if ( $nfiles/$nsubarrays > 1.0 ) {
    orac_print "Concatenating time streams...";
    my ($inlist, $conlist) = write_file_list_inout( $Frm, "_con", 1 );
    my $outfiles = "concat.$$";
    $Mon{smurf_mon}->obeyw("sc2concat","in=^$inlist out=^$conlist outfiles=$outfiles");
    my @confiles = read_file_list( $outfiles );
    $Frm->files( @confiles );
    orac_print " done\n";
    unlink $outfiles;
  }
}

# Transform each file in the current frame
my @ffts;
my $nfiles = $Frm->nfiles;
my $nfilesfiles = ( $nfiles == 1 ) ? "1 file" : "$nfiles files";
orac_print "Calculating the FFT of $nfilesfiles...";
for my $i ( 1 .. $nfiles ) {
  # Get input and output file names
  my ($in, $fft) = $Frm->inout($ext, $i);

  # Run sc2fft
  my $args = "in=$in out=$fft $polar $power";
  $Mon{smurf_mon}->obeyw("sc2fft","$args");
  push (@ffts, $fft);
}
orac_print "done\n";

# Register with Frame object if successful
$Frm->files(@ffts) if ( defined $ffts[0] );
