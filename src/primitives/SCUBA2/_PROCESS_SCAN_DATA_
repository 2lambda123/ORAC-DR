# -*-cperl-*-

=head1 NAME

_PROCESS_SCAN_DATA_ - deal with scan mode data, making an image if appropriate

=head1 SYNOPSIS

_PROCESS_SCAN_DATA_ PERCENT_CMP=75

_PROCESS_SCAN_DATA_ METHOD=REBIN

_PROCESS_SCAN_DATA_ METHOD=QL

=head1 DESCRIPTION

A general-purpose primitive which processes scan data according to
given criteria. The processing is directed by the map-making method
and, if the iterative map-maker is to be used, the
percentage-completion parameter which delays the creation of a map
until a certain proportion of the observation has been completed. If
the criteria are not satisfied, the data are flatfielded as an
intermediate step which will help speed up the final map-making step.

For the simple rebinning map-maker, the data have the atmosphere
subtracted and are extinction corrected before creating the map.

The quick-look map-maker may also be used.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<METHOD>

Method to use in making the map. Valid options are C<ITERATE>,
C<REBIN>, or C<QL>. Default is C<ITERATE>.

=item B<PERCENT_CMP>

If specified, this number is the minimum percentage of the observation
that has been completed. The default is 0 to process each file as it
appears on disk. Only accessed if B<METHOD> is C<ITERATE>.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item ORAC-DR PRIMITIVES

_EXTINCTION_CORRECT_FRAME_, _FLATFIELD_, _MAKEMAP_FRAME_,
_QLMAKEMAP_FRAME_, _REMOVE_PLANE_FROM_IMAGE_

=back

=head1 NOTES

This primitive is primarily designed for the SUMMIT pipeline only.

=head1 OUTPUT DATA

If the completion criteria are not satisfied the Frame uhdr entry
C<NOCALIB> is set to 1, otherwise set to 0.

=head1 OUTPUT FILES

Flatfielded data with suffix C<_ff> are written out during execution,
but deleted once a map has been made (C<ITERATE> only).

A frame mosaic file with extension C<_fmos> will exist (once the
percentage-completion criteria are satisfied, if appropriate).

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

if ( $Frm->tagexists("dark") ) {
  # Set the NOCALIB flag to ensure the data are not calibrated
  $Frm->uhdr("NOCALIB",1);
} else {
  # Map-making method: iterate or rebin
  my $method = lc(get_prim_arg($_PRIM_ARGS_, "METHOD", "iterate"));

  # Choose map-making method
  if ( $method =~ /^it/ ) {
    # #### ITERATE ####

    my $scancomp = 0;
    my $obscomp = $Frm->uhdr("OBSEND");
    my $completion;
    my $duration;

    # Look at the sequence length but only do this if we are not
    # using a TCS_INDEX. The problem being that we pretty much guarantee
    # to be making a final map with the last couple of subscans in it.
    if (!$Grp->uhdr("USE_TCS_INDEX") && defined $Frm->uhdr("SEQLEN_FRAME")) {
      my $seqlen = $Frm->uhdr("SEQLEN_FRAME");
      my $prev = $Grp->uhdr("PREV_SEQLEN");
      if (defined $prev) {
        if ($seqlen < $prev) {
          orac_print "Detected short file of $seqlen steps. Assuming final file in sequence.\n",
            "green";

	  # Tell the pipeline that the observation has effectively
	  # ended
          $Frm->uhdr("OBSEND",1);
          # And indicate that the end has been seen
          $obscomp = 1;
        }
      }
      $Grp->uhdr("PREV_SEQLEN", $seqlen);
    }

    if ($Cal->iscalsource($Frm->hdr("OBJECT"))) {
      # Just a placeholder to catch this case - not sure that anything
      # needs to be done
    } elsif ($Grp->uhdr("USE_TCS_INDEX")) {
      # Percentage-completion parameter - default to 0 to pick up every
      # file as it is written to disk.
      $completion = get_prim_arg($_PRIM_ARGS_, "PERCENT_CMP", 0);

      # Determine the new_index flag which indicates the scan pattern
      # has been completed at least once since the last time this
      # primitive was called.
      if ( $Frm->uhdr("TCS_INDEX") > $Grp->uhdr("LAST_INDEX") ) {
        $scancomp = 1;
        $Grp->uhdr("SCANCOMP",$scancomp);
      } else {
        # Disable checking of percentage-completion parameter if a map
        # has been made as a result of the scan pattern being completed
        unless ($Grp->uhdr("SCANCOMP")) {
          $scancomp = 0;
          # Only take notice of the completion parameter for
          # observations which consist of a single pass of the scan
          # pattern. Use a special value of obscomp of -1 to indicate
          # that the percentage completion criteria have been satisfied
          # but the pipeline is waiting for one more file to see if the
          # TCS_INDEX has changed.
          if ($Frm->uhdr("PERCENT_CMP") > $completion && $completion > 75) {
            $obscomp = ($Grp->uhdr("OBSCOMP") == -1) ? 1 : -1;
          }
        }
      }
    } else {
      # Use duration. For a daisy every 3 files seems reasonable.
      # Unless we have seen above that the observation looks like it is finishing
      if ( $obscomp ||
           (defined $Grp->uhdr("TIME_SINCE_LAST_MAP") &&
            $Grp->uhdr("TIME_SINCE_LAST_MAP") > 85 ) ) {
        # Can make a map
        $scancomp = 1;
        $duration = $Grp->uhdr("TIME_SINCE_LAST_MAP");
        $Grp->uhdr("SCANCOMP", $scancomp );
        $Grp->uhdr("TIME_SINCE_LAST_MAP",0);
      }
    }
    $Grp->uhdr("OBSCOMP",$obscomp);

    # Time to make a new map...
    if ( $obscomp == 1 || $scancomp ) {
      my $infiles;
      if ( $scancomp ) {
	# Pass in the new data to makemap
	if (defined $duration) {
	  orac_print "$duration sec since last image created - making new image\n", "green";
	} else {
	  orac_print "Scan pattern completed - making image\n", "green";
	}
	$infiles = "NEW";
      } elsif ( $obscomp ) {
	# Pass all the current data to makemap
	if (defined $completion) {
	  orac_print "Observation greater than $completion % complete - making image\n", "green";
	} elsif (defined $duration) {
	  orac_print "Observation complete - making image\n", "green";
	}
	$infiles = "OBS";
      } else {
	# Pass all the current data to makemap
	orac_print "Observation finished - making image\n", "green";
	$infiles = ($Grp->uhdr("SCANCOMP")) ? "NEW" : "OBS";
      }

      # If we're making a map, we may not need to flatfield the data
      # first. There are two instances where this might happen. The
      # first is that this is the first Frame in the Group - so just
      # go ahead and make a map without flatfielding the data first.
      my $previousff = ($Grp->num > 0) ? 1 : 0;
      # The second is if a new Group image was made during the
      # previous pass through this recipe so that the only data to
      # make a map from are raw, unflatfielded files from the current
      # Frame. In this case the Group product will be defined as
      # "newimage".
      if ($Grp->product && $Grp->product eq "newimage") {
	$previousff = 0;
      }

      if ($Cal->iscalsource($Frm->hdr("OBJECT"))) {
	orac_print "Making map of calibrator using all data\n", "green";
	$previousff = 1 unless ($Grp->num == 0);
      }

      if ($previousff) {
	# Makemap can't handle a mix of flatfielded and raw data, so
	# flatfield these data before continuing
	_FLATFIELD_
      }
      _MAKEMAP_FRAME_ METHOD=ITER INFILES=$infiles

      # Now that data have been processed, set the LAST_INDEX flag
      # to the current TCS_INDEX
      $Grp->uhdr("LAST_INDEX", $Frm->uhdr("TCS_INDEX"));

      # Set other flags which control downstream processing if a map
      # was made
      if ( $Frm->product && $Frm->product eq "newimage" ) {
	# UNSET the NOCALIB flag now we have a map so data will be
	# calibrated
	$Frm->uhdr("NOCALIB",0);
	# Set the OBSEND flag so that a new Group file can be created -
	# assuming that the WAIT flag is being used for
	# _MAKE_MOSAIC_GROUP_
	$Frm->uhdr("OBSEND",1);
      }
    } else {
      # If there is insufficient data to pass to makemap, do something
      # useful, such as flatfield the data
      orac_print "Not enough data yet to make an image - proceeding with flatfield\n";

      _FLATFIELD_
      # Set the NOCALIB flag so data won't be calibrated
      $Frm->uhdr("NOCALIB",1);
    }

  } elsif ( $method =~ /^re/ ) {
    # #### REBIN ####

    # If the rebin method has been chosen, we must separately remove the
    # atmosphere and correct for extinction
    _REMOVE_PLANE_FROM_IMAGE_
    _EXTINCTION_CORRECT_FRAME_

    # Create image with current data
    _MAKEMAP_FRAME_ METHOD=REBIN

    # Make sure the NOCALIB flag is UNset
    $Frm->uhdr("NOCALIB",0);

  } elsif ( $method =~ /^q/ ) {
    # #### QUICKLOOK ####

    # Create an image with the current data
    _QLMAKEMAP_FRAME_

    # Make sure the NOCALIB flag is UNset
    $Frm->uhdr("NOCALIB",0);
  }
}
