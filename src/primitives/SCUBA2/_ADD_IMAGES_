# -*-cperl-*-

=head1 NAME

_ADD_IMAGES_ - Add together a series of 2-D images

=head1 SYNOPSIS

 _ADD_IMAGES_ OUT=$out

 _ADD_IMAGES_ OUT=$out INLIST=$imagelistref

=head1 DESCRIPTION

This primitive adds up a list of given images and writes the sum to an
output file. It is designed for adding sub-components within an NDF
file and writing the sum to an existing file, rather than the
top-level data components. The user specifies the names of one or more
NDF components, assumed to be located under the C<.MORE.SMURF>
hierarchy. Extensions of the same names are written to the output
file (overwriting existing ones).

This is useful for calculating the total exposure time and weights for
a series of images which have been mosaicked together.

=head1 ARGUMENTS

=over 4

=item B<BOUNDS>

Perl reference to array of four values defining the bounds of the NDF
section. Optional.

=item B<COMPS>

Comma-separated list of NDF components to add. Default is the
C<EXP_TIME> and C<WEIGHTS> components under the C<.MORE.SMURF>
extension.

=item B<INLIST>

Perl reference to array of image file names. Default list will be
obtained from the current Frame object.

=item B<OUT>

Name of output file in which to write new NDF components corresponding
to those given in the B<COMPS> parameter. This file must already exist
and the existing version(s) of the given NDF components are
deleted. No default.

=back

=head1 EXTERNAL TASKS

=over 4

=item KAPPA:

ERASE, MSTATS

=back

=head1 NOTES

The sum is carried out on a pixel-for-pixel basis so the images must
be aligned to a common coordinate system before calling this
primitive.

Each of the given components must have a defined Frame uhdr entry
before those NDFs will be added together. There is no check that the
given components actually exist within the file.

This step should be carried out B<after> mosaicking so that a suitable
output file already exists.

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2008,2012 the University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $add_images = "add_images";

# Should I be verbose (default to no)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Output file - no default
my $outfile = get_prim_arg( $_PRIM_ARGS_, "OUT", undef );
orac_err "_ADD_IMAGES_ must be given an output file name\n"
  unless ($outfile);

# Optional input list
my $inref = get_prim_arg( $_PRIM_ARGS_, "INLIST", undef );
if ( defined $inref && (ref($inref) eq "ARRAY") ) {
  $Frm->tagset($add_images);
  $Frm->files(@{$inref});
}

# Name of components to add if defined - default to exp_time and weights
my $complist = uc(get_prim_arg( $_PRIM_ARGS_, "COMPS", "EXP_TIME,WEIGHTS" ));
# Split on commas to get list of components
my @comps = split(/,/, $complist);
# List of supported components with a description for user feedback
my %known_comps = ( EXP_TIME => "exposure time",
		    EFF_TIME => "effective integration time",
		    WEIGHTS => "weights",
		  );

# Now see if the image bounds have been given
my $bounds = get_prim_arg( $_PRIM_ARGS_, "BOUNDS", undef);
my $boundstr = "";
# Note that BOUNDS will be ignored if it is not an array ref, no error is thrown
if ( defined $bounds && (ref($bounds) eq "ARRAY") ) {
  my @bounds = @{ $bounds };
  # Check we have at least 4 numbers
  orac_throw "Error: BOUNDS array contains too few elements (must be 4)\n"
    if ( scalar(@bounds) < 4 );
  $boundstr = "($bounds[0]:$bounds[2],$bounds[1]:$bounds[3])";
}

# Number of input files - if there is only one file then do nothing
if ( $Frm->nfiles > 1 ) {
  foreach my $comp ( @comps ) {
    # Check that the chosen component "exists"
    if ( $Frm->uhdr("$comp") ) {
      # Add component to end of output file name if necessary
      my $out = $outfile.".MORE.SMURF.".$comp;
      # Delete the existing version of the current component in the output file
      $Mon{ndfpack_mon}->obeyw("erase","object=$out ok=true");
      # Feedback for user
      orac_print "Calculating total $known_comps{$comp}... " if ($verbose);

      # Use MSTATS with estimator=sum
      my $inlist = write_file_list(map { $_.".MORE.SMURF.".$comp.$boundstr } $Frm->files);
      my $args = "in=^$inlist wlim=0 variance=f trim=false estimator=sum single=false out=$out";
      $Mon{kappa_mon}->obeyw("mstats","$args");
    }
  }
  orac_print "done\n" if ($verbose);
}

# Restore Frame to input state if necessary
$Frm->tagretrieve($add_images) if ($Frm->tagexists($add_images));
