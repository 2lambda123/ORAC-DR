# -*-cperl-*-

=head1 NAME

_GET_CHECKRMS_DATA_FROM_HEADER_ - collect metadata for logging RMS/NEFD data

=head1 SYNOPSIS

 _GET_CHECKRMS_DATA_FROM_HEADER_

 _GET_CHECKRMS_DATA_FROM_HEADER_ GROUP=1

=head1 DESCRIPTION

This primitive obtains a number of variables from the current
Frame/Group header and stores them for downstream use. The numbers are
collected on a per-observation basis. It deals with the cases
sometimes encountered in the SUMMIT pipeline where data are picked up
from only some of the subarrays, and, for the case of Group objects,
knows to begin the process again when starting a new observation in
the same Group.

The values are stored in a hash reference which is in turn stored in
the current Frame/Group uhdr.

=head1 ARGUMENTS

This primitive supports the following argument:

=over 4

=item B<GROUP>

If true, use the current Group file. Otherwise, use the current
Frame. Default is 0 (false).

=back

=head1 EXTERNAL TASKS

None.

=head1 NOTES

Undefined values in the output hash reference are stored as C<NaN>.

=head1 OUTPUT DATA

The uhdr of the current object contains the entry C<CHECK_RMS_DATA>
which stores a hash reference with the following keys:

=over 4

=item csosum - sum of 225-GHz optical depths

=item elsum - sum of elevation values (degrees)

=item FILTER - current filter

=item NSUBSCAN - number of most recent subscan

=item numval - number of values in each summation

=item OBSNUM - current observation number

=item tausum - sum of optical depth values

=item tauzsum - sum of zenith optical depth values

=item telapsed - elapsed time of observation (sec)

=item transum - sum of line-of-sight transmissions

=back

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Only proceed for pointing or science observations
if ($Frm->hdr("OBS_TYPE") =~ /pointing|science/i) {
  # Group or Frame procesing?
  my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
  my $Obj = ($group) ? $Grp : $Frm;
  my $grpfrm = ($group) ? "Group" : "Frame";

  # Store the map size used for calculating statistics
  if (defined $Frm->uhdr("RECPAR_MAP_RADIUS")) {
    $Frm->uhdr("CHECK_RMS_RADIUS", $Frm->uhdr("RECPAR_MAP_RADIUS"));
  } else {
    $Frm->uhdr("CHECK_RMS_RADIUS", 90);
  }

  # For parsing DATE-OBS/DATE-END FITS headers
  use DateTime::Format::ISO8601;

  # First check if we have a single header to deal with (either
  # NSUBSCAN is not in subheaders or the number of files in the object
  # is only 1)
  if (defined $Frm->hdr("NSUBSCAN") || $Frm->nfiles == 1) {
    # Single subscan in Frame
    if ($Frm->hdr("SEQ_TYPE") =~ /point|science/i) {
      my $dt_obs = DateTime::Format::ISO8601->parse_datetime($Frm->hdr("DATE-OBS"));
      my $dt_end = DateTime::Format::ISO8601->parse_datetime($Frm->hdr("DATE-END"));
      my $t_elapsed = $dt_end->epoch - $dt_obs->epoch;
      my ($taust, $taustatus) = JCMT::Tau::SCUBA2::get_tau( $Frm->hdr("FILTER"), "CSO", $Frm->hdr("WVMTAUST"));
      (my $tauen, $taustatus) = JCMT::Tau::SCUBA2::get_tau( $Frm->hdr("FILTER"), "CSO", $Frm->hdr("WVMTAUEN"));
      # Check if previous data exist that must be added to
      if (defined $Obj->uhdr("CHECK_RMS_DATA")) {
        my %checkrms = %{$Obj->uhdr("CHECK_RMS_DATA")};
        # Proceed if the current subscan is different from the last
        # one stored - this means that those instances where a single
        # subarray turns up after the others will not add unnecessary
        # values to the data
        if ($Frm->hdr("NSUBSCAN") != $checkrms{NSUBSCAN}) {
          # Accumulate values if the OBSNUM is the same or if a Group
          # file exists and the Group is being analyzed
          if ($Frm->hdr("OBSNUM") == $checkrms{OBSNUM} ||
              ($group && $Grp->file_exists)) {
            # Accumulate
            orac_print "Accumulating CHECK_RMS data for current $grpfrm (single entry)\n";
            $checkrms{numval}++;
            $checkrms{elsum} += $Frm->hdr("ELEND");
            $checkrms{csosum} += $Frm->hdr("WVMTAUEN");
            $checkrms{tauzsum} += $tauen;
            $checkrms{tausum} += ($tauen * $Frm->hdr("AMEND"));
            $checkrms{transum} += (exp(-$tauen * $Frm->hdr("AMEND")));
            $checkrms{telapsed} += $t_elapsed;
          } else {
            # Otherwise reset and start again - this should only happen for groups
            orac_print "New observation in same $grpfrm - storing new entries\n";
            $checkrms{OBSNUM} = $Frm->hdr("OBSNUM");
            $checkrms{tauzsum} = $taust + $tauen;
            $checkrms{tausum} = $taust*$Frm->hdr("AMSTART") + $tauen*$Frm->hdr("AMEND");
            $checkrms{transum} = exp(-$taust*$Frm->hdr("AMSTART")) + exp(-$tauen*$Frm->hdr("AMEND"));
            $checkrms{csosum} = $Frm->hdr("WVMTAUST") + $Frm->hdr("WVMTAUEN");
            $checkrms{elsum} = $Frm->hdr("ELSTART") + $Frm->hdr("ELEND");
            $checkrms{numval} = 2;
            $checkrms{telapsed} = $t_elapsed;
          }
          $checkrms{NSUBSCAN} = $Frm->hdr("NSUBSCAN");
          # Store results in uhdr
          $Obj->uhdr("CHECK_RMS_DATA", \%checkrms);
        }
      } else {
        # Retrieve and store relevant info
        orac_print "Beginning storage of CHECK_RMS data for new $grpfrm (single entry)\n";
        my %checkrms = ( NSUBSCAN => $Frm->hdr("NSUBSCAN"),
                         OBSNUM => $Frm->hdr("OBSNUM"),
                         FILTER => $Frm->hdr("FILTER"),
                         elsum => ($Frm->hdr("ELSTART") + $Frm->hdr("ELEND")),
                         csosum => ($Frm->hdr("WVMTAUST") + $Frm->hdr("WVMTAUEN")),
                         tauzsum => ($taust + $tauen),
                         tausum => ($taust * $Frm->hdr("AMSTART") +
                                    $tauen * $Frm->hdr("AMEND")),
                         transum => (exp(-$taust*$Frm->hdr("AMSTART")) +
                                     exp(-$tauen*$Frm->hdr("AMEND"))),
                         telapsed => $t_elapsed,
                         numval => 2
                       );

        # Store results in Group uhdr
        $Obj->uhdr("CHECK_RMS_DATA", \%checkrms);
      }
    }
  } else {
    # Multiple subscans in Frame - this should not be reached in PICARD

    # Things get fiddly here - need to allow for the case where data
    # turns up for only some of the subarrays

    # First, check for multiple subarrays and sort data by subarray
    my $maxscan = 0;
    my $subarray = undef;
    # Find the subarray with the most recent subscan number -
    # store that and the corresponding subscan number
    for (my $i = 0; $i < $Frm->nfiles(); $i ++) {
      next unless $Frm->hdrval('SEQ_TYPE', $i) =~ /point|science/i;

      my $nsubscan = $Frm->hdrval('NSUBSCAN', $i);

      if ($nsubscan > $maxscan) {
        $maxscan = $nsubscan;
        $subarray = $Frm->hdrval('SUBARRAY', $i);
      }
    }

    # Proceed if the Frame contains science data
    if (defined $subarray) {
      # Retrieve existing RMS/NEFD data
      my %checkrms = %{$Obj->uhdr("CHECK_RMS_DATA")}
        if (defined $Obj->uhdr("CHECK_RMS_DATA"));

      # Calculate the sum of the various things of interest - exclude
      # the starting values for now, they will be added later if
      # necessary
      my %data = (elsum => 0, csosum => 0, tauzsum => 0, tausum => 0, transum => 0,
                  numval => 0);
      # Initial subheader is necessary for selecting the right values
      my $i_minscan = undef;
      # Plus keep track of the final (most recent) subheader to get end values
      my $i_maxscan = undef;
      for (my $i = 0; $i < $Frm->nfiles(); $i ++) {
        # Skip non-science sequences
        next unless $Frm->hdrval('SEQ_TYPE', $i) =~ /point|science/i;
        # Skip entries for other subarrays.
        next unless $Frm->hdrval('SUBARRAY', $i) eq $subarray;
        # Skip this subheader if the subscan number is the same as the
        # existing one since the values will have already been
        # counted. This catches the times where data for one subarray
        # turns after the others have already been included.
        next if (%checkrms && $checkrms{NSUBSCAN} == $Frm->hdrval('NSUBSCAN', $i));
        # Define the reference subheader
        $i_minscan = $i unless defined $i_minscan;
        # Accumulate values
        $data{elsum} += $Frm->hdrval('ELEND', $i);
        $data{csosum} += $Frm->hdrval('WVMTAUEN', $i);
        my ($tauen, $taustatus) = JCMT::Tau::SCUBA2::get_tau($Frm->hdr("FILTER"),
                                                             "CSO",
                                                             $Frm->hdrval('WVMTAUEN', $i));
        $data{tauzsum} += $tauen;
        $data{tausum}  += ($tauen * $Frm->hdrval('AMEND', $i));
        $data{transum} += (exp(-$tauen * $Frm->hdrval('AMEND', $i)));
        $data{numval}++;

        # Store the most recent subheader
        $i_maxscan = $i if $Frm->hdrval('NSUBSCAN', $i) == $maxscan;
      }

      # Proceed if we have valid first/last subheaders
      if ((defined $i_minscan) && (defined $i_maxscan)) {
        my ($taust, $taustatus) = JCMT::Tau::SCUBA2::get_tau($Frm->hdr("FILTER"),
                                                             "CSO",
                                                             $Frm->hdrval('WVMTAUST', $i_minscan));

        my $dt_obs = DateTime::Format::ISO8601->parse_datetime($Frm->hdrval('DATE-OBS', $i_minscan));
        my $dt_end = DateTime::Format::ISO8601->parse_datetime($Frm->hdrval('DATE-END', $i_maxscan));
        # Store initial data
        my %startdata = (elsum => $Frm->hdrval('ELSTART', $i_minscan),
                         csosum => $Frm->hdrval('WVMTAUST', $i_minscan),
                         tauzsum => $taust,
                         tausum => ($taust * $Frm->hdrval('AMSTART', $i_minscan)),
                         transum => (exp(-$taust * $Frm->hdrval('AMSTART', $i_minscan))),
                         numval => 1,
                        );
        # Next check for existing data
        if (%checkrms) {
          if ($Frm->hdr("OBSNUM") == $checkrms{OBSNUM}) {
            # Accumulate values if the OBSNUM is the same
            orac_print "Accumulating CHECK_RMS data for current $grpfrm (multi)\n";
            $data{telapsed} = $dt_end->epoch - $dt_obs->epoch;
            foreach my $key (keys %data) {
              $checkrms{$key} += $data{$key};
            }
          } else {
            # Otherwise reset and start again
            orac_print "New observation in same $grpfrm - reset values (multi)\n";
            %checkrms = map { $_ => ($data{$_} + $startdata{$_})} keys %data;
            $checkrms{telapsed} = $dt_end->epoch - $dt_obs->epoch;
          }
        } else {
          # No data - store what we have
          orac_print "Beginning storage of CHECK_RMS data for new $grpfrm (multi)\n";
          %checkrms = map { $_ => ($data{$_} + $startdata{$_})} keys %data;
          $checkrms{telapsed} = $dt_end->epoch - $dt_obs->epoch;
        }

        $checkrms{FILTER} = $Frm->hdr("FILTER");
        $checkrms{OBSNUM} = $Frm->hdr("OBSNUM");
        $checkrms{NSUBSCAN} = $maxscan;
        # Store in the uhdr
        $Obj->uhdr("CHECK_RMS_DATA", \%checkrms);
      }
    }
  }
}
