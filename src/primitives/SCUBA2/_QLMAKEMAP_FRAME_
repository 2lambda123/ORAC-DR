#! -*-perl-*-

=head1 NAME

_MAKEMAP_FRAME_

=head1 SYNOPSIS

  _MAKEMAP_FRAME_ PIXSIZE=7.5

=head1 DESCRIPTION

This primitive takes timeseries data for the current frame and
constructs an image. This is a many to one operation, with only a
single output file created.

=head1 ARGUMENTS

=over 4

=item B<PIXSIZE>

Size of the output pixels in arcsec. The default is to use the values
stored in the calibration object (equal to the bolometer spacing)

=item B<SYSTEM>

Coordinate system for output image. May be any supported by
C<AST>. Default is C<TRACKING>.

=item B<SPREAD>

Desired pixel-spreading scheme. May be either C<nearest> for 
nearest-neighbour resampling or C<linear> for bi-linear resampling. 
Default is C<nearest>.

=back

=head1 ALGORITHMS

SMURF: QLMAKEMAP

=head1 FILE SUFFIX

Creates a single output file with a '_map' suffix.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2006-2008 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

my @out;

# What checks should we carry out?

# Verbosity - default to no
my $verbose = (exists $_QLMAKEMAP_FRAME_{VERBOSE} && 
	       defined $_QLMAKEMAP_FRAME_{VERBOSE}) ?
               $_QLMAKEMAP_FRAME_{VERBOSE} : 0;

# Output coordinate system - default is TRACKING
my $system = (exists $_QLMAKEMAP_FRAME_{SYSTEM} && 
	       defined $_QLMAKEMAP_FRAME_{SYSTEM}) ?
               $_QLMAKEMAP_FRAME_{SYSTEM} : "TRACKING";

# Should be an argument
my $pixsize = (exists $_QLMAKEMAP_FRAME_{PIXSIZE} && 
	       defined $_QLMAKEMAP_FRAME_{PIXSIZE}) ?
               $_QLMAKEMAP_FRAME_{PIXSIZE} : $Cal->pixelscale;

# Pixel-spreading scheme
my $spread = (exists $_QLMAKEMAP_FRAME_{SPREAD} && 
	      defined $_QLMAKEMAP_FRAME_{SPREAD}) ?
              lc($_QLMAKEMAP_FRAME_{SPREAD}) : "nearest";

# Reset to "nearest" if an unsupported scheme is given
if ( ($spread ne "nearest") && ($spread ne "linear") ) {
  orac_warn "Unsupported pixel-spreading scheme, $spread: using NEAREST\n";
  $spread = "nearest";
}

# Retrieve list of files in current frame
my @files = $Frm->files;

# Flag to indicate if we have a FOCUS observation
my $focusobs = ( uc($Frm->hdr('OBS_TYPE')) eq "FOCUS" ) ? 1 : 0;

if ( $focusobs ) {
  # If we have a focus observation, need to sort files by FOCUS axis
  # and position
  my $nfocstep = $Frm->hdr("NFOCSTEP");
  my %focsteps;
  foreach my $i ( 0 .. $#files ) {
    my $focaxis = $Frm->hdrval("FOCAXIS",$i);
    my $focpos = $Frm->hdrval("FOCPOSN",$i);
    my @list = ( defined $focsteps{$focpos} ) ? @{ $focsteps{$focpos} } : ();
    push (@list, $i+1);
    $focsteps{$focpos} = \@list;
  }

  my @out;
  foreach my $focpos ( keys %focsteps ) {
    my @filenums = @{ $focsteps{$focpos} };
    my $intmp = new ORAC::TempFile;
    my $focaxis = $Frm->hdrval("FOCAXIS",$filenums[0]);
    foreach my $filenum ( @filenums ) {
      print {$intmp->handle} $Frm->file($filenum) ."\n";
    }

    orac_print "Calling qlmakemap for FOCUS position $focaxis = $focpos mm (this may take a few/several/many seconds) \n";
    # Set output filename
    $focpos =~ s/\./-/g;
#    my $out = join("_",$Frm->file, $focpos);
    my $out = $Frm->inout("_$focpos");

    # Argument list
    my $args = "in=^".$intmp->file." out=$out pixsize=$pixsize spread=$spread system=$system";

    # Call qlmakemap
    $Mon{smurf_mon}->obeyw("qlmakemap","$args");
    push (@out, $out);
  }
  $Frm->files(@out);

} else {
# Write filenames to a temp file
my $intmp = new ORAC::TempFile;
print {$intmp->handle} join("\n",@files[0..$#files]);

# Set output filename
my $out = $Frm->inout('_fmos');

# Argument list
my $args = "in=^".$intmp->file." out=$out pixsize=$pixsize spread=$spread system=$system";

# Call qlmakemap
orac_print "Calling qlmakemap... (this may take a few/several/many seconds) \n";
$Mon{smurf_mon}->obeyw("qlmakemap","$args");

# Retrieve mean sky level subtracted
my ($ORAC_STATUS, $sky) = $Mon{smurf_mon}->get("qlmakemap","meansky");
$sky = sprintf "%12.7f", $sky;

# HACK - write entry to log file
my $time = gmtime();
# DC Sky
my $skylog = new ORAC::LogFile("log.sky");
$skylog->header("#Sky properties log file - created on $time",
		"#\n#  ID      Time        Filter    DC       Slope  PA  Seeing   El  CSO",
		"#-----------------------------------------------------------------------");

# UT string
$time = sprintf "%12.7f", $Frm->hdrval('ORACTIME',0);
# Observation number
my $obsnum = sprintf "%05d", $Frm->hdr('OBSNUM');
# Filter
my $filt = sprintf "%4s", $Frm->hdr('FILTER');

# Get TAU from the header - should get from $Cal object?
my $cso = sprintf "%5.3f", 0.5*($Frm->hdrval('WVMTAUST', 0) + 
				$Frm->hdrval('WVMTAUEN',-1));

# Elevation
my $el = int ( 0.5 * ($Frm->hdrval('ELSTART',0) + $Frm->hdrval('ELEND',-1) ) );
# Seeing
my $see = sprintf "%5.3f", ( 0.5 * ($Frm->hdrval('SEEINGST', 0) + 
				    $Frm->hdrval('SEEINGEN',-1)) );
# Since this is a DC sky removal so sky slope and PA are both 0
$skylog->addentry("$obsnum $time $filt $sky  0.00000   0.0  $see    $el $cso");


# Register the new file name
$Frm->files( $out );

orac_print "Image $out created\n" if $verbose;

# Set sky subtraction and extinction flags as these steps are done
# within qlmakemap
$Frm->uhdr("SKY_SUBTRACTION",1);
$Frm->uhdr("EXTINCTION",1);
}
