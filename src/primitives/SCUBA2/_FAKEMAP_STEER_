# -*-cperl-*-

=head1 NAME

_FAKEMAP_STEER_ - store steering parameters for reducing SCAN-mode data with a fake map added

=head1 SYNOPSIS

 _FAKEMAP_STEER_

=head1 DESCRIPTION

This primitive checks for the presence of recipe parameters and sets
entries in the Frame uhdr accordingly. It is assumed that if this
primitive is called it is because the user wants to add a fake source
to the timeseries.

Note that if no FAKEMAP parameters are specified, this primitive will
set appropriate values for an artificial gaussian to be added to the
timeseries at the map centre. The amplitude of this point source is 10
or 50 Jy/beam at 850/450 um respectively. However, the amplitude may
be scaled by the (square root of the) number of images that will be
combined to create the final coadd in order to preserve the
signal-to-noise ratio of the artificial source. This may be useful in
ensuring that comparisons of the map-filtering are made with source of
the same significance. If the map-maker is linear, it should not make
a difference.

=head1 ARGUMENTS

None.

=head1 EXTERNAL TASKS

None.

=head1 OUTPUT DATA

Parameters are stored in the Frame uhdr using the naming convention
C<RECPAR_PARAMETER> where PARAMETER is the name of the recipe
parameter.

See the documentation for the
L<REDUCE_SCAN_FAKEMAP|REDUCE_SCAN_FAKEMAP> recipe for a list of
supported parameters.

=head1 OUTPUT FILES

None.

=head1 NOTES

the C<%RECPARS> hash must have been initialized by
L<_REDUCE_SCAN_STEER_|_REDUCE_SCAN_STEER_>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011,2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Store any FAKEMAP parameters
foreach my $par ( grep {"FAKEMAP"} keys %RECPARS ) {
  my $recpar = "RECPAR_" . $par;
  $Frm->uhdr($recpar, $RECPARS{$par}) if defined $RECPARS{$par};
}

# If no map was given, check for FWHM and/or SCALE keywords
unless (defined $Frm->uhdr("RECPAR_FAKEMAP_MAP")) {
  # Set a default FWHM if necessary
  if (defined $Frm->uhdr("RECPAR_FAKEMAP_FWHM")) {
    if ($Frm->uhdr("RECPAR_FAKEMAP_FWHM") =~ /beam/i) {
      $Frm->uhdr("RECPAR_FAKEMAP_FWHM", ($Cal->fwhm)[0]);
    }
  } else {
    $Frm->uhdr("RECPAR_FAKEMAP_FWHM", ($Cal->fwhm)[0]);
  }

  # Set a default amplitude if necessary
  unless (defined $Frm->uhdr("RECPAR_FAKEMAP_SCALE")) {
    # Set default amplitudes of 10/50 Jy at 850/450 um respectively
    my $amp = ($Frm->hdr("FILTER") =~ /850/) ? 10 : 50;
    # Now scale by the square-root of the number of observations in
    # the project unless otherwise directed
    my $scale_psf = (defined $Frm->uhdr("RECPAR_FAKEMAP_CONSTSNR")) ?
      $Frm->uhdr("RECPAR_FAKEMAP_CONSTSNR") : 1;
    $amp /= sqrt($Grp->num + 1) if ($scale_psf);
    $Frm->uhdr("RECPAR_FAKEMAP_SCALE", $amp);
  }
}

# Tell user the map name that's being used
my $fakemapname;
if (defined $Frm->uhdr('RECPAR_FAKEMAP_MAP')) {
  $fakemapname = $Frm->uhdr('RECPAR_FAKEMAP_MAP');
} else {
  my $fwhm = sprintf "%g", $Frm->uhdr("RECPAR_FAKEMAP_FWHM");
  my $amp = sprintf "%g", $Frm->uhdr("RECPAR_FAKEMAP_SCALE");
  $fakemapname = "a $amp Jy/bm gaussian with FWHM = $fwhm arcsec";
}
orac_print(" Adding $fakemapname to timeseries", "yellow");

# And other details if appropriate
if ( defined $Frm->uhdr('RECPAR_FAKEMAP_SCALE') &&
     defined $Frm->uhdr('RECPAR_FAKEMAP_MAP') ) {
  orac_print(", scaled by a factor of ".($Frm->uhdr('RECPAR_FAKEMAP_SCALE')), "yellow");
}

# Make sure that the offsets for both RA and Dec are defined
if (defined $Frm->uhdr('RECPAR_FAKEMAP_OFFSET')) {
  # Set the regrid flag to true if an offset was given, as the input
  # must be re-aligned correctly with the output pixel grid
  $Frm->uhdr('RECPAR_FAKEMAP_REGRID', 1);
  my $offset = $Frm->uhdr('RECPAR_FAKEMAP_OFFSET');
  # If only one value given for the offset, store an array ref with
  # the same value for RA and Dec shifts
  if (ref(\$offset) eq "SCALAR") {
    $offset = [$offset,$offset];
    $Frm->uhdr('RECPAR_FAKEMAP_OFFSET', $offset);
  }
  # Inform user of shift
  orac_print(", shifted by ".(join(",",@{$Frm->uhdr('RECPAR_FAKEMAP_OFFSET')}))." arcsec", "yellow");
}
orac_print "\n";

