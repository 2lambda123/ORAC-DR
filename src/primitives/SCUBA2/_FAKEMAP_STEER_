# -*-cperl-*-

=head1 NAME

_FAKEMAP_STEER_ - store steering parameters for reducing SCAN-mode data with a fake map added

=head1 SYNOPSIS

 _FAKEMAP_STEER_

=head1 DESCRIPTION

This primitive checks for the presence of recipe parameters and sets
entries in the Frame uhdr accordingly.

=head1 ARGUMENTS

None.

=head1 EXTERNAL TASKS

None.

=head1 OUTPUT DATA

Parameters are stored in the Frame uhdr using the naming convention
C<RECPAR_PARAMETER> where PARAMETER is the name of the recipe
parameter.

See the documentation for the
L<REDUCE_SCAN_FAKEMAP|REDUCE_SCAN_FAKEMAP> recipe for a list of
supported parameters.

=head1 OUTPUT FILES

None.

=head1 NOTES

the C<%RECPARS> hash must have been initialized by
L<_REDUCE_SCAN_STEER_|_REDUCE_SCAN_STEER_>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011 University of British Columbia. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Store any FAKEMAP parameters
foreach my $par ( grep {"FAKEMAP"} keys %RECPARS ) {
  my $recpar = "RECPAR_" . $par;
  $Frm->uhdr($recpar, $RECPARS{$par}) if defined $RECPARS{$par};
}

# Quit immediately if no map was defined
orac_term "No base fakemap defined - will not proceed\n"
  unless defined ($Frm->uhdr("RECPAR_FAKEMAP_MAP"));

# Tell user the map name that's being used
orac_print(" Adding ".($Frm->uhdr('RECPAR_FAKEMAP_MAP'))." to timeseries", "yellow");
# And other details if appropriate
if (defined $Frm->uhdr('RECPAR_FAKEMAP_SCALE')) {
  orac_print(", scaled by a factor of ".($Frm->uhdr('RECPAR_FAKEMAP_SCALE')), "yellow");
}

# Make sure that the offsets for both RA and Dec are defined
if (defined $Frm->uhdr('RECPAR_FAKEMAP_OFFSET')) {
  my $offset = $Frm->uhdr('RECPAR_FAKEMAP_OFFSET');
  # If only one value given for the offset, store an array ref with
  # the same value for RA and Dec shifts
  if (ref(\$offset) eq "SCALAR") {
    $offset = [$offset,$offset];
    $Frm->uhdr('RECPAR_FAKEMAP_OFFSET', $offset);
  }
  orac_print(", shifted by ".(join(",",@{$Frm->uhdr('RECPAR_FAKEMAP_OFFSET')}))." arcsec", "yellow");
}
orac_print "\n";

