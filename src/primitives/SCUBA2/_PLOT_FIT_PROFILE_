# -*-cperl-*-

=head1 NAME

_PLOT_FIT_PROFILE_ - plot X and Y slices through an image along with fit

=head1 SYNOPSIS

 _PLOT_FIT_PROFILE_

 _PLOT_FIT_PROFILE_ GROUP=1

 _PLOT_FIT_PROFILE_ IMAGE=$data MODEL=$fit

=head1 DESCRIPTION

Plots X- and Y-slices for a given image along with the 2-d fit. The
profiles are plotted as a function of arcsec side by side in a Kapview
window.

However, when called as part of calculating flux conversion factors,
four panels are plotted. The current object product is used to
determine whether the data should be plotted side-by-side on the top
row (for map data) or the bottom row (matched-filtered map data). Note
that only two panels are plotted when this primitive is called: the
complete display requires two calls.

The input files are retrieved from the current Frame or Group object,
which must have been tagged with C<profile_fit>.

=head1 ARGUMENTS

The following argument is supported:

=over 2

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (true).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item KAPPA:

NDFCOPY, NDFTRACE, SETTITLE, WCSATTRIB

=item ORAC-DR PRIMITIVES

_FIND_IMAGE_STATISTICS_

=back

=head1 NOTES

The current Frame or Group object must contain two files: the image on
which the fit was performed and the result of the fit. These are
retrieved using the tag C<profile_fit>.

Input data must have at least 2 dimensions. It is assumed that the
first two dimensions are the X and Y axes respectively.

=head1 OUTPUT DATA

The plotted data and fit are stored on the intermediates array unless
the results are to be left on disk.

=head1 OUTPUT FILES

Creates files with suffix C<_sourcefit> and C<_sourcefit_model> which
are pushed onto the Frame intermediates array for deletion at the end
of the recipe.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

Copyright (C) 2011-2013 University of British Columbia.
Copyright (C) 2017 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;

my ($image, $model);
if ($Obj->tagretrieve("profile_fit")) {
  ($image, $model) = $Obj->files;
} else {
  orac_err "Unable to plot results - input image and model not defined\n";
  return ORAC__TERM;
}

# Have the input data been processed with the matched filter?
my $is_mf = ($Obj->product eq "Matched-filtered") ? 1 : 0;

# Should this primitive be verbose?
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1);

# Define a title for the displayed images
$Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$image");
my ($ORAC_STATUS, $title) = $Mon{ndfpack_mon}->get("ndftrace","title");
$title = ($title ne "") ? $title : $Obj->hdr("OBJECT");
my ($newtitle, $extra);
my $wave = ($Obj->hdr("FILTER") =~ /850/) ? "850 um" : "450 um";
if ($is_mf) {
  $extra = " for matched-filtered map...";
  $newtitle = "'$title - matched filter fit at $wave'";
} else {
  $extra = " for data map...";
  $newtitle = "'$title - map fit at $wave'";
}
$title .= "(QL)" if defined ($Frm->uhdr("QUICKLOOK"));
$title .= "(summit)" if defined ($Frm->uhdr("SUMMIT"));
orac_print "Plotting image profile + 2-d fit$extra\n" if ($verbose);

# The model is a much better place to find the peak position
_FIND_IMAGE_STATISTICS_ IMAGE=$model VERBOSE=0
my $results = $_FIND_IMAGE_STATISTICS_{RESULTS};
my $zmax = $results->{MAX};
my $peakpos = $results->{PEAKPOS};

# but we use the data to get the min value
_FIND_IMAGE_STATISTICS_ IMAGE=$image VERBOSE=0 CLIP=3,3
$results = $_FIND_IMAGE_STATISTICS_{RESULTS};
my $zmin = $results->{MIN};

# Now give some breathing room for the plot
my $range = $zmax - $zmin;
my $extend = 0.05 * $range;
$zmin -= $extend;
$zmax += 4 * $extend;

# Is the coordinate system an offset one?
$Mon{ndfpack_mon}->obeyw("wcsattrib","mode=get ndf=$image name=skyrefis");
($ORAC_STATUS, my $skyrefis) = $Mon{ndfpack_mon}->get("wcsattrib","value");
my $offset_coords = (lc($skyrefis) eq "origin") ? 1 : 0;

# Change to offset coords for display (looks cleaner)
if (!$offset_coords) {
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$image mode=mset setting='alignoffset=1,skyrefis=origin'");
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$model mode=mset setting='alignoffset=1,skyrefis=origin'");
}

for my $i (0 .. 1) {
  my $section = ($i==0) ? ",$peakpos->[1]:$peakpos->[1]," : "$peakpos->[0]:$peakpos->[0],,";
  my $indata = $image ."($section)";
  my $inmodel = $model . "($section)";
  my $data = $Obj->inout("_sourcefit");
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$indata out=$data trim trimwcs");
  my $model = $data ."_model";
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$inmodel out=$model trim trimwcs");

  # Create a temporary Frame object for displaying the results
  my $tmpFrm = $Frm->new;
  $tmpFrm->files($model);
  $tmpFrm->files($data);

  my $region = 0;
  if ($is_mf) {
    $region = ($i==0) ? 3 : 4;
  } else {
    $region = ($i==0) ? 1 : 2;
  }

  # Set the title and axis attributes.  Place Parameter TITLE before
  # Parameter NDF to prevent object names containing parentheses from
  # confusing the command-line parser, which attributes the parentheses
  # to the NDF.
  foreach my $file ($data, $model) {
    $Mon{ndfpack_mon}->obeyw("settitle","title=$newtitle ndf=$file");
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$file mode=mset setting='format=s,unit=arcsec'");
  }

  # Display the data and fit
  my %options = ( REGION => $region, ZMIN => $zmin, ZMAX => $zmax );
  $Display->display_data($tmpFrm, \%options, -1);

  if ($Frm->uhdr("RECPAR_KEEPFIT")) {
    # Keep the profiles on disk
    my $suffix = (($i == 0) ? "_x" : "_y") . ($is_mf ? "mf" : "") . "profile";
    my $outdata = $Obj->inout($suffix);
    $Mon{ndfpack_mon}->obeyw("ndfcopy", "in=$data out=$outdata");
    $outdata .= ".more.smurf.fitprofile";
    $Mon{ndfpack_mon}->obeyw("ndfcopy", "in=$model out=$outdata");
  } else {
    # Store for deletion at end of processing
    $Obj->push_intermediates($data, $model);
  }
}

# Now revert the offset attributes to their original state
if (!$offset_coords) {
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$image mode=mset setting='alignoffset=0,skyrefis=ignored'");
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$model mode=mset setting='alignoffset=0,skyrefis=ignored'");
}
