# -*-cperl-*-

=head1 NAME

_PLOT_FIT_PROFILE_ - plot X and Y slices through an image along with fit

=head1 SYNOPSIS

 _PLOT_FIT_PROFILE_ IMAGE=$data MODEL=$fit

=head1 DESCRIPTION

Plots X- and Y-slices for a given image along with the 2-d fit. The
profiles are plotted as a function of arcsec side by side in a Kapview
window.

However, when called as part of calculating flux conversion factors,
four panels are plotted. The Frame uhdr entries C<PLOT_DATAFIT> and
C<PLOT_MF_FIT> are used to determine whether the data should be
plotted side-by-side on the top row (for map data) or the bottom row
(matched-filtered map data). Note that only two panels are plotted
when this primitive is called: the complete display requires two
calls.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<IMAGE>

Name of image to plot. No default. The pipeline will terminate with an
error if not specified.

=item B<MODEL>

Name of fitted model to plot. No default. The pipeline will terminate
with an error if not specified.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (true).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item KAPPA:

NDFCOPY, NDFTRACE, SETTITLE, WCSATTRIB

=item ORAC-DR PRIMITIVES

_FIND_IMAGE_STATISTICS_

=back

=head1 NOTES

Input data must have at least 2 dimensions. It is assumed that the
first two dimensions are the X and Y axes respectively.

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Creates files with suffix C<_sourcefit> and C<_sourcefit_model> which
are pushed onto the Frame intermediates array for deletion at the end
of the recipe.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

Copyright (C) 2011 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $image = get_prim_arg($_PRIM_ARGS_, "IMAGE", undef);
my $model = get_prim_arg($_PRIM_ARGS_, "MODEL", undef);

return ORAC__TERM unless ($image && $model);

# Should I be verbose? (Default to yes)
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1);

$Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$image");
my ($ORAC_STATUS, $title) = $Mon{ndfpack_mon}->get("ndftrace","title");
$title = ($title ne "") ? $title : $Frm->hdr("OBJECT");
my $newtitle = "'$title'";
my $extra = "...";
my $wave = ($Frm->hdr("FILTER") =~ /850/) ? "850 um" : "450 um";
if ($Frm->uhdr("PLOT_MF_FIT")) {
  $extra = " for matched-filtered map...";
  $newtitle = "'$title - matched filter fit at $wave'";
} elsif ($Frm->uhdr("PLOT_DATAFIT")) {
  $extra = " for data map...";
  $newtitle = "'$title - map fit at $wave'";
}
$title .= "(QL)" if defined ($Frm->uhdr("QUICKLOOK"));
$title .= "(summit)" if defined ($Frm->uhdr("SUMMIT"));
orac_print "Plotting image profile + 2-d fit$extra\n" if ($verbose);

# The model is a much better place to find the peak position
_FIND_IMAGE_STATISTICS_ IMAGE=$model VERBOSE=0
my $results = $_FIND_IMAGE_STATISTICS_{RESULTS};
my $zmax = $results->{MAX};
my $peakpos = $results->{PEAKPOS};

# but we use the data to get the min value
_FIND_IMAGE_STATISTICS_ IMAGE=$image VERBOSE=0 CLIP=3,3
$results = $_FIND_IMAGE_STATISTICS_{RESULTS};
my $zmin = $results->{MIN};

# Now give some breathing room for the plot
my $range = $zmax - $zmin;
my $extend = 0.05 * $range;
$zmin -= $extend;
$zmax += $extend;

# Is the coordinate system an offset one?
$Mon{ndfpack_mon}->obeyw("wcsattrib","mode=get ndf=$image name=skyrefis");
($ORAC_STATUS, my $skyrefis) = $Mon{ndfpack_mon}->get("wcsattrib","value");
my $offset_coords = (lc($skyrefis) eq "origin") ? 1 : 0;

# Change to offset coords for display (looks cleaner)
if (!$offset_coords) {
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$image mode=mset setting='alignoffset=1,skyrefis=origin'");
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$model mode=mset setting='alignoffset=1,skyrefis=origin'");
}

for my $i (0 .. 1) {
  my $section = ($i==0) ? ",$peakpos->[1]:$peakpos->[1]," : "$peakpos->[0]:$peakpos->[0],,";
  my $indata = $image ."($section)";
  my $inmodel = $model . "($section)";
  my $data = $Frm->inout("_sourcefit");
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$indata out=$data trim trimwcs");
  my $model = $data ."_model";
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$inmodel out=$model trim trimwcs");

  my $tmpFrm = $Frm->new;
  $tmpFrm->files($model);
  $tmpFrm->files($data);
  # Store for deletion at end of processing
  $Frm->push_intermediates($data, $model);

  my $region = 0;
  if ($Frm->uhdr("PLOT_MF_FIT")) {
    $region = ($i==0) ? 3 : 4;
  } elsif ($Frm->uhdr("PLOT_DATAFIT")) {
    $region = ($i==0) ? 1 : 2;
  } else {
    $region = ($i==0) ? 5 : 6;
    $newtitle = "'$title'";
  }

  # Set title and axis attributes
  foreach my $file ($data, $model) {
    $Mon{ndfpack_mon}->obeyw("settitle","ndf=$file title=$newtitle");
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$file mode=mset setting='format=s,unit=arcsec'");
  }

  # Display the data and fit
  my %options = ( REGION => $region, ZMIN => $zmin, ZMAX => $zmax );
  $Display->display_data($tmpFrm, \%options, -1);
}

# Now revert the offset attributes to their original state
if (!$offset_coords) {
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$image mode=mset setting='alignoffset=0,skyrefis=ignored'");
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$model mode=mset setting='alignoffset=0,skyrefis=ignored'");
}
