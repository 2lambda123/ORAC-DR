# -*-cperl-*-

=head1 NAME

_WRITE_CALSTATS_LOGFILE_ - write logfile with results from calibrator analysis

=head1 SYNOPSIS

 _WRITE_CALSTATS_LOGFILE_

=head1 DESCRIPTION

Write out a log file with results obtained as part of analyzing a
calibrator. The log file includes the fitted and measured fluxes and
the FCFs derived from those values, plus an estimate of the beam
parameters.

=head1 ARGUMENTS

This primitive has one argument:

=over 4

=item B<PICARD>

A flag to dentote whether to look in the standard index file to find
the results (if 0), or to look in the PICARD_RESULTS header for the
calibration results (if 1). Default is 0, i.e. look in the index.gains
file.

=head1 EXTERNAL TASKS

=over 4

=item ORAC-DR PRIMITIVES:

_ADD_LOG_ENTRY_, _FIND_IMAGE_STATISTICS_

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

The log file, C<log.calstats> is created.

=head1 LOGFILE FORMAT

The log file contains the following additional entries (see
L<_ADD_LOG_ENTRY_|_ADD_LOG_ENTRY_> for details of the common entries):

=over 4

=item Flux_ap

Flux (pW) estimated from aperture photometry

=item Err_ap

Uncertainty (pW) in above value

=item Noise

Noise (pW) in uncalibrated map

=item Peak_obs

Peak signal as measured from the map (pW)

=item Peak_fit

Peak signal as derived from the fit to the source (pW)

=item FCFasec

C<ARCSEC> flux conversion factor (Jy/arcsec**2/pW)

=item FCFasec_err

Uncertainty in above value

=item FCFbeam

C<ARCSEC> flux conversion factor (Jy/beam/pW)

=item FCFbeam_err

Uncertainty in above value

=item FCFmatch

C<BEAMMATCH> flux conversion factor (Jy/pW)

=item FCFmatch_err

Uncertainty in above value

=item FWHMmain

FWHM (arcsec) of main beam component

=item Error_beam

Fraction of total flux that lies outside the FWHM

=back

=head1 NOTES

The noise is calculated within an area defined by the same aperture
used for photometry, which has the default value of one arcminute in
diameter.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2014 University of British Columbia.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $picardresults = get_prim_arg($_PRIM_ARGS_, "PICARD", 0);

if ($Cal->iscalsource($Frm->hdr("OBJECT")) && $Frm->tagexists("newimage")) {
  orac_print "\nCalling _WRITE_CALSTATS_LOGFILE_: write logfile with results from calibrator analysis\n", "yellow"
    if ($Frm->uhdr("PICARD"));

  my %hdr = %{$Cal->thing};
  my (%fcf, %fluxes);
  my @units = qw/ARCSEC BEAM BEAMMATCH/;

  if ($picardresults) {
    if (defined $Frm->uhdr("PICARD_RESULTS")) {
      orac_print("Fetching FCF information from PICARD_RESULTS.\n");
      my %picard_results = %{ $Frm->uhdr("PICARD_RESULTS") };
      $fcf{BEAM} = {FCF=> $picard_results{fcf_beam}, FCFERR => $picard_results{fcf_beam_err}};
      $fcf{BEAMMATCH} = {FCF=>$picard_results{fcf_beammatch}, FCFERR => $picard_results{fcf_beammatch_err}};
      $fcf{ARCSEC} = {FCF=>$picard_results{fcf_arcsec}, FCFERR => $picard_results{fcf_arcsec_err}};
      $fluxes{FLUX} = $picard_results{flux};
      $fluxes{FLUXERR} = $picard_results{flux_err};
      $fluxes{PEAK} = $picard_results{peak};
    } else {
      orac_err("No PICARD_RESULTS object found. No FCFs can be identified.\n");
    }
  } else {
    orac_print("Fetching FCF information from index.gains file for calibrator that was closest in time to this observation.\n");
    foreach my $units (@units) {
      $hdr{UNITS} = $units;
      my $match = $Cal->gainsindex->choosebydt('ORACTIME', \%hdr, 0);
      my $entry = $Cal->gainsindex->indexentry($match);
      $fcf{$units} = {FCF => $entry->{GAIN}, FCFERR => $entry->{GAINERR}};
      if ($units eq "ARCSEC") {
        $fluxes{FLUX} = $entry->{FLUX};
        $fluxes{FLUXERR} = $entry->{FLUXERR};
      } elsif ($units eq "BEAM") {
        $fluxes{PEAK} = $entry->{FLUX};
      }
    }
  }

  $Frm->tagset("calstats");
  # The calibration entries were written for the file straight out of
  # the map-maker so retrieve this
  my $tag = ($Frm->uhdr("PICARD")) ? "uncal" : "newimage";
  $Frm->tagretrieve($tag);
  # Find the stats within the same region as the aperture used for the
  # total flux calculation - this can be used directly because
  # calibrator maps have a pixel scale of 1 arcsec
  my $region =  2 * $Frm->uhdr("FCF_APERTURE_RADIUS");
  _FIND_IMAGE_STATISTICS_ VERBOSE=0 REGION=$region
  my $peak = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MAX};
  _FIND_IMAGE_STATISTICS_ VERBOSE=0 COMP=ERR REGION=$region
  my $median = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEDIAN};
  $Frm->tagretrieve("calstats");

  my $printval = sub {
    my $value = shift;
    my $n = (@_) ? $_[0]."f" : "4f";
    use NDF;
    $value = "NaN" if (!defined $value ||
                       (defined $value && $value == &NDF::VAL__BADD()));
    return (sprintf "%.$n", $value);
  };

  my $logtype = "calstats";
  my @params = qw/ Flux_ap Err_ap Noise Peak_obs Peak_fit FCFasec FCFasec_err FCFbeam FCFbeam_err FCFmatch FCFmatch_err FWHMmain Error_beam/;

  my @logunits = qw/ (pW) (pW) (pW) (pW) (pW) (Jy\/asec^2\/pW) (Jy\/asec^2\/pW) (Jy\/bm\/pW) (Jy\/bm\/pW) (Jy\/pW) (Jy\/pW) (") () /;
  my @values = ($printval->($fluxes{FLUX}), $printval->($fluxes{FLUXERR}),
                $printval->($median, 5),
                $printval->($peak, 5), $printval->($fluxes{PEAK}, 5),
                (map { $printval->($fcf{$_}->{FCF}),
                         $printval->($fcf{$_}->{FCFERR})} @units),
                $printval->($Cal->fwhm_fit, 2), $printval->($Cal->errfrac, 3)
               );

  _ADD_LOG_ENTRY_ PARLIST=FULLER PARAMS=\@params ENTRIES=\@values UNITS=\@logunits GROUP=0 LOGFILE=$logtype
}
