# -*-cperl-*-

=head1 NAME

_NOISE_STEER_ - set up steering parameters for reducing NOISE data

=head1 SYNOPSIS

 _NOISE_STEER_

=head1 DESCRIPTION

This primitive checks for the presence of recipe parameters and sets
entries in the Frame uhdr accordingly.

=head1 ARGUMENTS

None.

=head1 EXTERNAL TASKS

The following external task is used:

=over 2

=item ORAC-DR PRIMITIVES:

_GET_RECPAR_CONFIG_

=back

=head1 OUTPUT DATA

Parameters are stored in the Frame uhdr using the naming convention
C<RECPAR_PARAMETER> where PARAMETER is the name of the recipe
parameter.

See the documentation for L<REDUCE_NOISE|REDUCE_NOISE> recipe for a list
of supported parameters.

=head1 OUTPUT FILES

None.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Verify recipe parameters.
my @recpars = ('BESTBOL_PERCENT',
	       'FLATSNR',
	       'LOGFILE',
	       'MAPSPEED_NBOLEN',
	       'MAPSPEED_NBOLST',
	       'MAPSPEED_STEP',
	       'NEP_CLIP',
	       'NEP_MAX',
	       'NEP_MIN',
	       'NOI_CLIP',
	       'NOISE_CALC',
	       'NOISE_CFG',
	       'NOISE_FREQLO',
	       'NOISE_FREQRANGE',
	       'NOISE_SAMPLES',
	       'RESIST_CFG',
	       'VERBOSE'
	      );
ORAC::Recipe::Parameters::verify_parameters( \%RECPARS, \@recpars );

# Most parameters can be dealt with in this loop
foreach my $recpar (@recpars) {
  $Frm->uhdr("RECPAR_$recpar", $RECPARS{$recpar})
    if (defined $RECPARS{$recpar});
}

### Define the NEP thresholds for reasonable values
my $nep_min = (defined $RECPARS{NEP_MIN}) ? $RECPARS{NEP_MIN} : 2.0e-17;
my $nep_max = (defined $RECPARS{NEP_MAX}) ? $RECPARS{NEP_MAX} : 2.0e-14;
$Frm->uhdr("NEP_MIN", $nep_min);
$Frm->uhdr("NEP_MAX", $nep_max);

### Frequency ranges for noise observations
if (defined $RECPARS{NOISE_FREQRANGE}) {
  my $range = $RECPARS{NOISE_FREQRANGE};
  # Primitive assumes a string
  $range = join(",", @$range) if ref($range);
}
if (defined $RECPARS{NOISE_FREQLO}) {
  my $freqlo = $RECPARS{NOISE_FREQLO};
  # Check that freqlo is indeed lower than the lower frequency range -
  # unfortunately this is only possible if the frequency range has
  # been given by the user
  if (defined $Frm->uhdr("RECPAR_NOISE_FREQRANGE")) {
    my @frange = split(/,/,$Frm->uhdr("RECPAR_NOISE_FREQRANGE"),2);
    if ($freqlo > $frange[0]) {
      orac_termerr "FREQLO, $freqlo, is higher than lower FREQRANGE ($frange[0]) - unable to continue\n";
    }
  }
  $Frm->uhdr("RECPAR_NOISE_FREQLO", $freqlo);
}

### Clipping parameters for calcnoise
my %clip_par;
if (defined $RECPARS{NOI_CLIP}) {
  if (ref($RECPARS{NOI_CLIP})) {
    $clip_par{noicliplow} = $RECPARS{NOI_CLIP}->[0];
    $clip_par{noicliphigh} = $RECPARS{NOI_CLIP}->[1];
  } else {
    $clip_par{noicliplow} = $RECPARS{NOI_CLIP};
  }
}
if (defined $RECPARS{NEP_CLIP}) {
  if (ref($RECPARS{NEP_CLIP})) {
    $clip_par{nepcliplow} = $RECPARS{NEP_CLIP}->[0];
    $clip_par{nepcliphigh} = $RECPARS{NEP_CLIP}->[1];
  } else {
    $clip_par{nepcliplow} = $RECPARS{NEP_CLIP};
  }
}
$Frm->uhdr("RECPAR_NOISECLIP", \%clip_par)
  if (%clip_par);

### Flatfield signal-to-noise ratio
$Frm->uhdr("RECPAR_FLATSNR", $RECPARS{FLATSNR}) if (defined $RECPARS{FLATSNR});

### Number of samples to use in photon noise calculation
$Frm->uhdr("RECPAR_NOISE_SAMPLES", $RECPARS{NOISE_SAMPLES})
  if (defined $RECPARS{NOISE_SAMPLES});

### Type of noise calculation to make: "quick" uses the first on-sky
### subscan, "full" uses the whole data set
my $noise_calc = "quick";
if (defined $RECPARS{NOISE_CALC}) {
  $noise_calc = lc($RECPARS{NOISE_CALC});
  $noise_calc = "quick" unless ($noise_calc eq "full");
}
$Frm->uhdr("RECPAR_NOISE_CALC", $noise_calc);

# Check for a new resistor config
_GET_RECPAR_CONFIG_ CONFIG=RESIST

# Check for a new noise config
_GET_RECPAR_CONFIG_ CONFIG=NOISE
