# vim: syn=perl

=head1 NAME

_CREATE_QU_IMAGES_ - creates Q and U images

=head1 SYNOPSIS

_CREATE_QU_IMAGES_

=head1 DESCRIPTION

Creates Q and U images.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<EXPLODE>

Explode the HDS container file written by CALCQU into individual
NDFs.  Necessary for further processing by primitives
expecting individual NDFs. [1]

=item B<HARMONIC>

Selects the harmonic of the half-wave plate rotation.  Values other than 4
can be used to investigate instrumental effects rather than writing
the normal Q and U parameter images. [4]

=back

=head1 OUTPUT FILES

Creates output files with a C<_q> or C<_u> extension.
The frame is updated with the output files.

=head1 NOTES

This primitive operates on time series data files.

=head1 AUTHOR

Graham Bell E<lt>g.bell@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2013, Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

# Read the HARMONIC parameter.

my $harmonic = int(get_prim_arg($_PRIM_ARGS_, 'HARMONIC', 4));
my $harmonic_suffix = ($harmonic == 4) ? '' : $harmonic;

# Read the EXPLODE parameter.

my $explode = int(get_prim_arg($_PRIM_ARGS_, 'EXPLODE', 1));

# Get makemap configuration file name.

_GET_MAKEMAP_CONFIG_
my $config = $_GET_MAKEMAP_CONFIG_{'CONFIG'};

# Loop over subarrays and record the output files
# in an array.

my @out_files = ();

my %files = $Frm->get_files_by_subarray();

foreach my $subarray (keys %files) {
  my $files = $files{$subarray};
  next unless ref $files and $#$files > -1;

  orac_say('Creating Q and U images for ' . $subarray);

  # Because files might have the wrong subarray prefix, we must
  # manually create the output file name.
  my $outbase = $Frm->strip_subscan($files->[0]);
  $outbase =~ s/^s[48][abcd]/$subarray/;
  $outbase =~ s/_[a-z]+$//;
  my $q = $outbase . '_q' . $harmonic_suffix;
  my $u = $outbase . '_u' . $harmonic_suffix;

  my $in = write_file_list(@$files);

  $Mon{'smurf_mon'}->obeyw('calcqu',"in=^$in outq=$q outu=$u harmonic=$harmonic config=^$config fix");

  if ($explode) {
    my %stokes_parameter = (q => $q, u => $u);
    while (my ($parname, $parfile) = each %stokes_parameter) {
      my $ndflist = new ORAC::TempFile(0);
      unlink $ndflist;

      $Mon{'ndfpack_mon'}->obeyw('ndfecho', "ndf=$parfile logfile=$ndflist");

      my $i = 0;
      foreach my $component (read_file_list("$ndflist")) {
        my $outfile = sprintf('%s_%04d_%s%s', $outbase, ++$i, $parname, $harmonic_suffix);

        $Mon{'ndfpack_mon'}->obeyw('ndfcopy', "$component $outfile");
        $Mon{'ndfpack_mon'}->obeyw('fitsmod', "$outfile polstksp write value=$parname comment=! position=!");

        push(@out_files, $outfile);
      }

      $Frm->push_intermediates($parfile);
    }
  }
  else {
    push(@out_files, $q);
    push(@out_files, $u);
  }
}

# Set the files in the frame, disabling header sync if these
# are container files rather than NDFs.

$Frm->allow_header_sync(0) unless $explode;
$Frm->files(@out_files);
$Frm->readhdr() if $explode;
