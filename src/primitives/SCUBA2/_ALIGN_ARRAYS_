#! -*-perl-*-

=head1 NAME

_ALIGN_ARRAYS_ - Align all images to a reference image

=head1 SYNOPSIS

 _ALIGN_ARRAYS_

=head1 DESCRIPTION

This primitive takes all the images within a Frm object and aligns
them to a common coordinate system as defined by a reference image. By
default this primitive operates on files within the current Frm, but
this can be over-ridden by supplying an optional Frm object.

If a group file exists, that is used as the reference, else the
current reference image in the Cal object, or finally the first frame
is chosen as reference if neither of those exist.

=head1 ARGUMENTS

=over 4

=item B<METHOD>

Keyword specifying the method for determing how the output pixels are
populated. The default is nearest-neighbour resampling
(C<nearest>). See the documentation for WCSALIGN for further
details. The recommended choices are C<nearest>, C<bilinear>, or
C<sincsinc>.

=item B<REBIN>

A flag to determine whether to rebin or resample. Default is 0
(resample). See the WCSALIGN documentation for further information.

=item B<REF>

The name of the reference image to use for alignment in the SKY
domain. If left blank, the primitive will use the Grp file if it
exists, or the stored reference image in the Cal object, or lastly
just use the first file in the Frm.

=item B<FRAME_OBJ>

An ORAC-DR Frm object with files to be aligned. If left unset, the
current Frm is used.

=back

=head1 ALGORITHMS

Uses KAPPA WCSALIGN. This primitive is currently a very general
implementation.

=head1 FILE SUFFIX

Creates an output image per input image, each with a suffix of '_al'.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2004-2007 Particle Physics and Astronomy Research
Council, the University of British Columbia. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

# Check arguments
# Rebin or resample? Default is resample (rebin = 0).
my $rebin = (exists $_ALIGN_ARRAYS_{REBIN} &&
	     defined $_ALIGN_ARRAYS_{REBIN}) ?
             $_ALIGN_ARRAYS_{REBIN} : 0;

# Method for determining the output pixel values
my $method = (exists $_ALIGN_ARRAYS_{METHOD} &&
	      defined $_ALIGN_ARRAYS_{METHOD}) ? 
              lc($_ALIGN_ARRAYS_{METHOD}) : "nearest"; 

# Set reference image if specified
my $ref = (exists $_ALIGN_ARRAYS_{REFIMAGE} &&
	   defined $_ALIGN_ARRAYS_{REFIMAGE}) ? 
           $_ALIGN_ARRAYS_{REFIMAGE} : "";

# Has the user passed in a Frame object?
my $Frmobj = (exists $_ALIGN_ARRAYS_{FRAME_OBJ} &&
	      defined $_ALIGN_ARRAYS_{FRAME_OBJ}) ? 
              $_ALIGN_ARRAYS_{FRAME_OBJ} : $Frm;

# Check that the user has really passed in a Frm!
unless ( UNIVERSAL::isa($Frmobj, "ORAC::Frame") ) {
  orac_throw "Error: input FRAME_OBJ is not an ORAC-DR Frm object\n";
}

# If refimage not given then use Group file or first file in Frame
if ( $ref eq "" ) {
  if ($Grp->file_exists) {
    $ref = $Grp->file;
  } elsif ( $Cal->refimage) {
    $ref = $Cal->refimage;
  } else {
    # Make reference NDF with correct astrometry for the tracking
    # centre of the current observation
    $ref = $Frmobj->file(1);
  }
}

# Check if we have a moving object
$Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$ref mode=get name=system");
my ($ORAC_STATUS, $system) = $Mon{ndfpack_mon}->get("wcsattrib","value");
my $moving = ( uc($system) eq "GAPPT" ) ? 1 : 0;

orac_print("Setting attributes for moving sources; ") if $moving;

# Write alignment text files
my $intmp = new ORAC::TempFile;
my $outtmp = new ORAC::TempFile;
my @out;
my $nfiles = $Frmobj->nfiles;
for my $i (1..$nfiles) {
  my $filei = $Frmobj->file($i);
  print {$intmp->handle} $filei ."\n";
  # Set SkyRefIs and AlignOffset attributes for moving sources
  if ( $moving ) {
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$filei mode=set name=skyrefis newval=origin");
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$filei mode=set name=alignoffset newval=1");
  }
  my ($in, $out) = $Frmobj->inout( '_al',$i);
  push(@out, $out);
  print {$outtmp->handle} "$out\n";
}

orac_print("Aligning $nfiles images ... ");

$Mon{kappa_mon}->obeyw("wcsalign","ref=$ref lbnd=! ubnd=! method=$method out=^". $outtmp->file ." in=^". $intmp->file);

# Register new file names
$Frmobj->files( @out );

orac_print("done.\n");
