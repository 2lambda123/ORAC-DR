# -*-cperl-*-

=head1 NAME

_ALIGN_ARRAYS_ - Align all images to a reference image

=head1 SYNOPSIS

_ALIGN_ARRAYS_ COMP=1 METHOD=BILINEAR

=head1 DESCRIPTION

This primitive takes all the images within an ORAC-DR Frame object and
aligns them to a common coordinate system as defined by a reference
image. By default this primitive operates on files within the current
Frm, but this can be over-ridden by supplying an optional Frm object.

The reference image may be given as an argument. Otherwise, if a group
file exists, that is used as the reference, else the current reference
image in the calibration system. If neither exists then the B<SKYREF>
parameter is used to determine whether to create a reference image in
the desired coordinate frame. If B<SKYREF> is 0 then the first frame
is chosen as reference.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<COMP>

A flag to denote whether to also align any NDFs within the parent
file. Default is 0 (do not align). The only sub-NDFs currently
supported are C<.MORE.SMURF.EXP_TIME> and
C<.MORE.SMURF.WEIGHTS>. Others should be added as necessary.

=item B<FRAME>

An ORAC-DR Frame object with files to be aligned. If left unset, the
current Frm is used.

=item B<METHOD>

Keyword specifying the method for determing how the output pixels are
populated. The default is nearest-neighbour resampling
(C<NEAREST>). See the documentation for WCSALIGN for further
details. The recommended choices are C<NEAREST>, C<BILINEAR>, or
C<SINCSINC>.

=item B<REBIN>

A flag to determine whether to rebin or resample. Default is 0
(resample). See the WCSALIGN documentation for further information.

=item B<REFIMAGE>

The name of the reference image to use for alignment in the SKY
domain. If left blank, the primitive will call _GET_REFERENCE_IMAGE_.

=item B<PARAMS>

Optional parameters if B<METHOD> is not C<NEAREST> or
C<BILINEAR>. Should be specified as a string of 1 or 2 values
(separated by a comma). See documentation for wcsalign for further
details.

=item B<SKYREF>

A flag to denote whether to align the images to a celestial coordinate
frame. The default is 0 (false) and the images will be aligned with
either the group file if it exists or the first image in the Frame.

=item B<VERBOSE>

Flag to control the number of messages seen by the user. The default
is 0 (no extra messages).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

WCSALIGN, WCSATTRIB

=item ORAC-DR PRIMITIVES:

_GET_REFERENCE_IMAGE_

=back

=head1 OUTPUT DATA

The files in the given Frame object are tagged with C<aligned>.

The name of the reference image is stored in the given Frame uhdr
under C<REFIMAGE> (if not the default).

=head1 OUTPUT FILES

Creates an output image per input image with a suffix of C<_al>.

=head1 NOTES

There is currently no checking that other NDF components exist before
alignment (if COMP = 1). This could cause the pipeline to stop working.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>,
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2004-2007 Particle Physics and Astronomy Research
Council.
Copyright (C) 2004-2008,2012 the University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Check arguments
# Has the user passed in a Frame object?
my $Frmobj = get_prim_arg( $_PRIM_ARGS_, "FRAME", $Frm );

# Check that the user has really passed in a Frm!
unless ( UNIVERSAL::isa($Frmobj, "ORAC::Frame") ) {
  orac_throw "Error: input FRAME to _ALIGN_ARRAYS_ is not an ORAC-DR Frm object\n";
}

# Has the Frame object already been aligned? Only proceed if not.
unless ( $Frmobj->tagexists("aligned") ) {
  # Rebin or resample? Default is resample (rebin = 0).
  my $rebin = get_prim_arg( $_PRIM_ARGS_, "REBIN", 0 );
  # Redefine rebin as true or false for wcsalign
  $rebin = ( $rebin ) ? "true" : "false";

  # Method for determining the output pixel values
  my $method = lc(get_prim_arg( $_PRIM_ARGS_, "METHOD", "bilinear" ));

  # Set reference image if specified
  my $refimage = get_prim_arg( $_PRIM_ARGS_, "REFIMAGE", "" );

  # Are we aligning images in a SKY frame? Default to yes.
  my $skyalign = get_prim_arg( $_PRIM_ARGS_, "SKYREF", 1 );

  # Flag to decide whether to align other components
  my $comp = get_prim_arg( $_PRIM_ARGS_, "COMP", 0 );

  # PARAMS for wcsalign/wcsmosaic
  my $params = get_prim_arg( $_PRIM_ARGS_, "PARAMS", undef );
  my $parstring = "[$params]" if (defined $params);

  # Verbose?
  my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 0 );

  # If refimage not given then retrieve current reference image
  if ( $refimage eq "" ) {
    _GET_REFERENCE_IMAGE_ SKYREF=$skyalign
    $refimage = $_GET_REFERENCE_IMAGE_{REFIMAGE};
  }

  my ($inlist, $outlist, @out) = write_file_list_inout( $Frmobj, "_al" );

  my $nfiles = $Frmobj->nfiles;
  orac_print("Aligning $nfiles ".( ($nfiles == 1) ? "image" : "images")." to common coordinate frame...\n") if $verbose;

  # Align data (and variance) components first
  my $args = "ref=$refimage lbnd=! ubnd=! method=$method out=^$outlist in=^$inlist rebin=$rebin";
  $args .= " params=$parstring" if ($params);
  $Mon{kappa_mon}->obeyw("wcsalign","$args");

  # If we are also aligning any sub-components then do that now
  if ( $comp ) {
    # Check if we have a moving object
    my $moving = $Grp->uhdr("MOVING");
    # Start with exp_time - add more as necessary. Note that there is NO
    # checking to see if the component exists before attempting to align.
    my %known_comps = ( EXP_TIME => "exposure times",
			WEIGHTS => "weights",
		      );
    foreach my $ndfcomp ( sort keys %known_comps ) {
      orac_print "Aligning $known_comps{$ndfcomp}... " if $verbose;
      orac_print "Setting attributes for moving sources... "
	if ($moving && $verbose);
      my $fullcomp = "more.smurf.$ndfcomp";
      my $infiles = [$Frmobj->files];
      _COMPONENT_EXISTS_FILES_ COMPONENT=$fullcomp FILES=$infiles
      if ($_COMPONENT_EXISTS_FILES_{COMPFILES}) {
	my @alignfiles = @{$_COMPONENT_EXISTS_FILES_{COMPFILES}};
	my @in = map { $_.".$fullcomp"} @alignfiles;
	# Set SkyRefIs and AlignOffset attributes for moving sources.
	# Note that the EXP_TIME and WEIGHTS components have separate
	# WCS and must therefore be modified separately for moving sources
	for my $i (0..$#in) {
	  if ( $moving ) {
	    my $args = "ndf=$in[$i] mode=mset setting='skyrefis=origin,alignoffset=1'";
	    $Mon{ndfpack_mon}->obeyw("wcsattrib","$args");
	  }
	}
	$inlist = write_file_list( @in );
	$outlist = write_file_list( map { $_.".$fullcomp"} @out );

	$args = "ref=$refimage lbnd=! ubnd=! method=$method out=^$outlist in=^$inlist";
	$args .= " params=$parstring" if ($params);
	$Mon{kappa_mon}->obeyw("wcsalign","$args");
      }
    }
  }

  # Set uhdr variables to store the name of the reference image for
  # sanity checking.
  $Frmobj->uhdr("REFIMAGE",$refimage) if ($refimage ne "!");
  # Register new file names and tag
  $Frmobj->files( @out );
  $Frmobj->tagset("aligned");

  orac_print("done.\n") if $verbose;
}
