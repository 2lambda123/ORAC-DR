# -*-cperl-*-

=head1 NAME

_RETRIEVE_FASTFLATS_ - retrieve fast-ramp flatfield data from calibration system

=head1 SYNOPSIS

_RETRIEVE_FASTFLATS_

=head1 DESCRIPTION

A short helper primitive to find and return all of the associated raw
or processed fast-ramp flatfield files stored in the calibration
system for each subarray. The calibration system can only check the
Frame header, not the subheaders. This means that the C<SUBARRAY>
entry must be set to each subarray in turn. Only then can the correct
file be retrieved from the calibration system.

The primitive checks that the relevant file exists in the current
working directory and only returns the filename if it does.

If the uhdr entry C<FLATS> is defined, then the data being processed
contain fastflats. These cannot be retrieved from the calibration
system during the same observation so a hash reference is stored in
the uhdr which is retrieved here and returned in the primitive hash.

=head1 ARGUMENTS

This primitive supports the following arguments:

=over 2

=item B<ALLSUB>

A flag to indicate that results should be returned for all possible
subarrays, and not just those with data in the current Frame. Default
is 0 (return for data in current Frame only).

=item B<TYPE>

Type of flatfield data to return. May be C<RAW>, C<SETUP> or C<SOL> to
return the raw data, a raw dark fastramp from a SETUP observation, or
a calculated flatfield solution. Default is C<RAW>.

=back

=head1 EXTERNAL TASKS

This primitive uses no external tasks.

=head1 OUTPUT DATA

If any suitable fastflats were found, the primitive hash contains the
entries C<FASTFLATS>, which contains a reference to an array of the
fast-ramp flatfield files that exist in the current working directory,
and C<FASTFLATS_SUB>, which contains a reference to a hash of the
fastflats indexed by subarray. If the returned flatfields are
solutions, then the number of good bolometers for each subarray is
returned in a hash called C<NBOLO_SUB>, and the total number of good
bolometers is returned in C<NBOLO_SUM>. Finally, the observation
number for each subarray is returned in C<OBSNUM>.

=head1 OUTPUT FILES

None.

=head1 NOTES

The distinction between a C<raw> fastflat and a C<setup> is purely one
of convenience, as in some cases they may point to the same
file. However, a C<setup> fastflat is usually retrieved from a
different observation than the current one, and therefore requires
different rules for retrieval than the usual C<raw> fastflat (which is
always associated with the current observation).

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2012,2014 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my (@fastflats, %fastflats, %nbol, %obsnum);
my $nbolosum = 0;

# If there are FLATS in the uhdr, then use them
if ($Frm->uhdr("FLATS")) {
  my %flatinfo = %{$Frm->uhdr("FLATS")};
  # Retrieve the flatfield solution for SETUPs, otherwise the raw file
  my $file = ($Frm->hdr("OBS_TYPE") =~ /setup/i) ? "flat" : "file";
  # Store only those fastflats with good solutions
  foreach my $subarray (sort keys %flatinfo) {
    if ($flatinfo{$subarray}->{nbol} > 0) {
      $fastflats{$subarray} = $flatinfo{$subarray}->{$file};
      push(@fastflats, $fastflats{$subarray});
    }
    $nbol{$subarray} = $flatinfo{$subarray}->{nbol};
    $nbolosum += $flatinfo{$subarray}->{nbol};
    $obsnum{$subarray} = $flatinfo{$subarray}->{obsnum};
  }
} else {
  # Establish a default flatfield type - use the nearest setup flat if
  # the Frame contains closed-shutter data but is not a dark noise
  # observation, otherwise select a fastflat from earlier this observation
  my $flat_def = (defined $Frm->hdr("SHUTTER") && $Frm->hdr("SHUTTER") == 0 &&
		  defined $Frm->hdr("OBJECT") && $Frm->hdr("OBJECT") !~ /dark/i)
    ? "setup" : "raw";
  # Flatfield type to return
  my $flat_type = lc(get_prim_arg($_PRIM_ARGS_, "TYPE", $flat_def));

  # Return results for those subarrays for which data exist in the
  # current Frame or for all possible subarrays?
  my @subarrays = $Frm->subarrays;
  if (get_prim_arg($_PRIM_ARGS_, "ALLSUB", 0)) {
    my $wave = ($Frm->hdr("FILTER") =~ /850/) ? 8 : 4;
    @subarrays = map { "s$wave".$_ } qw/ a b c d /;
  }

  # Name of calibration method call
  my $method = "raw";
  my %methods = ( raw => "fastflat",
		  setup => "setupflat",
		  sol => "flat"
		);
  $method = $methods{$flat_type} if (defined $methods{$flat_type});
  my $indexmethod = $method ."index";

  # Set a DATE-OBS header
  my $origdate = $Frm->uhdr("DATE-OBS");
  my $utstart = $Frm->uhdr("ORAC_UTSTART");
  $Frm->uhdr("DATE-OBS", $utstart->strftime("%FT%T"));

  # Set the SHUTTER uhdr too - default to to retrieving open shutter
  # fastflats
  my $shutter = 1;
  if (defined $Frm->hdr("SHUTTER")) {
    $shutter = $Frm->hdr("SHUTTER");
  } else {
    # If we have mixed shutter data, then we probably have a sky noise
    # measurement, so make sure only dark noises are treated as
    # closed-shutter observations
    if ($Frm->hdr("OBS_TYPE") =~ /noise/i) {
      $shutter = ($Frm->hdr("OBJECT") =~ /dark/i) ? 0 : 1;
    }
  }
  $Frm->uhdr("SHUTTER",$shutter);

  # Cycle through the subarrays present and retrieve the relevant
  # fastflat
  my $origsub = $Frm->uhdr("SUBARRAY");
  foreach my $subarray (@subarrays) {
    $Frm->uhdr("SUBARRAY", $subarray);
    my $fflat = $Cal->$method;
    if ($fflat) {
      # Only store if the file exists on disk - assumed to be the
      # current working directory (ORAC_DATA_OUT)
      my $fastflat = ($fflat =~ /.sdf$/) ? $fflat : $fflat . ".sdf";
      if (-e $fastflat) {
	push(@fastflats, $fflat);
	$fastflats{$subarray} = $fflat;
	# Store the number of good bolometers in flatfield solutions
	my $indexentry = $Cal->$indexmethod->indexentry($fflat);
	$obsnum{$subarray} = $indexentry->{OBSNUM};
	if ($method eq "flat") {
	  $nbol{$subarray} = $indexentry->{NGOOD};
	  $nbolosum += $indexentry->{NGOOD};
	}
      } else {
	orac_err "Calibration returned $fastflat, but that file does not exist\n";
      }
    }
  }
  # Store original value for the subarray hdr
  $Frm->uhdr("SUBARRAY", $origsub);
  $Frm->uhdr("DATE-OBS", $origdate);
}

# Store results in primitive hash
if (@fastflats) {
  $_PRIM_ARGS_->{FASTFLATS} = \@fastflats;
  $_PRIM_ARGS_->{FASTFLATS_SUB} = \%fastflats;
  $_PRIM_ARGS_->{NBOLO_SUB} = \%nbol if (%nbol);
  $_PRIM_ARGS_->{NBOLO_SUM} = $nbolosum;
  $_PRIM_ARGS_->{OBSNUM} = \%obsnum;
}
