# vim: syn=perl

=head1 NAME

_CALCULATE_POLARIZATION_VECTORS_ - calculates polarization vectors

=head1 SYNOPSIS

_CALCULATE_POLARIZATION_VECTORS_

=head1 DESCRIPTION

Calculates polarization vectors.

=head1 NOTES

This primitive operates on a Q,U,I images cube.

=head1 AUTHOR

Graham Bell E<lt>g.bell@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2013, Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

orac_termerr('Require a single cube to calculate polarization vectors.')
  unless 1 == $Frm->nfiles();

my ($cube, $cat) = $Frm->inout('_catalogue');
my (undef, $ip)  = $Frm->inout('_ip');

# TODO: make debias configurable.
my $args = "$cube cat=$cat ip=$ip debias=false";
$Mon{'polpack_mon'}->obeyw('polvec', $args);

# Copy across FITS headers to allow the image to be placed in the
# frame.

$Mon{'hdstools_mon'}->obeyw('hcopy', "$cube.MORE.FITS $ip.MORE.FITS");

$Frm->files($ip);
$Frm->readhdr();
