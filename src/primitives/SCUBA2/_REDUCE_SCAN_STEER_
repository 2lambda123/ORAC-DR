# -*-cperl-*-

=head1 NAME

_REDUCE_SCAN_STEER_ - set up steering parameters for reducing SCAN-mode data

=head1 SYNOPSIS

 _REDUCE_SCAN_STEER_

 _REDUCE_SCAN_STEER_ FAKEMAP=1

=head1 DESCRIPTION

This primitive checks for the presence of recipe parameters specific
to SCAN mode data and sets entries in the Frame uhdr accordingly.

=head1 ARGUMENTS

This primitive supports a single argument:

=over 4

=item B<FAKEMAP>

A flag to denote whether fake maps are being added to the
data. Default is 0 (no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item ORAC-DR PRIMITIVES

_FAKEMAP_STEER_, _GET_RECPAR_CONFIG_

=back

=head1 OUTPUT DATA

Parameters are stored in the Frame uhdr using the naming convention
C<RECPAR_PARAMETER> where PARAMETER is the name of the recipe
parameter.

See the documentation for the L<REDUCE_SCAN|REDUCE_SCAN> recipe and
L<ORAC::Frame::SCUBA2|ORAC::Frame::SCUBA2> for a list of supported
parameters.

=head1 OUTPUT FILES

None.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2011 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Is the recipe adding fake maps to the data?
my $fakemap = get_prim_arg($_PRIM_ARGS_, "FAKEMAP", 0);

# Define basic recipe parameter names - push any additional parameters
# onto this array
my @scanpar = map { "MAKEMAP_".uc($_)} $Frm->makemap_args;

# Findclumps, resistor config files
push(@scanpar, "FINDCLUMPS_CONFIG", "RESIST_CFG");

# White-noise spatial filter
push(@scanpar, "WHITEN_BOX", "WHITEN_THRESH", "WHITEN_ESTIMATOR");

# Define fakemap recipe parameter names if necessary
if ($fakemap) {
  my @fakepars = ("MAP", "SCALE", "REGRID", "OFFSET", "FWHM". "CONSTSNR");
  push(@scanpar, map { "FAKEMAP_".uc($_)} @fakepars);
}

# Verify recipe parameters.
ORAC::Recipe::Parameters::verify_parameters( \%RECPARS, \@scanpar );

# Loop over MAKEMAP parameters
foreach my $par ( grep {"MAKEMAP"} keys %RECPARS ) {
  my $recpar = "RECPAR_" . $par;
  $Frm->uhdr($recpar, $RECPARS{$par}) if defined $RECPARS{$par};
}

# Tell user if a new makemap config file is being used
orac_say( " Using user-specified config file $RECPARS{'MAKEMAP_CONFIG'}",
	  "yellow" ) if defined $Frm->uhdr("RECPAR_MAKEMAP_CONFIG");

# Findclumps config file
if (defined $RECPARS{'FINDCLUMPS_CONFIG'}) {
  my $findclumps_config;
  my $config = $RECPARS{'FINDCLUMPS_CONFIG'};
  # Borrowed from _GET_MAKEMAP_CONFIG_
  my $abs = File::Spec->file_name_is_absolute( $config );
  if ( $abs ) {
    # Use this file if it exists
    $findclumps_config = $config if ( -e $config );
  } else {
    # OK not an absolute path - check in current working dir, and
    # other known locations if necessary. Use the first match.
    use Cwd;
    my @locations = ( getcwd(), $ENV{ORAC_DATA_OUT}, $ENV{FINDCLUMPS_CONFIG_DIR} );
    foreach my $testlocation ( @locations ) {
      my $new_config = File::Spec->catfile( $testlocation, $config );
      if ( -e $new_config ) {
	$findclumps_config = $new_config;
	last;
      }
    }
  }
  if ($findclumps_config) {
    $Frm->uhdr("RECPAR_FINDCLUMPS_CONFIG", $findclumps_config);
    # Tell user if a new findclumps config file is being used
    orac_say( " Using user-specified source-detection config file $RECPARS{'FINDCLUMPS_CONFIG'}", "yellow" )
  } else {
    orac_warn "Unable to locate given findclumps config file, $config: using defaults\n";
  }
}

# Additional processing for fake maps
if ($fakemap) {
  _FAKEMAP_STEER_
}

# Use new resistor config file if given
_GET_RECPAR_CONFIG_ CONFIG=RESIST
