# -*-cperl-*-

=head1 NAME

_QA_NOISE_ - perform quality-assurance checks on noise results

=head1 SYNOPSIS

_QA_NOISE_

=head1 DESCRIPTION

This primitive performs basic quality assurance checks on the outcome
of the noise calculations, issuing pass/fail notices depending on
whether the number of bolometers exceeds a minimum value, the noise
and effective NEP are below thresholds specified in C<qa.ini>.

=head1 ARGUMENTS

The following argument is supported:

=over 2

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 1
(yes).

=back

=head1 EXTERNAL TASKS

No external tasks are used.

=head1 NOTES

This primitive should only be used in the quicklook (QL) pipeline, and
should not be called if any other timeseries processing (e.g
map-making) is required.

=head1 OUTPUT DATA

The current Frame uhdr contains the updated C<%qa_report_info> hash
which now contains the C<QA_NOISE> key for each subarray. The value of
this key will be either C<passed> or C<failed>.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-12 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

if ($Frm->uhdr("QA_REPORT_INFO")) {

  my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

  my %qa_report_info = %{ $Frm->uhdr("QA_REPORT_INFO") };
  my %qa_results;

  orac_print "\nPerforming noise & NEP QA analysis...\n" if ($verbose);

  use JSA::QA;
  my $qa = new JSA::QA( file => $Cal->qaparams );

  my $survey = ($Frm->uhdr("QUICKLOOK") || $Frm->uhdr("SUMMIT"))
    ? "ONLINE" : (defined $Frm->hdr("SURVEY") ? $Frm->hdr("SURVEY") : "SCIENCE");
  my %opts = ( survey => $survey );

  my @subarrays = $Frm->subarrays;

  # Determine if this is Sky or Dark noise/NEP
  $opts{noisetype} = (defined $Frm->hdr("SHUTTER") && $Frm->hdr("SHUTTER") == 0) ? "DARK" : "SKY";

  # Check number of bolometers, median noise and effective NEP
  if ($verbose) {
    orac_print " Sub    Nbol     Noise     NEP_eff   NEP_wt\n";
    orac_print "---------------------------------------------\n";
  }
  # Temporary until we get per-subarray thresholds
  $opts{molecule} = $Frm->hdr("FILTER");

  # Code ref to determine pass/fail and print results if
  # required. Note this routine uses information in the options hash
  # (%opts), the QA report info hash (%qa_report_info) and relies on
  # the QA object ($qa) and verbose flag defined above.
  use Data::Dumper;
  my $report_pass_fail = sub {
    # Inputs required are: QA key and whether the value must be
    # greater or less than the criterion.
    my $key = shift;
    my $gtlt = shift;

    # Specification key
    my $spec_key = ($key eq "NOISE" || $key eq "WTNEP") ? $opts{noisetype}."_".$key : $key;
    my $spec = $qa->get_data( key => $spec_key, %opts );
    unless ($spec) {
      # If no wavelength default, then look for a subarray-specific value
      my %newopts = %opts;
      $newopts{molecule} = $opts{subarray};
      $spec = $qa->get_data( key => $spec_key, %newopts );
    }
    # Corresponding key in QA report
    my $qa_key = ($key eq "NOISE") ? "MEDIAN" : $key;
    my $value = (defined $qa_report_info{$opts{subarray}}->{$qa_key}) ? $qa_report_info{$opts{subarray}}->{$qa_key} : 0;
    my $passed = 0;
    if ($gtlt eq "gt") {
      $passed = 1 if (defined $value && $value > $spec);
    } elsif ($gtlt eq "lt") {
      $passed = 1 if (defined $value && $value < $spec);
    }
    $passed = 0 if ($value == 0);
    my $text = ($passed) ? "passed" : "failed";
    my $textcol = ($passed) ? "on_green" : "on_red";
    # Print to screen if desired
    if ($verbose) {
      orac_print " $text ", "bold white $textcol";
      orac_print "  ";
    }
    return $text;
  };

  # Loop over each subarray and determine if the current noise/NEP values are within spec
  foreach my $subarray (sort keys %qa_report_info) {
    orac_print " $subarray: " if ($verbose);
    $opts{subarray} = $subarray;

    $qa_report_info{$subarray}->{QA_NBOLO}  = $report_pass_fail->("NBOLO", "gt");
    $qa_report_info{$subarray}->{QA_NOISE}  = $report_pass_fail->("NOISE", "lt");
    $qa_report_info{$subarray}->{QA_EFFNEP} = $report_pass_fail->("EFFNEP", "lt");
    $qa_report_info{$subarray}->{QA_WTNEP}  = $report_pass_fail->("WTNEP", "lt");
    orac_print "\n" if ($verbose);
  }
  orac_print "\n" if ($verbose);
  # Store the modified hash reference
  $Frm->uhdr("QA_REPORT_INFO", \%qa_report_info);
  # Also store Noise spec for display
  my $noisekey = $opts{noisetype}."_NOISE";
  my $noise_spec = $qa->get_data( key => $noisekey, %opts );
  $Frm->uhdr("NOISE_SPEC", $noise_spec);
  my $nep_spec = $qa->get_data( key => "EFFNEP", %opts );
  # Multiply the effective NEP by the sqrt of the max number of
  # bolometers, 1280, to get an ideal NEP spec
  use constant SQRTNBOL => 35.7770876;
  $Frm->uhdr("NEP_SPEC", SQRTNBOL * $nep_spec);
}
