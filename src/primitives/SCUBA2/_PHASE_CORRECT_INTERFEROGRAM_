# -*-cperl-*-

=head1 NAME

_PHASE_CORRECT_INTERFEROGRAM_

=head1 SYNOPSIS

_PHASE_CORRECT_INTERFEROGRAM_ MODE=double

=head1 DESCRIPTION

When FTS-2 is in the beam, the phase introduced to the resulting interferogram
by FTS-2 needs to be accounted for. This task performs the phase correction,
and can work in one of two modes, controlled by the "MODE" primitive argument:

=over 4

=item Single-sided (MODE=single)

It assumes that the interferograms in the cube are single-sided and
therefore employs the Forman method of phase correction.

=item Double-sided (MODE=double)

It assumes that the interferograms in the cube are double-sided.

=back

=head1 OUTPUT FILES

Creates output files with a C<_phs> extension.
The Frame is updated with the output files.

=head1 NOTES

This primitive will operate on interferogram cubes.

=head1 AUTHOR

Coskun Oba E<lt> josh.oba@uleth.ca E<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of Lethbridge.
Copyright (C) 2016 East Asian Observatory.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

# Determine mode of operation (single- or double-sided).
my $mode = lc(get_prim_arg($_PRIM_ARGS_, 'MODE', undef, 1));
orac_termerr('Phase correction mode not recognized')
  unless $mode eq 'single' || $mode eq 'double';

orac_say "\nApplying Phase Correction [" . $mode . "-sided] ...\n";

my $ext = "_phs";

# Parameters: both modes:
my $degree = 1;

my $wnLBound = $Frm->uhdr('FTS_WN_LBOUND');
my $wnUBound = $Frm->uhdr('FTS_WN_UBOUND');

orac_termerr('FTS_WN_LBOUND or UBOUND is missing')
  unless (defined $wnLBound) && (defined $wnUBound);

# Parameters: single-sided mode only:
my $dsHalfLength  = 224;
my $pcfHalfLength = 128;
my $apodization   = 15;

# Perform phase correction.
my @outFiles;

for my $i (1..$Frm->nfiles) {
  my ($in, $out) = $Frm->inout($ext, $i);

  orac_say "Processing " . $out . "...: ";

  my $action;
  my $args  = "in=$in out=$out";
  $args    .= " degree=$degree wnlbound=$wnLBound wnubound=$wnUBound";

  if ($mode eq 'single') {
    $args .= " dsHalfLength=$dsHalfLength pcfHalfLength=$pcfHalfLength";
    $args .= " apodization=$apodization";
    $action = 'fts2phasecorr';
  }
  else {
    $action = 'fts2phasecorrds';
  }

  my $status = $Mon{smurf_mon}->obeyw($action, $args);

  if($status == ORAC__OK) {
    orac_say "DONE\n";
  } else {
    orac_say "FAILED\n";
  }
  push(@outFiles, $out);
}

$Frm->files(@outFiles);
