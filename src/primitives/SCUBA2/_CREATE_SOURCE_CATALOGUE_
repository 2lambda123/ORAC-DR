# -*-cperl-*-

=head1 NAME

_CREATE_SOURCE_CATALOGUE_ - create a catalogue of sources in an image

=head1 SYNOPSIS

 _CREATE_SOURCE_CATALOGUE_

=head1 DESCRIPTION

This primitive is designed to perform the optimal source extraction
and catalogue creation for both compact and extended sources. The
input image is passed through a matched filter, the output from which
is used to create a signal-to-noise ratio image which is fed into the
source finder.

Source finding is performed using CUPID:findclumps and may use any of
the supported methods. The best way to control source detection is by
providing a tuned config file with all the necessary parameters. This
is specified using the recipe parameter C<FINDCLUMPS_CFG>. The results
are written to a CUPID catalogue file (a FITS binary table).

This primitive is designed to work on a single image and will fail if
the current Frame object contains more than one file.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<CROP>

A flag to indicate that the image should be cropped (to the map size
in the header) before running the source finder. Default is 0 (do not
crop).

=item B<DETECT>

Optional detection threshold in units of standard deviation. Default
is 5.

=item B<GROUP>

Flag to denote whether the current Group file or current Frame file
should be used. Default is 0 (use the Frame file).

=item B<METHOD>

Source-finding method. May be any of the CUPID:FINDCLUMPS
methods. Default is C<FELLWALKER>.

=item B<MINPIX>

Minimum number of connected pixels defining a source. Default is 9.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (true).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item ORAC-DR PRIMITIVES

_CALC_SCUBA2_SNR_, _CROP_IMAGE_, _CROP_IMAGE_FRAME_, _FIND_SOURCES_

=back

=head1 NOTES

Input arguments may be overridden by survey-specific choices.

Currently only compact sources are supported.

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Output catalogue with suffix C<_cat> and filename extension of C<.FIT>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Signal-to-noise detection threshold
my $detect = get_prim_arg($_PRIM_ARGS_, "DETECT", 5);

# Minimum number of pixels which define a source
my $minpix = get_prim_arg($_PRIM_ARGS_, "MINPIX", 9);

# Source detection method for CUPID
my $method = get_prim_arg($_PRIM_ARGS_, "METHOD", "fellwalker");

# Use Frame or Group image
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;

# Be verbose? Default to yes.
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Proceed flag - initialize to true
my $proceed = 1;
# But set to false for cases when the group file is to be processed
# and it does not yet exist
if ($group) {
  $proceed = 0 unless $Grp->file_exists;
  $proceed = 0 if ($Obj->product && $Obj->product eq "oldimage");
} else {
  # For Frame objects, ensure the "newimage" tag exists
  $proceed = 0 unless ($Obj->tagexists("newimage"));
}

if ($proceed) {
  # Should the image be cropped before running the source finder?
  my $cropfirst = get_prim_arg($_PRIM_ARGS_, "CROP", 0);

  $Obj->tagset("create_src_cat_input");
  my $current_product = $Obj->product;

  # Use an existing S/N map if possible, except in the SUMMIT pipeline
  # as it will have been deleted - the problem is that there is no way
  # to delete tags associated with files that are deleted.
  my $snrexists = ($Obj->tagexists("snr")) ? 1 : 0;
  $snrexists = 0 if ($Frm->uhdr("SUMMIT"));

  # Calculate S/N map if necessary - append "_snr" suffix
  my $snrmap;
  if ($snrexists) {
    $Obj->tagretrieve("snr");
    # The object now contains a SNR image so set the product accordingly
    $Obj->product("snr") unless ($current_product eq "snr");
  } else {
    # Otherwise calculate a S/N map here - use the matched-filtered
    # map if one exists
    if ($Obj->tagexists("matchfilt")) {
      $Obj->tagretrieve("matchfilt");
    }
    orac_print "Calculating S/N image... " if ($verbose);
    _CALC_SCUBA2_SNR_ VERBOSE=0 GROUP=$group
  }

  # Crop the image before running the source finder if requested
  if ($cropfirst) {
    if ($group) {
      orac_print "Trimming image to given map size...\n";
      my $infile = $Obj->file;
      my $outfile = $Obj->inout("_crop");
      _CROP_IMAGE_ IMAGE=$infile OUT=$outfile
      $Obj->files($outfile);

    } else {
      _CROP_IMAGE_FRAME_
    }
    $Obj->product("snr") unless ($Obj->product eq "snr");
  }

  # Run CUPID
  _FIND_SOURCES_ WRITE_CATALOGUE=1 METHOD=$method MINPIX=$minpix DETECT_SIGMA=$detect GROUP=$group

  # Restore input state
  $Obj->tagretrieve("create_src_cat_input");
  $Obj->product($current_product);
}
