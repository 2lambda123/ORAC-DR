# -*-cperl-*-

=head1 NAME

_CROP_IMAGE_FRAME_ - Trim images in a Frame object to a desired size

=head1 SYNOPSIS

 _CROP_IMAGE_FRAME_ WIDTH=240 HEIGHT=400

=head1 DESCRIPTION

This primitive may be used to trim all images in the given Frame
object to a desired size. The default behaviour is to use the map
parameters defined in the Frame header to define the size of the
cropped image. The user may override the map width and height using
the parameters described below.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<FRAME>

Frame object with files to trim. Default is the current global Frame
object, Frm.

=item B<HEIGHT>

New map height in arcsec. If not specified, the map height in the
header will be used.

=item B<WIDTH>

New map width in arcsec. If not specified, the map width in the header
will be used.

=item B<VERBOSE>

Flag to denote whether to print extra messages. Default is 1 (yes).

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item ORAC-DR PRIMITIVES

_CROP_IMAGE_

=back

=head1 OUTPUT DATA

The Frame object is updated with the names of the trimmed images.

=head1 OUTPUT FILES

Produces output files with the suffix C<_crop>.

=head1 NOTES

This primitive should be used on Frame objects only.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2011 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Input frame object to use
my $Frmobj = get_prim_arg($_PRIM_ARGS_, "FRAME", $Frm);

# Skip this primitive if the Frame object consists of dark frames
return ORAC__OK if ($Frmobj->uhdr("DARKONLY"));

# Skip this primitive if the Frame is bad
return ORAC__OK unless ($Frmobj->isgood);

# Output image sizes in arcsec - can be undef
my $width  = get_prim_arg($_PRIM_ARGS_, "WIDTH", undef);
my $height = get_prim_arg($_PRIM_ARGS_, "HEIGHT", undef);

# Store output file names
my @outfiles;

# Force 120" image size for Jupiter - maps for pointing and focus
# observations are usually cropped to 90", but this is too small for
# Jupiter.
if (lc($Frm->hdr("OBJECT")) eq "jupiter") {
  $width = 120 if ($width && $width < 120);
  $height = 120 if ($height && $height < 120);
}

# Inform user of map size
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);
if ($verbose) {
  my $images = ($Frm->nfiles > 1) ? $Frm->nfiles ." images" : "image";
  my $pwidth = ($width) ? $width : $Frm->hdr("MAP_WDTH");
  my $pheight = ($height) ? $height : $Frm->hdr("MAP_HGHT");
  my $mapsize = "$pwidth x $pheight arcsec**2";
  orac_print "Trimming $images to $mapsize\n";
}

# Loop over files in Frame
for my $i ( 1 .. $Frmobj->nfiles ) {

  my ($infile, $outfile) = $Frmobj->inout("_crop", $i);

  # Trim this image
  _CROP_IMAGE_ IMAGE=$infile OUT=$outfile HEIGHT=$height WIDTH=$width

  push(@outfiles, $outfile);
}

# Store new files in Frame
if (@outfiles) {
  $Frmobj->force_product_update("cropped", @outfiles);
  $Frmobj->tagset("crop");
}
