#! -*-perl-*-

=head1 NAME

_FIND_IMAGE_STATISTICS_ - determine the statistics of an image

=head1 SYNOPSIS

 _FIND_IMAGE_STATISTICS_

 _FIND_IMAGE_STATISTICS_ CLIP=2,2

 _FIND_IMAGE_STATISTICS_ HISTAT=1

=head1 DESCRIPTION

This primitive calculates the statistics of regions within a given
image. It is expected that this primitive will usually be called from
another which removes the sky contribution, and thus will pass it the
IMAGE argument.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item IMAGE

Input image. No default, and an error will be given if no image is
supplied.

=item HISTOGRAM

Flag to indicate whether to calculate a histogram of values to find
the sky level via the mode. Default is 0 (false).

=item VERBOSE

Flag to indicate whether informational messages should be given to the
user. Default is 1 (true).

=item CLIP

A comma-separated list of up to 5 numbers specifying the clip levels
at which to evaluate the statistics. See the documentation for KAPPA
C<stats> for further details. Default is blank (no clipping).

=item HISTAT

Flag to denote whether to use the Kappa HISTAT command rather than the
regular STATS application. Default is 1 (true).

=back

The following are only accessed if HISTAT is true.

=over 4

=item MODE_METHOD

The method used by HISTAT to calculate the mode. The default is
C<MOMENTS> as in the KAPPA manual.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

C<stats>, C<histogram>, C<histat>

=back

=head1 OUTPUT DATA

On completion, the primitive hash C<%_FIND_IMAGE_STATISTICS_>
contains the following keys:

=over 4

=item RESULTS

A hash containing the following keys and values:

=over 4

=item MEAN - mean level

=item MODE - modal value (only if HISTOGRAM or HISTAT are true)

=item MEDIAN - median (only if HISTAT is true)

=item SIGMA - standard deviation (only if HISTAT is false)

=back

Unset items are returned as undef.

=item HISTOMODE

A true/false flag to indicate if the HISTO method returned a valid value

=back

The frame object is not updated.

=head1 KNOWN ISSUES

Only takes the average of the entire image so if used for estimating
sky properties it assumes that the sky dominates the emission. A more
sophisticated routine is needed for the pathological cases when there
is a lot of extended (source) emission which lies at the several sigma
level. Masking of known sources should probably take place before
calling this primitive.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005-2007 University of British Columbia.  All Rights
Reserved.

=cut

# Set input file
my $in = (exists $_FIND_IMAGE_STATISTICS_{IMAGE} && 
	  defined $_FIND_IMAGE_STATISTICS_{IMAGE}) ?
          $_FIND_IMAGE_STATISTICS_{IMAGE} : "";

if ( $in eq "" ) {
  orac_throw "Error: no input image given to _FIND_IMAGE_STATISTICS_\n";
}

# Should I be verbose (default to yes)
my $verbose = (exists $_FIND_IMAGE_STATISTICS_{VERBOSE} && 
	       defined $_FIND_IMAGE_STATISTICS_{VERBOSE}) ?
               $_FIND_IMAGE_STATISTICS_{VERBOSE} : 1;

# Optional CLIP argument, default to blank (no clipping)
my $clip = (exists $_FIND_IMAGE_STATISTICS_{CLIP} && 
	    defined $_FIND_IMAGE_STATISTICS_{CLIP}) ?
            $_FIND_IMAGE_STATISTICS_{CLIP} : "";

# Do we want to use the histogram method to get the mode?
my $histo = (exists $_FIND_IMAGE_STATISTICS_{HISTO} && 
	     defined $_FIND_IMAGE_STATISTICS_{HISTO}) ?
             $_FIND_IMAGE_STATISTICS_{HISTO} : 0;

# Do we want to use KAPPA HISTAT or STATS?
my $histat = (exists $_FIND_IMAGE_STATISTICS_{HISTAT} && 
		defined $_FIND_IMAGE_STATISTICS_{HISTAT}) ?
                $_FIND_IMAGE_STATISTICS_{HISTAT} : 1;

# Initialise the results array
$_FIND_IMAGE_STATISTICS_{RESULTS} = [];

# Declare useful variables
my $ORAC_STATUS;
my ( $avg, $stdev, $ngood, $ntotal, $nbad, $min, $max, $median, $mode);

if ( $histat ) {

  # Check for other parameters for HISTAT
  # Default to MOMENTS method for calculating mode (as in KAPPA docs)
  my $modemethod = (exists $_FIND_IMAGE_STATISTICS_{MODE_METHOD} && 
		    defined $_FIND_IMAGE_STATISTICS_{MODE_METHOD}) ?
		    uc($_FIND_IMAGE_STATISTICS_{MODE_METHOD}) : "MOMENTS";

  # Use HISTAT to calculate statistics
  $Mon{kappa_mon}->obeyw("histat","ndf=$in method=$modemethod");
  # Retrieve the values
  ($ORAC_STATUS, $avg) = $Mon{kappa_mon}->get("histat","mean");
  ($ORAC_STATUS, $median) = $Mon{kappa_mon}->get("histat","median");
  ($ORAC_STATUS, $mode) = $Mon{kappa_mon}->get("histat","mode");
  ($ORAC_STATUS, $ngood) = $Mon{kappa_mon}->get("histat","numgood");
  ($ORAC_STATUS, $ntotal) = $Mon{kappa_mon}->get("histat","numpix");
  ($ORAC_STATUS, $nbad) = $Mon{kappa_mon}->get("histat","numbad");
  ($ORAC_STATUS, $min) = $Mon{kappa_mon}->get("histat","minimum");
  ($ORAC_STATUS, $max) = $Mon{kappa_mon}->get("histat","maximum");
  $stdev = -1.0;

  # If HISTAT was used, then the HISTO argument is set to false
  $histo = 0;

} else {
  # Now calculate stats of the masked file to get the mean and the
  # standard deviation
  my $args = ($clip ne "") ? "clip=[$clip]" : "" ;
  $Mon{kappa_mon}->obeyw("stats","ndf=$in $args");
  # Retrieve the values
  ($ORAC_STATUS, $avg) = $Mon{kappa_mon}->get("stats","mean");
  ($ORAC_STATUS, $stdev) = $Mon{kappa_mon}->get("stats","sigma");
  ($ORAC_STATUS, $ngood) = $Mon{kappa_mon}->get("stats","numgood");
  ($ORAC_STATUS, $ntotal) = $Mon{kappa_mon}->get("stats","numpix");
  ($ORAC_STATUS, $nbad) = $Mon{kappa_mon}->get("stats","numbad");
  ($ORAC_STATUS, $min) = $Mon{kappa_mon}->get("stats","minimum");
  ($ORAC_STATUS, $max) = $Mon{kappa_mon}->get("stats","maximum");
  $median = undef;
  $mode = undef;
  # Stats returns sigma = 0 if anything went wrong
}

orac_warn "All pixels in region are bad!\n" if $ngood == 0;
my $fracgood = $ngood/$ntotal;

# If the user wants to use STATS and wants a modal value as well...
my $maxval;
if ( $histo && $stdev ) {
  # Now use KAPPA histogram and write results to a file
  # Determine numbin: calculated from min and max to make sure that
  # the increment is more or less the same for all images
  my $delta = 1.0e-5;
  my $numbinmax = 10000;
  my $numbin = int( ($max - $min)/$delta );
  $numbin = $numbinmax if ($numbin > $numbinmax);

  # ORAC::TempFile can't be used to create a file to pass to histogram
  # but it *can* be used to generate a unique name for histogram so
  # ensure there won't be any name clashes.
  my $histfile = new ORAC::TempFile(0);
  my $histname = $histfile->file;
  undef $histfile;
  my $args = "numbin=$numbin range=! device=! logfile=".$histname;
  $Mon{kappa_mon}->obeyw("histogram","in=$in $args");

  # Now analyze results - first open log file with hist results
  open my $HISTFH, "< $histname"
    or die "Unable to open file, $histname: $!\n";
  my (@lines, @values);
  # Read all the relevant lines, delete file when done
  while (<$HISTFH>){
    chomp;
    # We only want lines with the word pixels in it
    push (@lines, $_) if ($_ =~ /pixels/); 
  }
  close $HISTFH;
  unlink $histname;

  # Split line on spaces and store the bounds of and the number of
  # samples in the current bin
  foreach my $line (@lines) {
    my @tmpline = split(/\s+/,$line,6);
    my $lineref = [ $tmpline[1], $tmpline[3], $tmpline[4] ];
    push (@values, $lineref);
  }
  # Now find the maximum value - this is the MODE
  my $maxpix = 0;
  $maxval = -1.0e9;
  foreach my $lineref (@values) {
    if ($lineref->[2] > $maxpix){
      $maxpix = $lineref->[2];
      $maxval = 0.5*($lineref->[0] + $lineref->[1]) ;
    }
  }
  $mode = $maxval;
}

# Store mean DC level, standard deviation and mode in the hash
$_FIND_IMAGE_STATISTICS_{RESULTS} = { MEAN => $avg, 
				      SIGMA => $stdev, 
				      MODE => $mode, 
				      MEDIAN => $median,
				    };
$_FIND_IMAGE_STATISTICS_{HISTOMODE} = ($maxval == -1.0e9) ? 0 : 1;

orac_print "Calculated sky statistics\n" if $verbose;
