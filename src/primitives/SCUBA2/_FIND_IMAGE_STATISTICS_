# -*-cperl-*-

=head1 NAME

_FIND_IMAGE_STATISTICS_ - determine the statistics of an image

=head1 SYNOPSIS

 _FIND_IMAGE_STATISTICS_

 _FIND_IMAGE_STATISTICS_ CLIP=2,2 IMAGE=$Frm->file

 _FIND_IMAGE_STATISTICS_ HISTAT=1 IMAGE=$image

=head1 DESCRIPTION

This primitive calculates the statistics of a given image, or
optionally, its variance or error component. It is expected that this
primitive will usually be called from another, and thus will pass in
the B<IMAGE> argument. The method by which certain parameters (such as
the median and mode) are derived is user-controllable.

The results are stored in the primitive hash so the calling primitive
may retrieve the desired values.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<CLIP>

A comma-separated list of up to 5 numbers specifying the clip levels
at which to evaluate the statistics. See the documentation for KAPPA
C<stats> for further details. Default is blank (no clipping).

=item B<COMP>

Component of input image to obtain statistics for. Valid values are
C<DATA>, C<VAR> and C<ERR>. Default is C<DATA>.

=item B<HISTAT>

Flag to denote whether to use the Kappa HISTAT command rather than the
STATS application. Default is 0 (false).

=item B<HISTOGRAM>

Flag to indicate whether to calculate a histogram of values to find
the sky level via the mode. Default is 0 (false).

=item B<IMAGE>

Input image. No default, and an error will be given if no image is
supplied.

=item B<MODE_METHOD>

The method used by HISTAT to calculate the mode. The default is
C<MOMENTS>. Only accessed it B<HISTAT> is true.

=item B<PERCENTILES>

Comma-separated list of percentiles to calculate. Default is the null
parameter, C<!>, which indicates no percentiles.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (true).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

HISTAT, HISTOGRAM, STATS

=back

=head1 NOTES

Masking of known sources should probably take place before calling
this primitive.

Will fail if the variance component does not exist.

=head1 OUTPUT DATA

On completion, the primitive hash C<%_FIND_IMAGE_STATISTICS_>
contains the following keys:

=over 4

=item RESULTS

A reference to a hash containing the following keys and values:

=over 4

=item MEAN    - mean level

=item MODE    - modal value (only if HISTOGRAM or HISTAT are true)

=item MEDIAN  - median

=item SIGMA   - standard deviation (only if HISTAT is false)

=item SUM     - sum

=item NUMPIX  - total number of pixels

=item NUMGOOD - number of good pixels

=item MAX     - maximum value

=item MIN     - minimum value

=item PEAKWCS - position of maximum in current coordinate system

=item PEAKPOS - position of maximum in pixel coordinates

=item PERCENTILES - percentile values, either a scalar or an array
reference if multiple values requested (only if PERCENTILES is non-null)

=back

Unset items are returned as undef.

=item HISTOMODE

A true/false flag to indicate if the HISTO method returned a valid value

=back

The Frame object is not updated.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005-2011 University of British Columbia.  All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Set input file
my $in = get_prim_arg( $_PRIM_ARGS_, "IMAGE", undef );

unless ( defined $in ) {
  orac_throw "Error: no input image given to _FIND_IMAGE_STATISTICS_\n";
}

# Which component of the input file are the statistics to be
# calculated for?
my $comp = get_prim_arg( $_PRIM_ARGS_, "COMP", "data" );

# Should I be verbose (default to yes)
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1 );

# Optional CLIP argument, default to blank (no clipping)
my $clip = get_prim_arg( $_PRIM_ARGS_, "CLIP", "" );

# Do we want to use the histogram method to get the mode?
my $histo = get_prim_arg( $_PRIM_ARGS_, "HISTO", 0 );

# Do we want to use KAPPA HISTAT or STATS?
my $histat = get_prim_arg( $_PRIM_ARGS_, "HISTAT", 0 );

# Percentiles
my $percentiles = get_prim_arg( $_PRIM_ARGS_, "PERCENTILES", "!" );

# Declare useful variables
my $ORAC_STATUS;
my @params = (qw/ mean median numgood numpix numbad minimum maximum total maxwcs maxpos /);
# Add perval if not default
push (@params, "perval") if ($percentiles ne "!");

my %results;
if ( $histat ) {
  # Set the HISTO argument to false
  $histo = 0;

  # Check for other parameters for HISTAT
  # Default to MOMENTS method for calculating mode (as in KAPPA docs)
  my $modemethod = get_prim_arg( $_PRIM_ARGS_, "MODE_METHOD", "MOMENTS" );

  # Use HISTAT to calculate statistics
  my $args = "ndf=$in method=$modemethod comp=$comp";
  $args .= " percentiles=[$percentiles]" unless ($percentiles eq "!");
  $Mon{kappa_mon}->obeyw("histat","$args");
  # Retrieve the values
  push ( @params, "mode");
  ($ORAC_STATUS, %results) = $Mon{kappa_mon}->mget("histat", @params);
  $results{sigma} = -1.0;
} else {
  # Do we want stats to calculate ordered statistics? Default to yes.
  my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
  $order = ($order) ? "order" : "noorder";

  # Calculate stats of the masked file to get the mean and the
  # standard deviation
  my $args = "ndf=$in $order comp=$comp";
  $args .= " percentiles=[$percentiles]" unless ($percentiles eq "!");
  $args .= ($clip eq "") ? "" : " clip=[$clip]";
  $Mon{kappa_mon}->obeyw("stats","$args");
  push ( @params, "sigma");
  # Retrieve the values
  ($ORAC_STATUS, %results) = $Mon{kappa_mon}->mget("stats", @params);

  # Stats returns sigma = 0 if anything went wrong
  $results{mode} = undef;
}

my $avg    = $results{mean};
my $stdev  = $results{sigma};
my $sum    = $results{total};
my $min    = $results{minimum};
my $max    = $results{maximum};
my $median = $results{median};
my $mode   = $results{mode};
my $ngood  = $results{numgood};
my $ntotal = $results{numpix};
my $nbad   = $results{numbad};
my $perval = $results{perval};

orac_warn "All pixels in region are bad!\n" if ($ngood == 0 && $verbose);
my $fracgood = $ngood/$ntotal;

# If the user wants to use STATS and wants a modal value as well...
my $maxval = -1.0e9;
if ( $histo && $stdev ) {
  # Now use KAPPA histogram and write results to a file
  # Determine numbin: calculated from min and max to make sure that
  # the increment is more or less the same for all images
  my $delta = 1.0e-5;
  my $numbinmax = 10000;
  my $numbin = int( ($max - $min)/$delta );
  $numbin = $numbinmax if ($numbin > $numbinmax);

  # ORAC::TempFile can't be used to create a file to pass to histogram
  # but it *can* be used to generate a unique name for histogram so
  # ensure there won't be any name clashes.
  my $histfile = new ORAC::TempFile(0);
  my $histname = $histfile->file;
  undef $histfile;
  my $args = "numbin=$numbin range=! device=! logfile=".$histname;
  $Mon{kappa_mon}->obeyw("histogram","in=$in $args comp=$comp");

  # Now analyze results - first open log file with hist results
  open my $HISTFH, "< $histname"
    or die "Unable to open file, $histname: $!\n";
  my (@lines, @values);
  # Read all the relevant lines, delete file when done
  while (<$HISTFH>) {
    chomp;
    # We only want lines with the word pixels in it
    push (@lines, $_) if ($_ =~ /pixels/);
  }
  close $HISTFH;
  unlink $histname;

  # Split line on spaces and store the bounds of and the number of
  # samples in the current bin
  foreach my $line (@lines) {
    my @tmpline = split(/\s+/,$line,6);
    my $lineref = [ $tmpline[1], $tmpline[3], $tmpline[4] ];
    push (@values, $lineref);
  }
  # Now find the maximum value - this is the MODE
  my $maxpix = 0;
  foreach my $lineref (@values) {
    if ($lineref->[2] > $maxpix) {
      $maxpix = $lineref->[2];
      $maxval = 0.5*($lineref->[0] + $lineref->[1]);
    }
  }
  $mode = $maxval;
}

# Store mean DC level, standard deviation and mode in the hash
$_FIND_IMAGE_STATISTICS_{RESULTS} = { MEAN => $avg,
				      SIGMA => $stdev,
				      MODE => $mode,
				      MEDIAN => $median,
				      NUMPIX => $ntotal,
				      NUMGOOD => $ngood,
				      SUM => $sum,
				      MAX => $max,
				      MIN => $min,
				      PERCENTILES => $perval,
				      PEAKWCS => $results{maxwcs},
				      PEAKPOS => $results{maxpos},
				    };
$_FIND_IMAGE_STATISTICS_{HISTOMODE} = ($maxval == -1.0e9) ? 0 : 1;

orac_print "Calculated image $comp statistics\n" if $verbose;
