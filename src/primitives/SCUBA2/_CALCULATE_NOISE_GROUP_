# -*-cperl-*-

=head1 NAME

_CALCULATE_NOISE_GROUP_ - calculate a white noise image for each subarray

=head1 SYNOPSIS

_CALCULATE_NOISE_GROUP_

=head1 DESCRIPTION

This primitive calculates a noise image for each setting of heater and
detector bias over one or more frequency ranges.

=head1 ARGUMENTS

The following arguments are supported:

=item B<FREQHI>

Comma-separated pair of numbers indicating the frequency range (Hz)
over which to measure white noise portion of power spectrum. Default
is 2,10 (i.e. 2-10 Hz).

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no).

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item ORAC-DR PRIMITIVES

_CALCULATE_NOISE_

=back

=head1 OUTPUT DATA

On completion the Grp contains a series of Frames, one for each
frequency range/heater/bias setting, each of which contains the
results of the noise calculation.

=head1 OUTPUT FILES

A noise file is created for each subarray, heater setting and bias
with the suffix C<_noi>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Frequency range for calculating noise
my $freqhi = get_prim_arg($_PRIM_ARGS_, "FREQHI", "2,10");

# The noise may be calculated over multiple frequency ranges given via
# recipe parameters
$freqhi = $Frm->uhdr("RECPAR_NOISE_FREQHI")
  if (defined $Frm->uhdr("RECPAR_NOISE_FREQHI"));

# Verbosity defaults to false
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 0);

# Filter the files into frames grouped by a suitable key that will
# reduce the chances of the pipeline timing out - start by dividing by
# subarray
my @subfrms = $Frm->subfrms("SUBARRAY");

# Calculate noise for each subarray
my @noisefiles;
foreach my $subfrm (@subfrms) {
  my $Frm = $subfrm;
  _CALCULATE_NOISE_ VERBOSE=0 FREQHI=$freqhi

  $Frm->uhdr("OBSEND",1);
  push(@noisefiles, $Frm->files);
}

# Store noise files
$Frm->files(@noisefiles);
