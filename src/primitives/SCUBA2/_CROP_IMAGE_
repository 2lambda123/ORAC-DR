# -*-cperl-*-

=head1 NAME

_CROP_IMAGE_ - Trim image to a desired size

=head1 SYNOPSIS

 _CROP_IMAGE_

 _CROP_IMAGE_ IN=$infile

 _CROP_IMAGE_ WIDTH=240 HEIGHT=400

=head1 DESCRIPTION

This primitive may be used to trim an image to a desired size. The
default behaviour is to use the map parameters defined in the Frame
header to define the size of the cropped image. The user may override
the map width and height using the parameters described below.

All NDFs within a file are trimmed including, e.g., the EXP_TIME and
WEIGHTS components of SCUBA-2 images. There is no need to treat these
separately.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<HEIGHT>

Output map height in arcsec. If not specified, the map height in the
header will be used.

=item B<IMAGE>

Name of input file. The primitive will use the current Frame file if
not specified.

=item B<OUT>

Optional parameter to specify the name of the trimmed output
file. Default is to use the Frame inout method to derive the name.

=item B<WIDTH>

Output map width in arcsec. If not specified, the map width in the
header will be used.

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item ORAC-DR PRIMITIVES

_MASK_AST_REGION_

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Produces output files with the suffix C<_crop> if B<OUT> is not
specified.

=head1 NOTES

This primitive should be used on Frame objects only.

It is up to the user to register the output file with the Frame.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Input/output files
my $infile = get_prim_arg($_PRIM_ARGS_, "IMAGE", $Frm->file);
my $outfile = get_prim_arg($_PRIM_ARGS_, "OUT", $Frm->inout("_crop"));

# Retrieve Frame header
my $hdr = $Frm->hdr;

# New map parameters
my $width  = get_prim_arg($_PRIM_ARGS_, "WIDTH", undef);
my $height = get_prim_arg($_PRIM_ARGS_, "HEIGHT", undef);

# Set new width/height if defined
$hdr->{"MAP_WDTH"} = $width if (defined $width);
$hdr->{"MAP_HGHT"} = $height if (defined $height);

# Check the AlignSystem WCS attribute and set it the same as the
# tracking system if necessary
$Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$infile mode=get name=alignsystem(1)");
my ($ORAC_STATUS, $alignsys) = $Mon{ndfpack_mon}->get("wcsattrib","value");

my %TRACK2AST = ( 'J2000' => 'FK5',
                  'B1950' => 'FK4',
                  'APP' => 'GAPPT',
                  'GALACTIC' => 'GALACTIC' );
my $tracksys = $TRACK2AST{ uc( $Frm->hdr("TRACKSYS") ) };
if ( $alignsys ne $tracksys ) {
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$infile mode=set name=alignsystem(1) newval=$tracksys");
}

# Create an AST region with the given map parameters
use JCMT::MapArea;
my $astregion = &JCMT::MapArea::region( header => $hdr );
$Frm->uhdr("MAP_ASTREGION",$astregion);

# Trim the image
_MASK_AST_REGION_ IN=$infile OUT=$outfile GROUP=0

# Restore AlignSystem to same as on entry
if ( $alignsys ne $tracksys ) {
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$infile mode=set name=alignsystem(1) newval=$alignsys");
}
