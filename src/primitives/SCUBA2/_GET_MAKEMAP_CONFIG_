# -*-cperl-*-

=head1 NAME

_GET_MAKEMAP_CONFIG_ - Return a config file suitable for use with MAKEMAP

=head1 SYNOPSIS

 _GET_MAKEMAP_CONFIG_

=head1 DESCRIPTION

Returns the name of a configuration file which may be used by SMURF
MAKEMAP. The default behaviour is to return the system-installed
default configuration file. The Frame uhdr entry
C<MAKEMAP_CONFIG_TYPE> is used to determine the name of the (default)
config file if specified.

The user may over-ride the default behaviour by specifying their own
config file. This can be one in one of two ways. Either supply the
name of a config file via the B<CONFIG> parameter, or via the
C<MAKEMAP_CONFIG> recipe parameter. If not specified as an absolute
path, the file must exist in one of five locations (in the following
order):

=over 2

=item *

the current working directory;

=item *

the directory specified by $MAKEMAP_CONFIG_DIR;

=item *

the directory specified by $ORAC_DATA_OUT;

=item *

the directory specified by $ORAC_DATA_CAL;

=item *

the directory specified by C<share/smurf> under $STARLINK_DIR.

=back

The first match is used. The system default is used if that file can
not be found.

=head1 ARGUMENTS

The primitive has no arguments.

=head1 OUTPUT DATA

On exit, the following entry exists in the primitive hash:

=over 2

=item B<CONFIG>

Full path to the makemap configuration file to be used.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2011,2013 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $syscfg;
# Define a basic default config file
if ( $Frm->uhdr("QUICKLOOK") || $Frm->uhdr("SUMMIT") ) {
  my $ql = ($Frm->uhdr("QUICKLOOK")) ? 1 : 0;
  my $config_type = "normal";
  my $pipeline = $ql ? "ql" : "summit";

  # The QL pipeline only creates images for pointing and focus
  # observations, so use that config file every time.
  if ($ql) {
    $config_type = $Frm->uhdr("MAKEMAP_CONFIG_TYPE")
      if ($Frm->uhdr("MAKEMAP_CONFIG_TYPE") eq "veryshort_planet" ||
	  $Frm->uhdr("MAKEMAP_CONFIG_TYPE") eq "pointing");
  } else {
    $config_type = $Frm->uhdr("MAKEMAP_CONFIG_TYPE")
      if ($Frm->uhdr("MAKEMAP_CONFIG_TYPE") eq "moon" ||
	  $Frm->uhdr("MAKEMAP_CONFIG_TYPE") eq "pointing" ||
	  $Frm->uhdr("MAKEMAP_CONFIG_TYPE") eq "bright_compact"
	 );
  }
  # Retrieve pipeline-specific default
  $syscfg = $Cal->makemap_config( pipeline => $pipeline,
				  config_type => $config_type );
} else {
  # Default config file
  $syscfg = $Cal->makemap_config( config_type => $Frm->uhdr("MAKEMAP_CONFIG_TYPE") );

  # Of course, it could have any old name so check that the file
  # actually exists...
  unless ( -e $syscfg ) {
    orac_warn "Requested config file of type '".
      $Frm->uhdr("MAKEMAP_CONFIG_TYPE")."' does not exist - using system default\n";
    $syscfg = $Cal->makemap_config;
  }
}
# Pointing observations of OMC1 need to have extra parameters added
if ($Frm->hdr("OBJECT") eq "OMC1" && $Frm->uhdr("MAKEMAP_CONFIG_TYPE") eq "pointing") {
  $syscfg .= ",ast.zero_snr=5,ast.zero_circle=<undef>";
}
# If we're doing fakemap processing, add the relevant parameters
# to the config file
if (defined $Frm->uhdr("FAKEMAP")) {
  # Create a local config referencing the current config and adding fakemap params
  use File::Basename qw/basename/;
  my $tmpconfig = File::Spec->catfile($ENV{ORAC_DATA_OUT}, basename($syscfg) ."_copy");
  open my $TMPFH, ">", "$tmpconfig"
    or orac_term "Unable to open temporary config file, $tmpconfig\n";
  print $TMPFH "^$syscfg\n";
  print $TMPFH "fakemap=".($Frm->uhdr("FAKEMAP"))."\n";
  print $TMPFH "fakescale=".($Frm->uhdr("FAKESCALE"))."\n"
    if (defined $Frm->uhdr("FAKESCALE"));
  close($TMPFH);
  $syscfg = $tmpconfig;
}

# Now modify the config for particular conditions - just append
# these to the config string, though this might run into problems if
# the string is too long

# For Mars pointing and focus observations, disable common-mode
# flagging of bolometers because it's so bright
$syscfg .= ",com.noflag=1" if ($Frm->hdr("OBJECT") =~ /mars/i &&
			       $Frm->hdr("OBS_TYPE") =~ /point|focus/i);
# Disable EXT model for focus observations only
$syscfg .= ",modelorder=(com,gai,flt,ast,noi)"
  if ($Frm->hdr("OBS_TYPE") =~ /focus/i);

$_GET_MAKEMAP_CONFIG_{CONFIG} = $syscfg;

# A specified config file over-rides the default
my $configfile;
my $config = $Frm->uhdr("RECPAR_MAKEMAP_CONFIG")
  if ( defined $Frm->uhdr("RECPAR_MAKEMAP_CONFIG") );

if ( defined $config ) {
  use File::Spec;
  # Test for an absolute path
  my $abs = File::Spec->file_name_is_absolute( $config );
  if ( $abs ) {
    # Use this file if it exists
    $configfile = $config if ( -e $config );
  } else {
    # OK not an absolute path - check in current working dir, and
    # other known locations if necessary. Use the first match.
    use Cwd;
    my $configdir = File::Spec->catdir($ENV{STARLINK_DIR}, "share", "smurf");
    my @locations = ( getcwd(), $ENV{MAKEMAP_CONFIG_DIR}, $ENV{ORAC_DATA_OUT},
		      $ENV{ORAC_DATA_CAL}, $configdir );
    foreach my $testlocation ( @locations ) {
      my $new_config = File::Spec->catfile( $testlocation, $config );
      if ( -e $new_config ) {
	$configfile = $new_config;
	last;
      }
    }
  }

  # If the specified config file exists then store it, otherwise fall
  # back on the default defined above.
  if (defined $configfile) {
    $_GET_MAKEMAP_CONFIG_{CONFIG} = $configfile;
  } else {
    orac_warn "Unable to locate given config file, $config - using system default\n";
  }
}
