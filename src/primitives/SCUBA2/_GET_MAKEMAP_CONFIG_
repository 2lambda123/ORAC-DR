# -*-cperl-*-

=head1 NAME

_GET_MAKEMAP_CONFIG_ - Return a config file suitable for use with MAKEMAP

=head1 SYNOPSIS

 _GET_MAKEMAP_CONFIG CONFIG=$cfg

=head1 DESCRIPTION

Returns the name of a configuration file which may be used by SMURF
MAKEMAP. The default behaviour is to return the system-installed
default configuration file. The Frame uhdr entry
C<MAKEMAP_CONFIG_TYPE> is used to determine the name of the config
file if specified.

The user may over-ride the default behaviour with the name of a
customized config file. If not specififed as an absolute path, the
file must exist in one of three locations:

=over 4

=item *

the current working directory;

=item *

the directory specififed by $ORAC_DATA_OUT;

=item *

the directory specififed by $ORAC_DATA_CAL.

=back

The system default is used if the file can not be found.

=head1 ARGUMENTS

The following argument is supported:

=over 4

=item B<CONFIG>

An optional alternative config file name. May be given as an absolute
path, or relative to the current working directory, ORAC_DATA_OUT or
ORAC_DATA_CAL. No default, but if left unspecified, the system default
is returned.

=back

=head1 OUTPUT DATA

On exit, the following entry exists in the primitive hash:

=over 4

=item B<CONFIGFILE>

Full path to the makemap configuration file to be used.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

use File::Spec;
my $config = get_prim_arg( $_PRIM_ARGS_, "CONFIG", undef );

my $syscfg;
# Define a basic default config file
if ( $Frm->uhdr("QUICKLOOK") ) {
  # QL-specific default
  $syscfg = $Cal->makemap_config( ql => 1,
				  filter => $Frm->uhdr("ORAC_FILTER") );
} else {
  # Non-QL default config file
  $syscfg = $Cal->makemap_config( config_type => $Frm->uhdr("MAKEMAP_CONFIG_TYPE"));

  # Of course, it could have any old name so check that the file
  # actually exists...
  unless ( -e $syscfg ) {
    orac_warn "Requested config file, $config, does not exist - using default\n";
    $syscfg = $Cal->makemap_config;
  }
}
$_GET_MAKEMAP_CONFIG_{CONFIGFILE} = $syscfg;

# A specified config file over-rides the default
my $configfile;
if ( defined $config ) {
  # Test for an absolute path
  my $abs = File::Spec->file_name_is_absolute( $config );
  if ( $abs ) {
    # Use this fle if it exists
    $configfile = $config if ( -e $config );
  } else {
    # OK not an absolute path - check in current working dir, and up
    # to two other places if necessary
    use Cwd;
    my @locations = ( getcwd(), $ENV{ORAC_DATA_OUT}, $ENV{ORAC_DATA_CAL} );
    foreach my $testlocation ( @locations ) {
      my $new_config = File::Spec->catfile( $testlocation, $config );
      if ( -e $new_config ) {
	$configfile = $new_config;
	last;
      }
    }
  }

  # If the specified config file exists then store it, otherwise fall
  # back on the default defined above.
  if (defined $configfile) {
    $_GET_MAKEMAP_CONFIG_{CONFIGFILE} = $configfile;
  } else {
    orac_warn "Unable to locate given config file, $config - using default\n";
  }
}
