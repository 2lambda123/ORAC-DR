# -*-cperl-*-

=head1 NAME

_DISPLAY_FASTFLAT_ - Display the current and previous bolometer responsivity maps

=head1 SYNOPSIS

_DISPLAY_FASTFLAT_

=head1 DESCRIPTION

This primitive displays the current and previous bolometer
responsivity data in a single Kapview window. The responsivity images
are mosaicked in focal-plane coordinates and displayed with the Y-axis
pointing up and X-axis increasing to the right.

Displaying the mosaci means that the responsivities for each subarray
are displayed on the same scale, along with their histograms of values
(also on the same scale). The percentage change in responsivity
between the current and previous solutions is also displayed as a 2-D
image scaled with +/-10 %.

=head1 ARGUMENTS

This primitive supports the following arguments:

=over 4

=item B<CLIP>

Number of standard deviations at which to clip the data before
displaying the data on a histogram. The default (undef) is no
clipping.

=back

=head1 EXTERNAL TASKS

The following external tasks are used by this primitive:

=over 4

=item KAPPA:

NDFCOPY, SETTITLE, WCSFRAME

=item ORAC-DR PRIMITIVES:

_FIND_IMAGE_STATISTICS_

=back

=head1 NOTES

The B<CLIP> parameter applies to the data in the current solution. The
corresponding absolute value is used to define the range of values to
be displayed from the previous solution.

This primitive relies on the current and previous responsivity files
corresponding to file numbers 2 and 3 in the given Frame object.

=head1 OUTPUT DATA

On exit the given Frame object will contain the name of the percentage
change image. However, note that this file will be deleted at the end
of processing by the REDUCE_FLATFIELD recipe.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011 the University of British Columbia.  All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Check for a solution before attempting to mosaic
unless ($Frm->uhdr("RESP_NEW")) {
  orac_warn "No responsivities to display\n";
  return ORAC__OK;
}
my $prev = $Frm->uhdr("RESP_OLD");

# Derive the list of current/previous filenames
my @files = map { $_->files } $Grp->members;
my @curfiles = map { $_ .".more.smurf.resp_new" } @files;
my @prefiles = map { $_ .".more.smurf.resp_old" } @files;

# Set the coordinate frame to FPLANE
foreach my $file (@curfiles, @prefiles) {
  $Mon{ndfpack_mon}->obeyw("wcsframe","ndf=$file frame=fplane");
}

# Reference subarray
my $refsub = ($Frm->uhdr("ORAC_FILTER") =~ /450/) ? "s4d" : "s8b";

# Find out which file corresponds to the reference subarray, redefine
# the reference if not present.
my %ref;
foreach my $file (@files) {
  # Never trust the filenames...
  my $fitshdr = new Astro::FITS::Header::NDF( File => $file );
  $ref{lc($fitshdr->value("SUBARRAY"))} = $file;
}
my $ref = $ref{$refsub};
unless ($ref) {
  # Pick first one...
  my @subs = sort keys %ref;
  $refsub = $subs[0];
  $ref = $ref{$refsub};
}

# Now use knowledge of the orientation of the arrays to get the X and
# Y axes pointing the right way. Note s4d is the `right way up', so no
# need to flip or rotate.
my ($flip, $rotate, $axis, $angle) = (0, 0, 0, 0);
if ($refsub eq "s8b") {
  # Flip about Y-axis (flip axis 1)
  $flip = 1;
  $axis = 1;
} elsif ( $refsub eq "s4a" || $refsub eq "s8c" ) {
  # Rotate 90 CW
  $rotate = 1;
  $angle = 90;
} elsif ( $refsub eq "s4b" ) {
  # Rotate 180
  $rotate = 1;
  $angle = 180;
} elsif ( $refsub eq "s8d" ) {
  # Flip about X-axis (flip axis 2)
  $flip = 1;
  $axis = 2;
} elsif ( $refsub eq "s4c" ) {
  # Rotate 90 CCW, flip about X (axis 2)
  $rotate = 1;
  $angle = -90;
  $flip = 1;
  $axis = 1;
} elsif ( $refsub eq "s8a" ) {
  # Rotate 90 CW, flip about X (axis 2)
  $rotate = 1;
  $angle = 90;
  $flip = 1;
  $axis = 1;
}

orac_print "\nCreating combined responsivity images...";

# Output file name for responsivity mosaic: _respmos
my $out = $Frm->rewrite_outfile_subarray(scalar($Frm->inout("_respmos")));
my @out;

# Create mosaic for current/previous (PROPOSED/CURRENT)
foreach my $soln ("PROPOSED", "CURRENT") {
  my (@infiles, $ext, $newsoln);
  if ($soln eq "PROPOSED") {
    $newsoln = ($Grp->uhdr("BATCH_FLAT")) ? "Last (".lc($soln).") fastflat" : $soln;
    @infiles = @curfiles;
    $ext = "resp_new";
  } else {
    # Skip creation of previous responsivity mosaic if there is no solution
    next unless ($prev);
    $newsoln = ($Grp->uhdr("BATCH_FLAT")) ? "First (".lc($soln).") fastflat" : $soln;
    @infiles = @prefiles;
    $ext = "resp_old";
  }

  my $inlist = write_file_list( @infiles );
  my $mos = ORAC::TempFile->new();

  # Combine responsivity images using nearest-neighbour
  my $mosref = $ref.".more.smurf.$ext";
  my $args = "in=^$inlist out=$mos ref=$mosref lbnd=! ubnd=! method=nearest";
  $Mon{kappa_mon}->obeyw("wcsmosaic","$args");

  # Perform the required flip and/or rotation
  my $processed = $mos;
  my $rot = ORAC::TempFile->new();
  my $flipped = ORAC::TempFile->new();
  if ($rotate) {
    $Mon{kappa_mon}->obeyw("rotate","in=$mos out=$rot angle=$angle");
    $processed = $rot;
  }
  if ($flip) {
    $mos = $rot if ($rotate);
    $Mon{kappa_mon}->obeyw("flip","in=$mos out=$flipped dim=$axis");
    $processed = $flipped;
  }

  # Save result to a file
  my $outname = $out . ".more.smurf.$ext";
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$processed out=$outname");

  my $title = "$newsoln solution";
  $Mon{ndfpack_mon}->obeyw("settitle","ndf=$outname title='$title'");

  push (@out, $outname);
}
orac_print " done.";

my $pcresp;
if ($prev) {
  # Create the `percentage change' image
  my $deltafile = $out.".more.smurf.resp_delta";
  my $exp = "PA*(IA-IB)/IB";
  my $args = "exp=$exp IA=$out[0] IB=$out[1] PA=100.0 out=$deltafile";
  $Mon{kappa_mon}->obeyw("maths","$args");
  $args = "ndf=$deltafile title='Percentage change'";
  $Mon{ndfpack_mon}->obeyw("settitle","$args");

  # Store this as another extension in flatfield file
  $pcresp = $Frm->rewrite_outfile_subarray(scalar($Frm->inout("_pcrsp")));
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$deltafile out=$pcresp");

  # Calculate responsivity ratio image - note there is no display
  # associated with this image and should probably not be created in the
  # QL or SUMMIT pipelines
  unless ($Frm->uhdr("QUICKLOOK") || $Frm->uhdr("SUMMIT")) {
    my $ratio = $out . ".more.smurf.resp_ratio";
    $args = "in1=$out[0] in2=$out[1] out=$ratio title='Responsivity ratio: proposed/current'";
    $Mon{kappa_mon}->obeyw("div","$args");
  }
}

# Find min/max of current responsivity image so previous image can
# be displayed on same scale
_FIND_IMAGE_STATISTICS_ IMAGE=$out[0] HISTAT=0 VERBOSE=0
my $zmin = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MIN};
my $zmax = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MAX};
my $clip = 0.5 * max(abs($zmin), abs($zmax)) / $_FIND_IMAGE_STATISTICS_{RESULTS}->{SIGMA};

my %options = ( SIGMA => $clip, ZMIN => $zmin, ZMAX => $zmax );

# Display the results
orac_print " Displaying data...\n";
orac_warn "No previous solution to display - percentage change image will not be created\n" unless ($prev);
my $tmpFrm = $Frm->new();
$tmpFrm->files(@out);
$Display->display_data( $tmpFrm, \%options, -1 );

if ($pcresp) {
  # Now display the percentage change image
  $tmpFrm->files( ($pcresp) );
  # Display limits for delta image
  ($zmin, $zmax) = (-10.0, 10.0);
  %options = ( SIGMA => $clip, ZMIN => $zmin, ZMAX => $zmax );
  $Display->display_data($tmpFrm, \%options, -1);

  # Don't need to keep this file
  $Frm->push_intermediates($pcresp);
}
