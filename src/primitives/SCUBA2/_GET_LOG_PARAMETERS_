# -*-perl-*-

=head1 NAME

_GET_LOG_PARAMETERS_ - Obtain logging parameters common to all log files

=head1 SYNOPSIS

  _GET_LOG_PARAMETERS_ GROUP=1

=head1 DESCRIPTION

Retrieve logging parameters from the specified Frame or Group
object. The parameters returned are those common to all log files
written by the SCUBA-2 pipeline. They are returned as an array
reference (see C<OUTPUT DATA> below). The user may optionally return a
basic set of parameters suitable for non-tracking observing modes
(e.g. NOISE or FLATFIELD).

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

Flag to indicate whether to obtain parameters from the Group
object. Default is 0 (use the current Frame).

=item B<PARLIST>

Define the amount of information returned. May be C<FULL> or C<BRIEF>.

=back

=head1 EXTERNAL TASKS

None.

=head1 OUTPUT DATA

On exit, the primitive hash, C<%_GET_LOG_PARAMETERS_> contains a
single key called PARAMS. The value stored in this key is an array
reference with the following elements:

=over 4

=item *

UT time of observation

=item *

HST of observation

=item *

Observation number

=item *

Source name

=item *

Observation mode

=item *

Filter name for current observation

=item *

Mean elevation in degrees for duration of observation

=item *

Mean CSO tau for duration of observation

=item *

Mean tau corresponding to the current filter for duration of observation

=item *

Mean seeing in arcsec for duration of observation

=back

=head1 OUTPUT FILES

None

=head1 KNOWN ISSUES

This primitive uses translated header entries, which may not be
defined for Group objects. Either C<UNKNOWN> or a string composed of
multiple asterisks is substituted.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>,
Tim Jenness <lt>t.jenness@jach.hawaii.eduE<gt>

Copyright (C) 2008-2009 Science & Technology Facilities Council.
Copyright (C) 2008 the University of British Columbia.  All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Read arguments
my $Obj = ($_PRIM_ARGS_->{GROUP} ? $Grp : $Frm);

my $paramlist = uc(get_prim_arg( $_PRIM_ARGS_, "PARLIST", "FULL"));

# ORACUT
my $utdate = $Obj->hdr('ORACUT');
my $uttime = sprintf "%.7f", $Obj->hdr('ORACTIME');

# HSTSTART (no decimal places)
my $hst    = $Obj->hdr('HSTSTART');
if (defined $hst) {
  my (@hst)  = split(/:/, $hst);
  $hst = sprintf '%5s', $hst[0] . ":" . $hst[1] .":". $hst[2];
} else {
  my $ut = $Obj->uhdr('ORAC_UTSTART');
  if (defined $ut) {
      $hst = sprintf('%02d:%02d:%02dUT', $ut->hour, $ut->min, $ut->sec);
  } else {
      $hst = "UNKNOWN";
  }
}

# Observation number
my $obsnum = sprintf "%4d", $Obj->uhdr('ORAC_OBSERVATION_NUMBER');

# OBJECT
my $src = substr((sprintf "%-12s",
                  (defined $Obj->uhdr('ORAC_OBJECT') ?
                   uc($Obj->uhdr('ORAC_OBJECT')) : "<none>" )),0,12);

# MODE
my $mode = $Obj->uhdr("ORAC_OBSERVATION_MODE");
$mode = sprintf "%-11s", $mode;

# Filter System
my $filter = $Obj->uhdr("ORAC_FILTER");

if ( $paramlist eq "FULL" ) {

  # Average of start and end elevation
  my $el = "**";
  if (defined $Obj->uhdr('ORAC_ELEVATION_START') &&
      defined $Obj->uhdr('ORAC_ELEVATION_END') ) {
    $el = ($Obj->uhdr('ORAC_ELEVATION_START') + $Obj->uhdr('ORAC_ELEVATION_END'))/ 2.0;
    $el = sprintf "%2.0f", $el;
  }

  # TAU from calibration object
  my $tauval = $Cal->tau($filter);
  my $tau = "*****";
  $tau = sprintf "%5.2f", $tauval if defined $tauval;

  # Use that tau to calculate CSO
  my $cso = "*****";
  if (defined $tauval) {
    my ($csoval, $status) = JCMT::Tau::get_tau('CSO',$filter, $tauval);
    $cso = sprintf "%5.3f", $csoval if ($status == 0 && defined $csoval);
  }

  # Seeing
  my $seeing = $Frm->hdr('SEEING');
  my $see = "*****";
  $see = sprintf "%5.2f", $seeing if defined $seeing;

  $_GET_LOG_PARAMETERS_{PARAMS} = [$uttime, $hst, $obsnum, $src, $mode, $filter, $el, $cso, $tau, $see];
} else {
  $_GET_LOG_PARAMETERS_{PARAMS} = [$uttime, $hst, $obsnum, $src, $mode, $filter];
}
