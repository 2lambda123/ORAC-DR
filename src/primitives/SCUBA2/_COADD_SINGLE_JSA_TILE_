# vim: syn=perl

=head1 NAME

_COADD_SINGLE_JSA_TILE_ - co-add JSA tiled images

=head1 DESCRIPTION

This primitive co-adds all the files in the frame using MAKEMOS with
the "mean" method. It will first of all apply the default FCFs to
convert to mJy/arcs**2.

=head1 ARGUMENTS

=over 4

=item TITLE

The title for the co-added image.

=item OUT

The initial output filename.  The primitive can perform
extra processing (e.g. calibration) leading to a filename
derived from this.

=back

=head1 COPYRIGHT

Copyright (C) 2014, 2017 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut

my $title = get_prim_arg($_PRIM_ARGS_, 'TITLE', undef);
my $out = get_prim_arg($_PRIM_ARGS_, 'OUT', undef);

orac_termerr('TITLE or OUT missing')
    unless defined $title and defined $out;

my @files = $Frm->files();


unless (1 < scalar @files) {

    # If there is only one file for this tile, just copy it
    # and set its title.  Place Parameter TITLE before Parameter NDF to
    # prevent object names containing parentheses from confusing the
    # command-line parser, which attributes the parentheses to the NDF.

    @files = $Frm->files();
    my $in = $files[0];
    orac_say("   single file: $in");
    orac_say("   copy to: $out");
    $Mon{'ndfpack_mon'}->obeyw('ndfcopy', "in=$in out=$out");
    $Mon{'ndfpack_mon'}->obeyw('settitle', "title='$title' ndf=$out");
    #$Grp->push_intermediates($Frm->file(1));
    # Push calibrated files to intermediates.
    #$Grp->push_intermediates(@files);
    $Frm->files($out);
} else {
    @files = $Frm->files();
    orac_say("    file: $_") foreach @files;
    orac_say("    output: $out");
    my $filelength = scalar @files;
    orac_say(" There are $filelength files to be coadded");
    my $inlistref = \@files;

    if ($filelength < 1000) {
      orac_debug(" We have less than 1000 files: coadding in one go. ");
      my $in = write_file_list(@files);
      my $args = "in=^$in out=$out title='$title' " . 'method=mean noscale usevar nozero';
      $Mon{'ccdpack_reg'}->obeyw('makemos', "$args");
    } else {

      # We have more than 1000 files, so we have to coadd. Do this in batches of 500 at a time.
      my $i = 0;
      my $batchsize=500;
      my @tempfiles;
      my $finalindex;
      orac_say("More than 1000 files; coadding in batches of $batchsize\n");
      while ($i <= $filelength/$batchsize) {
        $finalindex = $batchsize*$i+$batchsize > ($filelength) ? $filelength : $i*$batchsize+$batchsize;
        orac_say("Indexing from ". $batchsize*$i . " to $finalindex");
        my @shortfiles = @files[($batchsize*$i)..$finalindex-1];
        orac_say("    file: $_") foreach @shortfiles;
        my $in = write_file_list(@shortfiles);
        my $tempout = ORAC::TempFile->new();
        my $args = "in=^$in out=$tempout title='$title'  method=mean noscale usevar nozero";
        $Mon{'ccdpack_reg'}->obeyw('makemos', "$args");
        push(@tempfiles, $tempout);
        $i++;
      }

      my $in=write_file_list(@tempfiles);
      # Now combine the final files. This will stop working at some number of files.
      orac_say("Performing final coadd of the batches.");
      my $args = "in=^$in out=$out title='$' "
        . 'method=mean noscale usevar nozero';
      $Mon{'ccdpack_reg'}->obeyw('makemos', "$args");
      my $inlistref=\@files;

    }
    # Merge the FITS headers into the co-added file.
    _MERGE_FITS_HEADERS_ OUT=$out INLIST=$inlistref

      # Now add up exposure times, etc.  This should be done in the same
      # way as _MOSAIC_JCMT_IMAGES_ does.  We call the same primitive as
      # it uses.
      my $complist = 'exp_time,weights';
    _ADD_IMAGE_COMPS_ OUT=$out EXTEN=smurf COMPS=$complist INLIST=$inlistref

  $Frm->files($out);

  # Push calibrated files to intermediates.
  $Grp->push_intermediates(@files);
}


