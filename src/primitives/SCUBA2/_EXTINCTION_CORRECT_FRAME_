#! -*-perl-*-

=head1 NAME

_EXTINCTION_CORRECT_FRAME_

=head1 SYNOPSIS

  _EXTINCTION_CORRECT_FRAME_ EXTCOR_MODE=QUICK

=head1 DESCRIPTION

This primitive corrects each frame for atmospheric extinction. It can
be run on a single mosaicked frame or with aligned subarray frames.

=head1 ARGUMENTS

=over 4

=item B<EXTCOR_MODE>

EXTCOR_MODE determines which extinction correction is applied. If set
to FULL, then an accurate pixel-level correction is applied taking
into account the airmass of individual pixels. If set to QUICKER then
the image is corrected assuming a single value for the airmass across
the array.

=back

=head1 KNOWN ISSUES

To be accurate the mean tau and airmass should be read from each
subframe rather than a mean for the entire observation. This also
requires that the extinction correction occurs before mosaicking
in the non-QuickLook recipe.

=head1 ALGORITHMS

In FULL mode SMURF EXTINCTION is used to apply the extinction on a
per-pixel basis

In QUICK mode, SMURF EXTINCTION is used to apply a mean extinction
correction using its internal QUICK parameter.

In QUICKER mode the extinction correction is calculated as a single value
and is applied using the KAPPA CMULT routine.

=head1 FILE SUFFIX

Creates output files with a '_ext' suffix.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2004-2006 University of British Columbia and the
Particle Physcis and Astronomy Research Council. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut


my $extcor_mode = uc( $_EXTINCTION_CORRECT_FRAME_{EXTCOR_MODE} || 'FULL');

my @out;
my $extmethod; # Should this be a parameter?

orac_print "Correcting for extinction in $extcor_mode mode\n";
if ( $extcor_mode eq 'FULL' ) {
  $extmethod = "WVMR";
  for my $i (1..$Frm->nfiles) {

    my ($in, $out) = $Frm->inout('_ext',$i);
    push(@out, $out);

    my $extargs = "in=$in out=$out method=$extmethod quick=false accept";
    $Mon{smurf_mon}->obeyw("extinction",$extargs);
  }

} elsif ( $extcor_mode eq 'QUICK' ) {

  $extmethod = "CSOTAU";
  for my $i (1..$Frm->nfiles) {

    # Select tau for this timeslice - what if it's not there?
#    my $tau = $Frm->hdr->{SUBHEADERS}->[$i-1]->{MEANWVM};
    my $tau = 0.4;
    my ($in, $out) = $Frm->inout('_ext',$i);
    push(@out, $out);
    orac_print "Correcting extinction for file $in\n";
    my $extargs = "in=$in out=$out method=$extmethod csotau=$tau quick=true";
    $Mon{smurf_mon}->obeyw("extinction",$extargs);
  }

} elsif ( $extcor_mode eq 'QUICKER' ) {

  # Use mean values from FITS header
  my $last = $Frm->nfiles - 1;
  my ($tau, $airmass);
  # First time round there are no subheaders TMP HACK
  # Better to check if the subheaders exist
  if ($last == 3 || $last == 0) {
    $tau = $Frm->hdr->{MEANWVM};
    $airmass = $Frm->hdr->{AMSTART};
  } else {
    $tau = 0.5 * ( $Frm->hdr->{SUBHEADERS}->[0]->{MEANWVM} 
		   + $Frm->hdr->{SUBHEADERS}->[$last]->{MEANWVM} );
    $airmass = 0.5 * ( $Frm->hdr->{SUBHEADERS}->[0]->{AMSTART} 
		       + $Frm->hdr->{SUBHEADERS}->[$last]->{AMEND} );
  }

  # Convert WVM TAU (which is 225 GHz) to filter TAU

  my $extcor = exp($tau*$airmass);

  orac_print "QUICKER: Airmass = ".$airmass.", tau = ".$tau."\n";

  for my $i (1..$Frm->nfiles) {

      my ($in, $out) = $Frm->inout('_ext',$i);
      push(@out, $out);

      # Just multiply images by e^tA
      $Mon{kappa_mon}->obeyw("cmult","in=$in scalar=$extcor out=$out");
  }
} else {

  orac_err("Unrecognized EXTCOR_MODE, $extcor_mode");
  my $ORAC_STATUS = ORAC__ERROR;

}

# register new file names
$Frm->files( @out );

orac_print "Extinction corrected (mode = $extcor_mode) \n";

#my $mytime = localtime;
#orac_print $mytime ."\n";

