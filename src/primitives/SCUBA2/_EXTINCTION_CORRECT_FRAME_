# -*-cperl-*-

=head1 NAME

_EXTINCTION_CORRECT_FRAME_ - correct all files in Frame for atmospheric extinction

=head1 SYNOPSIS

_EXTINCTION_CORRECT_FRAME_ EXTCOR=QUICK

=head1 DESCRIPTION

This primitive corrects each file in the current Frame for atmospheric
extinction. The method for deriving the correction can be specified by
the user depending on how accurate it should be and/or how fast it
should be applied. The default is to use the quickest method possible,
which is to calculate a mean optical depth and airmass for all the
files in the current Frame and multiply each file by the same
correction factor.

=head1 ARGUMENTS

The following argument is supported:

=over 4

=item B<EXTCOR>

Type of extinction correction to be applied. Valid options are
C<ADAPTIVE>, C<FULL>, C<QUICK>, and C<QUICKER>. Default is C<QUICKER>.

=over 4

=item FULL

Applies a correction factor for each pixel in each file based on the
airmass of that pixel and the optical depth for that file.

=item QUICK

Applies a correction factor to each file based on the mean optical
depth and airmass appropriate for that file.

=item QUICKER

Applies a single correction factor to all files in the Frame. Assumes
the same optical depth and airmass for all files.

=back

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

CMULT

=item SMURF:

EXTINCTION

=back

=head1 NOTES

This primitive relies on SMURF using its own internal conversion
methods between measured optical depths and optical depths at the
observed wavelength. For consistency these should be identical to
those in JCMT::Tau::SCUBA2. On-sky experience may result in refined
expressions in SMURF but that will not affect this primitive.

While this primitive will mostly be used for 2-D images, it is also
capable of dealing with time-series data.

=head1 OUTPUT DATA

The uhdr entry C<EXTINCTION> is set to 1 if successful.

=head1 OUTPUT FILES

Creates output files with suffix C<_ext>, one for each input file.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2004-2008 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Only proceed if the EXTINCTION flag is unset
unless ( $Frm->uhdr("EXTINCTION") ) {

  # Read the extinction correction argument if present
  my $extcor = uc(get_prim_arg($_PRIM_ARGS_, "EXTCOR", "QUICKER" ));

  # Check for valid value, use QUICKER if not recognized
  unless ( ( $extcor eq "QUICK" ) || ( $extcor eq "QUICKER" ) || ( $extcor eq "FULL" ) || ($extcor eq 'ADAPTIVE')) {
    orac_warn "Unrecognized extinction correction method, $extcor: assuming QUICKER\n";
    $extcor = "QUICKER";
  }

  # Tell user what we're doing
  orac_print "Correcting for extinction using $extcor method\n";

  # Define list of input and output files
  my ($inlist, $outlist, @out) = write_file_list_inout($Frm, "_ext");

  if ($extcor eq 'ADAPTIVE') {
    # Adaptive mode passes the method=adaptive parameter to
    # SMURF EXTINCTION to allow it to choose between QUICK
    # and FULL methods.  Also uses tausrc=auto.
    my $args = "in=^$inlist out=^$outlist method=adaptive tausrc=auto csotau=! hasskyrem accept";
    $Mon{'smurf_mon'}->obeyw('extinction', $args);
  }
  elsif ( $extcor eq 'FULL' ) {
    # Check input data for dimensionality as the `FULL' method means
    # different things depending on whether the data are in the form of
    # 2-D images or 3-D timestream.

    # Use the fact that all images in a Frm will have same
    # dimensionality. Use first file in Frm.
    $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=".$Frm->file);
    my ($ORAC_STATUS, $ndim) = $Mon{ndfpack_mon}->get("ndftrace","ndim");

    # Check for 2 or 3-D and set method accordingly
    my $extmethod;
    if ( $ndim == 2 ) {
      # For method CSOTAU we will let the extinction task select the
      # value from the header
      $extmethod = "CSOTAU";
    } elsif ( $ndim == 3 ) {
      # Else use the raw WVM data
      $extmethod = "WVMR";
    }
    # Process all files at once since they share arguments
    my $extargs = "in=^$inlist out=^$outlist method=$extmethod noquick hasskyrem accept";
    $Mon{smurf_mon}->obeyw("extinction",$extargs);
  } elsif ( $extcor eq 'QUICK' ) {

    # Use the QUICK method, let extinction obtain MEANWVM from FITS
    # header
    my $extargs = "in=^$inlist out=^$outlist method=CSOTAU csotau=! quick hasskyrem";
    $Mon{smurf_mon}->obeyw("extinction",$extargs);

  } else {
    # OK if the user has not specified FULL or QUICK then use the
    # quickest possible method, QUICKER

    # Use mean values from FITS header

    # CSO Tau - use average of first and last value. If tau changes
    # significantly over the duration of the Frame then this method is
    # not appropriate.
    my $tau;
    if (defined $Frm->hdrval('WVMTAUST', 0 ) && defined $Frm->hdrval('WVMTAUEN',-1)) {
      my $csotau = 0.5*($Frm->hdrval('WVMTAUST', 0) + $Frm->hdrval('WVMTAUEN',-1));

      # Get wavelength via name of filter. Assume that the string `850' or
      # `450' will form part of the filter name.
      my $filter = $Frm->uhdr('ORAC_FILTER');
      my $wavelen = ( $filter =~ /850/ ) ? "850" : "450";

      # Use JCMT::Tau::SCUBA2 module for tau conversions
      use JCMT::Tau::SCUBA2;
      # Convert WVM TAU (which is 225 GHz) to filter TAU
      if (defined $csotau && $csotau > 0) {
        ($tau, my $status) = get_tau( $wavelen, 'CSO', $csotau );
      } else {
        orac_warn "Using a tau of 0.0. CSO tau information unavailable.\n";
        $tau = 0.0;
      }
    } else {
      orac_warn "Unable to determine a tau value. Using 0.\n";
      $tau = 0.0;
    }

    # Pseudo-average Airmass, should be close enough
    my $airmass;
    if (defined $Frm->hdrval('AMSTART',0)) {
      $airmass = 0.5 * ($Frm->uhdr('ORAC_AIRMASS_START') +
                        $Frm->uhdr('ORAC_AIRMASS_END'));
    } else {
      orac_warn "Unable to determine airmass of observation. Using 1.0\n";
      $airmass = 1;
    }

    # Extinction correction factor
    my $extcor = exp($tau*$airmass);

    # Apply same multiplier to each frame
    $Mon{kappa_mon}->obeyw("cmult","in=^$inlist scalar=$extcor out=^$outlist");
  }

  # Register new file names
  $Frm->files( @out );

  # Print Done message and set uhdr flag
  orac_print "Extinction corrected (method = $extcor) \n";
  $Frm->uhdr("EXTINCTION",1);
}
