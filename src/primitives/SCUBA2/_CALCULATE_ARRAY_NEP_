# -*-cperl-*-

=head1 NAME

_CALCULATE_ARRAY_NEP_ - derive the effective, weighted or RMS NEP for a subarray

=head1 SYNOPSIS

 _CALCULATE_ARRAY_NEP_ IN=$nepfile

 _CALCULATE_ARRAY_NEP_ IN=$nepfile NEPVAL=rms

=head1 DESCRIPTION

This primitive calculates the RMS or effective NEP given an image
containing NEP values. The effective NEP is defined as the square-root
of the reciprocal of the sum of the reciprocal squares of the NEP
values:

NEP_eff = sqrt( 1 / sum_i (1/NEP_i)**2  )

where NEP_i is the NEP for bolometer i and the sum is over all
bolometers (1 to N_bol). Optionally the effective NEP may be
normalized by multiplying by the square-root of the number of
bolometers (see the parameter B<NORM> below) to get a characteristic
per-bolometer NEP.

The RMS NEP is simply:

NEP_rms = sqrt( (sum_i (NEP_i)**2) / N_bol  )

The weighted NEP is given by

NEP_wt = sum_i (1/NEP_i) / sum_i (1/NEP_i)**2

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<IN>

Name of input NEP file. No default. Note this must be the name of the
NEP file itself, not the top-level container NDF.

=item B<NEPTYPE>

Type of NEP to return (effective or RMS). May be C<eff>,
C<rms> or C<weight>. Default is C<eff>.

=item B<NORM>

Flag to indicate whether to normalize the effective NEP by the number
of bolometers. Default is 0 (no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

MATHS

=item ORAC-DR PRIMITIVES

_FIND_IMAGE_STATISTICS_

=back

=head1 OUTPUT DATA

The primitive hash, C<%_CALCULATE_ARRAY_NEP_> contains two keys on
exit called C<NEPVAL> which contains the value of the effective NEP
derived in this primitive, and C<NUMGOOD> the number of good NEP
values used in the calculation. The value is C<undef> if the
calculation failed.

=head1 OUTPUT FILES

None.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2011 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Input NEP file
my $nepfile = get_prim_arg($_PRIM_ARGS_, "IN", undef);
orac_err "_CALCULATE_ARRAY_NEP_ requires in input file"
  unless defined $nepfile;

# Type of NEP to calculate
my $result = lc(get_prim_arg($_PRIM_ARGS_, "NEPTYPE", "eff"));
my $weight = ($result =~ /^w/) ? 1 : 0;

# Calculate the square, reciprocal and/or the reciprocal square of the
# NEP image
my $exp;
if ($result eq "rms") {
  $exp = "(ia**2)";
} elsif ($result eq "eff") {
  $exp = "(1./ia**2)";
} elsif ($weight) {
  $exp = "(1./ia)";
}
my $out = new ORAC::TempFile;
my $outfile = $out->file;
my $args = "ia=$nepfile exp=$exp out=$outfile";
$Mon{kappa_mon}->obeyw("maths","$args");

# Then calculate sum of the pixels in that image
_FIND_IMAGE_STATISTICS_ HISTAT=0 IMAGE=$outfile VERBOSE=0
my %results = %{ $_FIND_IMAGE_STATISTICS_{RESULTS} };

# Set the numerator and denominator accordingly
my ($num, $denom);
if ($result eq "rms") {
  $num = $results{SUM};
  $denom = $results{NUMGOOD};
} elsif ($result eq "eff") {
  # Should the effective NEP be normalized by the number of bolometers?
  # Default to no.
  my $norm = get_prim_arg($_PRIM_ARGS_, "NORM", 0);

  $num = ( $norm ) ? $results{NUMGOOD} : 1.0;
  $denom = $results{SUM};
} elsif ($weight) {
  $num = $results{SUM};

  my $outwt = ORAC::TempFile->new();
  $Mon{kappa_mon}->obeyw("mult","in1=$outfile in2=$outfile out=$outwt");
  _FIND_IMAGE_STATISTICS_ HISTAT=0 IMAGE=$outwt VERBOSE=0
  $denom = $_FIND_IMAGE_STATISTICS_{RESULTS}->{SUM};
}

# Protect against divide-by-zero
my $ratio = ( $denom != 0 ) ? $num / $denom : undef;
if ($ratio) {
  my $nep = ($weight) ? $ratio : sqrt($ratio);
  $_CALCULATE_ARRAY_NEP_{NEPVAL} = $nep;
  $_CALCULATE_ARRAY_NEP_{NUMGOOD} = $results{NUMGOOD};
}

