#! -*-perl-*-

=head1 NAME

_MAKEMAP_FRAME_

=head1 SYNOPSIS

  _MAKEMAP_FRAME_ PIXSIZE=7.5

=head1 DESCRIPTION

This primitive takes timeseries data for the current frame and
constructs an image. This is a many to one operation, with only a
single output file created.

=head1 ARGUMENTS

=over 4

=item B<PIXSIZE>

PIXSIZE is the size of the output pixels in arcsec. The default is
equal to the pixel spacing (ie 6 arcsec).

=item B<SYSTEM>

Coordinate system for output image. May be any supported by
C<AST>. Default is C<TRACKING>.

=item B<SPREAD>

Desired pixel-spreading scheme. May be either C<nearest> for 
nearest-neighbour resampling or C<linear> for bi-linear resampling. 
Default is C<nearest>.

=item B<KEEP>

Flag to denote whether to keep the intermeditate files produced by the
iterative map-maker. Warning: setting this to true may result in
significant disk space usage. Default is 0 (delete files).

=item B<METHOD>

Image reconstruction method. May be C<REBIN> to use a simple rebinning
scheme or C<ITER> to use the iterative map-maker. If C<ITER> is
specified then the following parameters must also be set to override
the defaults (which may not do what you want).

=item B<NUMITER>

Number of iterations. Default is 1, which is clearly not a good
choice.

=item B<MODELORDER>

Comma-separated list of model components. See the SMURF documentation
for further details.

=item B<EXPORTNDF>

Flag to indicate whether intermediate files are written out in NDF
format at the end. Default is 0 (do not write as NDF).

=back

=head1 KNOWN ISSUES

...

=head1 ALGORITHMS

...

=head1 FILE SUFFIX

Creates a single output file with a '_fmos' suffix.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 University of British Columbia and the Particle
Physcis and Astronomy Research Council. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut


# Pixel size for output image
my $pixsize = (exists $_MAKEMAP_FRAME_{PIXSIZE} && 
	       defined $_MAKEMAP_FRAME_{PIXSIZE}) ?
               $_MAKEMAP_FRAME_{PIXSIZE} : $Cal->pixelscale;

# Output coordinate system - default is TRACKING
my $system = (exists $_MAKEMAP_FRAME_{SYSTEM} && 
	       defined $_MAKEMAP_FRAME_{SYSTEM}) ?
               $_MAKEMAP_FRAME_{SYSTEM} : "TRACKING";

# Pixel-spreading scheme
my $spread = (exists $_MAKEMAP_FRAME_{SPREAD} && 
	      defined $_MAKEMAP_FRAME_{SPREAD}) ?
              lc($_MAKEMAP_FRAME_{SPREAD}) : "nearest";

# Reset to "nearest" if an unsupported scheme is given
if ( ($spread ne "nearest") && ($spread ne "linear") ) {
  orac_warn "Unsupported pixel-spreading scheme, $spread: using NEAREST\n";
  $spread = "nearest";
}

# Method for reconstructing map
my $method = (exists $_MAKEMAP_FRAME_{METHOD} && 
	       defined $_MAKEMAP_FRAME_{METHOD}) ?
               lc($_MAKEMAP_FRAME_{METHOD}) : "rebin";
my $iterate = 0;
# Minimum match on iterate method
if ( $method =~ /iter/ ) {
  $method = "iterate";
  $iterate = 1;
}

# Verbosity - default to yes
my $verbose = (exists $_MAKEMAP_FRAME_{VERBOSE} && 
	       defined $_MAKEMAP_FRAME_{VERBOSE}) ?
               lc($_MAKEMAP_FRAME_{VERBOSE}) : 1;

# Retrieve list of files in current frame
my @files = $Frm->files;

# Write filenames to a temp file
my $intmp = new ORAC::TempFile;
print {$intmp->handle} join("\n",@files[0..$#files]);

# Set output filename
my ($in, $out) = $Frm->inout('_fmos');

# Makemap argument list
my $args = "in=^".$intmp->file." out=$out pixsize=$pixsize spread=$spread system=$system method=$method";

# Check for additional parameters for the iterative map-maker
my ($exportndf, $keepdimm, $numiter, $modelorder, @modelorder, $config);
if ( $iterate ) {
  # Number of iterations - default to 1 to force user to make a
  # decision
  $numiter = (exists $_MAKEMAP_FRAME_{NUMITER} && 
	      defined $_MAKEMAP_FRAME_{NUMITER}) ?
	      $_MAKEMAP_FRAME_{NUMITER} : 1;

  # Flag for whether to export work files to NDF
  $exportndf = (exists $_MAKEMAP_FRAME_{EXPORTNDF} && 
		defined $_MAKEMAP_FRAME_{EXPORTNDF}) ?
		$_MAKEMAP_FRAME_{EXPORTNDF} : 0;

  # Flag for whether to keep intermediate DIMM files
  $keepdimm = (exists $_MAKEMAP_FRAME_{KEEP} && 
	       defined $_MAKEMAP_FRAME_{KEEP}) ?
	       $_MAKEMAP_FRAME_{KEEP} : 0;

  # Flag for whether to export work files to NDF
  $modelorder = (exists $_MAKEMAP_FRAME_{MODELORDER} && 
		 defined $_MAKEMAP_FRAME_{MODELORDER}) ?
		 lc($_MAKEMAP_FRAME_{MODELORDER}) : "com,noi";

  # Split modelorder into components before recombining
  @modelorder = split(/,/,$modelorder);
  
  # Concatenate list of model components into a single space-separated
  # string
  $modelorder = join(" ",@modelorder);

  # Write parameters to config file
  $config = new ORAC::TempFile;
  print {$config->handle} "numiter=$numiter\n";
  print {$config->handle} "exportndf=$exportndf\n";
  print {$config->handle} "modelorder=$modelorder\n";
  $config->handle->close;
  $args .= " config=^".$config->file;
}

# Secret extra-verbose value ;-)
if ( $verbose == 2 ) {
  $args .= " msg_filter=verbose"
}

# Call makemap - really must have some sort of feedback to user
orac_print "Calling makemap... using $method method (this may take... a while...)\n";
$Mon{smurf_mon}->obeyw("makemap",$args);

# Now, is there any analysis of the intermediate files that could be
# useful?

# Delete iterative map-maker files
if ( $iterate ) {
  orac_print "Removing model files from the iterative map-maker\n" 
    if ($verbose != 0);
  unlink <*.dimm>;
}

# Register the new file name
$Frm->files( $out );

# Delete config file if present
undef $config if ($config);

orac_print "Thank you for waiting; image $out created\n";

