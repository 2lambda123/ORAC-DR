# -*-cperl-*-

=head1 NAME

_MAKEMAP_FRAME_ - convert time-series data into an image

=head1 SYNOPSIS

  _MAKEMAP_FRAME_

=head1 DESCRIPTION

This primitive takes time-series data for the current Frame and uses
SMURF MAKEMAP to construct an image. The user may specify either the
simple rebinning method or the full iterative solution.

For the iterative map-maker a configuration file is obtained based on
the Frame uhdr entry C<MAKEMAP_CONFIG_TYPE>, though this may be
overriden with a recipe parameter. See
L<_GET_MAKEMAP_CONFIG_|_GET_MAKEMAP_CONFIG_> for further details.

The output file size is kept below 2 GB which in practice corresponds
to an image with about 60 million pixels (7745 pixels on a side, or
6.45 degrees on the sky for 3-arcsec pixels). Currently the primitive
creates a smaller image if the limit is exceeded. Each dimension is
reduced in proportion. The primitive aborts if the memory requirements
for processing the data exceeds that available.

This is a many to one operation, with only a single output file
created.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<CONFIG_TYPE>

Type of makemap configuration file to use. The choice is determined by
the type of object observed (and hence by the calling recipe). May be
C<BRIGHT>, C<EXTENDED> or C<FAINT> which use the normal, extended or
faint versions of the makemap configuration file. Default is C<FAINT>.

=item B<INFILES>

A switch to determine how many files are given to makemap.  Valid
values are C<FRAME> (default) for all files in the current Frame
object, C<NEW> for all data taken since last map was made, C<OBS> for
all files which are part of the current observation, or C<ALL> for all
valid files for all Frames in the current Group object.

=item B<METHOD>

Image reconstruction method. May be C<REBIN> to use a simple rebinning
scheme or C<ITER> to use the iterative map-maker. The default is
C<ITER>.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

SETTITLE

=item SMURF

MAKEMAP

=item ORAC-DR PRIMITIVES

_CHECK_MAP_BOUNDS_, _GET_MAKEMAP_ARGS_, _GET_MAKEMAP_CONFIG_

=back

=head1 NOTES

The user should take care when calling with the B<INFILES> parameter
set to C<ALL> or C<OBS>. It is possible that makemap will be run
multiple times on almost the same set of data files. This is probably
not desireable. See L<_SUMMIT_STEER_|_SUMMIT_STEER_> and
L<_PROCESS_SCAN_DATA_|_PROCESS_SCAN_DATA_> for information on one way
to avoid this.

For B<INFILES>=C<FRAME> it is assumed that the data are not
flatfielded and thus dark frames need to be added to the list of input
files. Conversely, for C<ALL> it is assumed that the input data are
already flatfielded and thus there is no need for dark frames.

=head1 OUTPUT DATA

The Frame C<isgood> flag is set to false if MAKEMAP fails for any
reason.

The Frame uhdr entries C<EXP_TIME>, C<WEIGHTS>, C<SKY_SUBTRACTION> and
C<EXTINCTION> are set to 1 on success.

=head1 OUTPUT FILES

Creates a single output file with a C<_fmos> suffix.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2008-2010 University of British Columbia.
Copyright (C) 2008 the Particle Physics and Astronomy Research
Council. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Check for dark-only Frames and mark them as bad
if ($Frm->uhdr("DARKONLY")) {
  $Frm->isgood(0);
  $Grp->check_membership;
  $Frm->uhdr("NOCALIB",1);
  # Set a flag to indicate a map was not made
  $Frm->uhdr("NEWIMAGE",0);
  return ORAC__OK;
}

# Define the maximum number of pixels in a tile
use constant MAXPIX => 60e6;

# Method for reconstructing map
my $method = lc(get_prim_arg( $_PRIM_ARGS_, "METHOD", "iter"));
my $iterate = 0;
# Minimum match on method
if ( $method =~ /^iter/ ) {
  $method = "iterate";
  $iterate = 1;
} elsif ( $method =~ /^reb/ ) {
  $method = "rebin";
} else {
  orac_warn "Unrecognized MAKEMAP METHOD, $method: assuming REBIN\n";
  $method = "rebin";
}

# How many files are we making a map with?
my $infiles = get_prim_arg($_PRIM_ARGS_, "INFILES", "FRAME");

my @infiles;
my $suffix = "_fmos";
my $obsnum = $Frm->hdr("OBSNUM");
if ( $infiles eq "FRAME" ) {
  # Use all files in current Frame
  @infiles = $Frm->files;
} elsif ( $infiles eq "OBS" ) {
  # Create a sub-group for the current observation only
  my $subGrp = $Grp->subgrp(OBSNUM => $obsnum);
  foreach my $frmobj ( $subGrp->members ) {
    # Only add data from frames which do not contain images
    push (@infiles, $frmobj->files)
      if ($frmobj->isgood && !$frmobj->uhdr("NEWIMAGE"));
    # Don't need this frame any more so mark as bad
    $frmobj->isgood(0);
  }
} elsif ( $infiles eq "NEW" ) {
  # Use all new data in current observation which was taken since
  # last map was made
  my $subGrp = $Grp->subgrp(OBSNUM => $obsnum);
  foreach my $frmobj ( $subGrp->members ) {
    # `New' data are marked with isgood = -1
    if ($frmobj->isgood == -1) {
      push (@infiles, $frmobj->files);
      # Don't need this frame any more so mark as bad
      $frmobj->isgood(0);
    }
  }
} elsif ( $infiles eq "ALL" ) {
  # Use ALL data from all members of Group
  foreach my $frmobj ( $Grp->members ) {
    push (@infiles, $frmobj->files) if ($frmobj->isgood);
  }
  $suffix = "_mos";
}

# Quit processing if there is no data to make a map
my $object = $Frm->hdr('OBJECT');
orac_term "No good data for $object from obs $obsnum with which to make a map\n"
  unless (@infiles);

# Retrieve fast-ramp flatfield files if they exist
push (@infiles, @{ $Grp->uhdr("FASTFLATS") })
  if ( defined $Grp->uhdr("FASTFLATS") );

# Write list of filenames to a temp file
my $inlist = write_file_list( @infiles );

# Set output filename
my ($in, $out) = $Frm->inout($suffix);
$out = $Frm->rewrite_outfile_subarray( $out );

# Set BBM parameter to null until we find BBMs are worth using
my $bbm ="!";

# This sets the upper limit on the output map size - MAXPIX should be
# small enough to keep the map size below 2 GB
my $tiledims = int(sqrt(MAXPIX));

# Define makemap argument list - mandatory arguments
my $args = "in=^$inlist out=$out bbm=$bbm tiledims=$tiledims";

# Define the variable arguments to makemap
my %makemapargs = ( method => $method );
# Retrieve any makemap arguments given as recipe parameters
_GET_MAKEMAP_ARGS_
  my %newmakemapargs = %{$_GET_MAKEMAP_ARGS_{ARGS}};
# Store these new arguments in the hash - existing entries will be
# overriden
foreach my $arg (keys %newmakemapargs) {
  $makemapargs{$arg} = $newmakemapargs{$arg};
}

# Construct argument list for makemap
foreach my $arg (keys %makemapargs) {
  $args .= " $arg=$makemapargs{$arg}";
}

# Append name of config file to argument list
# Do not override the _SCUBA2_HELLO_ value unless an explicit
# argument has been given to this primitve
if ( $iterate ) {
  # Type of config file to use: NORMAL, BLANK_FIELD, BRIGHT_COMPACT etc
  my $conftype = get_prim_arg($_PRIM_ARGS_, "CONFIG_TYPE","");

  if ($conftype) {
    if ($conftype eq 'BRIGHT') {
      $conftype = "bright_compact";
    } elsif ($conftype eq 'EXTENDED') {
      $conftype = "bright_extended";
    }
    $Frm->uhdr("MAKEMAP_CONFIG_TYPE", lc($conftype) );
  } elsif (!defined $Frm->uhdr("MAKEMAP_CONFIG_TYPE")) {
    $Frm->uhdr("MAKEMAP_CONFIG_TYPE", "normal");
  }

  _GET_MAKEMAP_CONFIG_
  my $config = $_GET_MAKEMAP_CONFIG_{CONFIG};
  # If we're doing fakemap processing, add the relevant parameters
  # to the config line
  if (defined $Frm->uhdr("FAKEMAP")) {
    $config .= ",fakemap=".($Frm->uhdr("FAKEMAP"));
    $config .= ",fakescale=".($Frm->uhdr("FAKESCALE"))
      if (defined $Frm->uhdr("FAKESCALE"));
  }
  $args .= " config='^$config'";
}

# Call makemap - really must have some sort of feedback to user
orac_print "Calling makemap using $method method\n";

# Newimage will be used to determine if a new image was created by
# this primitive. Set an optimistic default.
my $newimage = 1;
# Error message text
my $msg;

# Check the output map bounds
unless ( $Frm->uhdr("QUICKLOOK") ) {
  _CHECK_MAP_BOUNDS_ IN=$inlist TASK=MAKEMAP
  if ( $_CHECK_MAP_BOUNDS_{NEWBOUNDS} == 1 ) {
    my @lbound = @{ $_CHECK_MAP_BOUNDS_{LBOUND} };
    my @ubound = @{ $_CHECK_MAP_BOUNDS_{UBOUND} };
    # Append the new bounds to the list of arguments
    $args .= " lbnd=[".join(",",@lbound)."] ubnd=[".join(",",@ubound)."]";
  } elsif ( $_CHECK_MAP_BOUNDS_{NEWBOUNDS} == -1 ) {
    # The bounds check failed so mark the current frame as bad and
    # set an error message
    $Frm->isgood(0);
    $newimage = 0;
    $msg = "Checking map size failed - skipping this observation\n";
  }
}

my $fault_msg = "If this failure is not associated with a bad observation please file a fault\n";

if ($newimage) {
  my $nfiles = scalar(@infiles);
  # Now create output map using the new bounds if necessary
  orac_print "Making map from $nfiles input files";
  orac_print " this... may... take... a... while..." if ($nfiles > 5);
  orac_print " a long while... please be patient..." if ($nfiles > 10);
  orac_print "\n";
  my $SMURF_STATUS = $Mon{smurf_mon}->obeyw("makemap","$args");

  # Check for SMF__NOMEM return status
  if ( $SMURF_STATUS == ORAC__OK ) {
    # Check that an output file was actually created - in some
    # instances bad data can be dealt with by makemap which then exits
    # with good status and no output file.
    my $fullout = File::Spec->catfile($ENV{ORAC_DATA_OUT}, $out);
    $fullout .= ".sdf" unless ($fullout =~ /.sdf$/); # hack...
    if ( -e $fullout ) {
      # Now, is there any analysis of the model component files that could
      # be useful?

      # Register the new file name
      $Frm->files( $out );

      # Set the title to include the source name - add obs num if
      # running at the summit
      my $title = ($Frm->uhdr("QUICKLOOK") || $Frm->uhdr("SUMMIT"))
	? "'$object / $obsnum'"	: "'$object'";
      $Mon{ndfpack_mon}->obeyw("settitle","ndf=$out title=$title");

      # Set Frame EXP_TIME and WEIGHTS flags
      $Frm->uhdr("EXP_TIME",1);
      $Frm->uhdr("WEIGHTS",1);
      # And of course sky subtraction and extinction correction have been
      # applied, though there really isn't much point to setting these
      # other than a desire for consistency.
      $Frm->uhdr("SKY_SUBTRACTION",1);
      $Frm->uhdr("EXTINCTION",1);

      # Mark current frame as good now that we have a map
      $Frm->isgood(1);

      # Set a flag to indicate a new map was made
      $newimage = 1;

      my $nbol = sprintf "%d", $Frm->hdr("NBOLOEFF");
      orac_print "Thank you for waiting: image $out created using $nbol bolometers\n";
      orac_warn "Map created from only $nbol bolometers: check map quality\n"
	if ($nbol < 100);
    } else {
      # Mark this frame as BAD. The only reason we would be here is
      # that the data are bad/corrupt.
      $Frm->isgood(0);
      $newimage = 0;
      $msg = "Makemap failed to create an output file (corrupt data): data from this Frame will be ignored.\n\n$fault_msg";
    }
  } else {
    # OK we have bad exit status - check for known reasons
    if ( $SMURF_STATUS == 235176770 ) {
      # SMF__NOMEM: Memory allocation error
      $msg = "Output image will exceed maximum size 2 GB - will not continue\n";
    } elsif ( $SMURF_STATUS == 235176794 ) {
      # SMF__INSMP: insufficient samples for statistics
      $msg = "All data flagged bad; insufficient samples available for calculating statistics - will not continue\n";
    } else {
      # Everything else...
      $msg = "Makemap failed for an unknown reason: data from this Frame will be ignored\n$fault_msg";
    }
    $Frm->isgood(0);
    $newimage = 0;
  }
}

# Set a flag to indicate whether or not a map was made
$Frm->uhdr("NEWIMAGE",$newimage);
# If no new image was created issue an error saying why
unless ($newimage) {
  $Frm->uhdr("NOCALIB",1);
  # Terminate the recipe unless we're processing the last member, in
  # which case we still want a Group file to be created if possible.
  if ($Grp->lastmember($Frm)) {
    orac_err $msg;
  } else {
    orac_termerr $msg;
  }
}
