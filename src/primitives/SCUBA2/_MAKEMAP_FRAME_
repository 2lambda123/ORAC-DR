#! -*-perl-*-

=head1 NAME

_MAKEMAP_FRAME_

=head1 SYNOPSIS

  _MAKEMAP_FRAME_ PIXSIZE=7.5

=head1 DESCRIPTION

This primitive takes timeseries data for the current frame and
constructs an image. This is a many to one operation, with only a
single output file created.

=head1 ARGUMENTS

=over 4

=item B<PIXSIZE>

PIXSIZE is the size of the output pixels in arcsec. The default is
equal to the pixel spacing (ie 6 arcsec).

=item B<SYSTEM>

Coordinate system for output image. May be any supported by
C<AST>. Default is C<TRACKING>.

=item B<SPREAD>

Desired pixel-spreading scheme. May be either C<nearest> for 
nearest-neighbour resampling or C<linear> for bi-linear resampling. 
Default is C<nearest>.

=item B<KEEP>

Flag to denote whether to keep the intermeditate files produced by the
iterative map-maker. Warning: setting this to true may result in
significant disk space usage. Default is 0 (delete files).

=item B<METHOD>

Image reconstruction method. May be C<REBIN> to use a simple rebinning
scheme or C<ITER> to use the iterative map-maker. If C<ITER> is
specified then the following parameters must also be set to override
the defaults (which may not do what you want).

=item B<NUMITER>

Number of iterations. Default is 1, which is clearly not a good
choice.

=item B<MODELORDER>

Comma-separated list of model components. See the SMURF documentation
for further details.

=item B<EXPORTNDF>

Flag to indicate whether intermediate files are written out in NDF
format at the end. Default is 0 (do not write as NDF).

=back

=head1 KNOWN ISSUES

...

=head1 ALGORITHMS

...

=head1 FILE SUFFIX

Creates a single output file with a '_fmos' suffix.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 University of British Columbia and the Particle
Physcis and Astronomy Research Council. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

# Define the maximum number of pixels in a tile
use constant MAXPIX => 60e6;

# Pixel size for output image
my $pixsize = get_prim_arg( $_PRIM_ARGS_, "PIXSIZE", $Cal->pixelscale);

# Output coordinate system - default is TRACKING
my $system = get_prim_arg( $_PRIM_ARGS_, "SYSTEM", "TRACKING");

# Pixel-spreading scheme
my $spread = lc(get_prim_arg( $_PRIM_ARGS_, "SPREAD", "nearest"));

# Reset to "nearest" if an unsupported scheme is given
if ( ($spread ne "nearest") && ($spread ne "linear") ) {
  orac_warn "Unsupported pixel-spreading scheme, $spread: using NEAREST\n";
  $spread = "nearest";
}

# Method for reconstructing map
my $method = lc(get_prim_arg( $_PRIM_ARGS_, "METHOD", "rebin"));
my $iterate = 0;
# Minimum match on method
if ( $method =~ /^iter/ ) {
  $method = "iterate";
  $iterate = 1;
} elsif ( $method =~ /^reb/ ) {
  $method = "rebin";
} else {
  orac_warn "Unrecognized MAKEMAP METHOD, $method: assuming REBIN\n";
  $method = "rebin";
}

# Verbosity - default to yes
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1);

# Write list of filenames to a temp file
my $inlist = write_file_list( $Frm->files );

# Set output filename
my ($in, $out) = $Frm->inout('_fmos');

# Maximum map-size - set to 2 GB as a default, increase later if the
# iterative map-maker is being used and processing is done in memory
#my $maxmem = 2048;
#my $maxmem = 3072; # 1.5 factor to get max file size of 2 GB
my $maxmem = 4096; # 1.5 factor to get max file size of 2 GB

my $tiledims = sqrt(MAXPIX);

# Makemap argument list
my $args = "in=^$inlist out=$out pixsize=$pixsize spread=$spread system=$system method=$method maxmem=$maxmem tiledims=$tiledims";

# Check for additional parameters for the iterative map-maker
my ($exportndf, $keepdimm, $numiter, $memiter, $modelorder, @modelorder, $config);
if ( $iterate ) {
  # Number of iterations - default to 1 to force user to make a
  # decision
  $numiter = get_prim_arg( $_PRIM_ARGS_, "NUMITER", 1);

  # Should iterations be done in memory?
  $memiter = get_prim_arg( $_PRIM_ARGS_, "MEMITER", 1);

  # Maximum memory available to iterative map-maker
  $maxmem = 10000 if ( $memiter );

  # Flag for whether to export work files to NDF
  $exportndf = get_prim_arg( $_PRIM_ARGS_, "EXPORTNDF", 0);

  # Flag for whether to keep intermediate DIMM files
  $keepdimm = get_prim_arg( $_PRIM_ARGS_, "KEEP", 0);

  # Flag for whether to export work files to NDF
  $modelorder = get_prim_arg( $_PRIM_ARGS_, "MODELORDER", "com,ext,noi");
  # Split modelorder into components before recombining
  @modelorder = split(/,/,$modelorder);
  
  # Concatenate list of model components into a single space-separated
  # string
  $modelorder = join(" ",@modelorder);

  # Write parameters to config file
  $config = new ORAC::TempFile;
  print {$config->handle} "numiter=$numiter\n"
    ."exportndf=$exportndf\n"
    ."modelorder=$modelorder\n"
    ."chitol=1e-6\n"
    ."com_boxcar=400\n"
    ."com_boxfact=0.5\n"
    ."com_boxmin=100\n"
    ."noispikethresh=10\n"
    ."noispikeiter=0\n"
    ."varmapmethod=0\n"
    ."memiter=$memiter\n"
    ."maxlen=0\n"
    ."badfrac=0.05\n";
  $config->handle->close;
  $args .= " config=^".$config->file;
}

# Call makemap - really must have some sort of feedback to user
orac_print "Calling makemap using $method method (this may take... a while...)\n";
# First time round, determine number of pixels in the output map by
# setting out=! Use method=rebin to avoid needing to specify any
# further unecessary parameters.
orac_print "Checking output map size... ";
my $mapszargs = "in=^$inlist out=! pixsize=$pixsize method=rebin maxmem=$maxmem";
$Mon{smurf_mon}->obeyw("makemap","$mapszargs");
my ($ORAC_STATUS, @lbound) = $Mon{smurf_mon}->get("makemap","lbound");
($ORAC_STATUS, my @ubound) = $Mon{smurf_mon}->get("makemap","ubound");

my $xsize = $ubound[0] - $lbound[0] + 1;
my $ysize = $ubound[1] - $lbound[1] + 1;
my $outpix = $xsize*$ysize;
if ( $outpix > MAXPIX ) {
  orac_print "Old image dimensions are $xsize x $ysize\n";
  my $scalefactor = sqrt( MAXPIX/$outpix );
  my $newxsize = int($xsize * $scalefactor);
  my $newysize = int($newxsize * $ysize / $xsize);
  my $dx = int($xsize * ( 1.0 - $scalefactor ) / 2.0);
  my $dy = int($ysize * ( 1.0 - $scalefactor ) / 2.0);
  # Reduce the bounds equally.
  $lbound[0] += $dx;
  $ubound[0] -= $dx;
  $lbound[1] += $dy;
  $ubound[1] -= $dy;
  $scalefactor = sprintf "%5.3f", $scalefactor;
  $scalefactor *= (100*$scalefactor);
  orac_warn "\nSize will exceed 2 GB, reducing to include central $scalefactor % of mapped area\n";
  orac_print "New image dimensions are $newxsize x $newysize\n";
  # Append the new bounds to the list of arguments
  $args .= " lbnd=[$lbound[0],$lbound[1]] ubnd=[$ubound[0],$ubound[1]]";
}
# Now create output map using the new bounds if necessary
orac_print "Making map...\n";
my $SMURF_STATUS = $Mon{smurf_mon}->obeyw("makemap","$args");
# Check for SMF__NOMEM return status
if ( $SMURF_STATUS == 235176770 ) {
  orac_warn "Output image will exceed maximum size $maxmem MB - will not continue\n";
} elsif ( $SMURF_STATUS == ORAC__OK ) {

  # Now, is there any analysis of the intermediate files that could be
  # useful?

  # Delete iterative map-maker files
  if ( $iterate && !$memiter ) {
    orac_print "Removing model files from the iterative map-maker\n" 
      if ($verbose);
    unlink <*.dimm>;
  }

  # Register the new file name
  $Frm->files( $out );

  # Set Frame EXP_TIME and WEIGHTS flags
  $Frm->uhdr("EXP_TIME",1);
  $Frm->uhdr("WEIGHTS",1);

  orac_print "Thank you for waiting; image $out created\n";
}
# Delete config file if present
undef $config if ($config);
