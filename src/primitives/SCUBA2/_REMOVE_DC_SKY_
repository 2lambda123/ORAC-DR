#! -*-perl-*-

=head1 NAME

_REMOVE_DC_SKY_ - Removes a DC sky value

=head1 SYNOPSIS

  _REMOVE_DC_SKY_

=head1 DESCRIPTION

Subtracts a mean sky value from an uncalibrated image. An error is
generated if this primitive is run on calibrated data since it is
assumed that this step will have been done already before calibration.

This primitive is an alternative to _REMOVE_PLANE_FROM_IMAGE_.

This is a Frame operation and should be used before group operations.

=head1 ARGUMENTS

The following arguments are supported

=over 4

=item METHOD

Valid options are MEAN, MEDIAN or MODE. Default is MEAN.

=item LOGFILE

Flag to denote whether to write results of sky removal to a log
file. Default is 1 (true).

=item VERBOSE

Flag to denote whether to print informative messages to the
screen. Default is false (0).

=back

=head1 External Tasks

The following external tasks are used:

=over 4

=item KAPPA

C<csub>

=back

=head1 FILES

Creates an output file with a C<_sky> extension.

=head1 NOTES

Only deals with 2-D images, not time-series data.

=head1 KNOWN ISSUES

Does not determine units from input data files.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

Copyright (C) 2005-2007 the University of British Columbia.  All
Rights Reserved.


=cut

# Units for these data - should be obtained from header
my $rawunits = "pW";

# Tell user...
orac_print "Removing sky by calculating and subtracting a constant level\n";

# Determine whether to subtract the mean, median or modal values from the image
my $method = (exists $_REMOVE_DC_SKY_{METHOD} && 
	      defined $_REMOVE_DC_SKY_{METHOD}) ?
              uc($_REMOVE_DC_SKY_{METHOD}) : "MEAN";

# Should I be verbose (default to yes)
my $verbose = (exists $_REMOVE_DC_SKY_{VERBOSE} && 
	       defined $_REMOVE_DC_SKY_{VERBOSE}) ?
               $_REMOVE_DC_SKY_{VERBOSE} : 1;

# Write logfiles (default to true)
my $uselog = (exists $_REMOVE_DC_SKY_{LOGFILE} &&
              defined $_REMOVE_DC_SKY_{LOGFILE}) ?
              $_REMOVE_DC_SKY_{LOGFILE} : 1;

# Set the histo/histat flags. The latter is a placeholder in case user
# wishes to override default choice which is to use HISTAT. Note that
# histo and histat are mutually exclusive. Setting histo = 1 *must*
# set histat = 0, but the reverse is not necessarily true. See the
# documentation for _FIND_IMAGE_STATISTICS for further info.
my ($methodnum, $histo, $histat); 
if ( $method eq "MEAN" ) {
  $histo = 0;
  $histat = 1;
} elsif ( $method eq "MEDIAN" ) {
  $histo = 0;
  $histat = 1;
} elsif ( $method eq "MODE" ) {
  $histo = 0;
  $histat = 1;
} else {
  # If we got something unknown, continue using the mean
  orac_warn "Unknown METHOD, $method: falling back on MEAN\n";
  $method = "MEAN";
}

# Create a log file if necessary
my $skylog;
if ( $uselog ) {
  my $time = gmtime();
  # Peak fluxes
  $skylog = new ORAC::LogFile("log.sky");
  $skylog->header("Sky properties log file - created on $time",
		  "\n#  ID      Time        Filter    DC       Slope  PA  Seeing   El  CSO",
		  "-----------------------------------------------------------------------");
}

my @out;
# Loop over files in the Frm object
for my $i (1..$Frm->nfiles) {

  # Calculate the DC sky level.
  _FIND_IMAGE_STATISTICS_ IMAGE=$Frm->file($i) VERBOSE=0 HISTOGRAM=$histo HISTAT=$histat
  my $sky = $_FIND_IMAGE_STATISTICS_{RESULTS}->{$method};

  # Note that if things went wrong, the following has the effect of
  # permanently ignoring the current file. If something went wrong
  # computing the statistics, it may indicate a problem with the data,
  # so this may be a good thing.

  # If we want the mode, check that the result isn't -1e9: this
  # means there were no valid pixels in the image.
  if ( $method eq "MODE" && $sky == -1.0e9 ) {
    orac_warn "No valid pixels in image, unable to subtract sky with method=$method\n";

  } elsif ( !$histo &&  $_FIND_IMAGE_STATISTICS_{RESULTS}->{SIGMA} == 0.0 ) {
    orac_warn "Invalid result from STATS: will not subtract the sky from current file (".$Frm->file($i).")\n";

  } else {
    # Everything's OK so subtract a DC sky level. 
    # Retrieve input and output names
    my ($in, $out) = $Frm->inout("_sky", $i);
    # Subtract the sky
    $Mon{kappa_mon}->obeyw("csub","in=$in out=$out scalar=$sky");
    
    $sky = sprintf "%12.7f", $sky;
    orac_print "Subtracting a constant sky level of $sky from $in (method=$method)\n" 
      if ($verbose);
    # Write to a logfile if desired
    if ( $uselog ) {
      # UT string
      my $time = sprintf "%12.7f", $Frm->hdr('ORACTIME');
      # Observation number
      my $obsnum = sprintf "%05d", $Frm->hdr('OBSNUM');
      # Filter
      my $filt = sprintf "%4s", $Frm->hdr('FILTER');

      # Tau at 225 GHz
      my $cso_st = ( defined $Frm->hdr->{SUBHEADERS}->[$i]->{WVMTAUST}) ?
	$Frm->hdr->{SUBHEADERS}->[$i]->{WVMTAUST} : $Frm->hdr('WVMTAUST');
      my $cso_end = ( defined $Frm->hdr->{SUBHEADERS}->[$i]->{WVMTAUEN}) ?
	$Frm->hdr->{SUBHEADERS}->[$i]->{WVMTAUEN} : $Frm->hdr('WVMTAUEN');
      my $cso = sprintf "%5.3f", 0.5*($cso_st + $cso_end);

      # Seeing
      my $see_st = ( defined $Frm->hdr->{SUBHEADERS}->[$i]->{SEEINGST}) ?
	$Frm->hdr->{SUBHEADERS}->[$i]->{SEEINGST} : $Frm->hdr('SEEINGST');
      my $see_end = ( defined $Frm->hdr->{SUBHEADERS}->[$i]->{SEEINGEN}) ?
	$Frm->hdr->{SUBHEADERS}->[$i]->{SEEINGEN} : $Frm->hdr('SEEINGEN');
      my $see = sprintf "%5.3f", 0.5*($see_st + $see_end);

      # Elevation - should always be >10 deg so no need to re-format for printing
      my $el_st = ( defined $Frm->hdr->{SUBHEADERS}->[$i]->{ELSTART}) ?
	$Frm->hdr->{SUBHEADERS}->[$i]->{ELSTART} : $Frm->hdr('ELSTART');
      my $el_end = ( defined $Frm->hdr->{SUBHEADERS}->[$i]->{ELEND}) ?
	$Frm->hdr->{SUBHEADERS}->[$i]->{ELEND} : $Frm->hdr('ELEND');
      my $el = int ( 0.5 * ( $el_st + $el_end ) );

      # Since this is a DC sky removal so sky slope and PA are both 0
      $skylog->addentry("$obsnum $time $filt $sky    0     0  $see    $el $cso");
    }

    # Store the new sky-subtracted output file
    push(@out, $out);
  }
}
$Frm->files(@out);

orac_print "DC sky subtraction successful\n";

