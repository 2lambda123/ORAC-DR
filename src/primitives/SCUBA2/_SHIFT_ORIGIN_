#! -*-perl-*-

=head1 NAME

_SHIFT_ORIGIN_ - Shift the origin of an image by a given amount

=head1 SYNOPSIS

 _SHIFT_ORIGIN_ SHIFT=($dx,$dy)

=head1 DESCRIPTION

...

=head1 ARGUMENTS

=over 4

=item SHIFT

A scalar or an array with the magnitude of the shift in pixels. A
negative shift indicates a shift to the East or South. If a single
value (scalar) is given then the shift is assumed to be the same in
both the X and Y directions.

=item FILE

Name of the file to apply the shift to.

=item VERBOSE

Flag to indicate whether informational messages should be given to the
user. Default is true.

=back

=head1 KNOWN ISSUES

...

=head1 EXTERNAL TASKS

=over 4

=item ATOOLS

C<astshiftmap>, C<astremapframe>

=head1 FILE SUFFIX

An output file is created for each set of four subarray images in the
Frame with a suffix of C<_arr>. 

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005 University of British Columbia. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

# Should I be verbose? (default to yes)
my $verbose = (exists $_SHIFT_ORIGIN_{VERBOSE} &&
               defined $_SHIFT_ORIGIN_{VERBOSE}) ?
               $_SHIFT_ORIGIN_{VERBOSE} : 1;

# Image name
my $infile = undef;
if (exists $_SHIFT_ORIGIN_{IMAGE} && defined $_SHIFT_ORIGIN_{IMAGE}) {
    $infile = $_SHIFT_ORIGIN_{IMAGE};
} else {
    # Exit with no file name
    orac_throw "Error: must supply filename to _SHIFT_ORIGIN_\n";
}

# Origin shift, read as a string, must convert into an array.
my $shiftref = $_SHIFT_ORIGIN_{SHIFT} if (exists $_SHIFT_ORIGIN_{SHIFT} && defined $_SHIFT_ORIGIN_{SHIFT});

#use Data::Dumper;
#print Dumper($shiftref);

# Check if only 1 value was given and if so set both shifts equal
if (ref($shiftref) eq "SCALAR") {
    $shiftref = [$$shiftref,$$shiftref];
}
$shiftref=[-0.5,-0.5];
# Temporary file for holding the ShiftMap
my $shiftmapfile = new ORAC::TempFile;

# Create the ShiftMap
my $shiftargs = "shift=\[$shiftref->[0],$shiftref->[1]\] ncoord=2 options=! result=".$shiftmapfile->file;
$Mon{atools_mon}->obeyw("astshiftmap","$shiftargs");

# Apply the ShiftMap to the input image
my $remapargs = "iframe=AST__BASE map=".$shiftmapfile->file." result=$infile this=$infile";
$Mon{atools_mon}->obeyw("astremapframe","$remapargs");

