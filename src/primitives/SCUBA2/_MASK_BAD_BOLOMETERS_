# -*-cperl-*-

=head1 NAME

_MASK_BAD_BOLOMETERS_ - Mask out bad bolometers

=head1 SYNOPSIS

_MASK_BAD_BOLOMETERS_

=head1 DESCRIPTION

This primitive applies an appropriate bad bolometer mask to files in
the current Frame. Non-valid bolometers are set to C<BAD>. The bad
bolometer mask is retrieved from the calibration system. If no
appropriate mask exists, the input files are simply copied to output
and stored.

Data should be masked before any mosaicking or imaging steps.

=head1 ARGUMENTS

The following argument is supported:

=over 4

=item B<VERBOSE>

Flag to denote whether to print informative messages to the
screen. Default is 0 (no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

COPYBAD, NDFCOPY

=back

=head1 NOTES

Assumes that a bad bolometer mask exists for each subarray.

=head1 OUTPUT DATA

The masked files are stored in the Frame object.

=head1 OUTPUT FILES

Creates output files with a C<_msk> extension.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

Copyright (C) 2008-2009 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 0);

my @maskedfiles;

for my $i ( 1 .. $Frm->nfiles ) {
  # Get input file
  my ( $file, $out ) = $Frm->inout("_msk", $i);

  # Set the subarray and then retrieve the appropriate bad bolometer
  # mask
  $Frm->subarray( $file );
  my $mask = $Cal->mask;

  if ( defined $mask ) {
    # Copy the bad bolometers over to the raw data files
    my $args = "in=$file out=$out ref=$mask";
    $Mon{kappa_mon}->obeyw("copybad","$args");
  } else {
    # If no mask, just copy input to output
    orac_warn "No mask available for current file, $file\n" if $verbose;
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$file out=$out");
  }
  push(@maskedfiles, $out);
}

# Store masked files
$Frm->files( @maskedfiles ) if (@maskedfiles);
