# -*-cperl-*-

=head1 NAME

_MAKE_MOSAIC_SUBGROUP_ - Create a sub-group mosaic

=head1 SYNOPSIS

_MAKE_MOSAIC_SUBGROUP_  COADD_MODE=RUNNING

=head1 DESCRIPTION

This primitive takes all the aligned sub-scan frames from each
sub-array or aligned frame mosaics and mosaics them into a single
coadded output (sub)group image. A new sub-group is created based on
the supplied B<KEYS> parameter and only those files which match the
values of those keys in the current global Frame will be combined.

This primitive is a wrapper for the main _MAKE_MOSAIC_ primitive with
dedicated sub-group processing. It was written primarily to reducing
FOCUS observations which must collect together data obtained at
specific focus positions.

The user can supply arbitrary B<KEYS> though a warning is issued if
more than 5 are given. The keys for a FOCUS observation are preset
within this primitive and any others passed in are ignored.

=head1 ARGUMENTS

The following arguments are supported.

=over 4

=item B<COADD_MODE>

Controls the coadding mode for the primitive. If C<RUNNING>, the new
frames are combined with the existing group image. If C<STACKALL> the
group image is recreated from all the constituent frames each time it
is called. Default is C<STACKALL>. Passed directly to _MAKE_MOSAIC_.

=item B<KEYS>

A comma-separated list of the FITS header keys to be used to define
the subgroup. Mandatory option - the primitive will exit with no
processing if no keys are provided. The exception is for FOCUS
observations, which use two pre-defined keys to establish
sub-groups. In principle there is no limit to the number of keys that
may be given, though a warning is issued if the number is greater than
5.

=item B<MAKEMOS>

A flag to denote whether to use CCDPACK MAKEMOS for mosaicking the
images. Default is 0 (no), which uses KAPPA WCSMOSAIC instead.  Passed
directly to _MAKE_MOSAIC_.

=item B<MAKEMOS_METHOD>

The method by which MAKEMOS combines the images. Default is
C<MEAN>. See the MAKEMOS documentation for a description of the
possible values. Passed directly to _MAKE_MOSAIC_.

=item B<METHOD>

The method to be used for resampling the aligned images. This
corresponds to the C<method> parameter for WCSMOSAIC and WCSALIGN,
which is different from that for MAKEMOS. See WCSALIGN and/or
WCSMOSAIC documentation for further details. Default value is
C<NEAREST>. Passed directly to _MAKE_MOSAIC_.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no). Also passed to _MAKE_MOSAIC_.

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item ORAC-DR PRIMITIVES

_MAKE_MOSAIC_

=back

=head1 NOTES

This primitive has no memory, in that if a particular subgroup has
been created previously then none of the properties of that subgroup
can be accessed.

This primitive relies on the Grp->subgrp method which will fail if
one of the supplied keys is in the list of SUBHEADERS.

=head1 OUTPUT DATA

For FOCUS observations, the Group uhdr has an entry called SUBGROUPS
on exit.  This entry is a hash with keys equal to the focus positions
(C<FOCPOSN>) and values of the associated subgroup filename. This
overcomes the lack of history capability mentioned above and allows
the images at each focus position to be retrieved.

=head1 OUTPUT FILES

Creates an output group image with a suffix of C<_mos> for each
subgroup. The file name is derived from the current Group file name
plus the values of the keys used to create the subgroups joined by
underscores. Any values which contain decimal points have a dash
substituted to avoid problems with NDF attempting to access a file
extension.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should I be verbose (default to no)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 0);

# Do we want to use makemos?
my $makemos = get_prim_arg($_PRIM_ARGS_, "MAKEMOS", 0);

# Array of keys to define the sub-group
my $keys = get_prim_arg($_PRIM_ARGS_, "KEYS", undef);

my $coadd_mode = uc($_MAKE_MOSAIC_SUBGROUP_{COADD_MODE} || 'RUNNING');

# Method for combining images in makemos
my $makemos_method = get_prim_arg($_PRIM_ARGS_, "MAKEMOS_METHOD", "mean");

# Method for determining resampling the image during alignment
my $method =  get_prim_arg($_PRIM_ARGS_, "METHOD", "bilinear");

# Flag to indicate if we have a FOCUS observation
my $focusobs = ( uc($Frm->hdr('OBS_TYPE')) eq "FOCUS" ) ? 1 : 0;

# If so, set keys manually
$keys = ( $focusobs ) ? "FOCAXIS,FOCPOSN" : $keys;

# If we have a focus observation, then we use default keys
if ( $keys || $focusobs ) {

  my @keys = split( /,/, $keys );
  # What if we have lots of keys? Things could get messy.
  if ( @keys > 5 ) {
    orac_warn "Large number of keys (@keys) specified. Sub-groups may not exist or contain very few members.\n";
  }
  my %subkeys;

  # Use header values in current Frm to define the new sub-group.
  foreach my $key ( @keys ) {
    # Check that the desired key is defined
    if ( defined $Frm->hdrval($key) && !$subkeys{$key} ) {
      $subkeys{$key} = $Frm->hdrval($key);
    } else {
      orac_warn "No key named $key in current Frame header\n";
    }
  }

  # Create subgroup based on these keys
  my $group = $Grp->subgrp( %subkeys );

  # Create the sub-group mosaic if the sub-group has any members
  if ( @{ $group->allmembers } ) {

    # Define sub-group filename from Group filename plus list of
    # values for given keys - use reverse sort to get desired order
    # for FOCUS observations
    my $grpname = join("_",$Grp->file,reverse sort values %subkeys);

    # Replace any decimal points in the filename with a dash
    $grpname =~ s/\./-/g;
    # Register group (file)name and file suffix
    $group->groupid( $grpname."_mos" );
    $group->file( $group->groupid );
    $group->filesuffix($Grp->filesuffix);

    # Store sub-group names for FOCUS observations for later retrieval
    if ( $focusobs ) {
      if ( $Grp->uhdr("SUBGROUPS") ) {
        my %subgroups = %{ $Grp->uhdr("SUBGROUPS") };
        $subgroups{ $subkeys{'FOCPOSN'} } = $group->groupid;
        $Grp->uhdr("SUBGROUPS", \%subgroups);
      } else {
        $Grp->uhdr("SUBGROUPS", { $subkeys{'FOCPOSN'} => $group->groupid } );
      }
    }
    orac_print "Making SUB-GROUP mosaic\n";

    # Create sub-group mosaic
    _MAKE_MOSAIC_ USEGRP=1 GROUP=$group MAKEMOS=$makemos MAKEMOS_METHOD=$makemos_method METHOD=$method COADD_MODE=$coadd_mode VERBOSE=$verbose GENVAR=0

  } else {
    orac_warn "No subgroup can be made with the keys provided: $keys\n";
  }

} else {
  orac_warn "No keys provided to make subgroup - ignoring\n" if $verbose;
}
