# -*-cperl-*-

=head1 NAME

_MAKEMAP_FRAME_PSF_ - create map-filtered psf images

=head1 SYNOPSIS

 _MAKEMAP_FRAME_PSF_

 _MAKEMAP_FRAME_PSF_ CONFIG_TYPE=BRIGHT_COMPACT

=head1 DESCRIPTION

This primitive creates a map-filtered psf derived from an artificial
gaussian inserted into the timeseries. The data should have already
been processed as normal, and the processing is repeated for a model
PSF in order to understand how the map-making affects a known point
source.

Rather than letting the pipeline generate one automatically, the user
may provide an artificial source to add to the timeseries, specified
by the recipe parameter C<FAKEMAP_MAP>. They may also provide an
alternative scaling factor via C<FAKEMAP_SCALE>. This value will not
be scaled in the manner outlined below.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<CONFIG_TYPE>

Type of C<makemap> config file to use. Default is to use the standard
C<BLANK_FIELD> config file.

=item B<VERBOSE>

Flag to indicate whether messages should be printed to the
screen. Default is 1 (yes).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item KAPPA

NDFCOPY

=item ORAC-DR PRIMITIVES

_CREATE_PSF_IMAGE_, _MAKEMAP_FRAME_

=back

=head1 OUTPUT DATA

The first pass through this primitive, the Group uhdr will contain a
new entry C<FAKEMAP_SCALE> with the scale factor for the fake source
added to the timeseries on subsequent passes. This ensures that the
same value is used for each observation.

=head1 OUTPUT FILES

Creates a Frame file with the suffix C<_fmos>, plus the map-filtered
psf equivalent with suffix C<_mappsf> if applicable. Both are stored
in the current Frame.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2012,2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Be verbose? Default to yes.
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

my $config_type = get_prim_arg($_PRIM_ARGS_, "CONFIG_TYPE", "BLANK_FIELD");

# Names of output maps
my ($image, $image_copy, $map_psf);

# Retrieve the existing image if created
if ($Frm->product && $Frm->product eq "newimage") {
  $image = $Frm->file;
  # Make a copy of this file as it will be overwritten by the second
  # pass through _MAKEMAP_FRAME_. Store it on the intermediates array
  # so it's deleted at the end of processing.
  $image_copy = $Frm->inout("_fmoscopy");
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$image out=$image_copy");
  $Frm->push_intermediates($image_copy);
} else {
  orac_err "Creation of map failed - unable to create corresponding map PSF\n";
}

# Now create the map PSF if base image was created
if ($image) {
  # Set the PSF amplitude either from an existing value or a recipe
  # parameter - otherwise use a default of 1 for no scaling
  my $fakescale = 1;
  my $fcf = $Cal->gain($Frm->uhdr("ORAC_FILTER"), "BEAM");
  if ($Grp->uhdr("FAKESCALE")) {
    $fakescale = $Grp->uhdr("FAKESCALE");
  } elsif (defined $Frm->uhdr("RECPAR_FAKEMAP_SCALE")) {
    # This value will be in Jy so divide by the FCF
    $fakescale = $Frm->uhdr("RECPAR_FAKEMAP_SCALE");
    $fakescale /= $fcf;
    $Grp->uhdr("FAKESCALE",$fakescale);
  }
  my $fakescalejy = sprintf "%.1f", ($fakescale * $fcf);
  orac_print "\nCreating map-filtered PSF for this observation: using a gaussian with peak = $fakescalejy Jy/beam\n"
    if ($verbose);

  # The user can provide a PSF image via a recipe parameter or let the
  # pipeline create one itself
  my $user_psf = $Frm->uhdr("RECPAR_FAKEMAP_MAP")
    if (defined $Frm->uhdr("RECPAR_FAKEMAP_MAP"));
  my $psf = ORAC::TempFile->new();
  if ($user_psf) {
    # Need to make sure that the given PSF matches the pixel bounds of
    # the existing signal image
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$user_psf out=$psf like=$image");

    # Set fakemap parameters to be picked up by the map-maker
    $Frm->uhdr("FAKEMAP", $psf);
    $Frm->uhdr("FAKESCALE", $fakescale);
  } else {
    # Create a gaussian of the telescope FWHM, using the existing
    # signal image as a template
    _CREATE_FAKEMAP_FRAME_ LIKE=$image VERBOSE=0
  }

  # Store raw files and re-make map now with fake gaussian added to it
  $Frm->files($Frm->raw);
  $Frm->readhdr;
  _MAKEMAP_FRAME_ CONFIG_TYPE=$config_type

  # Retrieve the map psf if successful
  if ($Frm->product && $Frm->product eq "newimage") {
    _ADD_FAKEMAP_FITS_HEADER_
    my $fakedmap = $Frm->file;
    $map_psf = $Frm->inout("_mappsf");
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$fakedmap out=$map_psf");
  } else {
    # Otherwise issue an error - what else should happen here?
    orac_err "Creation of map PSF failed\n";
  }
}

# If the map psf creation was successful, $map_psf will now contain
# the name of the image. Store the image and map psf in the Frame.
if ($image && $image_copy && $map_psf) {
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$image_copy out=$image");
  $Frm->push_intermediates($image_copy);
  $Frm->files($map_psf);
  $Frm->tagset("mappsf");
  $Frm->files($image);
  $Frm->tagset("newimage");
  $Frm->readhdr;
}
