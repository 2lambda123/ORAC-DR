# -*-cperl-*-

=head1 NAME

_FIND_BEAM_SIZE_ - Calculate the beam size from a calibrator

=head1 SYNOPSIS

_FIND_BEAM_SIZE_ GAUSSIAN=1 METHOD=PSF

=head1 DESCRIPTION

This primitive carries out a fit to a calibrator (or pointing target)
to determine the beam size and position angle using one of two
available methods. The reported values are the
full-width-at-half-maximum (FWHM) along the major and minor axes, and
the beam position angle on the sky at the time of obseration. The fit
is performed in the SKY domain so the FWHM is returned in arcsec.

The default is to allow the current fitting routine to determine the
shape of the beam. A flag may be specified to force the return of the
equivalent gaussian beam parameters.

The fit is carried out on the current Group image or the current
co-added Frame and will fail if there is more than one file in the
Frame.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GAUSSIAN>

A flag to indicate whether the fit is forced to be Gaussian. The
default is 1 (yes).

=item B<GROUP>

Flag to indicate whether the primitive is to process the Group
image. Default is 0 (false), which will use the current stacked Frame
image.

=item B<LOGFILE>

A flag to indicate whether a pipeline log file should be written
containing the results of the fit. Default is 1 (true).

=item B<METHOD>

Method for deriving the beam parameters. Valid options are C<BEAMFIT>
or C<PSF>. Default is C<BEAMFIT>. In practice, anything other than
C<PSF> will implies C<BEAMFIT>.

=item B<OBSEND>

Flag to indicate whether the primitive should wait until the
observation has ended before fitting the beam. The default is 1
(wait until end).

=item B<OFFSET>

A flag to denote whether to return the centroid in offset
coordinates. A value of 1 will force the primitive to set the SkyRefIs
attribute to C<Origin> if it has not already been set. Default is 0
(false) which will use the current value.

=item B<SYSTEM>

Coordinate system in which to perform the fit. The default is
C<AZEL>. May be C<AZEL>, C<ICRS>, C<FK5>, C<GAPPT> or
C<GALACTIC>. Minimum match is supported.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (print messages).

=back

=head1 EXTERNAL TASKS

=over 4

=item KAPPA:

WCSATTRIB

=item ORAC-DR PRIMITIVES:

_ASSESS_BEAM_FIT_, _ASSESS_IMAGE_, _CENTROID_IMAGE_, _FIT_SOURCE_

=back

=head1 NOTES

This method only fits a single component to the beam. This is not
enough at 450 microns, but currently the beam is not sufficiently
well-known to do much more.

Using coordinate frames other than AzEl will cause the beam to appear
to rotate during the course of an observation.

Not all pointing targets are point-like so results from these objects
should be assessed in light of what is known about the extent of the
emission associated with these sources.

=head1 OUTPUT DATA

The beam parameters are stored in the calibration system.

=head1 OUTPUT FILES

If requested, the beam parameters are written to the log file
C<log.beam>.

=head1 LOGFILE FORMAT

The logfile has the following columns:

=over 4

=item UT

The UT date in C<YYYYMMDD.frac> format.

=item HST

The time of the observation in Hawaii.

=item Obs

The observation number.

=item Source

The source name.

=item Mode

The observing mode.

=item Filter

The filter associated with the current result.

=item Elevation

The elevation of the observation.

=item CSO

Equivalent CSO tau derived from the tau used to reduce
the observation.

=item Tau

The tau value used for the reduction.

=item Seeing

The seeing value as stored in the header.

=item A

Beam semi-major axis in arcsec.

=item dA

Error in A.

=item B

Beam semi-minor axis in arcsec.

=item dB

Error in B.

=item PA

Position of major axis, in degrees east of north.

=item dPA

Error in PA.

=item Errbeam

Fractional contribution of error beam (per cent).

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>,
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 2005-2008 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Are we looking at the group image?
my $group = get_prim_arg( $_PRIM_ARGS_,"GROUP", 0 );
my $in;
if ( $group ) {
  $in = $Grp->file;
} else {
  # Check that we only have one file in the Frame
  unless ($Frm->nfiles == 1) {
    orac_throw "Error: _FIND_BEAM_SIZE_ must be run after frames have been combined\n";
  } else {
    $in = $Frm->file;
  }
}

# Should I be verbose? (Default to yes)
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1 );

# Are we writing an entry to a log file? Default Yes, but allow
# override with recipe parameter
my $uselog = get_prim_arg( $_PRIM_ARGS_, "LOGFILE", 1 );
$uselog = $Frm->uhdr("RECPAR_LOGFILE") if (defined $Frm->uhdr("RECPAR_LOGFILE"));

# Has the user said to wait until the observation is complete before
# fitting?
my $dofit = get_prim_arg( $_PRIM_ARGS_, "OBSEND", 1 );
# Retrieve the OBSEND flag
my $obsend = ($Frm->uhdr("OBSEND")) ? 1 : 0;
# Always proceed if the observation has ended
$dofit = ( $dofit == $obsend || $obsend ) ? 1 : 0;

# Check for QL
if ($Frm->uhdr("QUICKLOOK")) {
  $dofit = 0 unless ( $Grp->uhdr("NEWIMAGE") );
}

# Unset dofit if the input file does not exist
$dofit = 0 unless ( -e "$in.sdf" );

# Do we have a calibrator?
my $calib = $Cal->iscalsource($Frm->hdr('OBJECT')) ;
# Jupiter and Saturn are too extended to use to estimate the telescope
# beam size
$calib = 0 if (uc($Frm->hdr("OBJECT")) eq "JUPITER" ||
	       uc($Frm->hdr("OBJECT")) eq "SATURN" );

# Proceed with finding the beam size if the source is a calibrator and
# the DOFIT flag is true
if ($calib && $dofit) {

  # Do we want to use BEAMFIT or PSF? Default BEAMFIT
  my $method = get_prim_arg( $_PRIM_ARGS_, "METHOD", "BEAMFIT" );
  # Override with recipe parameter
  $method = $Frm->uhdr("RECPAR_FIT_METHOD") if (defined $Frm->uhdr("RECPAR_FIT_METHOD"));

  # Set usepsf flag
  my $usepsf = ( $method eq "PSF" ) ? 1 : 0;

  # Kappa must be at least V0.15 to use PSF
  if (starversion_lt('kappa','V0.15-0')) {
    orac_throw "Installed version of KAPPA is too old to run _FIND_BEAM_SIZE_\n";
  }

  # See if KAPPA has beamfit
  if ( !$usepsf && starversion_lt('kappa','V1.7')) {
    orac_warn "Installed version of KAPPA is too old to use beamfit method, switching to PSF instead\n";
    $usepsf = 1;
  }

  # Get the WCS object for the input file
  my $wcs = $Frm->read_wcs( $in );

  # Are we working in an offset coordinate system? Default to yes.
  my ($ORAC_STATUS, $skyrefis);
  my $offset = get_prim_arg( $_PRIM_ARGS_, "OFFSET", 1 );
  if ( $offset ) {
    # Check if we need to set it first
    $skyrefis = lc($wcs->Get("skyrefis"));
    if ( $skyrefis ne "origin" ) {
      $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=set name=skyrefis newval=origin");
    }
  }

  # Store current coordinate system so it can be reset on exit
  my $incosys = $wcs->Get("system(1)");

  # Determine whether the the fit coordinate system was supplied as an
  # argument, else set it to AzEl.
  my $fitcosys = uc(get_prim_arg($_PRIM_ARGS_, "SYSTEM", "AZEL"));

  # Set the coordinate system for the fit
  if ( $fitcosys =~ /AZ/ ) {
    $fitcosys = "AZEL";
  } elsif ( $fitcosys =~ /RA|FK|ICRS/ ) {
    $fitcosys = "ICRS";
  } elsif ( $fitcosys =~ /GAP/ ) {
    $fitcosys = "GAPPT";
  } elsif ( $fitcosys =~ /GAL/ ) {
    $fitcosys = "GALACTIC";
  } else {
    orac_warn "Unknown coordinate system, $fitcosys - will use input as is\n";
    $fitcosys = $incosys;
  }

  # Set coord system for fit if necessary
  if ( $fitcosys ne $incosys ) {
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in name=system(1) mode=set newval=$fitcosys");
  }

  # Check image for suitable point sources
  _ASSESS_IMAGE_ IMAGE=$in VERBOSE=0
  if ( $_ASSESS_IMAGE_{POINT} == 1 ) {
    # Find the centroid of the source
    _CENTROID_IMAGE_ IMAGE=$in OFFSET=$offset SYSTEM=$fitcosys
    my @xy = (defined $_CENTROID_IMAGE_{RESULTS}->[0] &&
	      defined $_CENTROID_IMAGE_{RESULTS}->[1]) ?
	      @{ $_CENTROID_IMAGE_{RESULTS} } : ();
    # If a source could be located then proceed with fit
    if ( defined $xy[0] && defined $xy[1] ) {
    orac_print "Deriving the beam in the $fitcosys coordinate system using $method\n";

    my (@amp, @majfwhm, @minfwhm, $axisr, @orient, @totalflux, @posn, $goodbeam);

    # Are we forcing a gaussian fit?
    my $gaussian = get_prim_arg($_PRIM_ARGS_, "GAUSSIAN", 1);
    # Override with recipe parameter
    $gaussian = $Frm->uhdr("RECPAR_FIT_GAUSSIAN")
      if (defined $Frm->uhdr("RECPAR_FIT_GAUSSIAN"));

    # Carry out the fit
    _FIT_SOURCE_ METHOD=$method GAUSSIAN=$gaussian IMAGE=$in XYPOS=\@xy BOX=9
    # Check if fit succeeded
    if ( $_FIT_SOURCE_{FIT} == 1 ) {
      @amp = @{ $_FIT_SOURCE_{AMPLITUDE} };
      $axisr = $_FIT_SOURCE_{AXISR};
      @majfwhm = @{ $_FIT_SOURCE_{MAJFWHM} };
      @minfwhm = @{ $_FIT_SOURCE_{MINFWHM} };
      @orient = @{ $_FIT_SOURCE_{ORIENT} };
      @posn = @{ $_FIT_SOURCE_{POSITION} };
      @totalflux = @{ $_FIT_SOURCE_{TOTALFLUX} };
    }
    $goodbeam = $_FIT_SOURCE_{FIT};

    # If the fit was successful, check the quality of the fit
    if ( $goodbeam ) {
      _ASSESS_BEAM_FIT_ AMP=\@amp MAJOR=\@majfwhm MINOR=\@minfwhm AXISR=$axisr
      $goodbeam = $_ASSESS_BEAM_FIT_{BEAM};
    }

    my ($beama, $beamb, $pa, $errfrac);
    # If the fit was good, proceed with estimate of error beam
    if ( $goodbeam ) {
      $errfrac = 0.0;
      # Store beam parameters
      $Cal->beampar( majfwhm => \@majfwhm, minfwhm => \@minfwhm,
		     orient => \@orient, errfrac => $errfrac );

      # Reformat for pretty reporting
      $errfrac = sprintf "%3d", $errfrac;
      $beama = sprintf "%5.2f", $majfwhm[0];
      $beamb = sprintf "%5.2f", $minfwhm[0];
      $pa = sprintf "%6.2f", $orient[0];
    } else {
      # Don't bother logging result if the fit was poor
      $uselog = 0;
    }

    # Write a log file if required
    if ($uselog) {
      my $logtype = "beam";
      my @names = ("A", "dA", "B", "dB", "PA", "dPA", "Errbeam");
      my $da = sprintf "%5.2f",  $majfwhm[1];
      my $db = sprintf "%5.2f", $minfwhm[1];
      my $dpa = sprintf "%5.2f", $orient[1];
      my @values = ($beama, $da, $beamb, $db, $pa, $dpa, $errfrac);
      _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names GROUP=$group
    }
    orac_print "Beam size: $beama x $beamb arcsec^2 at a PA of $pa deg E of N\n", "green"
      if ($verbose && $goodbeam);
    } else {
      orac_warn "Unable to locate a source near the centre of the image\n";
    }
  } else {
    orac_warn "Unable to locate a suitable point source to determine beam size\n";
  }

  # Reset WCS attributes if necessary
  my @attrs;
  # Check SYSTEM
  if ( $fitcosys ne $incosys ) {
    push(@attrs, "system(1)=$incosys");
  }
  # Check SkyRefIs
  if ( defined $skyrefis && $skyrefis ne "origin") {
    push(@attrs, "skyrefis=$skyrefis");
  }
  if (@attrs) {
    my $attrs = join(",",@attrs);
    $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$in mode=mset setting='$attrs'");
  }
}
