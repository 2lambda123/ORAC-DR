# -*-cperl-*-

=head1 NAME

_PROCESS_DARK_NOISE_ - calculate a dark white noise image for each subarray

=head1 SYNOPSIS

_PROCESS_DARK_NOISE_

=head1 DESCRIPTION

This primitive calculates a noise image for each subarray using only
the initial DARK in the observation. If called from the quick-look or
summit pipelines the dark data are processed and left on disk, with an
entry added in the calibration system.

For offline processing, the dark data are stored in their own Frame
object for later processing.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<FREQRANGE>

Comma-separated pair of numbers indicating the frequency range (Hz)
over which to measure white noise portion of power spectrum. Default
is 2,10 (i.e. 2-10 Hz). May be overridden with the C<NOISE_FREQRANGE>
recipe parameter.

=item B<FREQLO>

Lower frequency at which to measure power spectrum. Default is 0.5 Hz.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 1
(yes).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item ORAC-DR PRIMITIVES:

_CALCULATE_NOISE_, _DELETE_TEMP_FILES_, _DISPLAY_NOISE_, _WRITE_FLAG_FILE_

=back

=head1 OUTPUT DATA

The current Frame object is updated with the output noise files.

For offline processing:

=over 2

=item * The Frame uhdr contains a new entry, C<DARKSAMPLES>, which lists the
number of samples in the dark files.

=item * The Group object will have a new Frame stored
which contains the processed dark noise data.

=back

=head1 OUTPUT FILES

A noise file is created for each subarray with the suffix C<_noi>.

A flag file is created for SETUP observations which contains the names
of the current noise images and flatfield solutions.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2012 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should we be verbose (default to yes)?
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1);

# Low frequency measurement point
my $freqlo = get_prim_arg( $_PRIM_ARGS_, "FREQLO", 0.5 );

# High frequency measurement range for estimating white part of
# spectrum - this will be overriden in _CALCULATE_NOISE_ by the
# NOISE_FREQRANGE recipe parameter if present
my $freqrange = get_prim_arg( $_PRIM_ARGS_, "FREQRANGE", "2,10" );

# For the QL and summit pipelines, there should only be dark data in
# the Frame. Another check that could be done here is that the
# QL/summit pipelines should have the SHUTTER keyword in the hdr, and
# not in subheaders which will be the case for the offline pipeline.
my $online = ($Frm->uhdr("QUICKLOOK") || $Frm->uhdr("SUMMIT")) ? 1 : 0;
if ($online || $Frm->hdr("OBS_TYPE") =~ /setup/i) {

  # Define a flag for whether to proceed - true for dark-only Frames,
  # false for fastflat-only Frames
  my $proceed = ($Frm->tagexists("dark")) ? 1 : 0;
  if ($Frm->uhdr("PROCESS_FASTFLAT")) {
    # If the PROCESS_FASTFLAT flag is set, proceed only if we have
    # mixed sequence data for SETUPS in the SUMMIT pipeline
    if (!defined $Frm->hdr("SEQ_TYPE") && $Frm->uhdr("SUMMIT") &&
	$Frm->hdr("OBS_TYPE") =~ /setup/i) {
      $proceed = 1;
      $Frm->uhdr("PROCESS_FASTFLAT",0);
    } else {
      # Otherwise do not proceed if PROCESS_FASTFLAT is true
      $proceed = 0;
    }
  }
  # Always proceed in the offline case
  $proceed = 1 if (!$online);

  if ($proceed) {
    # Tell the pipeline that we're done with fastflats
    if (!$online) {
      $Frm->uhdr("PROCESS_FASTFLAT", 0) if ($Frm->uhdr("PROCESS_FASTFLAT"));
    }
    # Calculate the noise from this initial dark
    _CALCULATE_NOISE_ FREQRANGE=$freqrange FREQLO=$freqlo

    # Analyse the NEP results, print to screen and do QA checks
    _ANALYZE_NOISE_ QA=1 NEP=1
    _ANALYZE_NOISE_ QA=0 NEP=0 VERBOSE=0

    # Write a flag file for the TCS to pick up if this is a setup observation
    if ($Frm->hdr("OBS_TYPE") =~ /setup/i) {
      # Retrieve successful noise calculations
      my @files = $Frm->files if ($Frm->uhdr("NOISE") == 1);
      _RETRIEVE_FASTFLATS_ TYPE=SOL ALLSUB=1
      my @flats = @{$_RETRIEVE_FASTFLATS_{FASTFLATS}} if ($_RETRIEVE_FASTFLATS_{FASTFLATS});
      push (@files, @flats) if (@flats);
      _WRITE_FLAG_FILE_ FILES=\@files

      # Now write the list of bad bolometers
      _WRITE_BADBOL_LIST_
    }
    # Create a focal-plane mosaic of the noise images and display it.
    # Do this after writing the flag file for setups to ensure the
    # individual noise files are written.
    _DISPLAY_NOISE_

    # Tidy up but keep the noise mosaic (and individual images for SETUPs)
    my $keep = "_noimos";
    $keep .= ",_noi" if ($Frm->hdr("OBS_TYPE") =~ /setup/i);
    _DELETE_TEMP_FILES_ KEEP=$keep

    $Grp->product("dark");
    $Grp->tagset("dark");
  }
} else {
  my $obstype = lc($Frm->hdr("OBS_TYPE"));
  if  ($obstype eq "noise") {
    $obstype = "darknoise" if (defined $Frm->hdr("OBJECT") && $Frm->hdr("OBJECT") eq "DARK");
  }

  # Do not proceed for setups, any kind of flatfield ramp or dark noises
  # because none of these observation types contain a mix of dark and
  # sky data. Skip focus observations too for now until I put effort
  # into dealing with those data.
  return ORAC__OK if ($obstype eq "setup" || $obstype eq "ramp" || $obstype eq "darknoise"
		      || $obstype eq "focus");

  # Force obsend to true (in case it's not already)
  my $obsend_on_entry = $Frm->uhdr("OBSEND");
  $Frm->uhdr("OBSEND", 1);

  # Retrieve *first* set of dark files only - ignore the rest
  my @darks;
  for my $i ( 1 .. $Frm->nfiles ) {
    push(@darks, $Frm->file($i))
      if ($Frm->hdrval("SHUTTER", $i-1) == 0.0 && $Frm->hdrval("NSUBSCAN", $i-1) == 1);
  }

  # Copy out the required number of samples if requested
  my $darksamples;
  if (defined $Frm->uhdr("RECPAR_NOISE_SAMPLES")) {
    $darksamples = $Frm->uhdr("RECPAR_NOISE_SAMPLES");
    my $tmpFrm = $Frm->new();
    $tmpFrm->files(@darks);
    @darks = ();
    for my $i (1 .. $tmpFrm->nfiles) {
      my $in = $tmpFrm->file($i) . "(,,1:$darksamples)";
      my $out = $tmpFrm->inout("_raw", $i);
      $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$in out=$out");
      push(@darks, $out);
    }
  }

  if (@darks) {
    # Localize Frm here to calculate the noise, retrieve the processed
    # files at the end and store in a new Frame object
    my ($uhdr, @dknoi);
    {
      $uhdr = $Frm->uhdr;
      my $Frm = $Frm->new;
      $Frm->files(@darks);
      $Frm->uhdr(%{$uhdr});
      _CALCULATE_NOISE_ FREQRANGE=$freqrange FREQLO=$freqlo
      @dknoi = $Frm->files;
      $uhdr = $Frm->uhdr;
      # Retrieve the number of dark samples - these should all be the same
      $darksamples = ($Frm->hdrval("SEQEND") - $Frm->hdrval("SEQSTART") + 1) unless ($darksamples);
    }
    my $dkFrm = $Frm->new();
    $dkFrm->files(@dknoi);
    $dkFrm->uhdr(%{$uhdr}) if ($uhdr);

    # Store the number of samples in the dark files
    $Frm->uhdr("DARKSAMPLES", $darksamples);

    # Add this Frame object to the Group for later analysis
    $Grp->push($dkFrm);
    $Grp->product("dark");
    $Grp->tagset("dark");
  } else {
    orac_warn "Frame contains no DARKs\n";
  }
}
