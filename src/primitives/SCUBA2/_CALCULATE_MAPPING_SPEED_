# -*-cperl-*-

=head1 NAME

_CALCULATE_MAPPING_SPEED_ - calculate the SCUBA-2 `mapping speed' parameter

=head1 SYNOPSIS

 _CALCULATE_MAPPING_SPEED_ IN=$nepfile

 _CALCULATE_MAPPING_SPEED_ IN=$nepfile NBOL=400

=head1 DESCRIPTION

Calculates the figure of merit, or mapping speed, from NEP data for a
single SCUBA-2 detector array.

This figure of merit by the ratio of the number of bolometers, N, to
the square of the RMS NEP for the best N bolometers, i.e.

N_bol / ( NEP_rms)^2

The primitive first calculates the percentile corresponding to the
ratio of the number of bolometers requested (given by the B<NBOL>
parameter) to be included in the calculation to the total number of
working bolometers. The NEP data are thresholded at the value
corresponding to this percentile, and the RMS NEP and mapping speed
are calculated for these B<NBOL> bolometers. The values are stored in
the primitive hash on success.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<IN>

Name of input NEP file to analyze. Note this must be the name of the
NEP file itself, not the top-level container NDF. No default.

=item B<NBOL>

Number of bolometers to calculate the mapping speed for. Default is
all bolometers.

=item B<NGOOD>

The number of good bolometers, if known. Supplying this value will
speed up this primitive if called in a loop. If not given, the number
of good bolometers will be calculated.

=back

=head1 EXTERNAL TASKS

=over 4

=item KAPPA:

THRESH

=item ORAC-DR PRIMITIVES:

_CALCULATE_ARRAY_NEP_, _FIND_IMAGE_STATISTICS_

=back

=head1 NOTES

Due to rounding issues, there may be one more or fewer bolometers
included in the calculation.

=head1 OUTPUT DATA

Returns the mapping speed and RMS NEP in the primitive hash
C<%_CALCULATE_MAPPING_SPEED_> in the keys C<MAPSPEED> and C<NEP_RMS>
respectively.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2011 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Input file - no default
my $nepfile = get_prim_arg($_PRIM_ARGS_, "IN", undef);

# Get the number of bolometers for which to calculate the mapping
# speed - default to the whole array (1280 bolometers).
my $nbol = get_prim_arg($_PRIM_ARGS_, "NBOL", 1280);

# The number of good bolometers
my $numgood = get_prim_arg($_PRIM_ARGS_, "NGOOD", undef);
unless ($numgood) {
  _FIND_IMAGE_STATISTICS_ IMAGE=$nepfile VERBOSE=0 HISTAT=0
  $numgood = $_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMGOOD};
}

my ($rmsnep, $mapspeed);
if ($numgood && ($numgood >= $nbol)) {
  # Note normally percentiles would be (100 - $percentile) but these are
  # NEP data and smaller values are better
  my $percentile = 100.0 * ( $nbol / $numgood );

  # Find the value at this percentile
  _FIND_IMAGE_STATISTICS_ IMAGE=$nepfile VERBOSE=0 PERCENTILES=$percentile HISTAT=0
  my $thresh = $_FIND_IMAGE_STATISTICS_{RESULTS}->{PERCENTILES};
  if (ref($thresh) eq "ARRAY") {
    $thresh = $thresh->[0];
    orac_warn "Only asked for 1 percentile but got an array on return\n";
  }
  if ($thresh == &NDF::VAL__BADD()) {
    $rmsnep = 0.0;
    $mapspeed = 0.0;
  } else {
    # Threshold image at that percentile and calculate RMS NEP
    my $threshfile = ORAC::TempFile->new();
    my $args = "in=$nepfile out=$threshfile thrlo=0 newlo=0 thrhi=$thresh newhi=bad";
    $Mon{kappa_mon}->obeyw("thresh","$args");

    _CALCULATE_ARRAY_NEP_ IN=$threshfile NEPTYPE=RMS
    $rmsnep = $_CALCULATE_ARRAY_NEP_{NEPVAL};

    # Mapping speed is Nbol / (NEP_RMS)^2
    $mapspeed = $nbol / ($rmsnep * $rmsnep);
  }
} else {
  # Return 0 if numgood is zero or less than the number of bolometers
  # to use to calculate the mapping speed
  $mapspeed = 0.0;
  $rmsnep = 0.0;
}

# Return values to caller
$_PRIM_ARGS_->{MAPSPEED} = $mapspeed;
$_PRIM_ARGS_->{NEP_RMS} = $rmsnep;
