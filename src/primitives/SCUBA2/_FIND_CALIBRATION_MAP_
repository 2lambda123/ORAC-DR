# -*-cperl-*-

=head1 NAME

_FIND_CALIBRATION_MAP_ - determine the map flux conversion factor

=head1 SYNOPSIS

 _FIND_CALIBRATION_MAP_

=head1 DESCRIPTION

For calibrators, derive three Flux Conversion Factors (FCFs) which
convert bolometer power in pW to Jy/beam or Jy/arcsec**2.

The C<ARCSEC> method calculates the total integrated intensity within
an aperture of diameter 1-arcmin using
L<_APERTURE_PHOTOMETRY_|_APERTURE_PHOTOMETRY_> and calculates a flux
conversion factor from the known flux of the calibrator (in Jy):

  FCF(ARCSEC) = S_tot / P_sum  (Jy/arcsec**2/pW)

The peak response (C<BEAM>) FCF is calculated by finding the peak flux
and the fitted peak signal (derived from a 2-D Gaussian fit).

  FCF(BEAM) = S_peak / P_peak  (Jy/beam/pW)

These values are stored in the index file C<index.gains>.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

True if the Group image should be used. Otherwise the current Frame is
used.

=item B<LOGFILE>

A flag to denote whether the derived FCFs should be written to a log
file. Default is 1 (write a logfile).

=item B<LOGFITPAR>

A flag to denote whether the fit parameters should be written to a log
file. Useful for debugging purposes but not meant for full-time
pipeline use. Default is 0 (do not write parameters).

=item B<STORE>

Flag to denote whether to store the results in the Calibration
system. Default us 1 (yes).

=item B<VERBOSE>

Flag to denote whether to print additional messages to screen. Default
is 0 (no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

NDFTRACE

=item ORAC-DR PRIMITIVES

_ADD_LOG_ENTRY_, _APERTURE_PHOTOMETRY_, _FIND_MAP_PEAK_, _GET_PIXEL_SCALE_

=back

=head1 NOTES

This primitive is frame based (C<$Frm>), though with care it may also
be used on Groups.

The primitive requires that data tagged with C<newimage> exist, though
the current file is always used.

=head1 OUTPUT DATA

The FCF is stored in the calibration system in the file C<index.gains>.

If the FCF calculations were successful, the primitive hash
C<%_FIND_CALIBRATION_MAP_> contains a single key called C<FCF> which
contains a hash reference with the following keys:

=over 4

=item * ARCSEC

FCF per square arcsec

=item * BEAM

FCF per nominal beam size

=item * BEAMMATCH

FCF per matched-filtered beam

=back

=head1 OUTPUT FILES

Entry in C<log.fcf> log file if the frame is a calibrator.

A log file called C<log.fit_fcf> may be written.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1  COPYRIGHT

Copyright (C) 2009-2013 University of British Columbia.
Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 0);
my $logfile = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);

# Flag to denote whether to store the result in the Calibration system
my $store = get_prim_arg($_PRIM_ARGS_, "STORE", 1);

my $Obj = ( $group ? $Grp : $Frm );

my $proceed = ($Obj->tagexists("newimage")) ? 1 : 0;

# Retrieve source name and filter
my $src = $Obj->uhdr("ORAC_OBJECT");
my $filter = $Obj->uhdr("ORAC_FILTER");

# Look for an appropriate flux specified in recipe parameters. The
# flux will be calculated later for known calibrator sources if not
# given here.
my $sourceflux = ( $filter =~ /850/ ) ? $Frm->uhdr("RECPAR_FLUX_850")
  : $Frm->uhdr("RECPAR_FLUX_450");
if ( !defined $sourceflux ) {
  # Warn of missing flux density for non-calibrators
  if (!$Cal->iscalsource($src)) {
    orac_warn "Unable to calculate a FCF for non-calibrator source, $src: no flux specified for filter $filter\n" if ($verbose);
    $proceed = 0;
  }
}

# Proceed with FCF calculation if it's OK to do so
if ( $proceed ) {
  orac_print "\nCalculating FCFs for $src:\n";

  # File to work on
  $Obj->tagset("find_calibration_map_input");
  my $in = $Obj->file;

  # Get the pixel scale for calculating fit boxes
  _GET_PIXEL_SCALE_ IMAGE=$in VERBOSE=0
  my $pixscale = $_GET_PIXEL_SCALE_{PIXSCALE};

  # Get the current units so we quote the calibration factor
  $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$in");
  my ($ORAC_STATUS, $dataunits) = $Mon{ndfpack_mon}->get("ndftrace","units");

  # For deriving FCFs we should be able to use the SkyRef attribute as
  # an initial guess for the source position
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=get name=skyrefis");
  ($ORAC_STATUS, my $offset) = $Mon{ndfpack_mon}->get("wcsattrib","value");
  my $initpos;
  if ( lc($offset) eq "origin") {
    $initpos = [0.0, 0.0];
  } else {
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=get name=skyref");
    ($ORAC_STATUS, my $skyref) = $Mon{ndfpack_mon}->get("wcsattrib","value");
    my @pos = split(/\, /,$skyref,2);
    $initpos = \@pos;
  }

  # Begin by running the matched-filter on the calibrator - this will
  # be used multiple times and it saves some time in the QL to do it
  # once here
  my $inproduct = $Obj->product;
  _APPLY_MATCHED_FILTER_ GROUP=$group VERBOSE=0
  my $mf_product = $Obj->product;
  $Obj->product($inproduct);

  $Obj->tagretrieve("find_calibration_map_input");
  # Set the aperture radius using a recipe parameter, otherwise
  # default to 30 arcsec to compare with standard FCFs
  use constant FCF_APERTURE_RADIUS => 30.0;
  my $radius = (defined $Frm->uhdr("RECPAR_APERTURE_RADIUS")) ?
    $Frm->uhdr("RECPAR_APERTURE_RADIUS") : FCF_APERTURE_RADIUS;

  orac_print " Finding map peak and total flux...\n";
  my ($mapfitpar, $matchfitpar, %results, %results_err);
  _FIND_FLUXES_ GROUP=$group RADIUS=$radius INITPOS=$initpos LOGFILE=0 VERBOSE=0
  my $fluxresults = $_FIND_FLUXES_{RESULTS};
  if ($fluxresults) {
    # Retrieve the results
    $results{BEAM} = $fluxresults->{PEAK};
    $results_err{BEAM_ERR} = $fluxresults->{PEAKERR};
    $results{ARCSEC} = $fluxresults->{TOTALFLUX};
    $results_err{ARCSEC_ERR} = $fluxresults->{TOTALFLUXERR};

    $mapfitpar = $fluxresults->{FITPAR};

    # Now that a new position may have been determined, redefined
    # initpos for the call to find the flux in the matched filtered
    # map
    $initpos = $fluxresults->{POSITION} if (defined $fluxresults->{POSITION});
  }

  # Now find the peak in the matched-filtered map - this can succeed
  # where fitting the un-filtered map can fail due to the enhanced
  # signal-to-noise ratio.
  $Obj->tagretrieve("matchfilt");
  $Obj->product($mf_product);

  # Use a box of about 1.5x main-component FWHM because the beamfit
  # algorithm does not know how to fit the negative ring.
  orac_print " Finding peak in matched-filtered map...\n";
  my $box = ($Cal->fwhm)[0] * 1.5 / $pixscale;
  _FIND_FLUXES_ GROUP=$group RADIUS=$radius FITBOX=$box INITPOS=$initpos LOGFILE=0 VERBOSE=0
  $fluxresults = $_FIND_FLUXES_{RESULTS};
  if ($fluxresults) {
    # Retrieve the results
    $results{BEAMMATCH} = $fluxresults->{PEAK};
    $results_err{BEAMMATCH_ERR} = $fluxresults->{PEAKERR};

    $matchfitpar = $fluxresults->{FITPAR};
  }

  $Obj->tagretrieve("find_calibration_map_input");
  $Obj->product($inproduct);

  # Now report on the results - looping over each FCF type in turn
  my $bad_results = 0;
  my %fcf;
  # Accepted percentage calibration accuracy
  my $calacc = ($filter =~ /850/) ? 5 : 10;

  # Define a code ref to return peak/total flux
  my $get_flux = sub {
    my ($src_flux, $total) = @_;
    my $flux = $src_flux;
    if (ref($src_flux)) {
      $flux = ($total) ? $src_flux->[1] : $src_flux->[0];
    }
    return $flux;
  };

  # Loop over the different type of results
  orac_print "\n";
  foreach my $type (sort keys %results) {
    my $errtype = $type . "_ERR";

    # Type specific configurations
    my ($ismap, $units);
    if ($type =~  /^ARCSEC/) {
      $ismap = 1;  # Need full integrated flux
      $units = "Jy/arcsec**2/$dataunits";
    } else {
      # BEAM
      $units = "Jy/beam/$dataunits";
      $ismap = 0;
    }

    orac_print "Determining FCF of type ".($type).":";
    unless (defined $results{$type}) {
      orac_print " - Failed!\n", "red";
      orac_err "Calibration did not return a result\n";
      orac_err "Unable to determine a FCF of type $type for this observation\n";
      $bad_results++;
      next;
    }

    # Trap zero or negative flux when things have gone very badly wrong
    if ( $results{$type} <= 0) {
      $bad_results++;
      # This is obviously a Bad Thing (TM)
      orac_print " - Failed!\n", "red";
      my $garbage = ($results{$type} == 0) ? "zero"
	: "a negative flux measurement";
      orac_err "Calibration returned $garbage\n";
      orac_err "Unable to determine a FCF of type $type for this observation\n";
      next;
    }
    orac_print "\n";

    # Now get the peak/total flux for this filter
    my $flux = (defined $sourceflux) ? $get_flux->($sourceflux, $ismap)
      : $Cal->fluxcal($src, $filter, $ismap);

    # If we have a flux, store the FCF in the calibration system
    if (defined $flux) {
      my $printunits = ($type =~ /^ARCSEC/) ? $dataunits ." arcsec**2" : $dataunits;
      orac_print "  Flux = $flux; Data = ". (sprintf "%g", $results{$type}). " $printunits\n";

      # Calculate the new gain
      my $fcf = $flux / $results{$type};
      my $dfcf = (defined $results_err{$errtype})
	? $fcf * ($results_err{$errtype} / $results{$type}) : 0.0;

      # Store the result in the calibration system
      my $pfcf = sprintf "%7.3f", $fcf;
      my $pdfcf = sprintf "%7.3f", $dfcf;
      my $text = ($store) ? "Storing new" : "Derived";
      # Announce the new gain
      my $fcfcol = "green";
      my $gain_type = ($type eq "BEAMMATCH") ? "BEAM" : $type;
      my $stdfcf = $Cal->gain($filter, $gain_type);
      my $pcdiff = sprintf "%.1f", (100*($fcf - $stdfcf)/$stdfcf);
      my $hilo = ($pcdiff > 0) ? "higher" : "lower";
      $pcdiff = abs($pcdiff);
      if ($pcdiff > $calacc) {
	if ($pcdiff > 2*$calacc) {
	  $fcfcol = "red";
	} else {
	  $fcfcol = "yellow";
	}
      }
      orac_print "  $text FCF for $filter: $pfcf +/- $pdfcf $units (cf $stdfcf: $pcdiff% $hilo)\n", "$fcfcol";

      if ( $store ) {
	# Set the current gain - add to index file
	# This means that we have to create a hash with the
	# new keyword GAIN and the selected filter FILTER
	$Obj->uhdr("GAIN", $fcf);
	$Obj->uhdr("UNITS", $type);
	$Obj->uhdr("FWHM", ($Cal->fwhm)[0]);

	# Need to append type to file name so that the keys are unique
	$Cal->gainsindex->add($Obj->file() ."_$type",
			      { %{$Obj->hdr}, %{$Obj->uhdr}});
      }
      $fcf{$type} = sprintf "%.3f", $fcf;
      my $errtype = $type . "_ERR";
      $fcf{$errtype} = sprintf "%.3f", $dfcf;

    } else {
      orac_warn "Unable to calculate a flux for source $src\n";
    }
  }

  # Check if all the FCFs were bad in some way
  my $altfwhm = "NaN";
  if ($bad_results >= scalar(keys %results)) {
    orac_err "No FCFs could be determined for this observation\n";
  } elsif (defined $fcf{ARCSEC} && $fcf{ARCSEC} != 0 && defined $fcf{BEAM}) {
    # Sanity check: the BEAM FCF should be related to the ARCSEC FCF
    # using the empirical beam area: BEAM = ARCSEC * beamconv
    my $beamconv = $Cal->beamarea(2.0*$radius);
    my $beamfwhm = sprintf("%.2f", sqrt($beamconv/1.133));
    my $altbeamconv = $fcf{BEAM} / $fcf{ARCSEC};
    my $pcbeamconv = sprintf "%.1f", 100.0 * ($altbeamconv - $beamconv) / $beamconv;
    my $msg = ($pcbeamconv > 0) ? "higher" : "lower";
    $pcbeamconv = abs($pcbeamconv);
    $altfwhm = sprintf("%.2f", sqrt($altbeamconv/1.133));
    orac_print "Using ARCSEC/BEAM FCF ratio to derive beam area:\n";
    orac_print " derived   = ".(sprintf "%.2f", $altbeamconv)." arcsec^2/beam / FWHM = $altfwhm arcsec\n empirical = $beamconv arcsec^2/beam / FWHM = $beamfwhm arcsec\n";
    my $calcol = ($pcbeamconv < $calacc) ? "green" : (($pcbeamconv < 2*$calacc) ? "yellow" : "red");
    orac_print " Derived beam area is $pcbeamconv % $msg\n", "$calcol";
  } else {
    orac_warn "Unable to check relative calibration using ARCSEC and BEAM FCFs\n";
  }
  # Store results in primitive hash
  $_FIND_CALIBRATION_MAP_{FCF} = \%fcf;
  $_FIND_CALIBRATION_MAP_{FLUXES} = {%results, %results_err};

  # Now print results - ensure that all entries in the fcf hash are defined
  foreach my $k (qw/ ARCSEC ARCSEC_ERR BEAM BEAM_ERR BEAMMATCH BEAMMATCH_ERR /) {
    $fcf{$k} = "NaN" unless (defined $fcf{$k});
  }
  my $infotxt = ($group) ? "(group)"
    : "/ obs ".($Obj->hdr("OBSNUM"))." / ".($Obj->hdr("OBS_TYPE"));
  orac_result "FCFs for $filter / $src $infotxt\n";
  orac_result join(" / ", (map { "$_: ".(sprintf "%7.3f", $fcf{$_})." +/- "
				 .(sprintf "%6.3f", $fcf{$_."_ERR"})
			       } sort keys %results));
  orac_result "\n";

  # Additionally it seems that a user-friendly logfile is required
  if ($logfile) {
    my $logtype = "fcf";
    my @names = ("FCF_ARCSEC", "FCFerr", "FCF_BEAM", "FCFerr", "FCF_BEAMMATCH",
		 "FCFerr", "FWHM_eff");
    my @values = ($fcf{ARCSEC}, $fcf{ARCSEC_ERR}, $fcf{BEAM}, $fcf{BEAM_ERR},
		  $fcf{BEAMMATCH}, $fcf{BEAMMATCH_ERR}, $altfwhm);
    _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names GROUP=$group
  }

  # Log fit parameters here
  my $logfitpar = get_prim_arg($_PRIM_ARGS_, "LOGFITPAR", 0);
  if ($logfitpar && $mapfitpar && $matchfitpar) {
    my %map_fit = %{ $mapfitpar };
    my %mf_fit = %{ $matchfitpar };
    my $logtype = "fit_fcf";
    my @names = ("A", "B", "Peak", "Unc", "Gamma", "Dgamma",
		 "A_mf", "B_mf", "Peak_mf", "Unc_mf", "Gamma_mf", "Dgamma_mf",
		 "File");
    my @values = ($map_fit{MAJFWHM}->[0], $map_fit{MINFWHM}->[0],
		  $map_fit{AMPLITUDE}->[0], $map_fit{AMPLITUDE}->[1],
		  $map_fit{GAMMA}->[0], $map_fit{GAMMA}->[1],
		  $mf_fit{MAJFWHM}->[0], $mf_fit{MINFWHM}->[0],
		  $mf_fit{AMPLITUDE}->[0], $mf_fit{AMPLITUDE}->[1],
		  $mf_fit{GAMMA}->[0], $mf_fit{GAMMA}->[1], $in
		 );
    _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names GROUP=$group
  }
  orac_print "\n";

  # Make sure the files in the current object are the same as those on entry
  $Obj->tagretrieve("find_calibration_map_input");
}
