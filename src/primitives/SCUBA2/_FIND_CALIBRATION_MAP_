# -*-cperl-*-

=head1 NAME

_FIND_CALIBRATION_MAP_ - determine the map flux conversion factor

=head1 SYNOPSIS

 _FIND_CALIBRATION_MAP_

=head1 DESCRIPTION

For calibrators, derive three Flux Conversion Factors (FCFs) which
convert bolometer power in pW to Jy/beam or Jy/arcsec**2.

The C<ARCSEC> and C<BEAMEQUIV> methods calculated the total integrated
intensity within an aperture of diameter 1-arcmin using
L<_FIND_INTEGRATED_INTENSITY_|_FIND_INTEGRATED_INTENSITY_> and
calculate a flux conversion factor from the known flux of the
calibrator (in Jy):

  FCF(ARCSEC) = P_sum / S_tot  (Jy/arcsec**2/pW)

  FCF(BEAMEQUIV) = P_sum * beam_volume / S_tot  (Jy/beam/pW)

The C<BEAMEQUIV> FCF uses the peak signal of an equivalent Gaussian
beam with the same total signal as the sum within the specified
aperture.

The peak response (C<BEAM> FCF)is calculated by finding the peak flux
and the fitted peak signal (derived from a 2-D Gaussian fit).

  FCF(BEAM) = P_peak / S_peak  (Jy/beam/pW)

These values are stored in the index file C<index.gains>.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<AUTOPHOTOM>

Flag to denote whether the C<AUTOPHOTOM> package should be used to
calculate integrated fluxes. Default is 0 (do not use), and is
overridden by the C<RECPAR_AUTOPHOTOM> recipe parameter.

=item B<GROUP>

True if the Group image should be used. Otherwise the current Frame is
used.

=item B<LOGFITPAR>

A flag to denote whether the fit parameters should be written to a log
file. Useful for debugging purposes but not meant for full-time
pipeline use. Default is 0 (do not write parameters).

=item B<STORE>

Flag to denote whether to store the results in the Calibration
system. Default us 1 (yes).

=item B<VERBOSE>

Flag to denote whether to print additional messages to screen. Default
is 0 (no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

NDFTRACE

=item ORAC-DR PRIMITIVES

_ADD_LOG_ENTRY_, _FIND_INTEGRATED_INTENSITY_, _FIND_MAP_PEAK_

=back

=head1 NOTES

This primitive is frame based (C<$Frm>), though with care it may also
be used on Groups.

The primitive requires that data tagged with C<newimage> exist, though
the current file is always used.

=head1 OUTPUT DATA

The FCF is stored in the calibration system in the file C<index.gains>.

If the FCF calculations were successful, the primitive hash
C<%_FIND_CALIBRATION_MAP_> contains a single key called C<FCF> which
contains a hash reference with the following keys:

=over 4

=item * ARCSEC

FCF per square arcsec

=item * BEAM

FCF per nominal beam size

=item * BEAMEQUIV

FCF per fitted or nominal beam size

=back

=head1 OUTPUT FILES

Entry in C<log.fcf> log file if the frame is a calibrator.

A log file called C<log.fit_fcf> may be written.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1  COPYRIGHT

Copyright (C) 2009-2012 University of British Columbia.
Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 0);

my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);

my $autophotom = get_prim_arg($_PRIM_ARGS_, "AUTOPHOTOM", 0);
$autophotom = $Frm->uhdr("RECPAR_AUTOPHOTOM")
  if (defined $Frm->uhdr("RECPAR_AUTOPHOTOM"));

# Flag to denote whether to store the result in the Calibration system
my $store = get_prim_arg($_PRIM_ARGS_, "STORE", 1);

my $Obj = ( $group ? $Grp : $Frm );

my $proceed = ($Obj->tagexists("newimage")) ? 1 : 0;

# Retrieve source name and filter
my $src = $Obj->uhdr("ORAC_OBJECT");
my $filter = $Obj->uhdr("ORAC_FILTER");

# Look for an appropriate flux specified in recipe parameters. The
# flux will be calculated later for known calibrator sources if not
# given here.
my $sourceflux = ( $filter =~ /850/ ) ? $Frm->uhdr("RECPAR_FLUX_850")
  : $Frm->uhdr("RECPAR_FLUX_450");
if ( !defined $sourceflux ) {
  # Warn of missing flux density for non-calibrators
  if (!$Cal->iscalsource($src)) {
    orac_warn "Unable to calculate a FCF for non-calibrator source, $src: no flux specified for filter $filter\n" if ($verbose);
    $proceed = 0;
  }
}

# Proceed with FCF calculation if it's OK to do so
if ( $proceed ) {
  orac_print "Calculating FCFs for $src -";

  # File to work on
  $Obj->tagset("find_calibration_map_input");
  my $in = $Obj->file;

  # Get the pixel scale for calculating fit boxes
  _GET_PIXEL_SCALE_ IMAGE=$in VERBOSE=0
  my $pixscale = $_GET_PIXEL_SCALE_{PIXSCALE};

  # Get the current units so we quote the calibration factor
  $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$in");
  my ($ORAC_STATUS, $dataunits) = $Mon{ndfpack_mon}->get("ndftrace","units");

  # For deriving FCFs we should be able to use the SkyRef attribute as
  # an initial guess for the source position
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=get name=skyrefis");
  ($ORAC_STATUS, my $offset) = $Mon{ndfpack_mon}->get("wcsattrib","value");
  my $initpos;
  if ( lc($offset) eq "origin") {
    $initpos = [0.0, 0.0];
  } else {
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=get name=skyref");
    ($ORAC_STATUS, my $skyref) = $Mon{ndfpack_mon}->get("wcsattrib","value");
    my @pos = split(/\, /,$skyref,2);
    $initpos = \@pos;
  }

  # Begin by running the matched-filter on the calibrator - this will
  # be used multiple times and it saves some time in the QL to do it
  # once here
  my $inproduct = $Obj->product;
  _APPLY_MATCHED_FILTER_ GROUP=$group VERBOSE=0
  my $mf_product = $Obj->product;
  $Obj->product($inproduct);

  # Find the peak signal in the image
  $Obj->tagretrieve("find_calibration_map_input");
  _FIND_MAP_PEAK_ GROUP=$group FITPEAK=1 INITPOS=$initpos PLOTFIT=1
  my $mapfitpar = $_FIND_MAP_PEAK_{BEAM};

  # Retrieve the position - if successful, proceed with deriving an FCF
  my $posn = $_FIND_MAP_PEAK_{POSITION};
  if (@$posn) {
    # Having gone to the trouble of fitting the peak, store it as it
    # might be useful later
    $Frm->uhdr("MAP_PEAK_POSITION", $posn);
    # Set the aperture radius using a recipe parameter, otherwise
    # default to twice the FWHM.
    my $fwhm = $Cal->fwhm;
    my $radius = (defined $Frm->uhdr("RECPAR_APERTURE_RADIUS")) ?
      $Frm->uhdr("RECPAR_APERTURE_RADIUS") : 2.0*$fwhm;

    # Find the integrated intensity within the given aperture. Note
    # that the image should have a flat background in order to obtain
    # an accurate result
    _APERTURE_PHOTOMETRY_ RADIUS=$radius

    # Retrieve the results
    my %results = ( BEAM => $_FIND_MAP_PEAK_{PEAK},
		    ARCSEC => $_APERTURE_PHOTOMETRY_{TOTALFLUX}
		  );
    my %results_err = ( BEAM_ERR => $_FIND_MAP_PEAK_{PEAKERR},
			ARCSEC_ERR => $_APERTURE_PHOTOMETRY_{TOTALFLUXERR}
		      );

    # Use a box of about 1.5 FWHM because the beamfit algorithm does not
    # know how to fit the negative ring.
    my $box = $Cal->fwhm() * 1.5 / $pixscale;
    # Set a flag to indicate that it is the matched-filtered map which
    # is being plotted
    $Obj->tagretrieve("matchfilt");
    $Obj->product($mf_product);
    _FIND_MAP_PEAK_ VERBOSE=0 GROUP=$group GAUSSIAN=0 PLOTFIT=1 FITBOX=$box INITPOS=$initpos
    $Obj->tagretrieve("find_calibration_map_input");
    $Obj->product($inproduct);
    my $matched_peak = $_FIND_MAP_PEAK_{PEAK};
    my $matchfitpar = $_FIND_MAP_PEAK_{BEAM};
    if ($matched_peak) {
      $results{BEAMMATCH} = $matched_peak;
      $results_err{BEAMMATCH_ERR} = $_FIND_MAP_PEAK_{PEAKERR};
    } else {
      orac_err "Unable to determine a FCF of type BEAMMATCH for this observation\n";
    }

    # Define a code ref to return peak/total flux
    my $get_flux = sub {
      my ($src_flux, $total) = @_;
      my $flux = $src_flux;
      if (ref($src_flux)) {
	$flux = ($total) ? $src_flux->[1] : $src_flux->[0];
      }
      return $flux;
    };

    my $bad_results = 0;
    my %fcf;
    # Loop over the different type of results
    foreach my $type (sort keys %results) {
      my $errtype = $type . "_ERR";

      # Type specific configurations
      my ($ismap, $units);
      if ($type =~  /^ARCSEC/) {
	$ismap = 1;  # Need full integrated flux
	$units = "Jy/arcsec**2/$dataunits";
      } else {
	$units = "Jy/beam/$dataunits";
	if ($type =~ /^BEAMEQUIV/) {
	  # Need integrated flux for BEAMEQUIV calibration
	  $ismap = 1;
	} else {
	  $ismap = 0;
	}
      }

      orac_print "Determining calibration of type ".($type).":";
      unless (defined $results{$type}) {
	orac_print " - Failed!\n", "red";
	orac_err "Calibration did not return a result\n";
	orac_err "Unable to determine a FCF of type $type for this observation\n";
	$bad_results++;
	next;
      }
      # Trap zero when things have gone very badly wrong
      if ( $results{$type} <= 0) {
	$bad_results++;
	# This is obviously a Bad Thing (TM)
	orac_print " - Failed!\n", "red";
	my $garbage = ($results{$type} == 0) ? "zero"
	  : "a negative flux measurement";
	orac_err "Calibration returned $garbage\n";
	orac_err "Unable to determine a FCF of type $type for this observation\n";
	next;
      } else {
	orac_print "\n";
      }

      # Now get the peak/total flux for this filter
      my $flux = (defined $sourceflux) ? $get_flux->($sourceflux, $ismap)
	: $Cal->fluxcal($src, $filter, $ismap);

      # If we have a flux, store the FCF in the calibration system
      if (defined $flux) {
	my $printunits = ($type =~ /^ARCSEC/) ? $dataunits ." arcsec**2" : $dataunits;
	orac_print "  Flux ($type) = $flux; Data = ". $results{$type}. " $printunits\n";

	# Calculate the new gain
	my $fcf = $flux / $results{$type};
	my $dfcf = (defined $results_err{$errtype})
	  ? $fcf * ($results_err{$errtype} / $results{$type}) : 0.0;

	# Store the result in the calibration system
	my $pfcf = sprintf "%.4f", $fcf;
	my $pdfcf = sprintf "%.4f", $dfcf;
	if ( $store ) {
	  # Announce the new gain
	  orac_print("  Storing new gain for $filter: $pfcf +/- $pdfcf $units\n",'yellow');

	  # Set the current gain - add to index file
	  # This means that we have to create a hash with the
	  # new keyword GAIN and the selected filter FILTER
	  $Obj->uhdr("GAIN", $fcf);
	  $Obj->uhdr("UNITS", $type);
	  $Obj->uhdr("FWHM", $fwhm);

	  # Need to append type to file name so that the keys are unique
	  $Cal->gainsindex->add($Obj->file() ."_$type",
				{ %{$Obj->hdr}, %{$Obj->uhdr}});
	} else {
	  orac_print ("  Derived FCF for $filter: $pfcf +/- $pdfcf $units\n", "yellow");
	}
	$fcf{$type} = $fcf;
	my $errtype = $type . "_ERR";
	$fcf{$errtype} = $dfcf;

	# Additionally it seems that a user-friendly logfile is
	# a requirement
	my $logtype = "fcf";
	my @names = ("FCF", "FCFerr", "FCF_units", "FWHM");
	my @values = ($fcf, $dfcf, $type, $fwhm);
	_ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names GROUP=$group
      } else {
	orac_warn "Unable to calculate a flux for source $src\n";
      }
    }

    # Check if all the FCFs were bad in some way
    if ($bad_results >= scalar(keys %results)) {
      $Obj->isgood(0);
      orac_err "No FCFs could be determined for this observation: marking as bad\n";
    } else {
      # Sanity check: the BEAM FCF should be related to the ARCSEC FCF
      # using the empirical beam area: BEAM = ARCSEC * beamconv
      if (defined $fcf{ARCSEC} && defined $fcf{BEAM}) {
	my $beamconv = $Cal->beamarea(2.0*$radius);
	my $beamfwhm = sprintf("%.2f", sqrt($beamconv/1.133));
	my $altbeamconv = $fcf{BEAM} / $fcf{ARCSEC};
	my $pcbeamconv = sprintf "%.1f", 100.0 * ($altbeamconv - $beamconv) / $beamconv;
	my $msg = ($pcbeamconv > 0) ? "higher" : "lower";
	$pcbeamconv = abs($pcbeamconv);
	my $altfwhm = sprintf("%.2f", sqrt($altbeamconv/1.133));
	orac_print "Using ARCSEC/BEAM FCF ratio to derive beam area:\n";
	orac_print " derived   = ".(sprintf "%.2f", $altbeamconv)." arcsec^2/beam / FWHM = $altfwhm arcsec\n empirical = $beamconv arcsec^2/beam / FWHM = $beamfwhm arcsec\n";
	orac_print " Derived beam area is $pcbeamconv % $msg\n\n";
      } else {
	orac_warn "Unable to estimate consistency between ARCSEC and BEAM FCFs\n";
      }
      # Store results in primitive hash
      $_FIND_CALIBRATION_MAP_{FCF} = \%fcf;
    }

    # Log fit parameters here
    my $logfitpar = get_prim_arg($_PRIM_ARGS_, "LOGFITPAR", 0);
    if ($logfitpar && $mapfitpar && $matchfitpar) {
      my %map_fit = %{ $mapfitpar };
      my %mf_fit = %{ $matchfitpar };
      my $logtype = "fit_fcf";
      my @names = ("A", "B", "Peak", "Unc", "Gamma", "Dgamma",
		   "A_mf", "B_mf", "Peak_mf", "Unc_mf", "Gamma_mf", "Dgamma_mf",
		   "File");
      my @values = ($map_fit{MAJFWHM}->[0], $map_fit{MINFWHM}->[0],
		    $map_fit{AMPLITUDE}->[0], $map_fit{AMPLITUDE}->[1],
		    $map_fit{GAMMA}->[0], $map_fit{GAMMA}->[1],
		    $mf_fit{MAJFWHM}->[0], $mf_fit{MINFWHM}->[0],
		    $mf_fit{AMPLITUDE}->[0], $mf_fit{AMPLITUDE}->[1],
		    $mf_fit{GAMMA}->[0], $mf_fit{GAMMA}->[1], $in
		   );
      _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names GROUP=$group
    }

  } else {
    # This block is reached if no position could be determined
    if ( !$group ) {
      # If this is a Frame object and no FCF could be determined then
      # check if the image has enough s/n to detect it
      # Find the peak in a 30x30 pixel square box
      my $image = $Frm->file . "(0~30,0~30)";
      _FIND_IMAGE_STATISTICS_ IMAGE=$image VERBOSE=0
      _CALC_IMAGE_NOISE_ VERBOSE=0 LOGFILE=0
      my $snr;
      if (!defined $_CALC_IMAGE_NOISE_{SIGMA} || $_CALC_IMAGE_NOISE_{SIGMA} == 0) {
        $snr = "NaN";
      } else {
        $snr = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MAX} / $_CALC_IMAGE_NOISE_{SIGMA};
      }

      my $text = "Unable to determine a FCF for this observation";
      # Set minimum S/N of 10
      use constant SNR_MIN => 10.0;
      $snr = sprintf "%.1f", $snr;
      # If the noise is too high, just issue a warning
      if ( $snr ne "NaN" && $snr < SNR_MIN ) {
	$text .= ": noise too high to locate ".($Obj->hdr("OBJECT"))." (S/N = $snr)";
	orac_warn "$text\n";
      } else {
	$text .= ": bad data? (S/N = $snr)";
	$Obj->isgood(0);
	# Check Grp membership unless it's the last one so subsequent
	# calls to lastmember will still work as expected
	$Grp->check_membership unless ( $Grp->lastmember($Frm) );
	# Otherwise issue an error
	orac_err "$text\n";
      }
    } else {
      # Just issue a warning otherwise
      orac_warn "Unable to determine a FCF for this observation\n";
    }
  }

  # Make sure the files in the current object are the same as those on entry
  $Obj->tagretrieve("find_calibration_map_input");
}
