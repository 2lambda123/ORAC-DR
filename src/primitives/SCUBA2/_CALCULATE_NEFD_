# -*-cperl-*-

=head1 NAME

_CALCULATE_NEFD_ - calculate NEFD from NEP or image data

=head1 SYNOPSIS

_CALCULATE_NEFD_ ESTIMATOR=MEAN

=head1 DESCRIPTION

Calculate the Noise Equivalent Flux Density (NEFD) of the current
observation.

The NEFD is calculated in one of two ways. One method is suitable for
use with NOISE observations and scales the noise equivalent power
(NEP) by the flux conversion factor (FCF) and corrects for atmospheric
attenuation. The other method, suitable for use with image data,
creates an NEFD image by combining the variance and exposure time
data. The statistics of this image are calculated and the chosen
estimator returned as the representative NEFD.

The units of NEFD are mJy sqrt(s). The integration time is derived from
the C<EXP_TIME> extension in the image.

The choice of method is dictated by the observing mode.

The results are written to a log file, C<log.nefd>.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<ESTIMATOR>

Preferred estimator for NEFD or NEP. Valid options are
C<MEAN>, C<MEDIAN> or C<MODE>. Default is C<MEDIAN>.

=item B<GROUP>

Flag to indicate whether to obtain results from the Group file. Only
accessed for non-NOISE observations. Default is 0 (use the current
Frame).

=item B<LOGFILE>

Flag to indicate whether or not to write a log file to disk. Default
is 1 (write a log file).

=item B<VERBOSE>

Flag to denote whether to print extra messages. Default is 0 (no).

=item B<WRITE_NEFD>

A flag to indicate whether to use a temporary file for the NEFD image
or to create one which remains on disk after completion. Default is 1,
create a permanent file. Only accessed for images.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

COPYBAD, MATHS

=item ORAC-DR PRIMITIVES:

_ADD_LOG_ENTRY_, _FIND_IMAGE_STATISTICS_

=back

=head1 NOTES

Points to note when deriving the NEFD from an image:

=over 2

=item * The data must be calibrated.

=item * The data are masked to only include values within the bounds
of the requested map (as defined by the FITS headers). This ensures
that noisy pixels at the edge of the map do not affect the
calculation.

=item * This primitive assumes the current Frame or Group contains
only a single file, and is a no-op if there are multiple files. A
warning is issued in this case.

=back

This primitive currently gives erroneous results in offline mode for
deriving the NEFD from NOISE observations.

=head1 OUTPUT DATA

If no log file is to be written, then the primitive hash contains the
keys C<NEFD>, C<EFFNEFD> and C<NBOL_NEFD> with the calculated NEFD and
effective NEFDs and the number of bolometers used in the calculation.

=head1 OUTPUT FILES

Optionally writes a log file C<log.nefd>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2008-2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Return immediately if the Frame only contains darks or flatfielded data
return ORAC__OK if ($Frm->tagexists("dark") ||
                    ($Frm->product && $Frm->product eq "flatfield"));

# Write a log file? Default to yes
my $uselog = get_prim_arg( $_PRIM_ARGS_, "LOGFILE", 1 );

# Be verbose?
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 0 );

# Has the user requested the use of the Group image?
my $groupflag = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );

# Use the noise image or object image?
my $usenoise = ($Frm->uhdr("ORAC_OBSERVATION_TYPE" ) =~ /noise/i ||
                $Frm->uhdr("ORAC_OBSERVATION_TYPE" ) =~ /skydip/i) ? 1 : 0;

# Estimator - default is MEDIAN
my $estimator = uc(get_prim_arg( $_PRIM_ARGS_, "ESTIMATOR", "MEDIAN" ));

# Check we were given something sensible
unless ( $estimator eq "MEDIAN" || $estimator eq "MEAN" || $estimator eq "MODE" ) {
  orac_warn "_CALCULATE_NEFD_: Unrecognized estimator for integration time, $estimator\n falling back on default (MEDIAN)\n";
  $estimator = "MEDIAN";
}

# Code ref to calculate the extinction correction
my $calc_extcor = sub {
  my $obj = shift;
  my $tau = $Cal->tau ( $obj->uhdr("ORAC_FILTER") );
  my $airmass = 0.5*($obj->uhdr("ORAC_AIRMASS_START") +
                     $obj->uhdr("ORAC_AIRMASS_END"));
  return { airmass => $airmass,
           tau => $tau,
           extcor => exp($tau * $airmass), };
};

# Only use HISTAT to calculate the mode
my $histat = ($estimator eq "MODE") ? 1 : 0;
my ($nefd, $effnefd, $znefd, $nefdmethod, $nbol);
if ($usenoise) {
  #### Calculate NEFD from sky noise data ####

  # First check we have noise data available in the current Frame
  if ( $Frm->tagretrieve("noise") ) {
    $nefdmethod = "NOISE";
    # Obtain the files in the current Frame - for NOISE observations
    # there will be one file per subarray at this point; for SKYDIPs,
    # there will be one file per elevation per subarray.
    my @noisefiles = $Frm->files;

    orac_print "Calculating NEFDs for each subarray:\n";

    # FCF, tau and airmass are independent of subarray. Multiply by
    # 1000 and 1e12 to get FCF in mJy per beam per W (rather than
    # Jy/beam/pW) because NEP is in W Hz**-0.5
    # But for a skydip we are going to need to choose different
    # airmasses rather than using an average
    my $fcf = $Cal->gain($Frm->uhdr("ORAC_FILTER"), "BEAM") * 1.0e15;

    # so if we have multiple files for nefd calculation
    # we will read information from each file
    # else just use the header values
    my @fileinfo;

    my $onsky = ($Frm->uhdr("ORAC_OBJECT") eq "DARK" ||
                !defined $Frm->uhdr("ORAC_AIRMASS_START")) ? 0 : 1;
    if ($onsky){
      if (@noisefiles == 1) {
        @fileinfo = ( $calc_extcor->( $Frm ) );
      } else {
        # read the files and translate the headers
        for my $f (@noisefiles) {
          my $tmpfrm = $Frm->new();
          $tmpfrm->raw( $f );
          $tmpfrm->file( $f );
          $tmpfrm->readhdr;
          push(@fileinfo, $calc_extcor->($tmpfrm) );
        }
      }
    }

    # Calculate NEFD for each file
    foreach my $noisefile (@noisefiles) {

      my $nepimage = $noisefile.".more.smurf.nep";

      # Mask the NEP image to get the best NEFD. Set the subarray so
      # the correct mask is returned
      $Frm->subarray( $noisefile );
      my $bbmask = $Cal->mask;

      # Masked file
      my $mask = new ORAC::TempFile;
      my $maskedfile = $mask->file;
      if ( $bbmask ) {
        # If we have a mask, proceed
        $Mon{kappa_mon}->obeyw("copybad","in=$nepimage ref=$bbmask out=$maskedfile");
      } else {
        $maskedfile = $nepimage;
      }

      _FIND_IMAGE_STATISTICS_ IMAGE=$maskedfile VERBOSE=0 HISTAT=$histat COMP=DATA
      my $nep = $_FIND_IMAGE_STATISTICS_{RESULTS}->{$estimator};
      $nbol = $_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMGOOD};

      # Multiply NEP by combined FCF/transmission factor to get NEFD
      my $info = shift(@fileinfo) if ($onsky);

      # NEFD at airmass just needs the FCF. Divide by sqrt(2)
      # because... NEPs are pW/rt(Hz) but NEFDs are mJy rt(s) and the
      # sqrt(2) corrects for the Hz -> s conversion. Except now the
      # sqrt(2) is not thought to be needed.
      $nefd = $nep * $fcf;
      $effnefd = $nefd / sqrt($nbol);

      # Similarly calculate zenith NEFD which must be a smaller number
      # and accounts for airmass and tau
      $znefd = $nefd / $info->{extcor} if ($onsky);

      if (defined $nefd) {
        my $subarray = $Frm->subarray($noisefile);
        my $pnefd = sprintf "%6.2f", $nefd;
        my $penefd = sprintf "%6.2f", $effnefd;

        orac_print("Subarray $subarray:\n","green");
        if ($onsky) {
          my $pznefd = sprintf "%6.2f", $znefd;
          my $trans = sprintf "%.1f", 100.0 / $info->{extcor};
          my $airmass = sprintf "%6.4f", $info->{airmass};

          orac_print ("Measured  NEFD  = $pnefd mJy/beam s**0.5, "
                      ."sky trans = $trans %, A = $airmass\n", "green");
          orac_print ("Effective NEFD = $penefd mJy/beam s**0.5\n", "green");
          orac_print ("   Zenith NEFD = $pznefd mJy/beam s**0.5\n", "green");
        } else {
          my $msg = ($Frm->uhdr("ORAC_OBJECT") eq "DARK") ? "Dark" : "Measured";
          orac_print ("$msg NEFD = $pnefd mJy/beam s**0.5\n", "green");
        }

      } else {
        orac_warn "Could not determine ".(lc($estimator))." NEFD for $noisefile\n";
      }
    }
    orac_print "\n";
  } else {
    # No data to analyze yet so don't write a log file
    $uselog = 0;
  }
} else {
  #### Calculate NEFD from map ####
  my $Obj = ( $groupflag ) ? $Grp : $Frm;

  # Proceed only after a new (Group or Frame) image has been created
  if ($Obj->tagexists("newimage")) {
    my $frmgrp = ($groupflag) ? "Group" : "Frame";
    $nefdmethod = uc($frmgrp);

    orac_print "Calculating NEFDs for current $frmgrp map...";

    # Has the user requested that the NEFD image remain on disk?
    my $keep_nefd_image = get_prim_arg($_PRIM_ARGS_, "WRITE_NEFD", 1);

    # Retrieve current file associated with Frame or Group
    my $datafile = $Obj->file;

    # Create temp file for NEFD image
    my $nefdfile = new ORAC::TempFile;
    my $nefdimage = $nefdfile->file;
    if ( $keep_nefd_image ) {
      # Redefine the NEFD image name if the user wants to keep
      # it. Note it is written as an extension in the original
      # file. WARNING: this will OVERWRITE any existing NEFD
      # component!!!
      orac_print " storing NEFD image in input map" if $verbose;
      $nefdimage = $datafile . ".MORE.SMURF.NEFD";
    }
    orac_print "\n";

    my $comp_exptime = "MORE.SMURF.EXP_TIME";
    _COMPONENT_EXISTS_ COMPONENT=$comp_exptime FILE=$datafile
    if ($_COMPONENT_EXISTS_{EXISTS}) {
      # Create NEFD image = sigma * sqrt(t_exp) = sqrt(var * t_exp)
      my $exp = "SQRT(VA*IB)";
      my $exptime = $datafile . "." . $comp_exptime;
      my $nefd_temp = ORAC::TempFile->new();
      my $args = "exp=$exp VA=$datafile IB=$exptime out=$nefd_temp";
      $Mon{kappa_mon}->obeyw("maths","$args");
      # Need to trim wavelength axis from NEFD image
      $args = "in=$nefd_temp(,,1) out=$nefdimage trim trimwcs";
      $Mon{ndfpack_mon}->obeyw("ndfcopy","$args");

      # Unfortunately this will have copied the variance along with the
      # exp_time and weights components below the NEFD component, so
      # delete these
      $Mon{ndfpack_mon}->obeyw("setext","ndf=$nefdimage xname=smurf option=delete noloop");
      $Mon{ndfpack_mon}->obeyw("setvar","ndf=$nefdimage variance=!");

      # Obtain NEFD estimate from NEFD image
      _FIND_IMAGE_STATISTICS_ IMAGE=$nefdimage VERBOSE=0 HISTAT=$histat
      $nefd = $_FIND_IMAGE_STATISTICS_{RESULTS}->{$estimator};
      $nbol = $Frm->hdr("NBOLOEFF");
      if (!$groupflag && ($nbol > 0)) {
        # Calculate effective NEFD for this image by dividing out
        # the number of contributing bolometers
        $effnefd = $nefd / sqrt($nbol);
      }

      # Set the units correctly for the NEFD image
      $Mon{ndfpack_mon}->obeyw("setunits","ndf=$nefdimage units='mJy s**0.5'");
      $Mon{ndfpack_mon}->obeyw("setlabel","ndf=$nefdimage label='NEFD'");
    } else {
      orac_warn "Unable to calculate NEFD - input image has no EXP_TIME component\n";
    }

    if ( $nefd ) {
      if ($verbose) {
        my $pnefd = sprintf "%6.2f", $nefd;
        orac_print "Calculated NEFD = $pnefd mJy/beam s**0.5 from $frmgrp image $datafile\n", "green";
        if (!$groupflag && $effnefd) {
          my $penefd = sprintf "%6.2f", $effnefd;
          my $numbol = sprintf "%d", $Frm->hdr("NBOLOEFF");
          orac_print "Effective NEFD  = $penefd mJy/beam s**0.5 using $numbol bolometers\n", "green";
        }
      }
      my $info = $calc_extcor->($Obj);
      $znefd = $nefd / $info->{extcor};
    } else {
      orac_warn "Unable to derive NEFD using current $frmgrp image\n";
      $uselog = 0;
    }
  } else {
    $uselog = 0;
  }
}

# Write results to a log file if desired
if ( $uselog && defined $nefd ) {
  my $logtype = "nefd";
  my @names = (sprintf("%9s","NEFD"), sprintf("%11s","Zenith_NEFD"), sprintf("%14s","Effective_NEFD"), " Nbol", "Method");
  my @units = (sprintf("%9s","()"), sprintf("%11s","()"), sprintf("%14s","()"), sprintf("%5s","()"), sprintf("%6s","()"));

  # Reformat NEFD for printing
  $nefd = sprintf "%9.5f", $nefd;
  $effnefd = (defined $effnefd) ? sprintf "%14.5f", $effnefd : sprintf "%14s","*****";
  $znefd = (defined $znefd) ? sprintf "%11.5f", $znefd : sprintf "%11s", "*****";
  $nbol = sprintf "%5d", $nbol;
  my @values = ($nefd, $znefd, $effnefd, $nbol, sprintf("%6s",$nefdmethod));
  _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names GROUP=$groupflag
} else {
  # If we're not writing a log file, return the NEFD to the caller
  $_CALCULATE_NEFD_{NEFD} = $nefd;
  $_CALCULATE_NEFD_{EFFNEFD} = $effnefd;
  $_CALCULATE_NEFD_{NBOL_NEFD} = $nbol;
}
