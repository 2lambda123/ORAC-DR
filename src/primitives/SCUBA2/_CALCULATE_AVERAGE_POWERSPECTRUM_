# -*-cperl-*-

=head1 NAME

_CALCULATE_AVERAGE_POWERSPECTRUM_ - calculate the average power spectrum for all bolometers in each subarray

=head1 SYNOPSIS

_CALCULATE_AVERAGE_POWERSPECTRUM_

=head1 DESCRIPTION

This primitive calculates and displays the average power spectrum for
each raw data file in the current Frame object. The raw data undergo
basic processing to add padding and remove DC steps before calculating
the power spectrum.

This primitive is designed to be called as part of the QL or SUMMIT
pipelines, so the Frame object should contain no more than four files
(one for each subarray).

=head1 ARGUMENTS

The following arguments are supported:

=item B<DISPLAY>

Flag to denote whether the spectra are to be displayed. Default is 1
(yes). Note that if there are more than four files in the Frame, only
the first four will be displayed.

=item B<FLAT>

Flag to specify whether data should be flatfielded. Default is 0 (no).

=item B<KEEP>

Flag to denote whether to keep power spectra files on disk on
exit. Default is 0 (no).

=item B<NSAMP>

Number of samples to use in calculation. Default is to use all the
data.

=item B<THRESH>

Threshold (in standard deviations) for defining good bolometers
to include in the average power spectrum. Default is 3.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

NDFCOPY, SETTITLE

=item SMURF:

SC2CLEAN, SC2FFT

=back

=head1 OUTPUT DATA

The power spectra files are pushed onto the intermediates array of the
current Frame object so they can be deleted on exit, unless the user
has set the B<KEEP> parameter to true.

=head1 OUTPUT FILES

An average power-spectrum file is created for each subarray with the
suffix C<_avpspec>

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2012 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $proceed = 0;

# Always calculate power spectrum for the summit and QL pipelines
$proceed = 1 if ($Frm->uhdr("SUMMIT") || $Frm->uhdr("QUICKLOOK"));

# Skip darks in the case of science data
$proceed = 0 if ( $Frm->uhdr("DARKONLY") );

# Proceed if the observation has finished
$proceed = 1 if ($Frm->uhdr("OBSEND"));

# ...unless the current Frame is marked as bad
$proceed = 0 if ( !$Frm->isgood );

if ($proceed) {
  # Sigma-clipping threshold for good bolometers in the average power
  # spectrum
  my $thresh = get_prim_arg($_PRIM_ARGS_, "THRESH", 3.0);

  # Should the data be flatfielded before processing? Default to no.
  my $flat = get_prim_arg($_PRIM_ARGS_, "FLAT", 0);

  # Does the user want the files to remain on disk?
  my $keep_avpspec = get_prim_arg($_PRIM_ARGS_, "KEEP", 0);

  # Are the files to be displayed or just processed?
  my $display_spectra = get_prim_arg($_PRIM_ARGS_, "DISPLAY", 1);

  my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

  # Number of samples to use in the calculation - default is to use all the data
  my $nsamp = get_prim_arg($_PRIM_ARGS_, "NSAMP", undef);
  my $datafrac;
  # Check that nsamp is reasonable if given
  if ($nsamp) {
    my $num_samples = $Frm->hdrval("SEQEND",-1) - $Frm->hdrval("SEQSTART", 0) + 1;
    if ($nsamp > $num_samples) {
      orac_warn "Requested number of samples exceeds data length - using available data ($num_samples samples)\n";
      undef $nsamp;
    } else {
      $datafrac = int(100.0 * $nsamp/$num_samples);
    }
  }

  # Parameters for sc2concat
  my $doflat = ($flat) ? "flat" : "noflat";

  # Parameters for sc2clean - can use the same config file for all files
  my $cleancfg = File::Spec->catfile($ENV{ORAC_DATA_CAL}, "sc2clean_config.lis");

  my $obsnum = $Frm->uhdr("ORAC_OBSERVATION_NUMBER");
  my $nsubarrays = $Frm->subarrays;
  # Sort files by subarray
  my %subfiles = $Frm->get_files_by_subarray;

  my $spectrum = ($nsubarrays == 1) ? "spectrum" : "spectra";
  my $extra = ($datafrac) ? " using $datafrac % of available data" : "";
  orac_print "Calculating average power $spectrum$extra:\n" if ($verbose);
  orac_print "  Processing" if ($verbose);

  _RETRIEVE_FASTFLATS_
  my $fastflats = $_RETRIEVE_FASTFLATS_{FASTFLATS_SUB};

  my @avpspec;
  my $i = 0;
  # Process each subarray separately
  foreach my $subarray (sort keys %subfiles) {
    orac_print " $subarray..." if ($verbose);
    $i++;
    my $out = $Frm->inout("_avpspec", $i);
    my @infiles = @{$subfiles{$subarray}};
    if ($nsamp) {
      @infiles = map {$_ . "(,,1:$nsamp)"} @infiles;
    }
    push(@infiles, $fastflats->{$subarray}) if ($fastflats);
    my $inlist = write_file_list( @infiles );
    # Step 1: do some basic cleaning - this could be a many-to-1
    # operation, depending on the number of files but for the
    # QL/SUMMIT pipelines it is a 1-to-1 (plus fastflats)
    my $temp1 = new ORAC::TempFile;
    my $tempfile1 = $temp1->file;
    my $args = "in=^$inlist out=$tempfile1 $doflat";
    $args = "in=^$inlist out=$tempfile1 $doflat config='^$cleancfg'";
    # Add the alternative resistor values if the data are to be flatfielded
    $args .= " resist=".($Frm->uhdr("RECPAR_RESIST_CFG"))
      if (defined $Frm->uhdr("RECPAR_RESIST_CFG") && $flat);
    $Mon{smurf_mon}->obeyw("sc2clean","$args");

    # Step 2: calculate average power spectrum
    my $temp2 = new ORAC::TempFile;
    my $tempfile2 = $temp2->file;
    $args = "in=$tempfile1 out=$tempfile2 avpspec avpspecthresh=$thresh";
    $Mon{smurf_mon}->obeyw("sc2fft","$args");
    my ($ORAC_STATUS, $ngood) = $Mon{smurf_mon}->get("sc2fft","ngood");

    # Threshold the spectrum at 1e7 for display purposes and copy out
    # first axis from this 4-d file for linplot
    $Mon{kappa_mon}->obeyw("stats","ndf=$tempfile2");
    ($ORAC_STATUS, my $max) = $Mon{kappa_mon}->get("stats","maximum");
    if ( $max > 1.0e7 ) {
      # Can reuse tempfile1 here
      my $args = "in=$tempfile2 out=$tempfile1 thrlo=0 newlo=0 thrhi=1.0e7 newhi=1.0e7";
      $Mon{kappa_mon}->obeyw("thresh","$args");
      $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$tempfile1(,0,0,1) trim trimwcs out=$out");
    } else {
      $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$tempfile2(,0,0,1) trim trimwcs out=$out");
    }

    # Set a suitable title - included subscan number for QL/SUMMIT pipelines
    my $extra = ($Frm->uhdr("QUICKLOOK") || $Frm->uhdr("SUMMIT"))
      ? "/ scan ".($Frm->hdr("NSUBSCAN")) : "";
    my $title = "'Ave power spec $subarray / obs $obsnum $extra ($ngood bolos)'";
    $Mon{ndfpack_mon}->obeyw("settitle","ndf=$out title=$title");

    push(@avpspec, $out);
  }
  orac_print " done." if ($verbose);

  if ( $display_spectra ) {
    # We don't want to store these power spectra as the current files in
    # the Frame as they may complicate matters downstream, so use a
    # temporary Frame object for display purposes.
    my $dispFrm = $Frm->new;
    $dispFrm->files(@avpspec);
    # Display power spectrum
    if (defined $Display) {
      orac_print " Displaying $spectrum..." if ($verbose);
      $Display->display_data($dispFrm);
    }
    undef $dispFrm;
  }
  orac_print "\n" if ($verbose);

  # Store the power spectra in the intermediates array so they can be
  # tidied up later, unless the user wishes to keep them on disk.
  $Frm->push_intermediates(@avpspec) unless ($keep_avpspec);
}
