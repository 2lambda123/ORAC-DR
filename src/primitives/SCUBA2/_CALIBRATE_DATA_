# -*-perl-*-

=head1 NAME

_CALIBRATE_DATA_ - Multiply data by the flux conversion factor

=head1 SYNOPSIS

 _CALIBRATE_DATA_ UNITS=BEAM
 _CALIBRATE_DATA_ UNITS=ARCSEC

=head1 DESCRIPTION

Multiply SCUBA-2 data by the flux conversion factor (FCF).  The value
for the FCF depends on the filter and the type of calibration
required. The calibration units are specified by an argument.

Whilst this primitive can be run on a group, care must be taken that
it is not run multiple times on a group image.

Note that data will not be calibrated if the C<NOCALIB> uhdr entry is
set.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

If true, the Group file will be calibrated.

=item B<UNITS>

Controls the units of the FCF. The options are C<BEAM> for Jy/beam/pW
and C<ARCSEC> for Jy/arcsec**2/pW. Default is C<BEAM>.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

CMULT, SETUNITS

=item ORAC-DR PRIMITIVES:

_GET_PIXEL_SCALE_

=back

=head1 NOTES

No attempt is made to determine whether the calibration has already
been applied to a Group file.

=head1 OUTPUT FILES

Creates an output file with a C<_cal> extension.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>,
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 The University of British Columbia.
Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Read the arguments
my $Obj = ($_PRIM_ARGS_->{GROUP} ? $Grp : $Frm );

# Only proceed if the NOCALIB header is NOT set.
unless ( $Obj->uhdr("NOCALIB") ) {

  my $units = 'BEAM';
  if (exists $_CALIBRATE_DATA_{UNITS} ) {
    $units = uc( $_CALIBRATE_DATA_{UNITS});
    if ($units ne 'BEAM' && $units ne 'ARCSEC') {
      orac_throw "_CALIBRATE_DATA_: Units must be BEAM or ARCSEC not '$units'";
    }
  }

  # Multiplication factor - convert to mJy
  my $mult = 1000.0;
  my $pre = 'm';  # for mJy
  # Units
  my $unitstr = $pre .( $units eq 'BEAM' ? 'Jy/beam/pW' : 'Jy/arcsec**2/pW');

  # For ARCSEC we need to multiply by the square of the pixel regrid
  # size.

  # Loop over all files in the object
  for my $i (1..$Obj->nfiles) {
    my $file = $Obj->file($i);
    my $parea = 1.0; # Pixel area
    if ($units eq 'ARCSEC') {
      # Need pixel scale to get pixel area
      _GET_PIXEL_SCALE_ IN=$file
      $parea = $_GET_PIXEL_SCALE_{RESULTS}->[0] *
	       $_GET_PIXEL_SCALE_{RESULTS}->[1];
    }

    # Retrieve the current fcf value from the calibration object. This
    # will calibrate our data in Jy and then if we multiply by an
    # extra 1000 we get mJy.
    # The multiplication factor includes the /pixel correction in ARCSEC
    my $gain = $Cal->gain($Obj->uhdr("ORAC_FILTER"), $units) * $mult * $parea;

    # Retrieve input and output names
    my ($in, $out) = $Obj->inout("_cal", $i);
    my $args = "scalar=$gain";

    # Multiply by the gain
    $Mon{kappa_mon}->obeyw("cmult","in=$in out=$out $args");

    orac_print "Multiplying $in by $gain $unitstr\n";

    # Change the units
    $Mon{ndfpack_mon}->obeyw("setunits","ndf=$out units=$unitstr");

    # Update file
    $Obj->file($i, $out);
  }

  orac_printp "Data calibrated in $unitstr\n";
}
