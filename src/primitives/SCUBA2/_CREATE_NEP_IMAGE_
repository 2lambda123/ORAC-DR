# -*-cperl-*-

=head1 NAME

_CREATE_NEP_IMAGE_ - calculate NEP image for each subarray

=head1 SYNOPSIS

 _CREATE_NEP_IMAGE_

 _CREATE_NEP_IMAGE_ NEPTYPE=RMS

=head1 DESCRIPTION

This primitive creates an image of the effective or RMS NEP as a
function of the pixel heater and detector bias settings. The data for
this image are retrieved from a Grp uhdr entry stored by an earlier
call to L<_CALCULATE_NEP_GROUP_|_CALCULATE_NEP_GROUP_>.

The output image has X-Y axes of heater and bias settings and has
world coordinates attached. The units are those of NEP, i.e. W
Hz**-0.5.

The primitive exits immediately if the requisite data are not found
in the Grp uhdr.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<NEPTYPE>

Type of NEP image to create. May be C<eff> or C<rms> for the
effective or RMS NEPs respectively.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

SETMAGIC, SETUNITS, TRANDAT

=item ATOOLS

ASTADDFRAME, ASTFRAME, ASTFRAMESET, ASTWINMAP

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

One file per subarray with the suffix C<_rmsnep> or C<_effnep> (for
the RMS and effective NEP respectively) as a function of the heater
and bias settings.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should we be verbose (default to no)?
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 0);

# Flag to indicate whether the data are being processed in batch
# mode. This is obtained from the global Frm.
my $batch = $Frm->uhdr("BATCH");

# Proceed with the creation of the NEP images only if the observation
# has ended
my $proceed = ($Frm->uhdr("OBSEND")) ? 1 : 0;

# NEP type to : RMS or effective
my $neptype = lc(get_prim_arg( $_PRIM_ARGS_, "NEPTYPE", "eff"));
my $type = ($neptype eq "eff") ? "effective" : uc($neptype);
my $uhdrnep = uc($neptype) . "NEP";

# Cannot create NEP images if the data are not present
unless ($Grp->uhdr($uhdrnep)) {
  orac_warn "No NEP values stored in header - unable to create $type NEP image\n";
  $proceed = 0;
}

if ( $proceed ) {
  # Retrieve NEP data (set to undef on completion to save memory?)
  my %nep = %{ $Grp->uhdr($uhdrnep) };

  my @subarrays = $Frm->subarrays;
  my $nepunits = $Grp->uhdr("NEP_UNITS");

  # OK now we have the %nep info, write an ascii file and convert
  # it to an NDF
  my $images = ($Frm->numsubarrays == 1) ? "image" : "images";
  orac_print "Creating $images of $type NEP as function of heater/bias settings\n";

  # In QL/summit mode, the heater and bias value arrays have to filled
  # the hard way; in batch mode get hdrvals from Frm.
  my (@heat, @bias);
  if ($batch) {
    @heat = sort($Frm->hdrvals("PIXHEAT"));
    @bias = sort($Frm->hdrvals("DETBIAS"));
  } else {
    my @array = sort grep { $subarrays[0] } keys %nep;
    # Obtain the array of heater and bias settings - the elements will
    # alternate: heater1, bias1, heater2, bias2, ..., heaterN, biasN
    my @heat_bias = map { grep { /^\d+/ } split(/\_/, $_) } @array;

    my $npts = @heat_bias / 2;
    if (@heat_bias % 2 != 0) {
      orac_err "Something went wrong - badly wrong!\n";
    }
    my $j = 0;
    my (%heat, %bias);
    for my $i ( 0 .. $npts-1 ) {
      $heat{$heat_bias[$i + $j]} = 1
	unless (defined $heat{$heat_bias[$i + $j]});
      $bias{$heat_bias[$i + 1 + $j]} = 1
	unless (defined $bias{$heat_bias[$i + 1 + $j]});
      $j++;
    }
    @heat = sort keys %heat;
    @bias = sort keys %bias;
  }

  # Number of heater/bias settings
  my $nx = @heat;
  my $ny = @bias;
  # Assume the heater and bias increments are the same as the first one
  my $dx = ($nx > 1) ? $heat[1] - $heat[0] : $heat[0];
  my $dy = ($ny > 1) ? $bias[1] - $bias[0] : $bias[0];
  # Define arguments for trandat common to all subarrays
  my $baseargs = "dtype='_double' shape=[$nx,$ny] auto=false bad=true poscols=[1,2] valcol=3 pscale=[$dx,$dy]";

  my $fitshdr = $Frm->fits;
  orac_print "  Writing ";
  foreach my $subarray ( @subarrays ) {

    # Create the ASCII file, each row is: heater bias NEP
    my @entries;
    foreach my $bias (@bias) {
      foreach my $heat (@heat) {
	my $key = join("_", $subarray, $heat, $bias);
	my $nepval = (defined $nep{$key}) ? $nep{$key} : -1;
	push(@entries, "$heat $bias $nepval");
      }
    }
    my $entries = write_file_list(@entries);

    # Set output file name
    my $outndf = $subarray . $Frm->hdr("UTDATE") ."_"
      .(sprintf "%05d", $Frm->hdr("OBSNUM"))."_".$neptype."nep";

    # Convert ASCII file to NDF
    my $title = "$type NEP for $subarray";
    my $temp = new ORAC::TempFile;
    my $tranargs = $baseargs . " freename=$entries ndf=$temp title='$title'";
    $Mon{kappa_mon}->obeyw("trandat","$tranargs");

    # Now replace any bad entries with real bad values
    orac_print "$outndf ";
    my $args = "in=$temp out=$outndf repval=-1";
    $Mon{kappa_mon}->obeyw("setmagic","$args");

    # Add WCS info - first define a Frame for the heater/bias axes
    $args = "naxes=2 result=nepframe$$.ast options='Title=Heater and Bias settings,Label(1)=Pixel heater,Label(2)=Detector bias,Unit(1)=DAC units,Unit(2)=DAC units,Domain=Heater-Bias'";
    $Mon{atools_mon}->obeyw("astframe","$args");
    # Define the mapping from grid to heater/bias
    $args = "ncoord=2 ina=[1,1] inb=[$nx,$ny] outa=[$heat[0],$bias[0]] outb=[$heat[-1],$bias[-1]] options=! result=nepmapping$$.ast";
    $Mon{atools_mon}->obeyw("astwinmap","$args");
    # Create an empty GRID frame
    $args = "naxes=2 options='Domain=GRID' result=grid$$.ast";
    $Mon{atools_mon}->obeyw("astframe","$args");
    # Add it to a skeleton FrameSet
    $args = "frame=grid$$.ast options=! result=nepwcs$$.ast";
    $Mon{atools_mon}->obeyw("astframeset","$args");
    # Now add the frameset to the output image
    $args = "this=nepwcs$$.ast iframe=ast__base map=nepmapping$$.ast frame=nepframe$$.ast result=$outndf";
    $Mon{atools_mon}->obeyw("astaddframe","$args");
    # Remove all of the .ast text files with the mapping/frame info
    unlink glob( "*$$.ast" );

    # Add the FITS header
    $fitshdr->writehdr( File => $outndf );

    # And set the units accordingly
    $Mon{ndfpack_mon}->obeyw("setunits","ndf=$outndf units='$nepunits'");
  }
  orac_print "\n";
}
