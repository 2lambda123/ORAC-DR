# -*-cperl-*-

=head1 NAME

_CREATE_NEP_IMAGE_ - calculate an effective NEP image for each subarray

=head1 SYNOPSIS

_CREATE_NEP_IMAGE_

=head1 DESCRIPTION

This primitive creates an image of the effective or RMS NEP as a
function of the pixel heater and detector bias settings.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

Group object to retrieve Frames from. Default is $Grp.

=item B<GRPSTORE>

Flag to denote whether the results should be stored in the Frame or
Group object. Default is 0 (store in Frame).

=item B<NEPTYPE>

Type of NEP image to create. May be C<eff> or C<rms> for the
effective or RMS NEPs respectively.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

NDFTRACE, SETMAGIC, TRANDAT

=item ORAC-DR PRIMITIVES

_ADD_LOG_ENTRY_, _CALCULATE_ARRAY_NEP_, _FIND_IMAGE_STATISTICS_

=back

=head1 OUTPUT DATA

The Group uhdr contains entries C<EFFNEP> and C<RMSNEP> which are hash
of effective and RMS NEPs respectively, indexed by subarray, heater
and bias settings.

The files are stored in the given Group object.

=head1 OUTPUT FILES

One file per subarray with the RMS or effective NEP as a function of
the heater and bias settings.

A noise log file, C<log.bolonoise> plus one log file for each
subarray (SUB), C<log.mapspeed_SUB>.

=head1 LOGFILE FORMAT

The log file C<log.bolonoise> contains the following entries:

=over 4

=item UT

The UT date in C<YYYYMMDD.frac> format.

=item HST

The time of the observation in Hawaii.

=item Obs

The observation number.

=item Subarray

The relevant subarray name.

=item Freq Range

Range of frequencies over which noise was calculated (in Hz).

=item Median

Median noise in pA Hz**-0.5.

=item Mean

Mean noise in pA Hz**-0.5.

=item Mode

Mode noise value in pA Hz**-0.5.

=item Nbol

Number of bolometers used in noise calculation.

=item NEP_eff

Effective NEP in W Hz**-0.5

=back

The log file C<log.mapspeed_SUB> contains the following entries:

=over 4

=item Subarray

The current subarray.

=item Freq Range

Range of frequencies over which noise was calculated (in Hz).

=item HEATER

The current pixel heater value.

=item BIAS

The current detector bias setting.

=item N_bol

The number of bolometers used in the calculation.

=item NEP_RMS

RMS NEP of the best C<N_bol> bolometers in W Hz**-0.5.

=item MAP_SPEED

Mapping speed parameter in units of 1e34 Hz W**-2.

=back

The C<N_bol>, C<NEP_RMS> and C<MAP_SPEED> entries are repeated for
different values of C<N_bol>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should we be verbose (default to no)?
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1);

# Group object to retrieve Frame objects from
my $Grpobj = get_prim_arg( $_PRIM_ARGS_, "GROUP", $Grp );

# Flag to indicate whether the data are being processed in batch
# mode. This is obtained from the global Frm.
my $batch = $Frm->uhdr("BATCH");

# NEP type to calculate: RMS or effective
my $neptype = lc(get_prim_arg( $_PRIM_ARGS_, "NEPTYPE", "eff"));

my $type = "effective";
my $uhdrnep = "EFFNEP";
my $NEP = "NEP_eff";
if ($neptype eq "rms") {
  $type = "RMS";
  $uhdrnep = "RMSNEP";
  $NEP = "NEP_rms";
}

my $Frmobj;
if ($batch) {
  $Frmobj = $Grpobj->frame(-1);
} else {
  $Frmobj = $Frm;
}

# Proceed with the creation of the NEP images if the observation has
# ended, otherwise just calculate the rms/effective NEP and store it
my $proceed = ($Frmobj->uhdr("OBSEND")) ? 1 : 0;

# Write out a log file?
my $uselog = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
my $logtype = "bolonoise";
my @lognames = ("Subarray", "Freq_Range", "Median", "Mean", "Mode", "Nbol", "NEP_eff", "Heater", "Bias");

my $freqrange = $Frmobj->hdr("FREQHI");

# Obtain the NEP units
my $file = $Frmobj->file . ".more.smurf.nep";
$Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$file");
my ($ORAC_STATUS, $nepunits) = $Mon{ndfpack_mon}->get("ndftrace","units");

# Tell the user what's happening
my @subarrays = $Frmobj->subarrays;
my $subinfostr;
if ( $#subarrays == 0 ) {
  $subinfostr = "subarray $subarrays[0]";
} else {
  $subinfostr = "subarrays ".join(", ",@subarrays);
}
orac_print "Calculating $type NEPs for $subinfostr...\n";

my $maplogtype = "mapspeed";
my @maplognames = ("Subarray", "Freq_Range", "PIXHEAT", "DETBIAS", "N_bol", "NEP_RMS", "MAP_SPEED");
my $nbolstart = 300;
my $delta = 100;

# Now calculate the rms/effective NEP for each subarray and store in a
# hash indexed by the heater and bias settings
my %nep = %{$Grpobj->uhdr($uhdrnep)} if (defined $Grpobj->uhdr($uhdrnep));
my @frames = ($batch) ? $Grpobj->members : ($Frm);
foreach my $Frmobj (@frames) {
  for my $i ( 1 .. $Frmobj->nfiles ) {
    my $noisefile = $Frmobj->file($i);
    my $subarray = $Frmobj->hdrval("SUBARRAY",$i-1);

    # Calculate the effective or RMS NEP for the current file
    my $nepfile = $noisefile . ".more.smurf.nep";
    _CALCULATE_ARRAY_NEP_ IN=$nepfile NEPTYPE=$neptype
    my $nep = $_CALCULATE_ARRAY_NEP_{NEPVAL};
    my $ngood = $_CALCULATE_ARRAY_NEP_{NUMGOOD};
    if ( $nep ) {
      orac_print " $NEP ($subarray) = ".(sprintf "%5.3e", $nep)
	."  $nepunits\n", "green";
    } else {
      orac_warn "Bad $NEP for $noisefile\n";
      $nep = -1;
    }

    my $key = join("_", $subarray, $Frmobj->hdrval("PIXHEAT",$i-1),
		   $Frmobj->hdrval("DETBIAS",$i-1));
    $nep{$key} = $nep;

    # Calculate stats for logging
    if ($uselog) {
      _FIND_IMAGE_STATISTICS_ IMAGE=$noisefile HISTAT=1 VERBOSE=0
      my $mean = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEAN};
      my $median = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEDIAN};
      my $mode = sprintf "%5.3e", $_FIND_IMAGE_STATISTICS_{RESULTS}->{MODE};
      my $numgood = $_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMGOOD};
      my @values = ( $subarray, $freqrange, $median, $mean, $mode, $numgood,
		     $nep, $Frm->hdrval("PIXHEAT",$i-1),
		     $Frm->hdrval("DETBIAS",$i-1) );
      _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@lognames PARLIST=BRIEF
    }

    if ($neptype eq "rms") {
      orac_print "Calculating mapping speed for $subinfostr...\n";
      # Calculate the array Figure of Merit or `mapping speed' as a
      # function of the number of bolometers from 300 to 1000 in steps
      # of $delta above
      my $nbol = $nbolstart;
      my @maplogvals = ($subarray, $freqrange, $Frm->hdrval("PIXHEAT",$i-1),
			$Frm->hdrval("DETBIAS",$i-1));
      while ($nbol < 1001) {
	_CALCULATE_MAPPING_SPEED_ IN=$nepfile NBOL=$nbol NGOOD=$ngood
	my $mapspeed = sprintf "%5.3e",
	  ($_CALCULATE_MAPPING_SPEED_{MAPSPEED} * 1.0e-34);
	my $nep_rms = sprintf "%5.3e", $_CALCULATE_MAPPING_SPEED_{NEP_RMS};
	push(@maplogvals, $nbol, $nep_rms, $mapspeed);
	$nbol += $delta;
      }
      my $maplog = $maplogtype . "_$subarray";
      _ADD_LOG_ENTRY_ LOGFILE=$maplog ENTRIES=\@maplogvals PARAMS=\@maplognames PARLIST=NONE
    }
  }
}

# Store NEP values in Grpobj uhdr
$Grpobj->uhdr($uhdrnep, \%nep);

if ( $proceed ) {
  # OK now we have the %nep info, write an ascii file and convert
  # it to an NDF
  my $images = ($Frmobj->numsubarrays == 1) ? "image" : "images";
  orac_print "Creating $images of $type NEP as function of heater/bias settings\n";

  # Probably don't need to do this, but just in case...
  %nep = %{$Grpobj->uhdr($uhdrnep)};

  # In QL/summit mode, the heater and bias value arrays have to filled
  # the hard way; in batch mode get hdrvals from Frm.
  my (@heat, @bias);
  if ($batch) {
    @heat = sort($Frm->hdrvals("PIXHEAT"));
    @bias = sort($Frm->hdrvals("DETBIAS"));
  } else {
    my @array = sort grep { $subarrays[0] } keys %nep;
    # Obtain the array of heater and bias settings - the elements will
    # alternate: heater1, bias1, heater2, bias2, ..., heaterN, biasN
    my @heat_bias = map { grep { /^\d+/ } split(/\_/, $_) } @array;

    my $npts = @heat_bias / 2;
    if (@heat_bias % 2 != 0) {
      orac_err "Something went wrong - badly wrong!\n";
    }
    my $j = 0;
    my (%heat, %bias);
    for my $i ( 0 .. $npts-1 ) {
      $heat{$heat_bias[$i + $j]} = 1
	unless (defined $heat{$heat_bias[$i + $j]});
      $bias{$heat_bias[$i + 1 + $j]} = 1
	unless (defined $bias{$heat_bias[$i + 1 + $j]});
      $j++;
    }
    @heat = sort keys %heat;
    @bias = sort keys %bias;
  }

  # Number of heater/bias settings
  my $nx = @heat;
  my $ny = @bias;
  # Assume the heater and bias increments are the same as the first one
  my $dx = $heat[1] - $heat[0];
  my $dy = $bias[1] - $bias[0];
  # Define arguments for trandat common to all subarrays
  my $baseargs = "dtype='_double' shape=[$nx,$ny] auto=false bad=true poscols=[1,2] valcol=3 pscale=[$dx,$dy]";

  my @outfiles;
  my $fitshdr = $Frmobj->fits;
  orac_print "Writing: ";
  foreach my $subarray ( @subarrays ) {

    # Create the ASCII file, each row is: heater bias NEP_eff
    my @entries;
    foreach my $bias (@bias) {
      foreach my $heat (@heat) {
	my $key = join("_", $subarray, $heat, $bias);
	push(@entries, "$heat $bias $nep{$key}\n");
      }
    }
    my $entries = write_file_list(@entries);

    # Set output file name
    my $outndf = $Frmobj->inout("_".$neptype."nep");
    $outndf = $Frmobj->strip_subscan($outndf);

    # Convert ASCII file to NDF
    $type = "\u$type" if ($neptype eq "eff");
    my $title = "$type NEP for $subarray";
    my $temp = new ORAC::TempFile;
    my $tranargs = $baseargs . " freename=$entries ndf=$temp title='$title'";
    $Mon{kappa_mon}->obeyw("trandat","$tranargs");

    # Now replace any bad entries with real bad values
    orac_print "$outndf ";
    my $args = "in=$temp out=$outndf repval=-1";
    $Mon{kappa_mon}->obeyw("setmagic","$args");

    # Add WCS info - first define a Frame for the heater/bias axes
    $args = "naxes=2 result=nepframe$$.ast options='Title=Heater and Bias settings,Label(1)=Pixel heater,Label(2)=Detector bias,Unit(1)=pW,Unit(2)=pW,Domain=NEP'";
    $Mon{atools_mon}->obeyw("astframe","$args");
    # Define the mapping from grid to heater/bias
    $args = "ncoord=2 ina=[1,1] inb=[$nx,$ny] outa=[$heat[0],$bias[0]] outb=[$heat[-1],$bias[-1]] options=! result=nepmapping$$.ast";
    $Mon{atools_mon}->obeyw("astwinmap","$args");
    # Create an empty GRID frame
    $args = "naxes=2 options='Domain=GRID' result=grid$$.ast";
    $Mon{atools_mon}->obeyw("astframe","$args");
    # Add it to a skeleton FrameSet
    $args = "frame=grid$$.ast options=! result=nepwcs$$.ast";
    $Mon{atools_mon}->obeyw("astframeset","$args");
    # Now add the frameset to the output image
    $args = "this=nepwcs$$.ast iframe=ast__base map=nepmapping$$.ast frame=nepframe$$.ast result=$outndf";
    $Mon{atools_mon}->obeyw("astaddframe","$args");
    # Remove all of the .ast text files with the mapping/frame info
    unlink glob( "*$$.ast" );

    # Add the FITS header
    $fitshdr->writehdr( File => $outndf );

    # And set the units accordingly
    $Mon{ndfpack_mon}->obeyw("setunits","ndf=$outndf units='$nepunits'");

    push(@outfiles, $outndf);
  }
  orac_print "\n";

  # Store the output files in the current Frame or Group object
  my $groupstore = get_prim_arg($_PRIM_ARGS_, "GRPSTORE", 0);
  my $Obj = ($groupstore) ? $Grpobj : $Frmobj;
  $Obj->files(@outfiles);
}
