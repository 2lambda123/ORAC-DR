# -*-cperl-*-

=head1 NAME

_MAKE_MOSAIC_FPLANE_ - mosaic subarray images to produce a single focal-plane image

=head1 SYNOPSIS

_MAKE_MOSAIC_FPLANE_

=head1 DESCRIPTION

This primitive combines individual subarray images to create a single
image in focal-plane coordinates with the X- and Y-axes oriented
correctly. If a focal-plane reference image does not exist, one is
created to enable the mosaic to be made even if not all subarrays are
present.

The output mosaic is stored in the Frame object and is tagged with the
given suffix.

=head1 ARGUMENTS

This primitive supports the following arguments:

=over 4

=item B<SMURF>

The name of an NDF component under the C<.more.smurf> extension to
combine into the mosaic. No check is made to see if it exists. The
top-level data component will be used if not specified.

=item B<SUFFIX>

The suffix to use for the output focal-plane mosaic. A default of
C<_fpmos> is used if not given.

=back

=head1 EXTERNAL TASKS

The following external tasks are used by this primitive:

=over 4

=item KAPPA:

FLIP, NDFCOPY, ROTATE, WCSFRAME, WCSMOSAIC

=back

=head1 OUTPUT DATA

The Frame object contains the focal-plane mosaic and is tagged with
the given suffix.

=head1 OUTPUT FILES

The output file with suffix C<_fpmos>, or that given by the B<SUFFIX>
parameter.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2012 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Output file suffix
my $suffix = get_prim_arg($_PRIM_ARGS_, "SUFFIX", "_fpmos");

my $smurf = get_prim_arg($_PRIM_ARGS_, "SMURF", undef);
my @files;
if ($smurf) {
  @files = map { $_.".more.smurf.$smurf" } $Frm->files;
} else {
  @files = $Frm->files;
}

# Set the coordinate frame to FPLANE and calculate mean X,Y pixel scales
my ($sumxscale, $sumyscale) = (0,0);
foreach my $file (@files) {
  $Mon{ndfpack_mon}->obeyw("wcsframe","ndf=$file frame=fplane");
  _GET_PIXEL_SCALE_ IMAGE=$file VERBOSE=0
  my $pixscales = $_GET_PIXEL_SCALE_{RESULTS};
  $sumxscale += $pixscales->[0];
  $sumyscale += $pixscales->[1];
}
my $pixscale = [$sumxscale / @files, $sumyscale / @files];

# Get an appropriate reference image, creating one if necessary
_GET_REFERENCE_IMAGE_ PIXEL_SCALE=$pixscale SKYREF=1 COORD_FRAME=FPLANE
my $mosref = $_GET_REFERENCE_IMAGE_{REFIMAGE};

# Align and combine images using nearest-neighbour to preserve
# bolometer positions as closely as possible
my $inlist = write_file_list( @files );
my @aligned = map { scalar($Frm->inout("_al", $_)) } 1..$Frm->nfiles;
my $outlist = write_file_list( @aligned );
my $args = "in=^$inlist out=^$outlist ref=$mosref lbnd=! ubnd=! method=nearest";
$Mon{kappa_mon}->obeyw("wcsalign","$args");
$Frm->push_intermediates(@aligned);

my $fplane_mos = $Frm->rewrite_outfile_subarray(scalar($Frm->inout($suffix)), 1);
$Mon{ccdpack_reg}->obeyw("makemos","in=^$outlist out=$fplane_mos logto=neither nozero noscale");

# Store and tag output focal-plane mosaic
$Frm->files($fplane_mos);
$Frm->tagset($suffix);

# This mosaic can be used as the next reference if not already defined
$Grp->refimage("FPLANE", $fplane_mos) unless (defined $Grp->refimage("FPLANE"));
