# -*-cperl-*-

=head1 NAME

_MAKE_MOSAIC_FPLANE_ - mosaic subarray images to produce a single focal-plane image

=head1 SYNOPSIS

_MAKE_MOSAIC_FPLANE_ INFILES=\@infiles REFERENCE=\%reference OUT=$out

=head1 DESCRIPTION

This primitive combines individual subarray images to create a single
image in focal-plane coordinates with the X- and Y-axes oriented
correctly. The user must provide an input hash reference which
contains the following keys:

=over 2

=item refsub

Name of the reference subarray (for orientation)

=item refimage

Name of the image corresponding to the reference subarray (for
mosaicking)

=back

Currently, getting the axes oriented correctly relies on knowledge of
the default orientations of each subarray. Clearly a better way to do
this would be to create a reference image, as is possible for on-sky
data.

The output mosaic is stored in the Frame object and is tagged with the
given suffix.

=head1 ARGUMENTS

This primitive supports the following arguments:

=over 4

=item B<REFERENCE>

A hash reference contain the name of the reference subarray and the
corresponding file name. No default.

=item B<SMURF>

The name of an NDF component under the C<.more.smurf> extension to
combine into the mosaic. No check is made to see if it exists. The
top-level data component will be used if not specified.

=item B<SUFFIX>

The suffix to use for the output focal-plane mosaic. A default of
C<_fpmos> is used if not given.

=back

=head1 EXTERNAL TASKS

The following external tasks are used by this primitive:

=over 4

=item KAPPA:

FLIP, NDFCOPY, ROTATE, WCSFRAME, WCSMOSAIC

=back

=head1 OUTPUT DATA

The Frame object contains the focal-plane mosaic and is tagged with
the given suffix.

=head1 OUTPUT FILES

The output file with suffix C<_fpmos>, or that given by the B<SUFFIX>
parameter.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2012 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Output file suffix
my $suffix = get_prim_arg($_PRIM_ARGS_, "SUFFIX", "_fpmos");

my $smurf = get_prim_arg($_PRIM_ARGS_, "SMURF", undef);
my @files;
if ($smurf) {
  @files = map { $_.".more.smurf.$smurf" } $Frm->files;
} else {
  @files = $Frm->files;
}

# Reference subarray and image - no default
my $ref = get_prim_arg($_PRIM_ARGS_, "REFERENCE", undef);
unless ($ref && ref($ref) eq "HASH") {
  orac_err "Must provide reference info to _MAKE_MOSAIC_FPLANE_\n";
  return ORAC__ERROR;
}
my $refsub = $ref->{refsub};
my $mosref = $ref->{refimage};

# Set the coordinate frame to FPLANE
foreach my $file (@files) {
  $Mon{ndfpack_mon}->obeyw("wcsframe","ndf=$file frame=fplane");
}

# Now use knowledge of the orientation of the arrays to get the X and
# Y axes pointing the right way. Note s4d is the `right way up', so no
# need to flip or rotate.
my ($flip, $rotate, $axis, $angle) = (0, 0, 0, 0);
if ($refsub eq "s8b") {
  # Flip about Y-axis (flip axis 1)
  $flip = 1;
  $axis = 1;
} elsif ( $refsub eq "s4a" || $refsub eq "s8c" ) {
  # Rotate 90 CW
  $rotate = 1;
  $angle = 90;
} elsif ( $refsub eq "s4b" ) {
  # Rotate 180
  $rotate = 1;
  $angle = 180;
} elsif ( $refsub eq "s8d" ) {
  # Flip about X-axis (flip axis 2)
  $flip = 1;
  $axis = 2;
} elsif ( $refsub eq "s4c" ) {
  # Rotate 90 CCW, flip about X (axis 2)
  $rotate = 1;
  $angle = -90;
  $flip = 1;
  $axis = 1;
} elsif ( $refsub eq "s8a" ) {
  # Rotate 90 CW, flip about X (axis 2)
  $rotate = 1;
  $angle = 90;
  $flip = 1;
  $axis = 1;
}
my $inlist = write_file_list( @files );
my $mos = ORAC::TempFile->new();

# Combine responsivity images using nearest-neighbour
my $args = "in=^$inlist out=$mos ref=$mosref lbnd=! ubnd=! method=nearest variance=false";
$Mon{kappa_mon}->obeyw("wcsmosaic","$args");

# Perform the required flip and/or rotation
my $processed = $mos;
my $rot = ORAC::TempFile->new();
my $flipped = ORAC::TempFile->new();
if ($rotate) {
  $Mon{kappa_mon}->obeyw("rotate","in=$mos out=$rot angle=$angle");
  $processed = $rot;
}
if ($flip) {
  $mos = $rot if ($rotate);
  $Mon{kappa_mon}->obeyw("flip","in=$mos out=$flipped dim=$axis");
  $processed = $flipped;
}

# Copy result to given output file, store and tag with the current suffix
my $fplane_mos = $Frm->rewrite_outfile_subarray(scalar($Frm->inout($suffix)), 1);
$Mon{ndfpack_mon}->obeyw("ndfcopy","in=$processed out=$fplane_mos");
$Frm->files($fplane_mos);
$Frm->tagset($suffix);
