#! -*-perl-*-

=head1 NAME

_FIND_VARIANCE_ - Retrieves the variance from a mosaicked image

=head1 SYNOPSIS

 _FIND_VARIANCE_

=head1 DESCRIPTION

This primitive determines the statistics of the variance or error
components within an NDF and reports the mean and standard
deviation. The mean is expected to be a good estimate of the noise.

On completion of the calculation, the primitive hash
$_FIND_VARIANCE_{RESULT}. If there is no variance component, then the
entry is set to undef.

=head1 ARGUMENTS

=over 4

=item IMAGE

Name of NDF image to obtain the variance from. If left blank then the
current group file is assumed.

=item COMP

Component to probe in NDF. May be variance (var) or error
(err). Default is variance. Note the error is the square-root of the
variance.

=back

=head1 KNOWN ISSUES

Performs a simple check if the variance component is present.

=head1 ALGORITHMS

Uses KAPPA STATS and NDFTRACE.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005-2007 University of British Columbia. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

my $comp = (exists $_FIND_VARIANCE_{COMP} && 
	    defined $_FIND_VARIANCE_{COMP})
            ? lc($_FIND_VARIANCE_{COMP}) : "err";

my $ndf =  (exists $_FIND_VARIANCE_{IMAGE} && 
	    defined $_FIND_VARIANCE_{IMAGE}) ?
            $_FIND_VARIANCE_{IMAGE} : $Grp->file;

# Just want the first 3 characters
$comp = substr($comp,0,3);

if ($comp eq "var" ) {
  orac_print("Returning variance\n");
} elsif ($comp eq "err") {
  orac_print("Returning error statistic\n");
} else {
  orac_throw "Error: unsupported component, $comp - must be either Variance or Error\n";
}

# Does the Variance or Error component exist in the file?
$Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$ndf quiet=true");
my $ORAC_STATUS;
($ORAC_STATUS, my $varexists) = $Mon{ndfpack_mon}->get("ndftrace","variance");

if ($varexists eq "TRUE") {
  $Mon{kappa_mon}->obeyw("stats","ndf=$ndf comp=$comp");

  # Retrieve the mean value which is the variance
  ($ORAC_STATUS, my $mean) = $Mon{kappa_mon}->get("stats","mean");

  # Store in primitive hash
  $_FIND_VARIANCE_{RESULT} = $mean;
} else {
  orac_print "Variance component not present in input file\n";
}
