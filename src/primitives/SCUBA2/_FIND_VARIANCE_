# -*-cperl-*-

=head1 NAME

_FIND_VARIANCE_ - Retrieves the variance from a mosaicked image

=head1 SYNOPSIS

 _FIND_VARIANCE_

 _FIND_VARIANCE_ IMAGE=$image COMP=VAR

=head1 DESCRIPTION

This primitive determines the statistics of the variance or error
components within an NDF and reports the chosen statistic
(mean, median or mode).

The result is stored in the primitive hash, C<undef> if no variance
component could be found.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<COMP>

Component to probe in NDF. May be variance C<VAR>, or error C<ERR>
(i.e. square-root of variance). Default is C<ERR>.

=item B<ESTIMATOR>

Preferred estimator for variance. Valid options are C<MEAN>, C<MEDIAN>
or C<MODE>. Choosing C<MODE> overrides B<HISTAT> since STATS cannot
derive a mode. Default is C<MEDIAN>.

=item B<HISTAT>

Flag to specify whether or not to use KAPPA HISTAT or STATS. Default
is 0 (use STATS).

=item B<IMAGE>

Name of NDF image to obtain the variance from. If left blank then the
current Group file is assumed.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 0 (false).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

HISTAT, NDFTRACE, STATS

=head1 OUTPUT DATA

On completion the primitive hash C<%_FIND_VARIANCE_> contains
the following key:

=over 4

=item RESULT

The variance or error in the given file.

=back

The Frame is not updated.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005-2009 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Choose VARiance or ERRor
my $comp = lc(get_prim_arg($_PRIM_ARGS_, "COMP", "err"));

# Estimator - default is MEDIAN
my $estimator = uc(get_prim_arg( $_PRIM_ARGS_, "ESTIMATOR", "MEDIAN" ));
# Check we were given something sensible
unless ( $estimator eq "MEDIAN" || $estimator eq "MEAN" || $estimator eq "MODE" ) {
  orac_warn "_FIND_VARIANCE_: Unrecognized estimator, $estimator: using MEDIAN\n";
  $estimator = "MEDIAN";
}

# Should I be verbose (default to no)
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 0 );

# Get name of file to query
my $ndf =  get_prim_arg($_PRIM_ARGS_, "IMAGE", $Grp->file);

# Just want the first 3 characters of the component
$comp = substr($comp,0,3);

# Does the Variance or Error component exist in the file?
$Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$ndf quiet=true");
my $ORAC_STATUS;
($ORAC_STATUS, my $varexists) = $Mon{ndfpack_mon}->get("ndftrace","variance");

if ($varexists eq "TRUE") {
  # Inform user of returned value
  if ($comp eq "var" ) {
    orac_print("Returning variance\n") if $verbose;
  } else {
    orac_print("Returning error statistic\n") if $verbose;
  }

  # Use histat or stats? Default to no.
  my $histat = get_prim_arg( $_PRIM_ARGS_, "HISTAT", 0 );
  # But override choice if the user has specified MODE
  $histat = 1 if ($estimator eq "MODE");

  # Set up task arguments
  my $stat = ($histat) ? "histat" : "stats";
  my $args = "ndf=$ndf comp=$comp";
  $args .= " order=true" unless ($histat);

  # Calculate statistics of the request component
  $Mon{kappa_mon}->obeyw("$stat","$args");

  # Retrieve the mean value which is the variance/error
  ($ORAC_STATUS, my $result) = $Mon{kappa_mon}->get("$stat","$estimator");

  # Store in primitive hash
  $_FIND_VARIANCE_{RESULT} = $result;
} else {
  $_FIND_VARIANCE_{RESULT} = undef;
  orac_warn "Variance component not present in input file\n";
}
