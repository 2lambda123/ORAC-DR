#! -*-perl-*-

=head1 NAME

_MAKE_MOSAIC_GROUP_DESPIKE_ - Create a despiked group mosaic

=head1 SYNOPSIS

 _MAKE_MOSAIC_GROUP_DESPIKE_  COADD_MODE=RUNNING

=head1 DESCRIPTION

This primitive mosaics Frame images into a Group mosaic, but waits for
a user-specified number of Frames before co-adding in order to provide
a good variance estimator. It is designed to be used in the Quick-Look
pipeline where a single Frame is generated on each pass through the
recipe. 

Compared with the standard _MAKE_MOSAIC_GROUP_ primitive, the Group
image created here is effectively a running average of individual
`stackall' images. If B<NMOS> is set to the total number of files in
the observation, then this becomes a `stackall' image.

=head1 ARGUMENTS

=over 4

=item B<NMOS>

Number of Frame images to mosaic together before coadding to
Group. Default is 5.

=item B<METHOD>

Resampling method for WCSALIGN. Default is C<bilinear> for
bi-linear interpolation.

=item B<MAKEMOS_METHOD>

The method by which MAKEMOS combines the images. Default is
C<sigma>. See the MAKEMOS documentation for a description of the
possible values.

=item B<SIGMAS>

Number of standard-deviations at which to reject values for B<SIGMA>
image combination method. Default is 4.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no).

=back

=head1 ALGORITHMS

CCDPACK: MAKEMOS
KAPPA: WCSALIGN

=head1 FILE SUFFIX

Creates a single output group image with a suffix of '_mos'.

=head1 Notes

This primitive is a specific realization of making such a mosaic. It
ought to be possible to achieve the same goal with the conventional
_MAKE_MOSAIC_ and _ALIGN_ARRAYS_ primitives. however, this version is
slightly more efficient as it aligns all of the images in one step.

Does not yet deal with moving sources.

Should be upgraded to deal with arbitrary Group objects.

Should add SIGMAS as a paremeter if MAKEMOS_METHOD is MODE or SIGMA

=head1 AUTHORS

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2007-2008 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

# Should I be verbose (default to yes)
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1);

# Number of Frames to mosaic for calculating a statistically-valid
# variance
my $nmos = get_prim_arg($_PRIM_ARGS_, "NMOS", 5);

# Image resampling method for WCSALIGN
my $method = lc(get_prim_arg( $_PRIM_ARGS_, "METHOD", "bilinear" ));

# Image combination method for MAKEMOS
my $makemos_method = lc(get_prim_arg($_PRIM_ARGS_, "MAKEMOS_METHOD", "sigma"));

# Number of sigmas to use if makemos_method = sigma (sigma-clipped mean)
my $sigmas = get_prim_arg($_PRIM_ARGS_, "SIGMAS", 4.0);

# If we are using sigma clipping then add the sigmas parameter to the
# makemos_method
if ( $makemos_method eq "sigma" ) {
  $makemos_method .= " sigmas=$sigmas";
}

# Retrieve the Frames in the current Group, and get the number
my @members = $Grp->members;
my $nFrm = scalar(@members);

# Is it time to make a mosaic? Only do so every $nmos files
if ( $nFrm % $nmos == 0 ) {

  orac_print("Making GROUP mosaic with $nmos files using DESPIKE method")
    if $verbose;

  # Start and end index
  my $start = $nFrm - $nmos;
  my $end = $nFrm;

  # List of aligned Frm files
  my $alfrmmos = new ORAC::TempFile;
  # Now we need to create output aligned files to go with the input files
  my @outfiles;
  for my $i (1..$nmos) {
    my $outfile = new ORAC::TempFile;
    push (@outfiles, $outfile);
  }

  # Retrieve relevant Frms for this mosaic
  my @Frms = @members[-$nmos..-1];

  # File to store list of Frm files
  my $frmmoslist = new ORAC::TempFile;
  for my $i (1..$nmos ) {
    my $CurFrm = $Frms[$i-1];
    # write file name to file
    print {$frmmoslist->handle} $CurFrm->file . "\n";
    my $ofile = $outfiles[$i-1];
    print {$alfrmmos->handle} $ofile->file . "\n";
  }
  $frmmoslist->handle->close;
  $alfrmmos->handle->close;

  # Determine the reference image for alignment.
  _GET_REFERENCE_IMAGE_
  my $refimage = $_GET_REFERENCE_IMAGE_{REFIMAGE};

  # Retrieve the Group filename
  my $outname = $Grp->inout("_mos");

  # Use wcsalign to align the files
  my $args = "ref=$refimage lbnd=! ubnd=! method=$method out=^".$alfrmmos->file
    ." in=^".$frmmoslist->file;
  $Mon{kappa_mon}->obeyw("wcsalign","$args");

  # Now they are aligned, call makemos to make a pseudo-Grp mosaic,
  # generating variance. 
  my $alignmos = new ORAC::TempFile; # Output aligned mosaic
  my $alignmosfile = $alignmos->file;
  $args = "in=^".$alfrmmos->file." genvar nousevar logto=neither method=sigma sigmas=4.0 out=".$alignmos->file;
  $Mon{ccdpack_reg}->obeyw("makemos","$args");

  # Finally call makemos again to mosaic the Grp and pseudo-Grp
  # images, using variance weighting. This step is only performed if
  # the Group file already exists.
  if ( $Grp->file_exists) {

    orac_print("Coadding to GROUP file... ") if $verbose;

    my $moslist = new ORAC::TempFile;
    print {$moslist->handle} $Grp->file."\n".$alignmosfile."\n";

    my $tmpout = new ORAC::TempFile;
    my $mosaic = $tmpout->file;

    $args = "in=^".$moslist->file." usevar genvar method=$makemos_method out=$mosaic";
    $Mon{ccdpack_reg}->obeyw("makemos","$args");

    rename $mosaic .".sdf", $outname .".sdf" 
      or die "Error renaming temp file to output Group mosaic"; # horrible hack KLUGE
  } else {
    rename $alignmosfile .".sdf", $outname .".sdf" 
      or die "Error renaming temp file to output Group mosaic"; # horrible hack KLUGE
  }

  # Store mosaic in Group, set NEWIMAGE flag to display Grp image
  $Grp->file( $outname );
  $Grp->uhdr("NEWIMAGE", 1);
  orac_print("done.\n") if $verbose;

} else {
  # Unset NEWIMAGE flag
  $Grp->uhdr("NEWIMAGE", 0) if $Grp->uhdr("NEWIMAGE");
}
