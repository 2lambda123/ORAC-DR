# -*-cperl-*-

=head1 NAME

_MAKE_MOSAIC_GROUP_DESPIKE_ - Create a despiked group mosaic

=head1 SYNOPSIS

_MAKE_MOSAIC_GROUP_DESPIKE_ COADD_MODE=RUNNING

=head1 DESCRIPTION

This primitive mosaics Frame images into a Group mosaic, but waits for
a user-specified number of Frames before co-adding in order to provide
a good variance estimator. It is designed to be used in the Quick-Look
pipeline where a single Frame is generated on each pass through the
recipe. If the observation ends before the number of Frame files is
reached, the Group mosaic is created with those files that exist.

Compared with the standard L<_MAKE_MOSAIC_GROUP_|_MAKE_MOSAIC_GROUP_>
primitive, the Group image created here is effectively a running
average of individual C<STACKALL> images. If B<NMOS> is set to the
total number of files in the observation, then this becomes a
C<STACKALL> image.

=head1 ARGUMENTS

=over 4

=item B<MAKEMOS_METHOD>

The method by which MAKEMOS combines the images. Default is
C<SIGMA>. See the MAKEMOS documentation for a description of the
possible values.

=item B<NMOS>

Number of Frame images to mosaic together before coadding to
Group. Default is 5.

=item B<SIGMAS>

Number of standard-deviations at which to reject values if
B<MAKEMOS_METHOD> is C<SIGMA>. Default is 4.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no).

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item CCDPACK

MAKEMOS

=back

=head1 NOTES

This is optimized for Quick-Look use only and is suitable only for
observations of small regions of the sky (i.e., DREAM/STARE
observations or SCAN observations of compact sources). 

It is assumed that all input images have already been aligned to the
desired coordinate frame.

This primitive does not explicitly deal with moving sources but this
should have been handled at the Frame mosaic stage.

No check on output bounds is made - it is assumed that the observation
covers only a small area on the sky.

=head1 OUTPUT DATA

For pointing observations, a check is made that a flag file exists and
deleted if so (and the Group uhdr FLAGFILE entry set to undef). The
Frame OBSEND uhdr is set to 1 to force a new pointing calculation.

The Group NEWIMAGE uhdr entry is set to 1 if a new image was created,
0 otherwise.

On exit, the primitive hash C<%_MAKE_MOSAIC_> contains the key
C<NEWIMAGE> which is either 1 or 0 depending on whether a new image
was created.

=head1 OUTPUT FILES

Creates a single output Group image with a suffix of C<_mos> which is
registerd with the current Group object.

=head1 AUTHORS

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2007-2008 the University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should I be verbose (default to yes)?
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1);

# Number of Frames to mosaic for calculating a statistically-valid
# variance
my $nmos = get_prim_arg($_PRIM_ARGS_, "NMOS", 5);

# Image combination method for MAKEMOS
my $makemos_method = lc(get_prim_arg($_PRIM_ARGS_, "MAKEMOS_METHOD", "sigma"));

# Number of sigmas to use if makemos_method = sigma (sigma-clipped mean)
my $sigmas = get_prim_arg($_PRIM_ARGS_, "SIGMAS", 4.0);

# If we are using sigma clipping then add the sigmas parameter to the
# makemos_method
if ( $makemos_method eq "sigma" ) {
  $makemos_method .= " sigmas=$sigmas";
}

# Retrieve the Frame file names in the current Group, and get the number
my @membernames = $Grp->membernames;
my $nFrm = scalar(@membernames);

# If this is the end of the current observation then make the mosaic
# anyway using whatever files are present
if ( $Frm->uhdr("OBSEND") && ( $nFrm < $nmos ) ) {
  $nmos = $nFrm;
}

# Is it time to make a mosaic? Only do so every $nmos files
if ( $nFrm % $nmos == 0 ) {
  orac_print "Making GROUP mosaic with $nmos files using DESPIKE method\n"
    if $verbose;

  # If this is a pointing observation, now is the time to delete the
  # .ok file
  if ( uc($Frm->hdr("OBS_TYPE")) eq "POINTING" ) {
    if ( (defined $Grp->uhdr("FLAGFILE")) && (-e $Grp->uhdr("FLAGFILE")) ) {
      orac_warn "Deleting old pointing flag file - a new one will be created shortly\n";
      unlink $Grp->uhdr("FLAGFILE");
      $Grp->uhdr("FLAGFILE",undef);
    }
    # Pointing offsets can now be derived
    $Frm->uhdr("OBSEND",1);
  }

  # Start and end index
  my $start = $nFrm - $nmos;
  my $end = $nFrm;

  # File to store list of Frm files
  my $frmmoslist = new ORAC::TempFile;
  print {$frmmoslist->handle} join ("\n",@membernames);
  $frmmoslist->handle->close;
  my $frmmoslistfile = $frmmoslist->file;

  # Retrieve the Group filename
  my $outname = $Grp->inout("_mos");

  # Call makemos to make a pseudo-Grp mosaic, generating variance.
  my $outmos = new ORAC::TempFile;
  my $outmosfile = $outmos->file;
  my $args = "in=^$frmmoslistfile genvar nousevar logto=neither method=sigma sigmas=4.0 out=$outmosfile";
  $Mon{ccdpack_reg}->obeyw("makemos","$args");

  # Call makemos again to mosaic the Grp and pseudo-Grp images, using
  # variance weighting. This step is only performed if the Group file
  # already exists.
  if ( $Grp->file_exists) {

    orac_print("Coadding to GROUP file... ") if $verbose;

    my $grpmoslist = new ORAC::TempFile;
    print {$grpmoslist->handle} join("\n",$Grp->file, $outmosfile);

    my $tmpout = new ORAC::TempFile;
    my $mosaic = $tmpout->file;

    $args = "in=^".$grpmoslist->file." usevar genvar method=$makemos_method out=$mosaic";
    $Mon{ccdpack_reg}->obeyw("makemos","$args");

    rename $mosaic .".sdf", $outname .".sdf" 
      or die "Error renaming temp file to output Group mosaic"; # horrible hack KLUGE
  } else {
    orac_print("Creating new GROUP file... ") if $verbose;
    rename $outmosfile .".sdf", $outname .".sdf" 
      or die "Error renaming temp file to output Group mosaic"; # horrible hack KLUGE
  }

  # Store mosaic in Group, set NEWIMAGE flag to display Grp image
  $Grp->file( $outname );
  $Grp->readhdr;
  $Grp->uhdr("NEWIMAGE", 1);
  # Set NEWIMAGE flag in primitive hash
  $_MAKE_MOSAIC_GROUP_DESPIKE_{NEWIMAGE} = 1;
  orac_print "done.\n" if $verbose;

} else {
  # Unset NEWIMAGE flag
  $Grp->uhdr("NEWIMAGE", 0) if $Grp->uhdr("NEWIMAGE");
  # Set NEWIMAGE flag in primitive hash
  $_MAKE_MOSAIC_GROUP_DESPIKE_{NEWIMAGE} = 0;
  # Unset the OBSEND flag
  $Frm->uhdr("OBSEND", 0) if $Frm->uhdr("OBSEND");
}
