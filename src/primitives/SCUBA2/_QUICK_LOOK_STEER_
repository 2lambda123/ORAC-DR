# -*-cperl-*-

=head1 NAME

_QUICK_LOOK_STEER_ - steering primitive for the Quick-Look pipeline

=head1 SYNOPSIS

_QUICK_LOOK_STEER_

=head1 DESCRIPTION

Set a uhdr entry for the current Frame object denoting whether or not
quick-look specific primitives should be called.

This primitive should ONLY be called in quick-look recipes (denoted by
the C<_QL> suffix).

=head1 OUTPUT DATA

The Frame hdr entry C<QUICKLOOK> is either +1 or -1 on exit from this
primitive, depending on whether the observing mode is DREAM/STARE or
SCAN.

=head1 OUTPUT FILES

In rare cases this primitive will create an output flag file (C<.ok>)
for pointing and focus observations that have ended without otherwise
creating one to enable the online POINTING_FOCUS task to proceed.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009,2011-2012 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

if ( $Frm->uhdr("ORAC_OBSERVATION_MODE") =~ /stare/i ||
     $Frm->uhdr("ORAC_OBSERVATION_MODE") =~ /dream/i ) {
  $Frm->uhdr("QUICKLOOK", 1);
} else {
  $Frm->uhdr("QUICKLOOK", -1);
}

# Issue a warning if the CSO tau values in the header are null
if ($Frm->hdr("TAUSRC") =~ /^\d/) {
  orac_warn "****  TAUSRC is 0 - CSO tau values are not defined ****\n"
    if ($Frm->hdr("TAUSRC") == 0);
}

# Delete an existing pointing flag files for this observation, except
# at the end of the observation or if the pipeline is only processing fastflats
if ( $Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "pointing" && !$Frm->uhdr("OBSEND") &&
     !$Frm->tagexists("fastflat")) {
  if ( (defined $Grp->uhdr("FLAGFILE")) && (-e $Grp->uhdr("FLAGFILE")) ) {
    orac_warn "Deleting old pointing flag file - a new one will be created shortly\n";
    unlink $Grp->uhdr("FLAGFILE");
    $Grp->uhdr("FLAGFILE",undef);
  }
}

# Check to see if the observation has ended without creating a flag file
if ($Frm->uhdr("OBSEND") &&
    ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "pointing" || $Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "focus")) {
  _GET_FLAG_FILE_NAME_
  if (!-e $_GET_FLAG_FILE_NAME_{NAME}) {
    orac_warn "Observation has ended but no flag file created - creating a dummy one now\n";
    my $files = ($Grp->file_exists) ? [$Grp->file] : ["none"];
    _WRITE_FLAG_FILE_ FILES=$files
  }
}

# Is this an open-shutter setup?
if ($Frm->hdr("OBS_TYPE") =~ /setup/i && $Frm->hdr("SHUTTER") > 0) {
  orac_err "Open-shutter setup - something has gone wrong. Writing dummy flag file.\n";
  my $files = ["none"];
  _WRITE_FLAG_FILE_ FILES=$files

  orac_term "Terminating recipe\n";
}

# Check for a single SEQ_TYPE and abort if multiple values are present
unless (defined $Frm->hdr("SEQ_TYPE")) {
  orac_err "************************************************************************\n";
  orac_err "Frame contains data from differing sequences - something has gone wrong\n";
  orac_err "************************************************************************\n";
  return ORAC__TERM;
}
