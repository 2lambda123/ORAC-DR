# -*-cperl-*-

=head1 NAME

_CREATE_MAP_PSF_ - Create a PSF image from a template

=head1 SYNOPSIS

 _CREATE_MAP_PSF_

 _CREATE_MAP_PSF_ PSF=$psf

 _CREATE_MAP_PSF_ PSF=$psf PSF_BOX=120

=head1 DESCRIPTION

This primitive creates a PSF image with no bad pixels for use with a
noise-whitening filter and thence a matched filter. A pre-defined
central region is used as the basis of the psf image (default is 90
pixels across), with the image padded with zeros beyond that. The
region should be large enough to encompass the negative ring around
the peak, with some room to spare.

The input PSF template can be specified as an input parameter, or else
it is retrieved from the object determined by the B<GROUP> argument if
the C<psf> tag exists.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

Flag to indicate whether the results should be stored in the Frame or
Group object. Defaul is 1 (Group).

=item B<PSF_BOX>

Size of the central area, in pixels, to be used as the basis of the
psf for the matched filter. Default is 90.

=item B<PSF_IMAGE>

Name of the template PSF image. No default.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

CDIV, NDFCOPY, NOMAGIC, SETVAR, SLIDE

=item ORAC-DR PRIMITIVES

_FIND_IMAGE_STATISTICS_

=back

=head1 NOTES

It is assumed that all of the input images are aligned to the same
coordinate frame.

=head1 OUTPUT DATA

The PSF is stored in the current object and tagged with C<psf>.

=head1 OUTPUT FILES

None.

=head1 AUTHORS

Andy Gibb E<lt>agg@astro.ubc.caE<gt>,

=head1 COPYRIGHT

Copyright (C) 2012-2013 University of British Columbia.  All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Use group or Frame?
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 1);
my $Obj = ($group) ? $Grp : $Frm;

$Obj->tagset("create_map_psf");

# PSF map coadd
my $psf_image = get_prim_arg($_PRIM_ARGS_, "PSF", undef);

# If not specified, use the file tagged with psf if that tag exists
if (!$psf_image && $Obj->tagexists("psf")) {
  $Obj->tagretrieve("psf");
  $psf_image = $Obj->file;
}

if ($psf_image) {
  # Region of PSF to use - default to 90 pixels
  my $psf_box = get_prim_arg($_PRIM_ARGS_, "PSF_BOX", 90);
  # Override with recipe parameter
  $psf_box = $Frm->uhdr("RECPAR_PSF_BOX")
    if (defined $Frm->uhdr("RECPAR_PSF_BOX"));

  # If the input PSF was specified as a recipe parameter then check
  # it has enough pixels
  if (defined $Frm->uhdr("RECPAR_PSF_MATCHFILTER")) {
    my $npix_box = $psf_box*$psf_box;
    _FIND_IMAGE_STATISTICS_ IMAGE=$psf_image VERBOSE=0
    my $results = $_FIND_IMAGE_STATISTICS_{RESULTS};
    if ($results->{NUMGOOD} < $npix_box) {
      orac_warn "Number of good pixels in PSF is less than requested\n";
    }
  }

  # Temp files
  my $tempfile1 = ORAC::TempFile->new();
  my $tempfile2 = ORAC::TempFile->new();
  my $tempfile3 = ORAC::TempFile->new();

  # First, copy out the desired section from the original input image
  my ($section, $recentre, @offcen);
  if ($Frm->uhdr("RECPAR_FAKEMAP_OFFSET")) {
    # If PSF is off-centre, need to copy the section with the PSF at
    # the centre
    if (defined $Frm->uhdr("FAKEMAP_OFFSET_PIXELS")) {
      @offcen = @{$Frm->uhdr("FAKEMAP_OFFSET_PIXELS")};
    } else {
      # Derive the offset in pixels if not already determined
      _GET_PIXEL_SCALE_ IMAGE=$psf_image VERBOSE=0
      @offcen = map { int($_/$_GET_PIXEL_SCALE_{PIXSCALE}) } @{$Frm->uhdr("RECPAR_FAKEMAP_OFFSET")};
    }
    my $exten = ($psf_box % 2 == 0) ? $psf_box / 2 : ($psf_box+1) / 2;
    # Negate the X values because RA/Glon increases in the opposite
    # sense to pixel coordinates
    $section = "(".(-$offcen[0]-$exten).":".(-$offcen[0]+$exten).
      ",".($offcen[1]-$exten).":".($offcen[1]+$exten).",)";
    $recentre = 1;
  } else {
    $section = "(0~$psf_box,0~$psf_box,)";
    $recentre = 0;
  }
  my $in = $psf_image . $section;
  if ($recentre) {
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$in out=$tempfile1");
    # Recentre the PSF on 0,0 in pixel coordinates for the whitening step
    my $args = "stype=absolute abs=[".($offcen[0]).",".(-$offcen[1]).",0] in=$tempfile1 method=linear out=$tempfile2";
    $Mon{kappa_mon}->obeyw("slide","$args");
  } else {
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$in out=$tempfile2");
  }

  # Then pad to original image size
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$tempfile2 out=$tempfile1 like=$psf_image");
  # Set bad values to zero
  $Mon{kappa_mon}->obeyw("nomagic","in=$tempfile1 out=$tempfile2 repval=0");
  # And set the variance of these pixels to the mean in the psf coadd
  _FIND_IMAGE_STATISTICS_ IMAGE=$psf_image REGION=$psf_box VERBOSE=0 COMP=VAR
  my $results = $_FIND_IMAGE_STATISTICS_{RESULTS};
  my $zero_var = $results->{MEAN};
  $Mon{kappa_mon}->obeyw("nomagic","in=$tempfile1 out=$tempfile3 repval=$zero_var comp=var");
  $Mon{ndfpack_mon}->obeyw("setvar","ndf=$tempfile2 from=$tempfile3 comp=var");

  # Now divide by the input fakescale to get the map filtered
  # normalized PSF. If the map has no effect on the input, then the
  # PSF should have an amplitude of 1. In practice, the amplitude is
  # reduced by the map-making process. However, if FAKESCALE is not
  # defined, we have to assume the input PSF is already normalized to
  # the correct amplitude.
  my $fakescale = (defined $Obj->uhdr("FAKESCALE")) ?
    $Obj->uhdr("FAKESCALE") : 1;
  if (defined $Frm->uhdr("RECPAR_FAKEMAP_SCALE") &&
      $Frm->uhdr("RECPAR_FAKEMAP_SCALE") == -1) {
    # If the user has set a value of -1, the amplitude should be
    # used as the fakescale so the PSF amplitude ends up as unity below
    _FIND_IMAGE_STATISTICS_ IMAGE=$tempfile1 REGION=20 VERBOSE=0
    $fakescale = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MAX};
  }
  $Mon{kappa_mon}->obeyw("cdiv","in=$tempfile2 out=$psf_image scalar=$fakescale");

  # Now analyze the PSF image and compare with the input value
  my $extra = (defined $Frm->uhdr("RECPAR_PSF_MATCHFILTER")) ? "supplied" : "map-filtered";
  orac_print "Amplitude of $extra psf = ", "green";
  _FIND_IMAGE_STATISTICS_ IMAGE=$psf_image REGION=20 VERBOSE=0
  $results = $_FIND_IMAGE_STATISTICS_{RESULTS};
  my $peak = sprintf "%.3g", $results->{MAX};
  if ($peak == 1) {
    orac_print "$peak - FCF does not need to be scaled\n", "green";
  } elsif ($peak != 0) {
    my $pkpc = int(100/$results->{MAX});
    orac_print "$peak - BEAM FCF should be scaled by $pkpc %\n", "green";
  } else {
    orac_print "\n";
    orac_warn "Unable to determine FCF scaling factor - peak is 0!\n";
  }
  # Store the amplitude of the PSF
  $Obj->uhdr("FCF_CORR_AMP", $results->{MAX});

  # Finally store and tag the map-filtered PSF image in the current object
  $Obj->files($psf_image);
  $Obj->tagset("psf");

  # Restore object to input state
  $Obj->tagretrieve("create_map_psf");

} else {
  orac_err "No input PSF image to use as a template\n";
}
