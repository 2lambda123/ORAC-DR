=head1 NAME

_APPROX_FTS_FRAME_ - adds a frame with the approximate moving mirror position

=head1 SYNOPSIS

 _APPROX_FTS_FRAME_

=head1 DESCRIPTION

This primitive extracts the position of the moving mirror and uses
it to create a frame with a linear approximation to it.

=head1 ARGUMENTS

None.

=head1 EXTERNAL TASKS

NDFPACK.

=head1 OUTPUT DATA

None

=head1 OUTPUT FILES

None.

=head1 NOTES

None.

=head1 AUTHOR

Graham Bell E<lt>g.bell@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2012 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

use JSA::Headers qw/read_jcmtstate/;

my @output = ();

my $zpd = $Frm->uhdr('FTS_ZPD_ESTIMATE');
orac_termerr('FTS_ZPD_ESTIMATE is missing') unless defined $zpd;
my $center = $Frm->uhdr('FTS_STAGE_CENTER');
orac_termerr('FTS_STAGE_CENTER') unless defined $center;
my $off = $Frm->uhdr('FTS_ZPD_BASE_OFFSET');
orac_termerr('FTS_ZPD_BASE_OFFSET is missing') unless defined $off;

my $y_min = $zpd - $off;
my $y_max = $zpd + $off;

for (my $i = 1; $i <= $Frm->nfiles(); $i ++) {
  my ($in, $out) = $Frm->inout('_aff', $i);
  my %state = read_jcmtstate($in, undef, 'FTS_POS');

  my $n = 0.0;
  my $x = 0.0;
  my $sx = 0.0;
  my $sy = 0.0;
  my $sxx = 0.0;
  my $sxy = 0.0;

  foreach my $y (@{$state{'FTS_POS'}}) {
    $x += 1.0;
    $y = $y - $center;

    next if $y < $y_min;
    next if $y > $y_max;

    $n += 1.0;
    $sx += $x;
    $sy += $y;
    $sxx += $x * $x;
    $sxy += $x * $y;
  }

  my $grad = ($n * $sxy - $sx * $sy) / ($n * $sxx - $sx * $sx);
  my $cons = ($sy - $grad * $sx) / $n;

  my $mapping = "[0,1,0,0,0,0,1,0,$cons,0,0,$grad]";

  $Mon{'ndfpack_mon'}->obeyw('ndfcopy', "$in $out");
  $Mon{'ndfpack_mon'}->obeyw('wcsadd', "$out PIXEL APPROX-MIRROR linear tr=$mapping attrs=!");

  push @output, $out;

  # Store the gradient in the header unless we already have one.
  # (The scan speed ought to be similar enough for all
  # scans in an observation.)
  $Frm->uhdr('FTS_PIXELS_PER_MM', abs(1.0 / $grad))
    unless defined $Frm->uhdr('FTS_PIXELS_PER_MM');
}

$Frm->files(@output);

