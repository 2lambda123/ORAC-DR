# -*-cperl-*-

=head1 NAME

_PROCESS_DATA_AS_NOISE_FRAME_ - calculate sky noise properties from some or all science data in current Frame

=head1 SYNOPSIS

_PROCESS_DATA_AS_NOISE_FRAME_

=head1 DESCRIPTION

This primitive groups the files in the current frame according to the
desired noise calculation before passing them to another
primitive. The files may be processd as follows:

=over 2

=item QUICK

Compute the noise properties using only the first set of files with
on-sky data. For most observations will correspond to 30 seconds of
data.

=item EACH

Calculate the noise for every single file separately in turn. This is
the default behaviour.

=item FULL

Calculate the noise properties of the entire time stream as a single
data set.

=back

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<DISPLAY>

Flag to indicate whether or the results should be displayed. Default
is 1 (yes).

=item B<LOGFILE>

Flag to indicate whether or not a log file should be written. Default
is 1 (yes).

=item B<NOISE_CALC>

Amount of data to use in noise calculation. May be C<quick>, C<each>
or C<full>. Default is C<each>.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 1
(yes).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item ORAC-DR PRIMITIVES:

_ADD_LOG_ENTRY_, _PROCESS_DATA_AS_NOISE_

=back

=head1 NOTES

Results are reported for each subarray separately. See the
documentation for L<_CALCULATE_NOISE|_CALCULATE_NOISE_>.

A log file is written called C<log.scinoiseXXX> where C<XXX> is the
filter for the current data (850 or 450). This ensures that 850 and
450 um data are lgged separately.

=head1 OUTPUT DATA

The current Frame object is updated with the output noise files each
time through the loop, and on exit will contain the results of all the
noise calculations.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2013-2014 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $noisecalc = lc(get_prim_arg($_PRIM_ARGS_, "NOISE_CALC", "each"));
$noisecalc = $Frm->uhdr("RECPAR_NOISE_CALC")
  if (defined $Frm->uhdr("RECPAR_NOISE_CALC"));
$noisecalc = "each" if ($noisecalc eq "full" && $Frm->hdr("OBS_TYPE") =~ /pointing/i);

my $scitype = ($Frm->hdr("OBS_TYPE") =~ /pointing/i) ? "pointing" : "science";

my $uselog = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);

my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

my $display_noise = get_prim_arg($_PRIM_ARGS_, "DISPLAY", 1);

if ($Frm->uhdr("CHECK_RMS")) {
  # Don't bother calculating the noise for Mars
  if ($Frm->hdr("OBJECT") =~ /mars/i) {
    orac_warn "Skipping CHECK_RMS noise calculations for Mars\n";
    return ORAC__OK;
  }
  $display_noise = 0;
  $Frm->tagset("raw");
}

# If the Frame contains multiple subscans, pick out the first
# on-sky that is not the fast-flat if doing a "quick" noise
# calculation, or select all of the on-sky files if doing a "full"
# noise calculation

# Obtain lists of related files using the following keys
my @related_keys = ("SUBARRAY", "SHUTTER", "SEQ_TYPE");
push (@related_keys, "NSUBSCAN") unless ($noisecalc eq "full");
my %related_subarray = $Frm->files_from_hdr( @related_keys );

my %fastflats = map { $_ => $related_subarray{$_} } grep { $_ =~ /fastflat/i}
  keys %related_subarray;
my @fastflats = map {@{$_}} values %fastflats;

my (%related, %filesub_lut);
if ($noisecalc eq "full") {
  # In this case we just retrieve every science file - fastflats will
  # be added later
  $related{full} = [map { @{$related_subarray{$_}} } grep { $_ =~ /science/i } keys %related_subarray];
} else {
  # Retrieve the list of subscan numbers and subarrays
  my @subscans = $Frm->hdrvals("NSUBSCAN");
  my @subarrays = $Frm->hdrvals("SUBARRAY");

  # Loop over each subscan and subarray to pick out the science files
  # associated with each subscan
  foreach my $nsubscan (@subscans) {
    my @scanfiles;
    foreach my $subarray (@subarrays) {
      my $testkey = $subarray . "1.0" . $scitype . $nsubscan;
      # Store the data files if science data exists for the current
      # subarray/subscan
      if ($related_subarray{$testkey}) {
        push(@scanfiles, $related_subarray{$testkey}->[0]);
        $filesub_lut{$related_subarray{$testkey}->[0]} = $subarray;
      }
    }

    # Store the list of files indexed by subscan
    if (@scanfiles) {
      $related{(sprintf "%03s", $nsubscan)} = \@scanfiles;
      last if ($noisecalc eq "quick");
    }
  }
}

orac_print "\n";
my %allresults;
# Now calculate noise properties for each group of files
my @subarrays = $Frm->subarrays;
my @logparams = qw/ UT Obs Nsubscan /;
foreach my $subarray (@subarrays) {
  push(@logparams, map { $subarray ."_".$_ } qw/Nbol Noise NEPwt/);
}
my $datanoiselog = "scinoise" . $Frm->hdr("FILTER");
foreach my $key (sort keys %related) {
  # Tell user what's going on
  my $outkey = ($noisecalc eq "full") ? $key : (sprintf "%d", $key);
  my $data = ($noisecalc eq "each") ? "subscan $outkey" :
    ($noisecalc eq "quick" ? "first 30-sec of data" : "full time stream");
  orac_print "Calculating noise properties of $data\n";

  # Store the files in the current Frame along with the fastflats
  $Frm->files(@{$related{$key}}, @fastflats);
  $Frm->readhdr;
  # On exit, the Frame will contain either the noise files or the
  # noise mosaic(s)
  _PROCESS_DATA_AS_NOISE_ VERBOSE=$verbose DISPLAY=$display_noise LOGFILE=$uselog

  if ($display_noise) {
    # Store the mosaic(s) for stacking later
    push(my @noifiles, $Frm->file);
    if ($Frm->tagexists("scinoi") && $noisecalc eq "each") {
      $Frm->tagretrieve("scinoi");
      push(@noifiles, $Frm->files);
    }
    $Frm->files(@noifiles);
    $Frm->tagset("scinoi");
  }

  # For CHECK_RMS stat gathering, there must be only 1 file per subarray
  if ($Frm->uhdr("CHECK_RMS")) {
    my $nepsum = 0;
    my $neperrsum = 0;
    my $subuhdr = $Frm->uhdr("SUBARRAY");
    foreach my $file ($Frm->files) {
      my $subarray = $Frm->subarray($file);
      my $nepentry = $Cal->nepindex->indexentry($file);
      $nepsum += $nepentry->{MEAN};
      $neperrsum += $nepentry->{SIGMA};
    }
    $Frm->uhdr("SUBARRAY", $subuhdr) if ($subuhdr);
    $Frm->uhdr("NEP_AV", ($nepsum / $Frm->nfiles));
    $Frm->uhdr("NEP_AV_ERR", ($neperrsum / $Frm->nfiles));
    $Frm->tagretrieve("raw");
    $Frm->readhdr;
  }

  # Add an entry to the log file if desired
  my $qa_results = $Frm->uhdr("QA_REPORT_INFO");
  if ($uselog) {
    my @entries = ( $Frm->hdrval("DATE-OBS"), $Frm->hdr("OBSNUM"), $outkey );
    my @vars = qw/NBOLO MEDIAN WTNEP/;
    # Must loop over original list of subarrays so blank values can be
    # added for subarrays with no data
    foreach my $subarray (@subarrays) {
      push(@entries, ($qa_results->{$subarray})
           ? (map { $qa_results->{$subarray}->{$_}} @vars)
           : ("nan", "nan", "nan") );
    }
    _ADD_LOG_ENTRY_ LOGFILE=$datanoiselog ENTRIES=\@entries PARAMS=\@logparams PARLIST=NONE
  } else {
    unless ($key eq "full") {
      foreach my $file (@{$related{$key}}) {
        my $subarray = $filesub_lut{$file};
        $allresults{$file} = $qa_results->{$subarray};
      }
    }
  }
}

$_PROCESS_DATA_AS_NOISE_FRAME_{RESULTS} = \%allresults if (%allresults);
