# -*-cperl-*-

=head1 NAME

_PROCESS_FASTFLAT_ - Calculate and analyze fast-ramp flatfield measurements

=head1 SYNOPSIS

_PROCESS_FASTFLAT_

=head1 DESCRIPTION

Calculate and analyze a flatfield solution from fast-ramp flatfield
data. Fastflat data are separated out from non-fastflat data (if
necessary) and processed. The processed and raw fastflat files are
stored in calibration files so they can be retrieved in subsequent
passes through the recipe.

If the Frame contains a mix of science and fastflat data, the
solutions are also stored in the uhdr for retrieval by the map-making
primitive.

=head1 ARGUMENTS

This primitive has the following argument:

=over 2

=item B<WRITEFLAG>

A flag to denote whether a flagfile (also known as a C<.ok> file)
should be written after processing. Default is 1 (true) for the QL and
SUMMIT pipelines, 0 otherwise.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item ORAC-DR PRIMITIVES

_ANALYZE_FLATFIELD, _CALCULATE_FLATFIELD_, _COPY_RAW_DATA_,
_DELETE_TEMP_FILES_, _DISPLAY_FASTFLAT_, _RETRIEVE_FASTFLATS_

=back

=head1 NOTES

None.

=head1 OUTPUT DATA

The Frame uhdr entry C<PROCESS_FASTFLAT> is defined and equal to 1 if
fastflat data were processed.

An additional entry, C<FLATS>, is defined and contains the raw
fastflat filenames and the number of solutions indexed by subarray.

=head1 OUTPUT FILES

The fastflat solutions and copies of the raw fastflat files left on
disk, with suffices C<_flat> and C<_rawflat> respectively, one for
each subarray.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2012 University of British Columbia.  All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Retrieve OBSEND from the hdr
my $obsend_on_entry = $Frm->hdrval("OBSEND",-1);

# List of fastflats and non-fastflats
my (@fastflats, @nonflats);

# List of fastflats indexed by subscan number
my %fastflats;

# List of flatfield solutions for each subscan - each entry is a hash
# reference indexed by subarray
my @flatinfo;

# List of input (raw) fastflat files
my @rawfastflats;

# Flat to indicate that there are fastflat data to process
my $ffdata;

# Step 1 - if the Frame has mixed sequence data, filter out the
# non-fastflat data for later use
if (defined $Frm->hdr("SEQ_TYPE")) {
  # This block is reached if the SEQ_TYPE is unique - this will always
  # happen in the QL pipeline, and for offline focus processing.
  # Processing should only continue for fastflats, otherwise finish
  # immediately.
  return ORAC__OK unless ($Frm->hdr("SEQ_TYPE") =~ /fastflat/i);
  # Tell the pipeline that it has fastflat data to process
  $ffdata = 1;
  $fastflats{$Frm->hdr("NSUBSCAN")} = [$Frm->files];
} else {
  # In all other cases we have mixed-sequence data, so separate the
  # fastflats from the other data
  my $max_index = $Frm->nfiles - 1;
  foreach my $i (0 .. $max_index) {
    if ($Frm->hdrval("SEQ_TYPE", $i) =~ /fastflat/i) {
      push(@fastflats, $Frm->file($i+1));
      if ($fastflats{$Frm->hdrval("NSUBSCAN", $i)}) {
	my @subscanfiles = @{ $fastflats{$Frm->hdrval("NSUBSCAN", $i)} };
	push(@subscanfiles, $Frm->file($i+1));
	$fastflats{$Frm->hdrval("NSUBSCAN", $i)} = \@subscanfiles;
      } else {
	$fastflats{$Frm->hdrval("NSUBSCAN", $i)} = [ $Frm->file($i+1) ];
      }
    } else {
      push(@nonflats, $Frm->file($i+1));
    }
  }
  $ffdata = (%fastflats) ? 1 : 0;
}

# Step 2: process fastflat data in the Frame
if (%fastflats) {
  # Write a flag file?
  my $writeflag = get_prim_arg($_PRIM_ARGS_, "WRITEFLAG", 1);

  # Retrieve previous solutions if they exist - this must be done
  # first as the method relies on checking the hdr of Frm
  _RETRIEVE_FASTFLATS_ TYPE=SOL
  my $previous = $_RETRIEVE_FASTFLATS_{FASTFLATS_SUB};

  # Retrieve the name of a resistor config file if given, and the
  # QUICKLOOK/SUMMIT headers if appropriate and store in the new
  # (localized) Frm
  my $resist = $Frm->uhdr("RECPAR_RESIST_CFG");
  my $pltype = ($Frm->uhdr("QUICKLOOK")) ? "QUICKLOOK" :
    ($Frm->uhdr("SUMMIT") ? "SUMMIT" : "");

  my $batch = ($Frm->uhdr("QUICKLOOK") || $Frm->uhdr("SUMMIT")) ? 0 : 1;
  # Don't bother writing a flag file if running offline
  $writeflag = 0 if ($batch);

  # If there are no previous solutions, check to see if the current
  # observation has multiple fastramps to enable a comparison
  if ($batch && !$previous) {
    if (@fastflats == $Frm->numsubarrays) {
      orac_warn "Unable to locate a previous solution to perform comparisons\n";
    }
  }

  # Retrieve current Group uhdr
  my $uhdr = $Grp->uhdr;
  my %previous;
  my @subscans = sort keys %fastflats;
  my $prevscan;
  my $flatGrp = $Grp->new("fastflats");
  my @Frms;
  # Loop over each subscan with fastflat data and calculate flatfield solution
  foreach my $subscan (@subscans) {
    orac_print "Calculating flatfields for subscan $subscan:\n" if (@subscans > 1);
    # Create a temporary override of Frm to allow primitives to work.
    my $Frm = $Frm->new($fastflats{$subscan});
    $Frm->uhdr("RECPAR_RESIST_CFG", $resist) if (defined $resist);
    $Frm->uhdr("$pltype", 1) if ($pltype ne "");
    $Frm->uhdr("OBSEND",1);
    $Frm->uhdr("PROCESS_FASTFLAT",1);

    # Copy the raw data so it persists through successive passes
    if (!$batch || $Frm->hdr("OBS_TYPE") =~ /focus/i) {
      _COPY_RAW_DATA_ SUFFIX=_rawflat
    }

    # Create a temporary override for Grp because the flatfield
    # calculation stores Frames consisting of a single flatfield
    # solution in Grp.
    my $Grp = $Grp->new("fastflat");
    $Grp->uhdr(%{$uhdr});
    $Grp->allmembers($Frm);

    my $prevsol = ($prevscan) ? $previous{$prevscan} : $previous;

    # Calculate the flatfield solution
    _CALCULATE_FLATFIELD_ PREVIOUS=$prevsol

    # Store the files as a hash reference indexed by subarray for use
    # as the previous solution next time around
    $previous{$subscan} = {map { $_->hdr("SUBARRAY") => $_->file } $Grp->members};
    $Frm->readhdr;
    push(@flatinfo, $Frm->uhdr("FLATS"));

    push(@Frms,$Frm) if ($previous{$subscan});

    # Set the "previous" subscan to the current value so the correct
    # fastflat solution is retrieved next time round the loop over
    # subscans
    $prevscan = $subscan;

    if ($batch) {
      # Hard wire some desired percentiles
      _ANALYZE_FLATFIELD_ PERCENTILES=16,84 RESPRATIO=1 LOGPAR=ABS WRITEFLAG=$writeflag
    } else {
      # Analyze and display the results immediately in QL/summit mode
      _ANALYZE_FLATFIELD_ OBSEND=0 WRITEFLAG=$writeflag
    }

    # Display results if running the QL or SUMMIT pipeline
    unless ($batch) {
      _DISPLAY_FASTFLAT_
    }

    # Determine which files to keep on completion - always keep the
    # flatfield solutions on disk
    my $keep = "_flat,_rawflat";
    # Tidy up
    _DELETE_TEMP_FILES_ KEEP=$keep
    _DELETE_TEMP_FILES_GROUP_ KEEP=$keep
  }
  # Retrieve all the raw fastflats to store
  @rawfastflats = map { $_->files } @Frms;
}

# Step 3: store the flatfield info in the Frame uhdr for later
# retrieval This will be necessary when the Frame contains a mixture
# of fastflat and science data.
if (@flatinfo) {
  my %subarrays;
  foreach my $flatinfo (@flatinfo) {
    my %flats = %{$flatinfo};
    foreach my $subarray (sort keys %flats) {
      if (defined $subarrays{$subarray}) {
	my $nbol = $subarrays{$subarray}->{nbol};
	$nbol += $flats{$subarray}->{nbol};
	$subarrays{$subarray}->{nbol} = $nbol;
      } else {
	if ($flats{$subarray}->{nbol} > 0) {
	  $subarrays{$subarray}->{nbol} = $flats{$subarray}->{nbol};
	} else {
	  $subarrays{$subarray}->{nbol} = 0;
	}
      }
      $subarrays{$subarray}->{file} = $flats{$subarray}->{file};
    }
  }
  $Frm->uhdr("FLATS", \%subarrays);
}

# Step 4: Now store the raw fastflats in the calibration system
if (@rawfastflats) {
  # Code ref to store the fastflats in the calibration system - takes
  # a Frame object as a single argument
  my $store_fastflats = sub {
    my $Frmobj = shift;
    return unless ($Frmobj);
    my %rawfiles = $Frmobj->get_files_by_subarray;
    foreach my $subarray (sort keys %rawfiles) {
      $Frmobj->files( @{$rawfiles{$subarray}} );
      $Frmobj->hdr("SUBARRAY" => $subarray);
      foreach my $i (1 .. $Frmobj->nfiles) {
	$Cal->fastflatindex->add( $Frmobj->file($i), {%{$Frmobj->hdr}, %{$Frmobj->uhdr}} );
	$Cal->setupflatindex->add( $Frmobj->file($i), {%{$Frmobj->hdr}, %{$Frmobj->uhdr}} ) if ($Frmobj->hdr("OBS_TYPE") =~ /setup/i);
      }
    }
  };
  orac_print "Storing raw fastflat files...\n";
  # If multiple fastflats per observation, must store each group
  # separately to get the correct timestamp in the index file
  my $fastflatFrm = $Frm->new;
  $fastflatFrm->files(@rawfastflats);
  my $nrawff = $fastflatFrm->nfiles;
  my @nsubscans = $fastflatFrm->hdrvals("NSUBSCAN");
  if (@nsubscans > 1) {
    foreach my $nsubscan (@nsubscans) {
      my $Frmobj = $Frm->new;
      my @fastflats = map { $fastflatFrm->file($_) }
	grep { $fastflatFrm->hdrval("NSUBSCAN", $_-1) == $nsubscan } (1 .. $nrawff);
      $Frmobj->files(@fastflats);
      $store_fastflats->($Frmobj);
    }
  } else {
    $store_fastflats->($fastflatFrm);
  }
  # Set the PROCESS_FASTFLAT flag to indicate that fastflats have been
  # processed and that no further processing should take place
  my $process_ff = (defined $Frm->hdr("SEQ_TYPE")) ? 1 : 0;
  $Frm->uhdr("PROCESS_FASTFLAT", $process_ff);
  $Frm->isgood(-1);
}
