#! -*-perl-*-

=head1 NAME

_REMOVE_PLANE_FROM_IMAGE_ -  remove a plane from an image

=head1 SYNOPSIS

  _REMOVE_PLANE_FROM_IMAGE_

=head1 DESCRIPTION

This primitive fits a 2-d plane to an image. It will not work on 
raw time series data.

The primitive works by fitting a 2-D plane to an image with the KAPPA
task C<surfit>. The KAPPA task C<stats> is run on the fit and the mean
and standard deviation are stored. The output from C<surfit> is the
RMS deviation of the fit from the input image. This may be regarded as
an alternative estimate of the noise if the number of bright sources
is small. The average mean and standard deviation of the fitted plane
is calculated for the images in the Frame, and these may be physically
meaningful numbers if the spread is small. The average mean level in
the fit is taken to be the mean DC sky signal. The average standard
deviation (called the mean spread below) is a measure of the size of
the sky gradient: if this gradient is C<small> then the sky level is
well-approximated by a constant.

To reiterate, the values returned (and printed if verbose is true)
represent the following:

=over 4

=item Mean DC level

The mean of the fitted plane, averaged over all images in the
Frame. Taken to be the mean DC sky signal.

=item Mean spread

The average standard deviation in the mean of the fitted plane. Taken
to be an estimate of the magnitude of the fitted slope.

=item Mean RMS deviation

The mean RMS deviation between the fit and the data. Taken to be a
measure of the sky noise.

=back

If the mean spread is less than the RMS deviation, then the gradient
on the fitted 2-D plane is small and the sky is well-approximated by a
constant DC level.

However, note that the presence of sources will mean that these
interpretations should be used as a guide only.

=head1 EXTERNAL TASKS

=over 4

=item B<KAPPA>

C<surfit>, C<sub>

=back

=head1 NOTES

Only works on frames.

=head1 AUTHOR

Tim Jenness, Andy Gibb

=head1 COPYRIGHT

Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council, 2007 University of British Columbia. All Rights Reserved.

=cut

# Units...
my $units = "pW";

# Tell user...
orac_print "Removing sky by fitting and subtracting a plane\n";

# Should I be verbose (default to yes)
my $verbose = (exists $_REMOVE_PLANE_FROM_IMAGE_{VERBOSE} && 
	       defined $_REMOVE_PLANE_FROM_IMAGE_{VERBOSE}) ?
               $_REMOVE_PLANE_FROM_IMAGE_{VERBOSE} : 1;

# Mean sky level and RMS deviation for each file
my (@dclevel, @sigmadc, @rms);

# Loop over frames
for my $i (1..$Frm->nfiles) {

  # Input file and final output
  my ($in, $out) = $Frm->inout('_sky', $i);

  # temp output file
  my $tmpout = new ORAC::TempFile;
  my $tmpoutfile = $tmpout->file;

  # Arguments to SURFIT: the default estimator is MODE
  my $args = " fittype=poly order=1 clip=[2,2,2] estimator=! wlim=0.5 evaluate=all fitclip=[2,2,2]";

  # Run SURFIT
  $Mon{kappa_mon}->obeyw("surfit","in=$in out=$tmpoutfile $args reset");

  # Run stats on the fit to get the mean sky level
  $Mon{kappa_mon}->obeyw("stats","ndf=$tmpoutfile");

  # Retrieve mean value of fit as an estimate of DC sky background
  my $ORAC_STATUS;
  ($ORAC_STATUS, my $dclevel) = $Mon{kappa_mon}->get("stats","mean");
  ($ORAC_STATUS, my $sigmadc) = $Mon{kappa_mon}->get("stats","sigma");
  push (@dclevel, $dclevel);
  push (@sigmadc, $sigmadc);

  # Would be nice to derive gradient in sky background and PA of slope
  # (in AzEl frame) and see what the magnitude is and how much it
  # varies.

  # Subtract the fit
  $Mon{kappa_mon}->obeyw("sub","in1=$in in2=$tmpoutfile out=$out");

  # Now retrieve RMS to get idea of sky noise
  ($ORAC_STATUS, my $rms) = $Mon{kappa_mon}->get("surfit","rms");
  # What do we do with it now? Too many values to log, surely?
#  orac_print "RMS deviation of fit = $rms $units\n" if ($verbose);
  push (@rms, $rms);

  # Update the frame
  $Frm->file($i, $out);

  undef $tmpout;
}
# Calculate mean DC level and RMS values
my $imax = @rms;
my $meanrms = 0;
my $meandclevel = 0;
my $meansigmadc = 0;
for my $i (0 .. $imax-1) {
  $meanrms += $rms[$i];
  $meandclevel += $dclevel[$i];
  $meansigmadc += $sigmadc[$i];
}
$meanrms /= $imax;
$meandclevel /= $imax;
$meansigmadc /= $imax;


# Return mean values of RMS and MEAN sky level
$_REMOVE_PLANE_FROM_IMAGE_{RMS} = $meanrms;
$_REMOVE_PLANE_FROM_IMAGE_{DCSKY} = $meandclevel;
$_REMOVE_PLANE_FROM_IMAGE_{SIGMADC} = $meansigmadc;

# These should be logged somewhere... In $Cal obj?

if ($verbose) {
  # See if the sky gradient is small
  if ( $meansigmadc < $meanrms ) {
    orac_print "OK - sky background appears to be well approximated to a constant level\n", 'green';
  } else {
    orac_print "Caution - sky background appears to have a significant gradient, interpret these results with care\n", 'red';
  }

  $meanrms = sprintf "%6.5f", $meanrms;
  $meandclevel = sprintf "%6.5f", $meandclevel;
  $meansigmadc = sprintf "%6.5f", $meansigmadc;
  orac_print "Plane removed from images\n"
    ."Mean level = $meandclevel (mean std dev = $meansigmadc)\n"
    ."Mean RMS deviation = $meanrms\n";
}
