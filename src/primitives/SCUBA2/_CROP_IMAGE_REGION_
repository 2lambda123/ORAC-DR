# -*-cperl-*-

=head1 NAME

_CROP_IMAGE_REGION_ - Trim image to a desired size using an AST region

=head1 SYNOPSIS

 _CROP_IMAGE_REGION_

 _CROP_IMAGE_REGION_ IN=$infile

 _CROP_IMAGE_REGION_ GROUP=1

 _CROP_IMAGE_REGION_ WIDTH=240 HEIGHT=400

=head1 DESCRIPTION

This primitive may be used to trim an image to a desired size using an
AST region. The AST region is created from information in a hash
reference containing various C<MAP_*> values, usually from the current
Frame or Group hdr. The user may override the map width and height
using the parameters described below.

All NDFs within a file are trimmed automatically including, e.g., the
C<EXP_TIME> and C<WEIGHTS> components of SCUBA-2 images. There is no
need to treat these separately.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

Flag to denote whether to use the current Frame or Group
object. Default is 0 (use Frame).

=item B<HEIGHT>

Output map height in arcsec. If not specified, the map height in the
header will be used.

=item B<IN>

Name of input file. The primitive will use the current object file if
not specified.

=item B<OUT>

Name of the trimmed output file. No default.

=item B<WIDTH>

Output map width in arcsec. If not specified, the map width in the
header will be used.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

WCSATTRIB

=item ORAC-DR PRIMITIVES

_MASK_AST_REGION_

=back

=head1 OUTPUT DATA

The name of the output file is stored in the primitive hash as
C<OUTFILE>.

The central RA, Dec and radius used in the cropping are stored in the
primitive hash as C<CENTRALRA>, C<CENTRALDEC> and C<RADIUS>
respectively.

=head1 OUTPUT FILES

Produces an output file with the suffix C<_crop> if B<OUT> is not
specified.

=head1 NOTES

=over 2

=item *

This primitive will retrieve the header from the current Frame/Group
object to obtain the map width/height unless an input file is
given. This may or may not yield the desired values. If in doubt,
supply the B<HEIGHT> and B<WIDTH> arguments.

=item *

It is up to the user to register the output file with the Frame/Group.

=item *

Requires the JCMT::MapArea Perl module.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;

# Input/output files
my $infile = get_prim_arg($_PRIM_ARGS_, "IN", undef);

# New map size parameters
my $width  = get_prim_arg($_PRIM_ARGS_, "WIDTH", undef);
my $height = get_prim_arg($_PRIM_ARGS_, "HEIGHT", undef);

# Retrieve header from input file if given with no new values for the
# width and height, otherwise use the current Frame
my $hdr;
if ($infile && !$width && !$height) {
  my $fitshdr = new Astro::FITS::Header::NDF( File => $infile );
  tie my %hdr, ref($fitshdr), $fitshdr;
  $hdr = \%hdr;
} else {
  $hdr = $Obj->hdr;
  $infile = $Obj->file;
}

my $outfile = get_prim_arg($_PRIM_ARGS_, "OUT", scalar($Obj->inout("_crop")));

# Set new width/height if defined, but ensure the default is not too
# small: force a default size of 75 arcsec
use constant MINMAPSIZE => 75.0;
my $set_size = sub {
  my ($typ, $size) = @_;
  my $mapkey = "MAP_".$typ;
  if (defined $size) {
    if ($size < MINMAPSIZE) {
      orac_warn "Input size ($size) too small: setting to ".(MINMAPSIZE)."\n";
      $size = MINMAPSIZE;
    }
    $hdr->{$mapkey} = $size;
  } else {
    if ($hdr->{$mapkey} < MINMAPSIZE) {
      orac_warn "Input $mapkey (".($hdr->{$mapkey}).") too small: setting to ".(MINMAPSIZE)."\n";
      $hdr->{$mapkey} = MINMAPSIZE;
    }
  }
};
$set_size->("WDTH", $width);
$set_size->("HGHT", $height);

# Check that the MAP_PA is also set - assume a value of 0 if not
unless (defined $hdr->{"MAP_PA"}) {
  orac_warn "MAP_PA is missing from FITS headers - assuming a value of 0\n";
  $hdr->{"MAP_PA"} = 0;
}

# Check the AlignSystem WCS attribute and set it the same as the
# tracking system if necessary
$Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$infile mode=get name=alignsystem(1)");
my ($ORAC_STATUS, $alignsys) = $Mon{ndfpack_mon}->get("wcsattrib","value");
# Catch synonymous values
$alignsys = "FK5" if (uc($alignsys) eq "ICRS");

my %TRACK2AST = ( 'J2000' => 'FK5',
                  'B1950' => 'FK4',
                  'APP' => 'GAPPT',
                  'GALACTIC' => 'GALACTIC',
                  'GAL' => 'GALACTIC' );
my $tracksys = $TRACK2AST{ uc( $Obj->hdr("TRACKSYS") ) };
if ( $alignsys ne $tracksys ) {
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$infile mode=set name=alignsystem(1) newval=$tracksys");
}

# Create an AST region with the given map parameters
use JCMT::MapArea;
my $astregion = &JCMT::MapArea::region( header => $hdr );

# Get the central Ra, Dec and radius of the cropped region.
my ($ra, $dec, $radius) = JCMT::MapArea::radec_radius(header => $hdr);
orac_print "Cropping map using: RA=$ra, Dec=$dec, RADIUS=$radius.\n";

# Store in current object header
$Obj->uhdr("MAP_ASTREGION",$astregion);

# Trim the image using the defined region
_MASK_AST_REGION_ IN=$infile OUT=$outfile GROUP=$group

# Restore AlignSystem to same as on entry
if ( $alignsys ne $tracksys ) {
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$infile mode=set name=alignsystem(1) newval=$alignsys");
}

# Store output file in primitive hash
$_CROP_IMAGE_REGION_{OUTFILE} = $outfile;
$_CROP_IMAGE_REGION_{CENTRALRA} = $ra;
$_CROP_IMAGE_REGION_{CENTRALDEC} = $dec;
$_CROP_IMAGE_REGION_{RADIUS} = $radius;
