# -*-perl-*-

=head1 NAME

_FLATFIELD_

=head1 SYNOPSIS

_FLATFIELD_ 

=head1 DESCRIPTION

This primitive applies the flatfield correction to all files in the
current frame using the flatfield information in the raw data
files. Bad-bolometer masks for each subarray are retrieved from the
Calibration system if they exist.

=head1 ARGUMENTS

None.

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item SMURF

FLATFIELD

=back

=head1 NOTES

This is a many-to-fewer operation if the list of input files contains
dark frames (as it should). Note that the output file names will not
correspond directly to the input names. This is because the routine
that removes the dark frames from the list of files truncates the list
at the appropriate number of files, rather than removing corresponding
dark file names. Of course, the pipeline doesn't care about the names
since it operates solely on the header information.

=head1 OUTPUT DATA

On completion, the Frame object contains the flatfielded data files.

=head1 OUTPUT FILES

Creates output files with a C<_ff> suffix.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>,
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 2006-2009 University of British Columbia and the
Particle Physics and Astronomy Research Council. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

orac_print "Flatfielding raw data... ";

my @files = $Frm->files;

# Retrieve dark frames if necessary
_RETRIEVE_DARK_FRAMES_
push ( @files, @{$_RETRIEVE_DARK_FRAMES_{DARKS}} )
  if ( defined $_RETRIEVE_DARK_FRAMES_{DARKS} );

# Write list of filenames to a temp file
my $inlist = write_file_list( @files );

# Establish list of output files.
my @out;
for my $i ( 1 .. $Frm->nfiles ) {
  my $out = $Frm->inout("_ff", $i);
  push ( @out, $out );
}
my $outlist = write_file_list( @out );

# Define the bad-bolometer mask parameter - set to default then
# retrieve available masks, which are written to a file if they exist.
my @bpms;
foreach my $subarray ( $Frm->subarrays ) {
  $Frm->uhdr("SUBARRAY",$subarray);
  push(@bpms, $Cal->mask) if ( defined $Cal->mask );
}
my $bpm ="!";
if ( @bpms ) {
  $bpm = write_file_list( @bpms );
  $bpm = "^" . $bpm;
}

# Define a convenient temporary file name for the OUTFILES parameter
my $outfiles = "flatfield.$$";

# Flatfield the data
my $args = "in=^$inlist bpm=$bpm outfiles=$outfiles out=^$outlist";
$Mon{smurf_mon}->obeyw("flatfield",$args);

# Obtain the filenames corresponding to flatfielded data, over-ride
# list returned earlier
@out = read_file_list( $outfiles );

# Delete the outfiles file
unlink $outfiles;

# Register new file names
$Frm->files( @out );

$Frm->uhdr("FLATFIELD",1);

# Finished.
orac_print "Flatfield applied\n";
