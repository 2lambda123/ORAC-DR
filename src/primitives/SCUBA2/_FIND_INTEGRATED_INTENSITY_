# -*-cperl-*-

=head1 NAME

_FIND_INTEGRATED_INTENSITY_ - aperture photometry of image using statistics

=head1 SYNOPSIS

 _FIND_INTEGRATED_INTENSITY_ IMAGE=$image XYPOS=\@xy

 _FIND_INTEGRATED_INTENSITY_ IMAGE=$image XYPOS=\@xy RADIUS=50

 _FIND_INTEGRATED_INTENSITY_ IMAGE=$image XYPOS=\@xy RADIUS=50 ESTIMATOR=MEAN

 _FIND_INTEGRATED_INTENSITY_ IMAGE=$image XYPOS=\@xy RADIUS=50 ANNULUS=1 INNER=1.5 OUTER=2.5

=head1 DESCRIPTION

This primitive calculates the integrated intensity by summing up
values within a given aperture. A constant background level may be
estimated and removed.

The values are returned in whatever units the image is currently
using, around a single (point) source that is assumed to be the only
source on the map (so that the background contribution can be
calculated). The total value is corrected for the pixel size.

The background is estimated by masking out the source and calculating
the mean, median or mode value in the image.

Results are returned in the primitive hash.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<ANNULUS>

A flag to denote whether the background should be estimated from an
annulus centred on the target position. See also the arguments
B<INNER> and B<OUTER>. Default is 0 (no).

=item B<ESTIMATOR>

Choice of background estimation method. May be C<mean>, C<median> or
C<mode>. Default is C<mode>.

=item B<GROUP>

A flag to denote whether to use the current Group or Frame file. Only
accessed if B<IMAGE> is not defined. Default is 0 (use the Frame
file).

=item B<IMAGE>

Input image. No default.

=item B<INNER>

Inner radius of annulus to use for background estimate, as a multiple
of the aperture radius. Default is 1.25.

=item B<INNER_RADIUS>

Explicit value of inner radius of annulus in arcsec. Should be larger
than RADIUS. Supercedes the value of INNER if both are set. May be
overridden with the recipe parameter C<ANNULUS_INNER_RADIUS>.

=item B<OUTER>

Outer radius of annulus to use for background estimate, as a multiple
of the aperture radius. Default is 2.0.

=item B<OUTER_RADIUS>

Explicit value of inner radius of annulus in arcsec. Should be larger
than RADIUS. Supercedes the value of OUTER if both are set. May be
overridden with the recipe parameter C<ANNULUS_OUTER_RADIUS>.

=item B<RADIUS>

The radius of the aperture in arcsec. Default is 20 arcsec.

=item B<REMOVEBACK>

Flag to denote whether the background should be estimated and
removed. The default is 1 (yes).

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is true.

=item B<XYPOS>

An array reference containing the formatted X, Y coordinates in the
chosen frame. No default.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

APERADD

=item ORAC-DR PRIMITIVES:

_CALC_ANNULUS_SCALE_,
_CREATE_ANNULUS_, _DEFINE_APERTURE_, _FIND_IMAGE_STATISTICS_, _GET_PIXEL_SCALE_, _MASK_IMAGE_

=back

=head1 NOTES

It is assumed that the current coordinate frame is a SKY frame. No
checks are made. It may be desireable to allow different (e.g. PIXEL)
frames to be used.

=head1 OUTPUT DATA

On successful completion, the primitive hash
C<%_FIND_INTEGRATED_INTENSITY_> contains the following keys (undef if
the method failed):

=over 4

=item NUMGOOD

The number of pixels which contribute to the estimate of the flux

=item NUMPIX

The total number of pixels in the image

=item SIGMA

The standard deviation of the pixel sum

=item SIGMATOTAL

The standard deviation of the total flux in units of
signal_units*pixel_units^2

=item SUM

The sum of the data values from all pixels within the aperture

=item TOTALFLUX

The total flux within the aperture in units of
signal_units*pixel_units^2

=item TOTALFLUXERR

The estimated error on the total flux within the aperture in units of
signal_units*pixel_units^2

=back

The Frame object is not updated.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>,
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2011 Science and Technology Facilities Council.
Copyright (C) 2005-2007 Particle Physics and Astronomy Research
Council. Copyright (C) 2005-2011 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Set the input file name
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $in = get_prim_arg( $_PRIM_ARGS_, "IMAGE",
                       ($group) ? $Grp->file : $Frm->file);

# Should I be verbose (default to yes)
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1 );

# Define X and Y positions
my $xypos = get_prim_arg( $_PRIM_ARGS_, "XYPOS", undef );
my ($x, $y);
if (defined $xypos && ref($xypos) eq 'ARRAY') {
  ($x, $y) = @$xypos;
  # what should happen if we have undef x and y?
  orac_throw "Error: Empty position provided to _FIND_INTEGRATED_INTENSITY_\n"
      unless (defined $x && defined $y);
}

# Set radius of aperture - default is 20 arcsec
my $radius = get_prim_arg( $_PRIM_ARGS_,"RADIUS", 20.0 );

# Initialize entries in primitive hash
foreach my $item (qw/ TOTALFLUX SUM SIGMA NUMGOOD NUMPIX /) {
  $_PRIM_ARGS_->{$item} = undef;
}

# Define a suitable aperture
_DEFINE_APERTURE_ IMAGE=$in RADIUS=$radius XYPOS=$xypos
my $aperture = $_DEFINE_APERTURE_{APERTURE};

# Add up the signal within the given aperture aperture
my $diam = $aperture->{diam};
my $centre = "'".$aperture->{coords}."'";
my $args = "ndf=$in ardfile=! centre=$centre diam=$diam";

$Mon{kappa_mon}->obeyw("aperadd","$args");
my ($ORAC_STATUS, $sum) = $Mon{kappa_mon}->get("aperadd","total");
($ORAC_STATUS, my $sigma) = $Mon{kappa_mon}->get("aperadd","sigma");
($ORAC_STATUS, my $ngood) = $Mon{kappa_mon}->get("aperadd","ngood");
($ORAC_STATUS, my $npix) = $Mon{kappa_mon}->get("aperadd","numpix");

# Uncertainty in the sum within the aperture
my $fluxerr = 0;

# Calculate and remove a constant background if required
my $removeback = get_prim_arg($_PRIM_ARGS_, "REMOVEBACK", 1);
if ( $removeback ) {
  my $estimator = uc(get_prim_arg($_PRIM_ARGS_, "ESTIMATOR", "MODE"));
  # Get a temporary output file
  my $bgoutobj = new ORAC::TempFile;
  my $bgout = $bgoutobj->file;

  # Should an annulus be used for background estimation?
  my $annulus = get_prim_arg($_PRIM_ARGS_, "ANNULUS", 0);
  if ($annulus) {
    # Define the inner and outer radii - the input parameters are
    # multiples of the aperture radius, but _CREATE_ANNULUS_ wants
    # arcsec so do the multiplication here
    _CALC_ANNULUS_SCALE_ RADIUS=$radius PRIMARGS=$_PRIM_ARGS_
    my $inner = $_CALC_ANNULUS_SCALE_{ANNULUS_INNER};
    my $outer = $_CALC_ANNULUS_SCALE_{ANNULUS_OUTER};
    $inner *= $radius;
    $outer *= $radius;

    # Mask the image to create an annulus
    _CREATE_ANNULUS_ IMAGE=$in ANNULUS=$bgout XYPOS=$xypos INNER_RADIUS=$inner OUTER_RADIUS=$outer

  } else {
    # Mask the input image - mask everything *inside* the aperture
    _MASK_IMAGE_ IMAGE=$in MASKED=$bgout XYPOS=$xypos INVERT=0 APERTURE=$aperture
  }

  # Now calculate stats of the masked file to get the background level
  # outside the source aperture
  my $histat =  ($estimator eq "MODE") ? 1 : 0;
  _FIND_IMAGE_STATISTICS_ IMAGE=$bgout VERBOSE=0 HISTAT=$histat
  my $background = ($_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMGOOD})
    ? $_FIND_IMAGE_STATISTICS_{RESULTS}->{$estimator} : 0.0;

  if ($background) {
    # This is background value per pixel, so multiply by the number of
    # pixels in the signal aperture and reduce the sum accordingly
    $sum -= ($background * $ngood);
  } else {
    orac_warn "Unable to determine background level: integrated intensity may be over/underestimated\n";
  }

  # Find sigma separately if histat is true
  if ($histat) {
    _FIND_IMAGE_STATISTICS_ IMAGE=$bgout VERBOSE=0 HISTAT=0
  }
  $fluxerr = $_FIND_IMAGE_STATISTICS_{RESULTS}->{SIGMA};
  # This is the std deviation in the non-signal pixels - the std
  # deviation in the aperture is sqrt($ngood) higher
  $fluxerr *= sqrt($ngood);
}

# Retrieve pixel scale in arcsec so totalflux is returned as a flux
# with units of signal*arcsec^2
_GET_PIXEL_SCALE_ IMAGE=$in VERBOSE=0
my $pixarea = $_GET_PIXEL_SCALE_{AREA};

# Store results in the hash
$_PRIM_ARGS_->{SUM} = $sum;
$_PRIM_ARGS_->{SIGMA} = $sigma;
$_PRIM_ARGS_->{TOTALFLUX} = $sum*$pixarea;
$_PRIM_ARGS_->{TOTALFLUXERR} = $fluxerr*$pixarea;
$_PRIM_ARGS_->{SIGMATOTAL} = $sigma*$pixarea;
$_PRIM_ARGS_->{NUMGOOD} = $ngood;
$_PRIM_ARGS_->{NUMPIX} = $npix;
