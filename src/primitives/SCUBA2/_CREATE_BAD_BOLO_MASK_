# -*-cperl-*-

=head1 NAME

_CREATE_BAD_BOLO_MASK_ - Create a bad bolometer mask

=head1 SYNOPSIS

 _CREATE_BAD_BOLO_MASK_ MASKVAL=10.0

=head1 DESCRIPTION

This primitive creates a bad bolometer mask based on the relative
power at two frequencies, one which samples the white-noise region of
the spectrum and the other which samples the low (1/f) region. This
ratio image was calculated previously in
L<_CALCULATE_NOISE_|_CALCULATE_NOISE_>. Out-of-spec bolometers are
defined as those having more power at low frequencies (hence less
stable) and will be set to a C<BAD> value in the output mask.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<RELAX>

A factor by which the NEP criteria can be relaxed to include
out-of-spec bolometers. A special value of 0 may be given which skips
the creation of a bad-bolo mask (i.e. continue to use all working
bolometers). Default is 1 (no relaxation).

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 1
(yes).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

STATS, THRESH

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Creates an output file for each subarray present with suffix C<_bbm>,
which is stored in the calibration system.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2008-2009 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# First step: do noise data exist from which to create a bad-bolo mask?
if ( $Frm->uhdr("NOISE") ) {

  # Should we be verbose (default to yes)?
  my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1);

  # Are the NEP criteria being relaxed?
  my $relax = get_prim_arg( $_PRIM_ARGS_, "RELAX", "1.0" );

  # Only proceed if relax is non-zero
  if ( $relax > 0 ) {
    # Catch numbers which look like sqrt(2)
    $relax = sqrt(2) if ($relax =~ /^1.4/);

    # Define NEP spec for defining the mask
    my $nep_spec = $relax * $Cal->nep;

    # Announce our presence to the world
    if ($verbose) {
      my $factor = ($relax > 1) ? "with NEP criteria relaxed by ".(sprintf "%3.1f", $relax) : "";
      orac_print "Deriving a bad bolometer mask $factor\n";
    }

    # Loop over the files in the Frame - there should be no more than
    # 4 files (future check), corresponding to each of the four
    # subarrays at the current wavelength.
    foreach my $i ( 1 .. $Frm->nfiles ) {

      # NEP file
      my $nepfile = $Frm->file( $i ).".MORE.SMURF.NEP";

      # Threshold to set out-of-range values to bad
      my $thresh = new ORAC::TempFile;
      my $threshfile = $thresh->file;
      my $args = "in=$nepfile out=$threshfile thrhi=$nep_spec thrlo=0 newhi=bad newlo=bad";
      $Mon{kappa_mon}->obeyw("thresh","$args");

      # Threshold again with inverted selection to set everything to
      # unity and hey presto - instant bad bolo mask
      # Define name of mask from name of current file
      my $mask = $Frm->inout("_bbm", $i);
      $args = "in=$threshfile out=$mask thrhi=0 thrlo=$nep_spec newlo=1";
      $Mon{kappa_mon}->obeyw("thresh","$args");

      # Find number of good bolometers in output mask
      $Mon{kappa_mon}->obeyw("stats","ndf=$mask");
      my ($ORAC_STATUS, $ngood) = $Mon{kappa_mon}->get("stats","numgood");
      if ( $ngood == 0 ) {
	orac_err "Bad bolometer mask has too few good bolometers ($ngood good)\n";
      } else {
	orac_print "Bad bolometer mask $mask created from $ngood bolometers\n"
	  if ($verbose);

	# Register with the Calibration system - note that cal system must
	# deal with the different subarrays. The easiest way is to add a
	# uhdr entry for SUBARRAY and put the right value in it.
	$Frm->subarray($i);
	$Cal->maskindex->add($mask, {%{$Frm->hdr}, %{$Frm->uhdr}});
      }
    }
  } else {
    orac_warn "Skipping creation of bad-bolometer mask\n" if ($verbose);
  }
}
