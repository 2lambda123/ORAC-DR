# -*-perl-*-

=head1 NAME

_FIND_POINT_SOURCES_ - find point sources in given image using SExtractor

=head1 SYNOPSIS

 _FIND_POINT_SOURCES_

 _FIND_POINT_SOURCES_ DETECT_SIGMA=10

=head1 DESCRIPTION

Find the position of all the point sources in the given image using
C<EXTRACTOR>.

This primitive is designed to work on a single image and will fail if
the current Frame or Group object contains more than one file.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<DETECT_SIGMA>

Optional detection threshold in units of standard deviation. Default
is 5.

=item B<GROUP>

Only used if B<IMAGE> is not defined. If true, use the current Group
file. Otherwise, use the current Frame. Default is 0 (false).

=item B<IMAGE>

Name of image file to extract point sources from. No default, but if
left unset image will be determined by the B<GROUP> parameter.

=item B<MINPIX>

Minimum number of connected pixels defining a source. Default is 9.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item EXTRACTOR

EXTRACTOR (via the C<Starlink::Extractor> perl module)

=back

=head1 NOTES

Requires the following perl modules:

Starlink::Extractor, Astro::Catalog, Astro::WaveBand

See also L<_FIND_SOURCES_|_FIND_SOURCES_>.

=head1 OUTPUT DATA

On completion the primitive hash C<%_FIND_POINT_SOURCES_> contains
the following keys:

=over 4

=item CATALOGUE

An C<Astro::Catalog> object containing the positions of detected point
sources

=back

The Frame object is not updated.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Set input file - leave undefined if not specified
my $in = get_prim_arg( $_PRIM_ARGS_, "IMAGE", undef );

# If not input file was defined use the current group or frame
unless ( defined $in ) {
  # Determine if the user wants to use the current stacked Grp or Frm
  # image
  my $Obj;
  my $group = defined( $_FIND_POINT_SOURCES_{GROUP} ) ? 
    $_FIND_POINT_SOURCES_{GROUP} : 0;
  if( $group ) {
    $Obj = $Grp;
  } else {
    $Obj = $Frm;
  }
  if ( $Obj->nfiles == 1 ) {
    $in = $Obj->file;
  } else {
    orac_throw "Error: _FIND_POINT_SOURCES_ must be run after images have been combined\n";
  }
}

# Minimum size of box defining a source
my $minpix = ( $_FIND_POINT_SOURCES_{MINPIX} || 9 );
# Obtain the detection sigma level.
my $detect = ( $_FIND_POINT_SOURCES_{DETECT_SIGMA} || 5 );

# Initialise the results array
$_FIND_POINT_SOURCES_{RESULTS} = [];

# Run SExtractor
use Starlink::Extractor;
use Astro::WaveBand;
use Astro::Catalog;
# Use default config file in ORAC_DATA_CAL
my $conf_file = $Cal->find_file("extractor_catalogue.sex");
my $extractor = new Starlink::Extractor( config => $conf_file );
# Set the detection threshold
$extractor->detect_thresh( $detect );
# And the analysis threshold
$extractor->analysis_thresh( 3.0 );
$extractor->verbose_type('NORMAL');

# Note that filter is a mandatory argument so create a dummy one
my $extracted_catalogue = $extractor->extract( frame => $in,
					     filter => new Astro::WaveBand( Filter => $Frm->uhdr("ORAC_FILTER") ) );

# Filter output catalogue to identify point sources
my $filtered_catalogue = new Astro::Catalog( origin => 'ORAC-DR primitive _FIND_POINT_SOURCES_');
my $source;
while ( $extracted_catalogue->sizeof > 0 ) {
  # Pop current source (returns an Astro::Catalog::Star object)
  $source = $extracted_catalogue->popstar;

  # Add suitable sources with an ellipticity < 0.25 (= axial ratio of
  # 1.333) to output catalogue
  if ( $source->morphology->ellipticity < 0.25 && 
       $source->morphology->area > $minpix ) {
    $filtered_catalogue->pushstar( $source );
  }
}

if ( $filtered_catalogue->sizeof == 0 ) {
  orac_warn "No point-like sources found in current image\n";
}

# Store the resultant catalogue, even if it's empty
$_FIND_POINT_SOURCES_{CATALOGUE} = $filtered_catalogue;
