# -*-cperl-*-

=head1 NAME

_CENTROID_IMAGE_

=head1 SYNOPSIS

_CENTROID_IMAGE_ BOX=30

=head1 DESCRIPTION

Find the centroid of emission in the specified image. Assumes that the
centroid is near the origin in axis coordinates, and that there is
only one source in the image. Complex source structure will likely
cause this primitive to return no result.

Returns C<undef> if the centroid could not be determined.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<BOX>

Size of search box in arcsec along each dimension. Default is 60
arcsec.

=item B<GROUP>

Flag to denote whether to use the current Group image or Frame
image. True (1) indicates use the Group image; else use the Frame
image. The presence of the B<IMAGE> argument overrides this parameter.

=item B<IMAGE>

Name of input image. If no image is given then the B<GROUP> argument
is used to determine whether to use the current Group or Frame image.

=item B<OFFSET>

A flag to denote whether to return the centroid in offset
coordinates. A value of 1 (true) will set the SkyRefIs attribute to
C<Origin>, if it is not already set. The default value of 0 (false)
will leave this attribute unchanged (thus if the file is already in an
offset frame, the answer will still be returned in offset
coordinates).

=item B<SYSTEM>

Coordinate system in which to determine the centroid position. Default
is the current system.

=item B<VERBOSE>

Flag to indicate whether informational messages should be
given to the user. Default is 1 (true).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

CENTROID, STATS, WCSATTRIB

=item ORAC-DR PRIMITIVES

_GET_PIXEL_SCALE_

=back

=head1 NOTES

The Frame object is not updated.

If an image is already in an offset coordinate frame, the B<OFFSET>
parameter should be set to 0. The primitive does not check for
consistency between the user input and the data.

This primitive assumes that the peak value in the map is the value of
the pixel at the centroid position. The presence of spikes will cause
the wrong position to be returned.

=head1 OUTPUT DATA

On completion the primitive hash C<%_CENTROID_IMAGE_> contains
the following key:

=over 4

=item RESULTS

Reference to an array containing the X, Y position of the source in
the current coordinate frame. Empty (undef) if no centroid could be
found.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>,
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 2007 the University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Set input file - leave undefined if not specified
my $in = get_prim_arg($_PRIM_ARGS_, "IMAGE", undef);

# Should I be verbose? (Default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# If not input file was defined use the current group or frame
unless ( defined $in ) {
  # Determine if the user wants to use the current stacked Grp or Frm
  # image
  my ($Obj, $Frmgrp);
  my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
  if( $group ) {
    $Obj = $Grp;
    $Frmgrp = "Grp";
  } else {
    $Obj = $Frm;
    $Frmgrp = "Frm";
  }
  if ( $Obj->nfiles == 1 ) {
    $in = $Obj->file;
  } else {
    orac_throw "Error: _CENTROID_IMAGE_ must be run on the $Frmgrp after images have been combined\n";
  }
}

# Box is now specified in arcsec! Convert to an odd integer number of
# pixels. Note this is the length of the side of the box.
my $boxarcsec = get_prim_arg($_PRIM_ARGS_, "BOX", 60);
_GET_PIXEL_SCALE_ IMAGE=$in VERBOSE=0
my ($dx, $dy) = @{ $_GET_PIXEL_SCALE_{RESULTS}};
my $pixscale = 0.5 * ($dx + $dy);
my $box = int($boxarcsec / $pixscale);
# Make sure box is an odd integer
$box++ if ( $box % 2 == 0 );
# Finally check that box is within range
$box = 51 if ( $box > 51 );
$box = 3 if ( $box < 3 );

my $ORAC_STATUS;

# Check that we have sufficient number of good pixels to continue
$Mon{kappa_mon}->obeyw("stats","ndf=$in");
($ORAC_STATUS, my $numgood) = $Mon{kappa_mon}->get("stats","numgood");

# Define the minimum number of useful pixels as (2*$box+1)^2
my $minpix = 4.*($box+1)*($box+1);
# Make sure it lies within the bounds of the image though!
($ORAC_STATUS, my $numpix) = $Mon{kappa_mon}->get("stats","numpix");
$minpix = $numpix if ( $minpix > $numpix );

# Proceed if we have enough good values
if ( $numgood >= $minpix ) {

  # Select the requested coordinate frame
  my $cosys_out = lc(get_prim_arg($_PRIM_ARGS_,"SYSTEM", ""));

  my $cosys_in;
  unless ( $cosys_out eq "" ) {
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=get name=system(1)");
    ($ORAC_STATUS, $cosys_in) = $Mon{ndfpack_mon}->get("wcsattrib","value");
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=set name=system(1) newval=$cosys_out");
  }

  # Are we insisting that the the centroid be returned in Offset
  # coordinates? Default is no: use the current system.
  my $offset = get_prim_arg($_PRIM_ARGS_, "OFFSET", 0);
  # Set the default initial position - this only changes if we are not
  # working in an offset coordinate system
  my $initpos = "0,0";
  # Check if we need to set it first
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=get name=skyrefis");
  ($ORAC_STATUS, my $skyrefis) = $Mon{ndfpack_mon}->get("wcsattrib","value");
  # If we are not in an offset coord system...
  if ( lc($skyrefis) eq "ignored" ) {
    # Do we want to change to an offset coord system?
    if ( $offset ) {
      $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=set name=skyrefis newval=origin");
      orac_print "Centroid will be determined in offset coordinates\n" if ($verbose);
    } else {
      # If we don't want offset, retrieve the formatted WCS position
      # of the peak. NOTE: this will be fooled by the presence of a
      # spike FUTURE: dealing with spikes, may need an iterative
      # procedure (clip= option in stats).
      $Mon{kappa_mon}->obeyw("stats","ndf=$in");
      ($ORAC_STATUS, $initpos) = $Mon{kappa_mon}->get("stats","maxwcs");
      # Make sure that we only pass an X,Y coordinate pair to
      # centroid. First strip out any commas, then split on spaces and
      # use the first two elements as the initial position.
      $initpos =~ s/,//g;
      my @pos = split(/\s+/, $initpos);
      $initpos = join(", ",@pos[0..1]);
    }
  }

  # Initialize the results array
  $_CENTROID_IMAGE_{RESULTS} = [];

  # Need to check for kappa 0.14 or higher -- use the KAPVERSION_MINOR
  # global variable
  my $args;
  if (starversion_lt('kappa','V0.14-0')) {
    $args = " cosys=d init=[$initpos]";
  } else {
    # If we have KAPPA14 we have to first make sure the wcsframe is AXIS
    # so that we can start searching from the coordinate centre
#    $Mon{ndfpack_mon}->obeyw("wcsframe","ndf=$in frame=axis");
    $args = " init='".$initpos."' ";
  }

  $args .= " mode=i cerror=true search=$box";

  my $CENTROID_STATUS = $Mon{kappa_mon}->obeyw("centroid","ndf=$in $args");

  if ( $CENTROID_STATUS == ORAC__OK ) {
    # Read the result
    my @centre;

    # KAPPA 14 returns the centre pos as a string, earlier versions
    # return an array -- just use XCEN and YCEN with two ADAM calls
    ($ORAC_STATUS, $centre[0]) = $Mon{kappa_mon}->get("centroid","xcen");
    ($ORAC_STATUS, $centre[1]) = $Mon{kappa_mon}->get("centroid","ycen");

    # Store the results
    $_CENTROID_IMAGE_{RESULTS} = [@centre];

    # Reset the coordinate system if necessary
    unless ( $cosys_out eq "" ) {
      $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=set name=system(1) newval=$cosys_in");
    }

  } elsif ($CENTROID_STATUS == 234521384) {
      # Use hard-code integer error code for KPG__NOCEN
      orac_warn "Centroid failed: unable to determine position of centroid\n";
  } else {
      # Unexpected error status
      orac_err("Centroid failed in unexpected manner. Aborting.");
      $ORAC_STATUS = $CENTROID_STATUS;
  }
  # Reset the SkyRefIs parameter if necessary
  if ( $offset ) {
    if ( lc($skyrefis) eq "ignored" ) {
      $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=set name=skyrefis newval=$skyrefis");
    }
  }

} else {
  orac_warn "Unable to determine centroid: insufficient number of good pixels\n";
}
