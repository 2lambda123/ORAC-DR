# -*-cperl-*-

=head1 NAME

_CHECK_MAP_BOUNDS_ - check image size and return modified image bounds

=head1 SYNOPSIS

 _CHECK_MAP_BOUNDS_ IN=$inlist TASK=$task

=head1 DESCRIPTION

This primitive checks the size of an output image which would be
created by the given input data. If the image exceeds a size which
would result in a file on disk larger than 2 GB, the image bounds are
reduced. The user must specify the task to use: either KAPPA
C<WCSMOSAIC> or SMURF C<MAKEMAP>.

If running C<MAKEMAP>, there is a further check that the modified
bounds are smaller than the map size given in the FITS header
(allowing for the SCUBA-2 field of view). If not, the new bounds are
set to encompass the specified map size, again allowing for the
SCUBA-2 field-of-view. The reason for this check is to trap cases
where the positional information in the data is incorrect - there is
no point creating a 2 GB file if the map was supposed to correspond to
something a fraction of that size.

The user B<must> specify a filename containing the list of files to
process and the task to be used to process those data. The primitive
makes no assumptions about how to process the input data.

The primitive returns the new bounds in the primitive hash if they
were calculated.

=head1 ARGUMENTS

The following two mandatory arguments are supported:

=over 4

=item B<IN>

List of input files. Must be a filename, such as that provided by
C<write_file_list>. No default.

=item B<FTSPORT>

FTS-2 port selection to be passed to makemap if specified.

=item B<TASK>

The Starlink task to use to process the input files. Supported options
are C<MAKEMAP> and C<WCSMOSAIC> for processing raw SCUBA-2 data or
image data respectively. No default.

=back

=head1 EXTERNAL TASKS

=over 4

=item KAPPA

WCSMOSAIC

=item SMURF

MAKEMAP

=back

=head1 OUTPUT DATA

On completion, the primitive hash C<%_CHECK_MAP_BOUNDS_> contains the
following keys:

=over 4

=item NEWBOUNDS

A flag to denote whether new bounds were calculated, 1 if yes, 0 if
no. A value of -1 is used to denote that the map bounds check failed.

=item LBOUND

An array reference with the lower bounds.

=item UBOUND

An array reference with the upper bounds.

=back

In addition the Frame uhdr entry C<NEWBOUNDS> contains a hash
reference with the same keys as above.

=head1 OUTPUT FILES

None.

=head1 NOTES

Only scales the X and Y axes. Leaves the bounds of other axes
unchanged. This may cause problems if higher axes have more than one
pixel.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2011,2013 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should I be verbose (default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Which task to use to check the map bounds? The user MUST supply this as
my $task = lc(get_prim_arg($_PRIM_ARGS_, "TASK", undef));
if ( !defined $task ) {
  orac_throw "_CHECK_MAP_BOUNDS_: Must provide task name for processing input files\n";
}
# Check that the given task is supported
unless ($task eq "makemap" || $task eq "wcsmosaic") {
  orac_throw "_CHECK_MAP_BOUNDS_: invalid task, $task. Must be MAKEMAP or WCSMOSAIC\n";
}

# Skip the bounds check if it has already been carried out
if ($task eq "makemap" && defined $Frm->uhdr("NEWBOUNDS")) {
  orac_print "Using map bounds derived previously\n";
  %_CHECK_MAP_BOUNDS_ = %{$Frm->uhdr("NEWBOUNDS")};
} else {
  # Input files to process
  my $inlist = get_prim_arg($_PRIM_ARGS_, "IN", undef);
  if ( !defined $inlist ) {
    orac_throw "_CHECK_MAP_BOUNDS_: Must provide a list of input files\n";
  }

  # FTS-2 port
  my $fts_port = get_prim_arg($_PRIM_ARGS_, "FTSPORT", undef);

  # Define the maximum number of pixels in an image before it has to be
  # resized/or tiled
  use constant MAXPIX => 60e6;

  orac_print "Calculating output map size... " if ($verbose);

  # Determine the lower/upper bounds of the output image
  my (@lbound, @ubound);
  my %mons = ( "makemap" => "smurf_mon", "wcsmosaic" => "kappa_mon");
  my $mapszargs;
  if ( $task eq "makemap" ) {
    # Makemap arguments - use rebin method
    _GET_MAKEMAP_ARGS_
    my %makemap_args = %{$_GET_MAKEMAP_ARGS_{ARGS}};
    $mapszargs = "in=^$inlist out=! method=rebin";
    # Construct argument list for makemap
    foreach my $arg (keys %makemap_args) {
      $mapszargs .= " $arg=$makemap_args{$arg}";
    }
    $mapszargs .= ' ftsport=' . $fts_port if defined $fts_port;
  } else {
    my $refimage = (defined $Grp->refimage) ? $Grp->refimage : "!";
    $mapszargs = "ref=$refimage method=nearest wlim=0.2 lbnd=! ubnd=! "
      ."out=! in=^$inlist";
  }

  my $MON_STATUS = $Mon{$mons{$task}}->obeyw("$task","$mapszargs");
  if ( $MON_STATUS == ORAC__OK ) {
    (my $ORAC_STATUS, @lbound) = $Mon{$mons{$task}}->get("$task","lbound");
    ($ORAC_STATUS,    @ubound) = $Mon{$mons{$task}}->get("$task","ubound");

    # Calculate output image size
    my $xsize = $ubound[0] - $lbound[0] + 1;
    my $ysize = $ubound[1] - $lbound[1] + 1;
    my $outpix = $xsize*$ysize;
    # Reset the bounds if necessary
    if ( $outpix > MAXPIX ) {
      # Warn user
      my $scalefactor = sqrt( MAXPIX/$outpix );
      my $pc_scalefactor = sprintf "%5.3f", 100*$scalefactor;
      orac_print "\n";
      orac_warn "Size will exceed 2 GB: reducing to include central $pc_scalefactor % of mapped area\n";

      my $newxsize = int($xsize * $scalefactor);
      my $newysize = int($ysize * $scalefactor);

      orac_print "Determining new bounds for output image:\n";
      if ($task eq "makemap") {
	# If we're not coadding files then the output map should not be
	# any larger than that specified in the FITS header. But, we have
	# to assume a default pixel scale of 4"/2" at 850/450 um
	# respectively to convert map size to pixels.
	use Astro::PAL qw(:constants);
	my $pixsize = ($Frm->hdr("FILTER") =~ /850/) ? 4 : 2;
	my $map_pa = DD2R * $Frm->hdr("MAP_PA");
	my $map_width = int(($Frm->hdr("MAP_WDTH") * cos($map_pa) +
			     $Frm->hdr("MAP_HGHT") * sin($map_pa)) / $pixsize);
	my $map_height = int(($Frm->hdr("MAP_HGHT") * cos($map_pa) +
			      $Frm->hdr("MAP_WDTH") * sin($map_pa)) / $pixsize);
	# Allow for a FoV extra coverage - assume 8-arcmin FoV = 480"
	my $border = 480.0 / $pixsize;
	$map_width += $border;
	$map_height += $border;
	# Calculate the number of pixels corresponding to the requested map area
	my $mappix = $map_width * $map_height;
	my $newmappix = $newxsize * $newysize;
	# If twice this number is less than the new map area then use
	# it. The factor of 2 allows for the case that the new map size
	# is only a little bit bigger than the requested map size, and a
	# map that has only twice the number of pixels probably won't
	# significantly longer to process.
	if (2*$mappix < $newmappix) {
	  orac_warn "New size exceeds defined map size: something has probably gone wrong\n";
	  orac_warn "Using map size from header, but results should be examined for problems\n";
	  $newxsize = $map_width if ($newxsize > $map_width);
	  $newysize = $map_height if ($newysize > $map_height);
	}
      }

      my $dx = int(($xsize - $newxsize) / 2.0);
      my $dy = int(($ysize - $newysize) / 2.0);
      # Reduce the X, Y bounds equally.
      $lbound[0] += $dx;
      $ubound[0] -= $dx;
      $lbound[1] += $dy;
      $ubound[1] -= $dy;

      orac_print "Old dimensions are $xsize x $ysize - new dimensions are $newxsize x $newysize\n";

      # Set some entries in the primitive hash
      $_CHECK_MAP_BOUNDS_{NEWBOUNDS} = 1;
      $_CHECK_MAP_BOUNDS_{LBOUND} = \@lbound;
      $_CHECK_MAP_BOUNDS_{UBOUND} = \@ubound;
    } else {
      # No new bounds were calculated
      orac_print "Size within limits, no need to tile.\n" if ($verbose);
      $_CHECK_MAP_BOUNDS_{NEWBOUNDS} = 0;
    }
  } else {
    # Bounds calculation failed for some reason
    orac_print "\n";
    if ( $MON_STATUS == 235176858 ) {
      # SMURF makemap error SMF__NOSCI: no science data found
      orac_err "Unable to check map bounds - no science data found\n";
    } elsif ( $MON_STATUS == 235176850 ) {
      # SMURF makemap error SMF__BADFLAT: Bad flatfield data
      orac_err "Map bounds check failed - one or more flatfields failed to process\n";
    } else {
      orac_err "Map bounds check failed\n";
    }
    $_CHECK_MAP_BOUNDS_{NEWBOUNDS} = -1;
  }
  # Store bounds for re-use in subsequent calls to makemap
  if ($task eq "makemap") {
    my %bounds = ( NEWBOUNDS => $_CHECK_MAP_BOUNDS_{NEWBOUNDS} );
    if ($bounds{NEWBOUNDS} == 1) {
      $bounds{LBOUND} = $_CHECK_MAP_BOUNDS_{LBOUND};
      $bounds{UBOUND} = $_CHECK_MAP_BOUNDS_{UBOUND};
    }
    $Frm->uhdr("NEWBOUNDS", \%bounds);
  }
}
