# -*-cperl-*-

=head1 NAME

_CREATE_IMAGE_FRAME_ - create an image from data in current Frame

=head1 SYNOPSIS

_CREATE_IMAGE_FRAME_

_CREATE_IMAGE_FRAME_ SPREAD=LINEAR GENVAR=0

=head1 DESCRIPTION

A primitive to deal with SCAN and DREAM/STARE image creation designed
to be used by non-science recipes, usually in QL mode. Calls other
primitives specific to the current observing mode. However, not all
arguments to those primitives are supported.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GENVAR>

A flag to denote whether to generate variances. Default depends on the
presence of the C<QUICKLOOK> uhdr entry. For SCAN observations the
default is 1 (generate variances); for DREAM/STARE the default is 0.

=item B<METHOD>

The map-making method to be used by C<makemap>. May be C<ITERATE> or
C<REBIN>. Default is C<ITERATE>. If called as part of a quick-look
recipe, B<METHOD> is set to C<QL> and qlmakemap is used.

=item B<SPREAD>

Pixel-spreading scheme for the image-making process. Default is
C<NEAREST>.

=item B<SYSTEM>

Coordinate system to use for image. Default is C<TRACKING>.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item ORAC-DR PRIMITIVES

_MAKE_MOSAIC_FRAME_, _MAKEMAP_FRAME_, _QLMAKEMAP_FRAME_

=back

=head1 NOTES

This primitive only supports the most useful arguments to the other
primitives and should only be used where the default values are good
enough.

=head1 OUTPUT DATA

For SCAN data, the Frame uhdr entries C<SKY_SUBTRACTION> and
C<EXTINCTION> will be defined.

=head1 OUTPUT FILES

See the documentation on the primitives used.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009,2012 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $proceed = 1;

# If the frame contains dark data or this is a focus observation and a
# focus cube has already been created then there is no need to proceed
# with processing these data
$proceed = 0 if ($Frm->tagexists("dark") ||
                 ($Frm->hdr("OBS_TYPE") =~ /focus/i && $Grp->tagexists("focus_cube")));

unless ( $proceed ) {
  # Ensure a no-op for the rest of the recipe
  $Frm->uhdr("EXTINCTION",1);
  $Frm->uhdr("SKY_SUBTRACTION",1);
  $Frm->uhdr("NOCALIB",1);
} else {
  # OK we do not have only dark data - time to make an image

  # Coordinate system
  my $cosys = get_prim_arg($_PRIM_ARGS_, "SYSTEM", "TRACKING");

  # Retrieve the QUICKLOOK parameter
  my $ql = $Frm->uhdr("QUICKLOOK");
  # Catch the case that this is not the QL pipeline in which case
  # QUICKLOOK will be undef
  $ql = 0 unless defined $ql;

  # Create maps in AZEL for QL pointing observations
  $cosys = "AZEL" if ( $ql && $Frm->hdr("OBS_TYPE") =~ /pointing/i );

  # Translated headers are lower case
  if ( $Frm->uhdr("ORAC_OBSERVATION_MODE") =~ /scan/ ) {
    # SCAN data processing

    # Map-making method
    my $method = get_prim_arg($_PRIM_ARGS_, "METHOD", "ITERATE");

    if ( $method eq  "QL" ) {
      _QLMAKEMAP_FRAME_ SYSTEM=$cosys
    } else {
      _MAKEMAP_FRAME_ METHOD=$method SYSTEM=$cosys
    }
    # Set these flags even if no images was created so that the sky
    # subtraction and extinction correction are no-ops
    unless ($Frm->product && $Frm->product eq "newimage") {
      $Frm->uhdr("EXTINCTION",1);
      $Frm->uhdr("SKY_SUBTRACTION",1);
    }
  } else {
    # DREAM/STARE data processing

    # Pixel-spreading scheme (aka method for makemos/wcsmosaic)
    my $pixelspread = get_prim_arg($_PRIM_ARGS_, "SPREAD", "NEAREST");

    # Generate variances? Default to no for QL, yes otherwise.
    my $genvar = ( $ql == 1 ) ? 0 : 1;
    $genvar = get_prim_arg($_PRIM_ARGS_, "GENVAR", $genvar);

    # Note that makemos/wcsmosaic use BILINEAR
    $pixelspread = "BILINEAR" if $pixelspread =~ /linear$/i;

    # Use makemos?
    my $makemos = get_prim_arg($_PRIM_ARGS_, "MAKEMOS", 0);

    # Makemos image combination method - if SIGMA, just use default
    my $makemos_method = get_prim_arg($_PRIM_ARGS_, "MAKEMOS_METHOD", "mean");

    # Create the image
    _MAKE_MOSAIC_FRAME_ METHOD=$pixelspread GENVAR=$genvar MAKEMOS=$makemos MAKEMOS_METHOD=$makemos_method SYSTEM=$cosys
  }
}
