# -*-cperl-*-

=head1 NAME

_FIND_SOURCES_ - find sources in given image

=head1 SYNOPSIS

 _FIND_SOURCES_

 _FIND_SOURCES_ WRITE_CATALOGUE=1

=head1 DESCRIPTION

Find the position of sources in the given image using either
SExtractor of CUPID:FINDCLUMPS. Returns an C<Astro::Catalog> object
and optionally the name of a catalogue written to disk.

This primitive is designed to work on a single image and will fail if
the current Frame object contains more than one file.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<DETECT_SIGMA>

Optional detection threshold in units of standard deviation. Default
is 5.

=item B<GROUP>

Only used if B<IMAGE> is not defined. If true, use the current
Group file. Otherwise, use the current Frame. Default is 0 (false).

=item B<IMAGE>

Name of image file to extract point sources from. No default, but if
left unset image will be determined by the B<GROUP> parameter.

=item B<METHOD>

Source-finding method. May be Extractor/SExtractor or any of the
CUPID:FINDCLUMPS methods. Minimum match is supported. Default is
to use SExtractor.

=item B<MINPIX>

Minimum number of connected pixels defining a source. Default is 9.

=item B<POINT>

Flag to denote whether to return point sources in the
catalogue. Default is 0 (return all sources found).

=item B<WRITE_CATALOGUE>

Flag denote whether to write the catalogue to a disk file. Default is
0 (do not write catalogue).

=item B<SHAPE>

Type of STC-S shape to store in the catalogues. Options are "None",
"Ellipse" or "Polygon". Default is "ellipse". Only used for CUPID
clump finding.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item CUPID

FINDCLUMPS

=item KAPPA

EXTRACTOR (via the C<Starlink::Extractor> perl module)

=item ORAC-DR PRIMITIVES

_GET_CATALOG_NAME_

=back

=head1 NOTES

Requires the following perl modules:

Starlink::Extractor, Astro::Catalog, Astro::WaveBand

See also L<_FIND_POINT_SOURCES_|_FIND_POINT_SOURCES_>.

=head1 OUTPUT DATA

On completion the primitive hash C<%_FIND_SOURCES_> contains
the following keys:

=over 4

=item CATALOGUE

A catalogue in the form of an C<Astro::Coords> object containing
sources (only if Extractor is used).

=item CATALOGUE_NAME

Name of disk file containing catalogue.

=back

The Frame object is not updated.

=head1 OUTPUT FILES

If the B<WRITE_CATALOGUE> flag is set, a catalogue file will be
written to disk. See L<_GET_CATALOGUE_NAME_|_GET_CATALOGUE_NAME_> for
details of the naming scheme.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>,
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2011 Science and Technology Facilities Council.
Copyright (C) 2007-2012 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Set input file - leave undefined if not specified
my $in = get_prim_arg( $_PRIM_ARGS_, "IMAGE", undef );

# If not input file was defined use the current group or frame
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;
unless ( defined $in ) {
  # Determine if the user wants to use the current stacked Grp or Frm
  # image
  if ( $Obj->nfiles == 1 ) {
    $in = $Obj->file;
  } else {
    orac_throw "Error: _FIND_SOURCES_ must be run after images have been combined\n";
  }
}

# Source-finding method
my $method = lc(get_prim_arg( $_PRIM_ARGS_, "METHOD", "extractor"));
$method = $Frm->uhdr("RECPAR_EXTRACT_METHOD")
  if (defined $Frm->uhdr("RECPAR_EXTRACT_METHOD"));
my $cupid = ($method =~ /^extract/) ? 0 : 1;

# STC-S shape
my $shape = get_prim_arg( $_PRIM_ARGS_, "SHAPE", "Ellipse");

# Should the catalogue contain only point sources? Default is no. Not
# used if CUPID is true.
my $point = get_prim_arg( $_PRIM_ARGS_, "POINT", 0 );

# Should the catalogue be written to disk? Default is no.
my $writecat = get_prim_arg( $_PRIM_ARGS_, "WRITE_CATALOGUE", 0 );

# Minimum size of box defining a source
my $minpix = get_prim_arg($_PRIM_ARGS_, "MINPIX", 9 );

# Obtain the detection sigma level.
my $detect = get_prim_arg($_PRIM_ARGS_, "DETECT_SIGMA", 5);

# Deal with all Findclumps methods in this block
if ( $cupid ) {
  my $out = $in . "_clmp";

  my $medianrms = 1;
  unless ($Frm->uhdr("SNRMAP")) {
    # Find the standard deviation by clipping at 5 sigma - this gives
    # something closer to the real image-plane "noise", especially if
    # the input file is a signal-to-noise ratio image
    _FIND_IMAGE_STATISTICS_ IMAGE=$in HISTAT=0 CLIP=5 VERBOSE=0
    $medianrms = $_FIND_IMAGE_STATISTICS_{RESULTS}->{SIGMA};
  }

  orac_print "Finding sources... ";
  my $outcat = ($writecat) ? $in ."_cat" : "!";

  # Retrieve name of a config file if given
  my $fc_param = $Frm->uhdr("RECPAR_FINDCLUMPS_CFG");

  # Write a config file if none specified
  unless ($fc_param) {
    # Some defaults
    my ($allowedge, $fwhmbeam, $maxbad) = (0, 2, 0.05);
    $fc_param = "findclumps$$.param";
    open my $fc_fh, ">", $fc_param;
    if ($method =~ /^clump/) {
      # Clumpfind parameters - TO BE TWEAKED
      print $fc_fh "ClumpFind.AllowEdge=$allowedge\n";
      print $fc_fh "ClumpFind.FwhmBeam=$fwhmbeam\n";
      print $fc_fh "ClumpFind.MaxBad=$maxbad\n";
      print $fc_fh "ClumpFind.Minpix=$minpix\n";
      print $fc_fh "ClumpFind.Tlow=$detect*RMS\n";
    } elsif ($method =~ /^fell/) {
      # Fellwalker parameters
      print $fc_fh "FellWalker.AllowEdge=$allowedge\n";
      print $fc_fh "FellWalker.FwhmBeam=$fwhmbeam\n";
      print $fc_fh "FellWalker.MaxBad=$maxbad\n";
      print $fc_fh "FellWalker.Minpix=$minpix\n";
      print $fc_fh "FellWalker.Noise=2*RMS\n";
      print $fc_fh "FellWalker.FlatSlope=1.0*RMS\n";
      print $fc_fh "FellWalker.MinHeight=$detect*RMS\n";
      print $fc_fh "FellWalker.MinDip=2*RMS\n";
    } else {
      # Other methods yet to be supported...
    }
    close $fc_fh;
  }

  # Call findclumps
  my $params = "in=$in rms=$medianrms config='^$fc_param' method=$method shape=$shape out=$out outcat=$outcat deconv=no logfile=!";
  $Mon{'cupid_mon'}->obeyw("findclumps", "$params");

  # Delete the temp config file if it was created here
  unlink( $fc_param ) unless (defined $Frm->uhdr("RECPAR_FINDCLUMPS_CFG"));

  # Retrieve number of clumps found
  my ($ORAC_STATUS, $nclumps) = $Mon{cupid_mon}->get("findclumps", "nclumps");

  my $thresh = sprintf "%.1f", $detect * $medianrms;
  my $clumpstr = ($nclumps == 1) ? "clump" : "clumps";
  $clumpstr .= (($Frm->uhdr("RECPAR_FINDCLUMPS_CFG"))) ? " using ".($Frm->uhdr("RECPAR_FINDCLUMPS_CFG")) : " above a threshold of $thresh sigma";
  orac_print "\n";
  orac_print "Found $nclumps $clumpstr\n", "green";

  # Store catalogue name
  $_FIND_SOURCES_{CATALOGUE_NAME} = $outcat if ($outcat ne "!");

} else {
  # Using SExtractor

  # Set ellipticity criteria for adding to source catalogue
  my $maxel;
  if ($point) {
    $maxel = 0.25; # Point-source definition
  } else {
    $maxel = 5.0; # Weed out obviously dodgy sources
  }

  # Run SExtractor
  use Starlink::Extractor;
  use Astro::WaveBand;
  use Astro::Catalog;
  my $conf_file = $Cal->find_file("extractor_catalogue.sex");
  my $extractor = new Starlink::Extractor( config => $conf_file );
  # Set the detection threshold
  $extractor->detect_thresh( $detect );
  # And the analysis threshold
  $extractor->analysis_thresh( 3.0 );
  $extractor->verbose_type('NORMAL');

  # Note that filter is a mandatory argument so create a dummy one
  my $extracted_catalogue = $extractor->extract( frame => $in,
						 filter => new Astro::WaveBand( Filter => $Frm->uhdr("ORAC_FILTER") ) );

  # Filter output catalogue to identify point sources
  my $filtered_catalogue = new Astro::Catalog( origin => 'ORAC-DR primitive _FIND_SOURCES_');
  my $source;
  while ( $extracted_catalogue->sizeof > 0 ) {
    # Pop current source (returns an Astro::Catalog::Star object)
    $source = $extracted_catalogue->popstar;

    # Add suitable sources to output catalogue: note the `numbers'
    # returned by these methods are Number::Uncertainty objects, so call
    # the value method to obtain the actual value.
    if ( ( $source->morphology->area->value >= $minpix ) &&
	 ( $source->morphology->ellipticity->value < $maxel ) ) {
      $filtered_catalogue->pushstar( $source ) ;
    }
  }

  if ( $filtered_catalogue->sizeof == 0 ) {
    orac_warn "No sources found in current image\n";
    if ( $writecat ) {
      orac_warn "Will not write catalogue to disk\n";
      $writecat = 0;
    }
  }

  # Store the resultant catalogue, even if it's empty
  $_FIND_SOURCES_{CATALOGUE} = $filtered_catalogue;

  # Write to disk if desired.
  if ( $writecat ) {
    _GET_CATALOGUE_NAME_
    my $catalogue_name = $_GET_CATALOGUE_NAME_{NAME};
    my $cat_file = File::Spec->catfile($ENV{'ORAC_DATA_OUT'}, $catalogue_name);
    my $status = $filtered_catalogue->write_catalog( file => $cat_file, format => 'Cluster');
    $_FIND_SOURCES_{CATALOGUE_NAME} = $catalogue_name;
    orac_print "Wrote catalogue to $cat_file.\n";
  } else {
    $_FIND_SOURCES_{CATALOGUE_NAME} = undef;
  }
}
