# -*-cperl-*-

=head1 NAME

_CALCULATE_EFFECTIVE_NEP_ - derive an effecitve NEP for an array

=head1 SYNOPSIS

 _CALCULATE_EFFECTIVE_NEP_ IN=$nepfile

=head1 DESCRIPTION

This primitive calculates the effective NEP given an image containing
NEP values. The effective NEP is defined as the square-root of the
reciprocal of the sum of the reciprocal squares of the NEP values:

NEP_eff = sqrt( 1 / sum_i (1/NEFD_i)**2  )

where NEP_i is the NEP for bolometer i and the sum is over all
bolometers.

=head1 ARGUMENTS

The following argument is supported:

=over 4

=item B<IN>

Name of input NEP file. No default. Note this must be the name of the
NEP file itself, not the top-level container NDF.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

MATHS

=item ORAC-DR PRIMITIVES

_FIND_IMAGE_STATISTICS_

=back

=head1 OUTPUT DATA

The primitive hash, C<%_CALCULATE_EFFECTIVE_NEP_> contains a single
key on exit called C<EFFNEP> which contains the value of the effective
NEP derived in this primitive. The value is C<undef> if the
calculation failed.

=head1 OUTPUT FILES

None.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $nepfile = get_prim_arg($_PRIM_ARGS_, "IN", undef);
orac_err "_CALCULATE_EFFECTIVE_NEP_ requires in input file"
  unless defined $nepfile;

# First step - take the reciprocal of the NEP image and square it
my $out = new ORAC::TempFile;
my $outfile = $out->file;
my $args = "ia=$nepfile exp=(1./ia**2) out=$outfile";
$Mon{kappa_mon}->obeyw("maths","$args");

# Then calculate sum of the pixels in that image
_FIND_IMAGE_STATISTICS_ HISTAT=0 IMAGE=$outfile VERBOSE=0
my %results = %{ $_FIND_IMAGE_STATISTICS_{RESULTS} };

my $effnep = ( $results{SUM} != 0 ) ? sqrt( 1.0 / $results{SUM} ) : undef;

$_CALCULATE_EFFECTIVE_NEP_{EFFNEP} = $effnep;
