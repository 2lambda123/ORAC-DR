# -*-cperl-*-

=head1 NAME

_FIT_SOURCE_ - Fit a 2-D profile to a source

=head1 SYNOPSIS

 _FIT_SOURCE_ IMAGE=$Frm->file

 _FIT_SOURCE_ IMAGE=$image XYPOS=\@xypos METHOD=PSF GAUSSIAN=0

=head1 DESCRIPTION

This primitive carries out a fit to a source at a given position using
either KAPPA C<BEAMFIT> or C<PSF>. The user can also specify the size
of the fitting area and whether or not to force a Gaussian fit.

If C<BEAMFIT> has been specified, the background is fixed to be zero
if the source is a known calibrator.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<BOX>

Size of square area in pixels in which to carry out the fit. Default
depends on B<METHOD>. Must be at least 9 for C<BEAMFIT> or 6 for
C<PSF>.

=item B<FIXAMP>

Flag to denote whether or not the amplitude of the fit should be fixed
to be the peak value. Only used for C<BEAMFIT>. Default is 0 (do not
fix the amplitude).

=item B<GAUSSIAN>

If true (non-zero), then the fit is forced to be a gaussian. Default
is 1 (true).

=item B<GROUP>

If true, the Group is queried rather than the Frame. Default is false
(0).

=item B<IMAGE>

Name of image to fit source. Default depends on B<GROUP> above. Must be
a file name, not an NDF section.

=item B<METHOD>

Method for fitting the source. Valid options are C<BEAMFIT> or
C<PSF>. Default is C<BEAMFIT>. In practice, anything other than C<PSF>
will implies C<BEAMFIT>.

=item B<MODEL>

A flag to denote whether the primitive should return the results of
the fit as a new NDF. Default is 0 (no).

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (print messages).

=item B<XYPOS>

An array reference containing the formatted X, Y coordinates in the
chosen frame. Default position is (0,0), only useful for images using
offset coordinate systems.

=back

=head1 EXTERNAL TASKS

The following external tasks are used.

=over 4

=item KAPPA

BEAMFIT, MATHS, NDFTRACE, PSF

=item ORAC-DR PRIMITIVES

_FIND_IMAGE_STATISTICS_

=back

=head1 NOTES

Using coordinate frames other than AzEl may cause the fit orientation
to rotate during the course of an observation.

PSF does not return uncertainties so the results should be examined
carefully. The RMS of the fit is calculated by this primitive and
returned in the primitive hash.

=head1 OUTPUT DATA

The following keys are returned in the primitive hash if the fit was
successful.

=over 4

=item AMPLITUDE

Array reference with the peak signal and its uncertainty in the
current units.

=item AXISR

Axial ratio of the fit.

=item FIT

Contains 1 on success, 0 on failure. Will be the only entry defined on
failure.

=item MAJFWHM

Array reference with the FWHM of the major axis and its uncertainty.

=item MINFWHM

Array reference with the FWHM of the minor axis and its uncertainty.

=item MODELFIT

Name of the file containing the results of the fit (only if the
B<MODEL> argument is true).

=item ORIENT

Array reference with the fit orientation and its uncertainty, in
degrees east of north in current coordinate frame

=item POSITION

The X,Y position at which the fit is centred (array reference).

=item RMS

The RMS of the fit, in the current units.

=item SNR

The signal-to-noise ratio of the fitted peak. Undef if the variance is
not defined.

=item TOTALFLUX

Array reference with the total area under fit and its uncertainty, in
units of AMP*FWHM^2.

=back

=head1 OUTPUT FILES

Will create a file with suffix C<_modelfit> if the B<MODEL> argument
is true. However, it is added to the intermediates array and should be
deleted at the end of the recipe.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2011,2013 the University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

use Astro::PAL qw/ :constants /;
use POSIX qw/ ceil /;

# Input image - default to current Frm file
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;
my $in = get_prim_arg($_PRIM_ARGS_, "IMAGE", $Obj->file);

# Should we be verbose? (Default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Return fitted model?
my $modelfit = get_prim_arg($_PRIM_ARGS_, "MODEL", 0);
if ($modelfit) {
  $modelfit = $Frm->inout("_modelfit");
  $Frm->push_intermediates($modelfit);
} else {
  $modelfit = "!";
}

# Which method is being used?
my $fit_method = lc(get_prim_arg($_PRIM_ARGS_, "METHOD", "beamfit"));
my $use_beamfit = ($fit_method eq "beamfit") ? 1 : 0;

# Should beamfit attempt a two-component fit? Assume yes if the object
# is a calibrator
my $twocpt = ($use_beamfit && $Cal->iscalsource($Frm->hdr("OBJECT")) &&
	      $Frm->hdr("OBJECT") !~ /^jupiter/i) ? 1 : 0;
# Override with FIT_GAUSSIAN recipe parameter. A value of 0 means that
# beamfit has free rein with the falloff parameter, but it's unlikely
# that a two-component non-gaussian fit will be carried out. Therefore
# only carry out a two-component gaussian fit if explicitly requested.
if (defined $Frm->uhdr("RECPAR_FIT_GAUSSIAN")) {
  $twocpt = ($Frm->uhdr("RECPAR_FIT_GAUSSIAN") == 2) ? 1 : 0;
}

# But always fit only a single component for matched-filtered images
$twocpt = 0
  if (defined $Obj->product && $Obj->product eq "Matched-filtered");

# Check for S/N > minimum
if ($twocpt) {
  use constant MINSNR => 100;
  _FIND_IMAGE_STATISTICS_ IMAGE=$in COMP=data VERBOSE=0
  my $results = $_FIND_IMAGE_STATISTICS_{RESULTS};
  my $peak = $results->{MAX};
  _FIND_IMAGE_STATISTICS_ IMAGE=$in COMP=err VERBOSE=0
  $results = $_FIND_IMAGE_STATISTICS_{RESULTS};
  my $noise = $results->{MEDIAN};
  my $snr = ($noise > 0) ? $peak/$noise : 0;
  $twocpt = 0 if ($snr < MINSNR);
}

# Sanitise parameters
if ($use_beamfit) {
  $fit_method = "beamfit";
} else {
  $fit_method = "psf";
}

# Size of the region used to carry out the fit. For beamfit, box
# corresponds directly to the FITAREA parameter, while for psf divide
# by 2 (and round up) to get the ISIZE parameter. Define the possible
# default values.
my $box_default;
if ($use_beamfit) {
  $box_default = "!";
} else {
  $box_default = 15;
}
my $box = get_prim_arg($_PRIM_ARGS_, "BOX", $box_default);

# Check that we have enough good values in the image before attempting
# to fit the source
my $minpix;
_FIND_IMAGE_STATISTICS_ IMAGE=$in VERBOSE=0
my $numgood = $_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMGOOD};
my $numpix = $_FIND_IMAGE_STATISTICS_{RESULTS}->{NUMPIX};
if ( $box ne "!") {
  # Check for minimum values
  if ($use_beamfit) {
    $box = 9 if ( $box < 9 );
  } else {
    $box = 3 if ( $box < 3 );
  }
  # make sure it is an integer (otherwise sections become difficult)
  $box = ceil($box);

  # Define the minimum number of useful pixels as ($box+1)^2
  $minpix = ($box+1)*($box+1);
  # Make sure it lies within the bounds of the image though!
  $minpix = $numpix if ( $minpix > $numpix );
} else {
  $minpix = $numgood;
}

# We now attempt to fit the source
if ( $numgood >= $minpix ) {

  # Are we forcing a gaussian fit?
  my $gaussian = get_prim_arg($_PRIM_ARGS_, "GAUSSIAN", 1);

  # Force gaussian to be true for two-component fits to calibrators
  $gaussian = 1 if ($twocpt && $Cal->iscalsource($Obj->hdr("OBJECT")));

  # Convert flag to logical
  $gaussian = ( $gaussian ) ? "true" : "false";

  # Is the amplitude to be fixed at the peak value? Override with
  # recipe parameter
  my $fixamp = get_prim_arg($_PRIM_ARGS_, "FIXAMP", 0);
  $fixamp = $Frm->uhdr("RECPAR_FIT_FIXAMP")
    if (defined $Frm->uhdr("RECPAR_FIT_FIXAMP"));
  if ($fixamp) {
    # Note this will probably go horribly wrong if the image includes
    # crappy values around the edge of the map
    $fixamp = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MAX};
  }

  # Introduce ourselves...
  orac_print "Fitting source with $fit_method... " if $verbose;

  # Estimated source position - default to 0,0 (inadvisable for
  # non-offset coordinate systems...)
  my $xypos = get_prim_arg($_PRIM_ARGS_, "XYPOS", [0,0]);

  # Some temp files required by PSF
  my $coordfile = new ORAC::TempFile;
  my $cofile = $coordfile->file;
  my $psf = new ORAC::TempFile;

  # Set up arguments and parameters to retrieve
  my @params;
  my $args = "gauss=$gaussian";
  if ($use_beamfit) {
    # Beamfit
    my $pos = '"'.$xypos->[0].", ".$xypos->[1].'"';
    # A fixed background of 0 is used for calibrators
    my $fixback = ($Cal->iscalsource($Frm->uhdr("ORAC_OBJECT"))) ? 0 : "!";
    $fixback = $Frm->uhdr("RECPAR_FIT_FIXBACK")
      if (defined $Frm->uhdr("RECPAR_FIT_FIXBACK"));
    my $var = "false";
    # Make use of the $psf temp file to store the residuals
    my $resid = ($modelfit ne "!") ? $psf : "!";
    $args .= " ndf=$in mode=interface pos=$pos variance=$var fitarea=$box fixback=$fixback resid=$resid";
    $args .= " fixamp=$fixamp" if ($fixamp);
    @params = qw/ majfwhm minfwhm orient amp centre sum rms gamma back/;

    # Extra parameters for two-component fits
    if ($twocpt) {
      my $beam = $Cal->beam;
      my $fwhm = "'".$beam->{FWHM1} .",". $beam->{FWHM2}."'";
      my $ampratio = $beam->{AMP2} / $beam->{AMP1};
      $args .= " beams=2 pos2=$pos ampratio=$ampratio fwhm=$fwhm fixpos circular nopolar nofixfwhm";
    }
  } else {
    # PSF
    my $isize = ($box %2 == 0) ? $box/2 : ($box/2) + 1;
    print { $coordfile->handle } $xypos->[0]." ".$xypos->[1]. "\n";
    $coordfile->handle->close;
    $args .= " norm=no in=$in incat=! device=! isize=$isize cofile=$cofile out=$psf";
    @params = qw/ fwhm axisr orient amp1 xcen ycen total gamma /;
  }

  # Run the fitting task
  my $METHOD_STATUS = $Mon{kappa_mon}->obeyw("$fit_method","$args");
  my $ORAC_STATUS;

  # Check return status for errors
  if ( $METHOD_STATUS == ORAC__OK ) {
    # Retrieve fit parameters
    ($ORAC_STATUS, my %fitresults) = $Mon{kappa_mon}->mget("$fit_method",@params);

    # Results to store in the primitive hash
    my (@majfwhm, @minfwhm, @amp, $bg, @orient, @gamma, @total, @posn, $axisr, $rms);

    # Format and store the results
    if ($use_beamfit) {
      # Beamfit
      # Read the FWHM and convert to arcsec
      @majfwhm = map {$_ * DR2AS} @{$fitresults{majfwhm}};
      @minfwhm = map {$_ * DR2AS} @{$fitresults{minfwhm}};

      orac_err "Beamfit appeared to be successful but no FWHM was derived"
	if (!defined $minfwhm[0] || !defined $majfwhm[0]);

      # Set axisr to a non-physical value if no fwhm could be obtained
      $axisr = ( $minfwhm[0] > 0 ) ? $majfwhm[0] / $minfwhm[0] : -1;

      # Amplitude, RMS and orientation with error
      @amp = @{$fitresults{amp}};
      $amp[1] = 0.0 if ($fixamp);
      @orient = @{$fitresults{orient}};
      @gamma = @{$fitresults{gamma}};
      @posn = split(/\s+/, $fitresults{centre}->[0], 2);
      $rms = $fitresults{rms};
      $bg = $fitresults{back}->[0];

      # Estimate error in total flux assuming uncertainties add in
      # quadrature. Use a little coderef to catch zeroes.
      my $fracerr = sub {
	my @data = @_;
	return 0 unless (@data == 2);
	return ($data[0] == 0) ? 0 : ($data[1]*$data[1]/($data[0]*$data[0]));
      };

      my $fluxerr = $fitresults{sum} * ( $fracerr->(@amp) +
					 $fracerr->(@majfwhm) +
					 $fracerr->(@minfwhm) );
      @total = ($fitresults{sum}, $fluxerr);

      # Calculate model fit from residuals if requested
      if ($modelfit ne "!") {
	$Mon{kappa_mon}->obeyw("sub","in1=$in in2=$psf out=$modelfit");
      }

    } else {
      # PSF - doesn't return errors so assume they're zero
      @amp = ($fitresults{amp1}, 0);
      @orient = ($fitresults{orient},0);
      @gamma = ($fitresults{gamma}, 0);
      @posn = ($fitresults{xcen}, $fitresults{ycen});
      $axisr = $fitresults{axisr};
      # PSF returns FWHM in arcsec
      @minfwhm = ($fitresults{fwhm}, 0);
      @majfwhm = ($axisr * $fitresults{fwhm}, 0);
      @total = ($fitresults{total}, 0);
      $bg = 0.0;

      # Store model fit if requested
      if ($modelfit ne "!") {
	$Mon{ndfpack_mon}->obeyw("ndfcopy","in=$psf out=$modelfit");
      }

      # Calculate RMS of PSF fit
      my $subsq = new ORAC::TempFile;
      my $exp = "(ia-ib)*(ia-ib)";
      my $args = "ia=$in ib=$psf out=$subsq exp=$exp";
      $Mon{kappa_mon}->obeyw("maths","$args");
      _FIND_IMAGE_STATISTICS_ IMAGE=$subsq VERBOSE=0
      $rms = sqrt($_FIND_IMAGE_STATISTICS_{RESULTS}->{MEAN});
    }
    # Find the peak S/N - just grab the value of the error component
    # at the fitted position
    my $cen = "$posn[0],$posn[1]";
    $Mon{kappa_mon}->obeyw("look","ndf=$in comp=err centre='$cen' size=1");
    my ($ORAC_STATUS, $err) = $Mon{kappa_mon}->get("look","value");
    # If the variance is bad at this location, take the average in a
    # 3x3 box
    if ($err == &NDF::VAL__BADD()) {
      my $section = $in."($posn[0]~3,$posn[1]~3)";
      $Mon{kappa_mon}->obeyw("stats","ndf=$section comp=err");
      ($ORAC_STATUS, $err) = $Mon{kappa_mon}->get("stats","mean");
      if ($err == 0) {
	# Check for good *map* values
	$Mon{kappa_mon}->obeyw("stats","ndf=$section comp=data");
	($ORAC_STATUS, my $mean) = $Mon{kappa_mon}->get("stats","mean");
	if ($mean > 0) {
	  orac_warn "No good variance in central 3x3 pixels - checking 7x7\n";
	  $section = $in."($posn[0]~7,$posn[1]~7)";
	  $Mon{kappa_mon}->obeyw("stats","ndf=$section comp=err");
	  ($ORAC_STATUS, $err) = $Mon{kappa_mon}->get("stats","mean");
	} else {
	  # Now, if the mean is 0 then the map data at the peak are
	  # bad - is this fatal?
	  orac_warn "Map has bad values at fitted peak - fit is likely to be poor\n";
	}
      }
    }
    # SNR is undef if variance is bad
    my $snr = $amp[0] / $err if ($err != 0 );
    # And store the noise as the uncertainty in the amplitude if no
    # error exists
    $amp[1] = $err if ($err && !$amp[1]);

    # Now check ratio of fitted amplitude to peak signal. Determine
    # the peak signal within the area defined by half the fit box
    # since we should be looking near the fitted peak
    # Have to take the fitted background into account because the amplitude
    # can be above a negative background
    my $section = $in."($posn[0]~$box,$posn[1]~$box)";
    $Mon{kappa_mon}->obeyw("stats","ndf=$section");
    ($ORAC_STATUS, my $peaksignal) = $Mon{kappa_mon}->get("stats","maximum");
    my $peakfit = $amp[0] + $bg;
    my $peak_ratio = 100*abs($peakfit / $peaksignal - 1);
    my $peak_err = 100*abs($err / $peaksignal);
    my $peak_ratio_snr = ($peak_err != 0) ? $peak_ratio / $peak_err : 1;
    if ($peak_ratio > 10) {
      orac_warn "Fitted peak differs from map peak by ".(sprintf "%.1f", $peak_ratio)." % (threshold is 10 %)\n";
    }
    if ($peak_ratio_snr > 3 && defined $snr && $snr < 30) {
      orac_warn "Fitted peak differs from map peak by ".(sprintf "%.1f", $peak_ratio_snr)."-sigma (threshold is 3-sigma)\n";
    }

    # Store results in primitive hash
    $_PRIM_ARGS_->{AMPLITUDE} = \@amp;
    $_PRIM_ARGS_->{AXISR}     = $axisr;
    $_PRIM_ARGS_->{MAJFWHM}   = \@majfwhm;
    $_PRIM_ARGS_->{MINFWHM}   = \@minfwhm;
    $_PRIM_ARGS_->{ORIENT}    = \@orient;
    $_PRIM_ARGS_->{POSITION}  = \@posn;
    $_PRIM_ARGS_->{GAMMA}     = \@gamma;
    $_PRIM_ARGS_->{TOTALFLUX} = \@total;
    $_PRIM_ARGS_->{RMS}       = $rms;
    $_PRIM_ARGS_->{SNR}       = $snr;

    # Tell user of success if requested
    if ($verbose) {
      $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$in");
      ($ORAC_STATUS, my $units) = $Mon{ndfpack_mon}->get("ndftrace","units");
      $units = "unknown" if (!defined $units);
      my $fwhm1 = sprintf "%5.2f", $minfwhm[0];
      my $orient = sprintf "%5.2f", $orient[0];
      my $fwhm2 = sprintf "%5.2f", $axisr*$fwhm1;
      my $amp1 = sprintf "%5.2e", $amp[0];
      my $flux1 = sprintf "%5.2e", $total[0];
      my $gamma = sprintf "%5.2f", $gamma[0];
      $snr = ($snr) ? sprintf "%5.2f", $snr : "undef";

      # Report correct units for total fluxes if data are calibrated
      # in (say) mJy/beam, and correct the reported total flux for the
      # beam area in square arcsec.
      my $totalunits;
      if ($units =~ /beam/i) {
	$totalunits = $units;
	$totalunits =~ s/\/beam//;
	$flux1 = sprintf "%5.2e", ($total[0] / $Cal->beamarea);
      } else {
	$totalunits = $units . " arcsec**2";
      }
      orac_print "Successful fit:\n"
	."  FWHM = $fwhm1 x $fwhm2 arcsec**2, ORIENT = $orient deg, GAMMA = $gamma\n"
	."  AMP  = $amp1 $units (S/N = $snr), TOTAL FLUX = $flux1 ($totalunits)\n";
    }
    $_PRIM_ARGS_->{FIT} = 1;
    $_PRIM_ARGS_->{MODELFIT} = $modelfit;
  } elsif ( $METHOD_STATUS == 234127368 ) {
    # Beamfit error
    # PDA error status: PDA__FICMX: Failed to invert the curvature
    # matrix to derive fit errors
    orac_warn "Fit with $fit_method failed: unable to determine fit errors\n";
    $_PRIM_ARGS_->{FIT} = 0;
  } elsif ( $METHOD_STATUS == 233209874 ) {
    # Beamfit error
    # PSX error status: PSX__NOALL: Null pointer returned on memory
    # allocation
    orac_warn "Fit with $fit_method failed: unable to allocate memory\n";
    $_PRIM_ARGS_->{FIT} = 0;
  } elsif ( $METHOD_STATUS == 257327138 ) {
    # Beamfit error
    # KAP__LMFOJ: Levenberg-Marquardt fit function orthogonal Jacobian's columns
    orac_warn "Fit with $fit_method failed: fitarea probably too small\n";
    $_PRIM_ARGS_->{FIT} = 0;
  } elsif ( $METHOD_STATUS == 257327122 ) {
    # PSF error
    # KAP__PSFSN: Gaussian fit normal-equation matrix is singular
    orac_warn "Unable to fit a PSF profile in the current image\n";
    $_PRIM_ARGS_->{FIT} = 0;
  } elsif ( $METHOD_STATUS == 257327130 ) {
    # PSF error
    # KAP__PSFNO: PSF fit failed because no star(s) were found at the
    # supplied position(s)
    orac_warn "No source found at supplied position in the current image\n";
    $_PRIM_ARGS_->{FIT} = 0;
  } else {
    orac_err "Fit with $fit_method failed in an unexpected manner\n";
    $_PRIM_ARGS_->{FIT} = 0;
  }

} else {
  orac_warn "Insufficient number of good values to fit a profile in the current image\n";
  $_PRIM_ARGS_->{FIT} = 0;
}
