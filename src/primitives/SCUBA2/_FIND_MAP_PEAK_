# -*-cperl-*-

=head1 NAME

_FIND_MAP_PEAK_ - Determine the peak signal of the brightest source

=head1 SYNOPSIS

 _FIND_MAP_PEAK_ IMAGE=$image

 _FIND_MAP_PEAK_ GROUP=1 INITPOS=\@radec

=head1 DESCRIPTION

Finds the location and value of the brightest source in the given
image. The user can optionally provide an initial position which is
used to narrow down the search to a 2x2 arcmin^2 region centred on
that position. If desired, the best-fit source position can be derived
by fitting a 2-d profile. The peak value is then the maximum from this
fit.

The primitive works by first creating a signal-to-noise image. If the
peak S/N exceeds 5, the primitive goes on to apply a matched filter
and the peak value and position are derived from the filtered image.

The primitive returns C<undef> values if no 5-sigma or greater peak
could be located.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<FITBOX>

Size of area in pixels within which to constrain the fit. Default is
25.

=item B<FITPEAK>

A flag to denote whether the peak position should be refined by fitting
a 2-d function. Default is 1 (yes).

=item B<GAUSSIAN>

A flag to indicate whether the fit is forced to be gaussian. The
default is 0 (no).

=item B<GROUP>

If true, the Group file is used rather than the Frame file. Default is
false (0).

=item B<IMAGE>

Name of input image. Default is to use the file obtained from Grp or
Frm depending on the value of B<GROUP>.

=item B<INITPOS>

Optional reference to an array containing the X, Y coordinate to be
used as the initial estimate of the peak position. If not given, the
entire image will be searched for the brightest peak.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (be verbose).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

NDFCOPY, NDFTRACE, STATS, THRESH

=item ORAC-DR PRIMITIVES:

_APPLY_MATCHED_FILTER_, _ASSESS_BEAM_FIT_, _FIT_SOURCE_

=back

=head1 NOTES

The fit undergoes an assessment for C<point-like> properties and
returns an error if the fit looks poor.

=head1 OUTPUT DATA

On completion, the primitive hash C<%_FIND_MAP_PEAK_>
contains the following keys:

=over 4

=item PEAK

The peak signal. Corresponds to the peak signal at the peak
signal-to-noise position if the fit failed or no fit was
specified. Will be undef if no significant maximum was found.

=item PEAKERR

Uncertainty in the peak signal. If the fit failed or no fit was
specified then this is the value of the error component of the NDF at
the position of the peak signal. Will be undef if no significant
maximum was found.

=item POSITION

The position of the peak. Reference to an array of x, y coordinates in
the current coordinate frame (which will be empty if the calculation
failed).

=back

The Frame object is not updated.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

Copyright (C) 2009-2011 University of British Columbia.
Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 2000 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should I be verbose (default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Which object?
my $Obj = ($_PRIM_ARGS_->{GROUP} ? $Grp : $Frm );

# Input file
my $in = get_prim_arg($_PRIM_ARGS_, "IMAGE", $Obj->file);
# Image to use for finding the peak value and position
my $image = $in;

# Fit the peak position - if false then the peak position and signal
# from KAPPA stats will be used
my $fitpeak = get_prim_arg($_PRIM_ARGS_, "FITPEAK", 1);

# Initial position
my $initpos = get_prim_arg($_PRIM_ARGS_, "INITPOS", undef);

# If an initial position is given, copy out a 2x2 arcmin^2 box centred
# on that position
if ($initpos) {
  $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$in");
  my ($ORAC_STATUS, @dims) = $Mon{ndfpack_mon}->get("ndftrace","dims");
  ($ORAC_STATUS, my @pixscale) = $Mon{ndfpack_mon}->get("ndftrace","fpixscale");
  my $pixscale = 0.5*($pixscale[0] + $pixscale[1]);

  # Use a 2-arcmin image for speed
  my $minmapsize = 120.0;
  my $region = int($minmapsize / $pixscale);
  # Copy out a box centred on the source if the map is larger than the
  # minimum
  if ($region < $dims[0] && $region < $dims[1]) {
    my ($x, $y) = ($initpos->[0], $initpos->[1]);
    my $infile = $in. "($x~$region,$y~$region,)";
    $image = ORAC::TempFile->new;
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$infile out=$image");
  }
}

# Now find the position of the brightest peak in the map
my $image_snr = new ORAC::TempFile;
# Make snr image
$Mon{kappa_mon}->obeyw("makesnr","minvar=0 in=$image out=$image_snr");

# Check that SNR image has >5 sigma peaks
$Mon{kappa_mon}->obeyw("stats","ndf=$image_snr");
my ($ORAC_STATUS, $peaksn) = $Mon{kappa_mon}->get("stats","maximum");
my ($peakval, $peakerr, @xy, $peak, $dpeak, $posn);
if ( $peaksn > 5 ) {
  my $image_mf = new ORAC::TempFile;
  _APPLY_MATCHED_FILTER_ IN=$image OUT=$image_mf STORE=0 VERBOSE=0

  # Find position of max value
  $Mon{kappa_mon}->obeyw("stats","ndf=$image_mf");
  ($ORAC_STATUS, my $pkpos) = $Mon{kappa_mon}->get("stats", "maxwcs");
  # Split into coordinates
  @xy = split(/\,\s+/, $pkpos);

  # Now find the value in the original image at the maximum
  $in = $image."($xy[0]~1,$xy[1]~1,)";
  $Mon{kappa_mon}->obeyw("stats","ndf=$in");
  ($ORAC_STATUS, $peakval) = $Mon{kappa_mon}->get("stats", "maximum");
  $Mon{kappa_mon}->obeyw("stats","ndf=$in comp=err");
  ($ORAC_STATUS, $peakerr) = $Mon{kappa_mon}->get("stats", "maximum");
} else {
  orac_warn "Image $in has no significant maximum\n";
  @xy = ();
  $fitpeak = 0;
}

# Fit the peak position if desired
if ($fitpeak) {
  # Are we forcing a gaussian fit?
  my $gaussian = get_prim_arg($_PRIM_ARGS_, "GAUSSIAN", 0);

  # Size of region to fit
  my $fitbox = get_prim_arg($_PRIM_ARGS_, "FITBOX", 25);

  # Fit a 2-d gaussian to the source to determine the peak signal
  _FIT_SOURCE_ IMAGE=$image XYPOS=\@xy BOX=$fitbox VERBOSE=0 GAUSSIAN=$gaussian

  # Proceed if the fit was successful
  my $beamfit = 0;
  if ( $_FIT_SOURCE_{FIT} ) {
    # Although it's for assessing beam fits, we can use it here to
    # ensure that the fit is reasonable
    my $amp = $_FIT_SOURCE_{AMPLITUDE};
    my $major = $_FIT_SOURCE_{MAJFWHM};
    my $minor = $_FIT_SOURCE_{MINFWHM};
    my $axisr = $_FIT_SOURCE_{AXISR};
    _ASSESS_BEAM_FIT_ AMP=$amp MAJOR=$major MINOR=$minor AXISR=$axisr
    $beamfit = $_ASSESS_BEAM_FIT_{BEAM};
  }
  # If the fit looks good, retrieve fit parameters, otherwise use the
  # maximum derived above
  if ($beamfit) {
    my $amp = $_FIT_SOURCE_{AMPLITUDE};
    $peak = $amp->[0];
    # Use the uncertainty in the fit - could use the RMS to get a
    # better sense of the overall uncertainty but in practice it's
    # only a little bit higher than this
    $dpeak = $amp->[1];
    $posn = $_FIT_SOURCE_{POSITION};
    orac_print " Fitted peak at $posn->[0], $posn->[1]\n" if ($verbose);
    my %fitpars = %_FIT_SOURCE_;
    $_PRIM_ARGS_->{BEAM} = \%fitpars;
  } else {
    orac_warn "Fit to source failed - using peak position instead\n";
    $peak = $peakval;
    $dpeak = $peakerr;
    $posn = \@xy;
    orac_print " Found peak at $posn->[0], $posn->[1]\n" if ($verbose);
  }
} else {
  $peak = $peakval;
  $dpeak = $peakerr;
  $posn = \@xy;
}

# Store the result in the hash
$_PRIM_ARGS_->{PEAK} = $peak;
$_PRIM_ARGS_->{PEAKERR} = $dpeak;
$_PRIM_ARGS_->{POSITION} = $posn;

