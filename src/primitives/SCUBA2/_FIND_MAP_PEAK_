# -*-perl-*-

=head1 NAME

_FIND_MAP_PEAK_ - Determine the peak signal of a point source

=head1 SYNOPSIS

=head1 DESCRIPTION

Finds the peak signal of a point source located at the map origin.
No attempt is made to search for sources not located at approximately
the map centre.

The peak signal is determined by fitting a 2-D Gaussian function.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

If true, the group file is used rather than the frame file.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is verbose (true).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

STATS

=item ORAC-DR PRIMITIVES:

_CENTROID_IMAGE_, _FIND_BEAM_SIZE_

=back

=head1 NOTES

=head1 OUTPUT DATA

On completion, the primitive hash C<%_FIND_MAP_PEAK_>
contains the following keys:

=over 4

=item PEAK

The peak signal. Contains C<undef> if the calculation did not
complete sucessfully.

=item POSITION

The position of the peak. Reference to an array of x, y coordinates in
the current coordinate frame.

=back

The Frame object is not updated.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

Copyright (C) 2009 University of British Columbia.
Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 2000 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should I be verbose (default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

my $Obj = ($_PRIM_ARGS_->{GROUP} ? $Grp : $Frm );
my $in = $Obj->file;

# Peak position and reference to array with X,Y position
my ($peak, $posn);

# Determine centroid position
_CENTROID_IMAGE_ GROUP=$_PRIM_ARGS_->{GROUP}
my @xy = (defined $_CENTROID_IMAGE_{RESULTS}->[0] &&
	  defined $_CENTROID_IMAGE_{RESULTS}->[1]) ?
  @{ $_CENTROID_IMAGE_{RESULTS} } : ();

if ( defined $xy[0] && defined $xy[1] ) {

# Fit a 2-d gaussian to the source to determine the peak signal
_FIT_BEAM_ IMAGE=$in XYPOS=\@xy

# Retrieve fit parameters
my $amp = $_FIT_BEAM_{AMPLITUDE};
$posn = $_FIT_BEAM_{POSITION};

# The amplitude should be non-zero - in principle it should always be
# positive but you never know...
my $goodfit = ($amp != 0 ) ? 1 : 0;

# Store the amplitude if the fit to the source was good
if ( $goodfit ) {
  $peak = $amp->[0];
  my %fitpars = %_FIT_BEAM_;
  $_PRIM_ARGS_->{BEAM} = \%fitpars;
} else {
  # If not, use peak from stats
  orac_warn "Poor fit to beam - using peak at centroid position for $in instead.\n";
  # Note the position is in a colon-delimited format, so specify a
  # 1-pixel search region to ensure the NDF section is interpreted
  # correctly.
  my $pos = $xy[0]."~1,".$xy[1]."~1";
  $Mon{kappa_mon}->obeyw("stats","NDF=$in($pos)");
  (my $ORAC_STATUS, $peak) = $Mon{kappa_mon}->get("stats","maximum");
  $posn = \@xy;
}

orac_print "Calculated peak signal from map of $peak\n" if $verbose;

} else {
  orac_warn "Unable to locate map peak\n";

  # Return undef
  $peak = undef;
  $posn = [];

}

# Store the result in the hash
$_PRIM_ARGS_->{PEAK} = $peak;
$_PRIM_ARGS_->{POSITION} = $posn;

