# -*-cperl-*-

=head1 NAME

_FIND_MAP_PEAK_ - Determine the peak signal of a point source

=head1 SYNOPSIS

=head1 DESCRIPTION

Finds the peak signal of a point source located at the map origin.
No attempt is made to search for sources not located at approximately
the map centre.

The peak signal is determined by fitting a 2-D Gaussian function, or
from a centroid if the fit failed. The user can control whether or not
the fallback centroid results are acceptable via the B<USECENTROID>
parameter.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GAUSSIAN>

A flag to indicate whether the fit is forced to be gaussian. The
default is 0 (no).

=item B<GROUP>

If true, the group file is used rather than the frame file.

=item B<IMAGE>

Name of input image. Default is to use the file obtained from Grp or
Frm depending on the value of B<GROUP>.

=item B<USECENTROID>

A flag to denote whether the centroid position is a good enough
approximation for the map peak. If true, then the centroid position
and flux density at that position are returned if the 2-D fit
fails. Default is 1 (yes).

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (be verbose).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

STATS

=item ORAC-DR PRIMITIVES:

_ASSESS_BEAM_FIT_, _CENTROID_IMAGE_, _FIT_SOURCE_

=back

=head1 NOTES

The fit undergoes an assessment for C<point-like> properties and
returns an error if the fit looks poor.

=head1 OUTPUT DATA

On completion, the primitive hash C<%_FIND_MAP_PEAK_>
contains the following keys:

=over 4

=item PEAK

The peak signal. Contains C<undef> if the calculation did not
complete sucessfully.

=item POSITION

The position of the peak. Reference to an array of x, y coordinates in
the current coordinate frame (which will be empty if the calculation
failed).

=back

The Frame object is not updated.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

Copyright (C) 2009-2010 University of British Columbia.
Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 2000 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should I be verbose (default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Which object?
my $Obj = ($_PRIM_ARGS_->{GROUP} ? $Grp : $Frm );
# Input file
my $in = get_prim_arg($_PRIM_ARGS_, "IMAGE", $Obj->file);

# Peak position and reference to array with X,Y position
my ($peak, $posn);

# Determine centroid position
_CENTROID_IMAGE_ IMAGE=$in
my @xy = (defined $_CENTROID_IMAGE_{RESULTS}->[0] &&
	  defined $_CENTROID_IMAGE_{RESULTS}->[1]) ?
  @{ $_CENTROID_IMAGE_{RESULTS} } : ();

if ( defined $xy[0] && defined $xy[1] ) {
  # Are we forcing a gaussian fit?
  my $gaussian = get_prim_arg($_PRIM_ARGS_, "GAUSSIAN", 1);

  # Sometimes centroid isn't good enough
  my $usecen = get_prim_arg($_PRIM_ARGS_, "USECENTROID", 1);

  # Fit a 2-d gaussian to the source to determine the peak signal
  _FIT_SOURCE_ IMAGE=$in XYPOS=\@xy BOX=9 VERBOSE=$verbose GAUSSIAN=$gaussian

  # Proceed if the fit was successful
  my $beamfit = 0;
  if ( $_FIT_SOURCE_{FIT} ) {
    # Although it's for assessing beam fits, we can use it here to
    # ensure that the fit is reasonable
    my $amp = $_FIT_SOURCE_{AMPLITUDE};
    my $major = $_FIT_SOURCE_{MAJFWHM};
    my $minor = $_FIT_SOURCE_{MINFWHM};
    my $axisr = $_FIT_SOURCE_{AXISR};
    _ASSESS_BEAM_FIT_ AMP=$amp MAJOR=$major MINOR=$minor AXISR=$axisr
    $beamfit = $_ASSESS_BEAM_FIT_{BEAM};
  }

  # If the fit looks good, retrieve fit parameters
  if ($beamfit) {
    my $amp = $_FIT_SOURCE_{AMPLITUDE};
    $peak = $amp->[0];
    $posn = $_FIT_SOURCE_{POSITION};
    my %fitpars = %_FIT_SOURCE_;
    $_PRIM_ARGS_->{BEAM} = \%fitpars;
  } else {
    if ($usecen) {
      # If using centroid is OK use peak from stats
      orac_warn "Fit to source failed - using peak at centroid position instead\n";
      # Note the position is in a colon-delimited format, so specify a
      # 1-pixel search region to ensure the NDF section is interpreted
      # correctly.
      my $pos = $xy[0]."~1,".$xy[1]."~1";
      $Mon{kappa_mon}->obeyw("stats","NDF=$in($pos)");
      (my $ORAC_STATUS, $peak) = $Mon{kappa_mon}->get("stats","maximum");
      $posn = \@xy;
    } else {
      # If not, issue an error and leave results undefined
      orac_err "Fit to source failed - ignoring $in\n";
      $peak = undef;
      $posn = [];
    }
  }

  if ($verbose && defined $peak) {
    my $outpeak = sprintf "%5.3e", $peak;
    orac_print "Calculated peak signal from $in of $outpeak "
      .($Frm->uhdr("ORAC_DATA_UNITS"))."\n";
  }

} else {
  orac_err "Unable to locate map peak\n";
  $peak = undef;
  $posn = [];
}

# Store the result in the hash
$_PRIM_ARGS_->{PEAK} = $peak;
$_PRIM_ARGS_->{POSITION} = $posn;

