# -*-cperl-*-

=head1 NAME

_CALCULATE_NOISE_ - calculate a white noise image for each subarray

=head1 SYNOPSIS

 _CALCULATE_NOISE_

 _CALCULATE_NOISE_ CLIP=$clip FREQRANGE=1,10 FREQLO=0.25

=head1 DESCRIPTION

This primitive calculates a noise image for each subarray. The noise
calculation should proceed differently depending on which pipeline is
being used. Usually, Frames which are only composed of darks are
ignored unless the observation is a Noise-Dark. If called from the
SUMMIT pipeline processing is deferred until the observation has
ended.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<CLIP>

A hash reference containing the names and values of supported clipping
parameters. If not specified C<calcnoise> will use its default
values. Will be overridden by recipe parameters if specified.

=item B<FREQRANGE>

Comma-separated pair of numbers indicating the frequency range (Hz)
over which to measure white noise portion of power spectrum. Default
is C<2,10> (i.e. 2-10 Hz). May be overridden with the C<NOISE_FREQRANGE>
recipe parameter.

=item B<FREQLO>

Lower frequency at which to measure power spectrum. Default is 0.5 Hz.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 1
(yes).

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 2

=item SMURF:

CALCNOISE

=back

=head1 NOTES

The B<CLIP> parameter must be a hash reference with keys equal to the
relevant C<CALCNOISE> arguments. Supported arguments are
C<nepcliplow>, C<nepcliphigh>, C<noicliplow>, C<noicliphigh>. The
low/high values may be given as a comma-separated pair of values to
the recipe parameters C<NEP_CLIP> and C<NOI_CLIP>.

=head1 OUTPUT DATA

The current Frame object is updated with the output noise files.

The Frame uhdr is updated to set an entry called C<NOISE> which is 1
if noise images were calculated, otherwise 0.

The Frame uhdr also contains the following hash references (with keys
of the subarrays in use):

=over 2

=item WEIGHTED_NEP

The weight noise equivalent power;

=item EFF_NEP

The effective NEP;

=item NEPGOODBOL

The number of good bolometers used in the NEP calculations.

=back

=head1 OUTPUT FILES

A noise file is created for each subarray with the suffix C<_noi>

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2012 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Determine if the time is right to calculate the noise
# properties. Assume that we wish to proceed.
my $proceed = 1;

# Do not proceed if the Frame contains only fast-ramp flatfield data
$proceed = 0 if ($Frm->uhdr("PROCESS_FASTFLAT"));

# Do not proceed if the Frame contains only dark data. Note this
# should allow dark noise data to pass through because those Frames
# will be good.
$proceed = 0 if ($Frm->tagexists("dark") && !$Frm->isgood);

# Now check to see if suitable flatfield solutions exist - there is no
# point conitinuing with making the noise calculation if the
# flatfields failed
my ($fastflats, $nbol);
if ($proceed) {
  # Retrieve a suitable fastflat ramp - this first check is meant to
  # cover the online pipelines. In offline mode, the Frame will
  # contain the fastflats already.
  if (defined $Frm->hdr("SEQ_TYPE")) {
    _RETRIEVE_FASTFLATS_
    $fastflats = $_RETRIEVE_FASTFLATS_{FASTFLATS_SUB};
    if ($fastflats) {
      # Now perform a sanity check to see if the flatfield solutions
      # yielded good bolometers
      _RETRIEVE_FASTFLATS_ TYPE=SOL ALLSUB=1
      $nbol = $_RETRIEVE_FASTFLATS_{NBOLO_SUB};
      if ($nbol) {
	my $ntotal = 0;
	($ntotal += $nbol->{$_}) for (sort keys %{$nbol});
	if ($ntotal == 0) {
	  orac_warn "All flatfields failed - will not proceed with noise calculation\n";
	  $proceed = 0;
	}
      }
    } else {
      # Issue a warning if no fastflats could be retrieved
      orac_warn "Unable to retrieve a suitable fastramp: using the internal solution. Noise results may not be reliable.\n";
    }
  }
}

if ( $proceed ) {
  # OK now deal with input parameters
  # Should we be verbose (default to no)?
  my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1);

  # Low frequency measurement point
  my $freqlo = get_prim_arg( $_PRIM_ARGS_, "FREQLO", 0.5 );
  # High frequency measurement range for estimating white part of
  # spectrum, override with recipe parameter if present
  my $freqrange = get_prim_arg( $_PRIM_ARGS_, "FREQRANGE", "2,10" );
  $freqrange = $Frm->uhdr("RECPAR_NOISE_FREQRANGE")
    if ($Frm->uhdr("RECPAR_NOISE_FREQRANGE"));
  # Force obsend to true (in case it's not already)
  my $obsend_on_entry = $Frm->uhdr("OBSEND");
  $Frm->uhdr("OBSEND", 1);

  # Additional parameters for calcnoise - keep leading space before first parameter
  my $allargs = " power=! freq=[$freqrange] flow=$freqlo tseries=!";
  # Noise config file
  my $config = File::Spec->catfile($ENV{STARLINK_DIR}, "share", "smurf", "dimmconfig_calcnoise.lis");
  $config = $Frm->uhdr("RECPAR_NOISE_CFG") if (defined $Frm->uhdr("RECPAR_NOISE_CFG"));
  $allargs .= ($config eq "!") ? " config=$config" : " config=^$config";
  # Resistor config file
  my $resist = $Frm->uhdr("RECPAR_RESIST_CFG")
    if (defined $Frm->uhdr("RECPAR_RESIST_CFG"));
  $allargs .= " resist=^$resist" if ($resist);
  # Clipping parameters
  my $clip_par = get_prim_arg($_PRIM_ARGS_, "CLIP", undef);
  $clip_par = $Frm->uhdr("RECPAR_NOISECLIP") if (defined $Frm->uhdr("RECPAR_NOISECLIP"));
  my $clip = "";
  if ($clip_par && ref($clip_par) eq "HASH") {
    my %clip_par = %{$clip_par};
    foreach my $par (keys %clip_par) {
      $clip .= " $par=$clip_par{$par}";
    }
  }
  $allargs .= $clip if ($clip ne "");
  # Flatfield SNR
  my $flatsnr = $Frm->uhdr("RECPAR_FLATSNR") if ($Frm->uhdr("RECPAR_FLATSNR"));
  $allargs .= " flatsnr=$flatsnr" if ($flatsnr);

  # Print out some information for the user
  if ($verbose) {
    my @freqlohi = split( /\,/, $freqrange, 2);
    my $esttype = ($Frm->hdr("SHUTTER") == 0) ? "Estimating dark" : "Estimating";
    orac_print "$esttype low-frequency noise at $freqlo Hz\n"
      ."$esttype white noise level between $freqlohi[0] and $freqlohi[1] Hz\n";
  }

  # Loop over each subarray - temporary fix until calcnoise can deal
  # with multiple subarrays
  my @subarrays = $Frm->subarrays;

  # Collect files
  my ($inlist, $outlist);
  my %files = $Frm->get_files_by_subarray;

  # Initialize the QA report info with zeroes and store it
  my %results = map {$_ => 0} qw/ EFFNEP MEAN MEDIAN NBOLO NUMGOOD WTNEP /;
  my %qa_report_info = map { $_ => \%results } @subarrays;
  # But override zeroes with existing values if present
  if ($fastflats && $nbol) {
    foreach my $subarray (@subarrays) {
      my %results = %{$qa_report_info{$subarray}};
      $results{NBOLO} = $nbol->{$subarray};
      $qa_report_info{$subarray} = \%results;
    }
  } elsif (defined $Frm->uhdr("QA_REPORT_INFO")) {
    my %existing_qa = %{$Frm->uhdr("QA_REPORT_INFO")};
    foreach my $subarray (keys %existing_qa) {
      my %results = %{$qa_report_info{$subarray}};
      foreach my $key (keys %{$existing_qa{$subarray}}) {
	$results{$key} = $existing_qa{$subarray}->{$key};
      }
      $qa_report_info{$subarray} = \%results;
    }
  }
  $Frm->uhdr("QA_REPORT_INFO", \%qa_report_info);

  # Inform the user which subarrays are being used to calculate noise
  # for. While calcnoise can handle data from all subarrays at once
  # in practice we separate things out for simplicity.
  orac_print "Calculating noise for ";

  # Calculate noise for each subarray - retrieve effective NEP and
  # number of good bolometers
  my (@alloutfiles, %effnep, %nbol);
  foreach my $subarray (@subarrays) {
    next if ($nbol && $nbol->{$subarray} == 0);
    orac_print "$subarray...";
    my @infiles = @{$files{$subarray}};
    # Define output file names
    my $tmpfrm = $Frm->new;
    $tmpfrm->files(@infiles);
    my @outfiles = map { scalar $tmpfrm->inout("_noi", $_ ) }
      (1..$tmpfrm->nfiles);
    my $outlist = write_file_list(@outfiles);

    # Add fast-ramp flatfield files if present and write input file list
    push(@infiles, $fastflats->{$subarray}) if ($fastflats);
    my $inlist = write_file_list( @infiles );

    # Calculate the noise
    my $outfiles = ORAC::TempFile->new();
    unlink $outfiles->file;
    my $args = "in=^$inlist out=^$outlist outfiles=$outfiles";
    $args .= $allargs;
    my $NOISE_STATUS = $Mon{smurf_mon}->obeyw("calcnoise","$args");

    if ($NOISE_STATUS == ORAC__OK) {
      # Retrieve the effective NEP and the number of
      # bolometers. Implicit here is that there is only one noise file
      # per subarray - that should be true, but it might always. In
      # which case the entries in the output hashes will be the last
      # values calculated.
      my ($ORAC_STATUS, $effnep) = $Mon{smurf_mon}->get("calcnoise", "effnep");
      ($ORAC_STATUS, my $nbol) = $Mon{smurf_mon}->get("calcnoise", "nepgoodbol");
      $effnep{$subarray} = ($effnep == &NDF::VAL__BADD()) ? 0.0 : $effnep;
      $nbol{$subarray} = ($nbol == &NDF::VAL__BADI()) ? 0 : $nbol;

      # Read the actual list of output files written. For skydip
      # observations this will be one file per elevation per subarray.
      push (@alloutfiles, read_file_list( $outfiles->file ));
    }
  }

  if (@alloutfiles) {
    orac_print " Storing ".(scalar(@alloutfiles))." noise files" if ($verbose);
    orac_print "\n";
    # Store in the Frame
    $Frm->files(@alloutfiles);
    $Frm->readhdr if (@alloutfiles > 1);

    # Add the current range to the header for logging purposes
    $Frm->hdr( "FRQRANGE" => $freqrange );

    # Set the NOISE uhdr flag to indicate a NOISE calculation was made
    $Frm->uhdr("NOISE",1);

    # Return OBSEND to original state
    $Frm->uhdr("OBSEND", $obsend_on_entry);

    # For noise observations calculate and report the effective and
    # weighted NEPs. Do not do this for NEP observations as they are
    # calculated separately in the recipe.
    if ($Frm->hdr("OBS_TYPE") ne "NEP") {
      # Now calculate the weighted NEP - this assumes there is one noise
      # file per subarray as the output hash will have duplicate entries
      # overwritten
      orac_print "Calculating weighted NEPs...\n";
      my %wnep;
      for my $i (1 .. $Frm->nfiles) {
	my $in = $Frm->file($i) . ".more.smurf.nep";
	_CALCULATE_ARRAY_NEP_ IN=$in NEPTYPE=weight
	  $wnep{$Frm->hdrval("SUBARRAY", $i-1)} = (defined $_CALCULATE_ARRAY_NEP_{NEPVAL}) ? $_CALCULATE_ARRAY_NEP_{NEPVAL} : 0.0;
      }
      # Store the weighted, effective NEPs and number of good bolometers for each
      $Frm->uhdr("WEIGHTED_NEP",\%wnep);
      $Frm->uhdr("EFF_NEP",\%effnep);
      $Frm->uhdr("NEPGOODBOL",\%nbol);
    }
  } else {
    orac_print "\n";
    orac_err "Noise calculations failed - no results were obtained\n";
  }
} else {
  # Copy raw noise data to output for the SUMMIT pipeline
  if ( $Frm->uhdr("SUMMIT") && !$Frm->uhdr("PROCESS_FASTFLAT") ) {
    _COPY_RAW_DATA_
  }
  # Unset the NOISE uhdr flag
  $Frm->uhdr("NOISE",0);
}
