# -*-cperl-*-

=head1 NAME

_CREATE_PSF_IMAGE_ - create a suitable PSF image for a matched filter

=head1 SYNOPSIS

 _CREATE_PSF_IMAGE_

=head1 DESCRIPTION

This primitive creates a PSF image for use as part of a matched
filter. The user must supply and input file and the name of the file
to store the PSF image, though the latter may also be defined using
the C<inout> method of the current Frame or Group if desired.

By default, the PSF FWHM is obtained from the beamsize at the current
wavelength, but may also be defined by the user.

The PSF may optionally be smoothed and have the smoothed version
subtracted from it. The smoothed version is returned.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

Flag to denote whether to create the PSF file name based on the Group
or Frame file. Default is 0 (use the Frame). Only accessed if B<PSF> is
not specified.

=item B<IN>

Name of input image for which to derive pixel scale if B<PIXSIZE> not
specified. No default.

=item B<NORM>

Type of normalization to carry out. If C<peak> then PSF is normalized
to a peak of 1; if C<sum> the PSF is normalized to a sum of 1. May be
overridden with the recipe paramter C<PSF_NORM>.

=item B<PIXSIZE>

Pixel scale in arcsec. If not specified the pixel scale is obtained
from the image given via the B<IN> parameter.

=item B<PSF>

Name of output PSF image. Default is to create a psf file name using
the C<inout> method of the Frame or Group depending on the value of
the B<GROUP> parameter above.

=item B<RADIUS>

Radius (HWHM) of PSF. Default is to use the appropriate FWHM. Maybe
overridden with the recipe parameter C<PSF_FWHM>.

=item B<SMOOTH>

A flag to denote whether or not to smooth the PSF with a larger
gaussian (whose FWHM is given by B<SMOOTH_FWHM>). The smoothed version
is subtracted from the unsmoothed version and the difference is
returned as the PSF. Default is 1 (yes).

=item B<SMOOTH_FWHM>

FWHM in arcsec of gaussian used to smooth the PSF. Default is 30.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 1 (yes).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item KAPPA

CDIV, CHPIX, CREFRAME, GAUSMOOTH, NDFCOPY, SUB

=item ORAC-DR PRIMITIVES

_FIND_IMAGE_STATISTICS_, _GET_PIXEL_SCALE_

=back

=head1 NOTES

The current recipe will terminate with an error if any of the required
arguments are missing.

Based on code written for the SMURF C-shell script C<match-filter> by
David Berry E<lt>d.berry@jach.hawaii.edu<gt>.

=head1 OUTPUT FILES

Creates an output file with the suffix C<_psf> unless the B<PSF>
option is specified in which case a file with that name is created.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia. All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Verbose flag
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# PSF normalization parameter - default to peak
my $norm = get_prim_arg($_PRIM_ARGS_, "NORM", "peak");
# Override with recipe parameter
if (defined $Frm->uhdr("RECPAR_PSF_NORM")) {
  $norm = $Frm->uhdr("RECPAR_PSF_NORM");
}

# Name of PSF image to create
my $psf = get_prim_arg($_PRIM_ARGS_, "PSF", undef);
# Is the psf file name to be derived from the current Frame or Group?
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;
if (!$psf) {
  $psf = $Obj->inout("_psf");

  # Store the PSF image in the intermediates array so it can be deleted
  # at the end of the recipe
  $Obj->push_intermediates($psf);
}

# Is the PSF to be smoothed?
my $smooth = get_prim_arg($_PRIM_ARGS_, "SMOOTH", 1);
my $smooth_fwhm = get_prim_arg($_PRIM_ARGS_, "SMOOTH_FWHM", 30.0);

my $pixscale = get_prim_arg($_PRIM_ARGS_, "PIXSIZE", undef);
if ( !defined $pixscale ) {
  # Input file - only used for getting pixel scale
  my $in = get_prim_arg($_PRIM_ARGS_, "IN", undef);
  # If pixscale is not defined, use the input image if given, else
  # abort with an error
  if ($in) {
    _GET_PIXEL_SCALE_ IMAGE=$in VERBOSE=0
    $pixscale = $_GET_PIXEL_SCALE_{PIXSCALE};
  } else {
    orac_throw "Must supply pixel scale if no input image given\n";
  }
}

# Create a Gaussian PSF image with FWHM equal to Airy disk
# radius. For the JCMT this is the default FWHM stored in the
# calibration system.
my $airy_radius = get_prim_arg($_PRIM_ARGS_, "RADIUS", $Cal->fwhm);
# Override with recipe parameter
$airy_radius = $Frm->uhdr("RECPAR_PSF_FWHM")
  if (defined $Frm->uhdr("RECPAR_PSF_FWHM"));

# FWHM and PSF image size in pixels - use 2x the smoothing FWHM if
# necessary to ensure the PSF is well defined
my $airy_pix = $airy_radius / $pixscale;
my $smooth_pix = $smooth_fwhm / $pixscale;
my $npix = ($smooth) ? 2*$smooth_pix : 2*$airy_pix;

# The PSF will have bounds (-npix:npix,-npix:npix) unless a template
# image is given
my $like = get_prim_arg($_PRIM_ARGS_, "LIKE", undef);

# Reuseable temp files
my $temp1 = new ORAC::TempFile;
my $tempfile1 = $temp1->file;
my $temp2 = new ORAC::TempFile;
my $tempfile2 = $temp2->file;

orac_print "Creating PSF image..." if ($verbose);

# Create a flat image with value zero
my $args = "mode=fl mean=0 out=$tempfile1";
$args .= ($like) ? " like=$like" : " lbound=[-$npix,-$npix] ubound=[$npix,$npix]";
$Mon{kappa_mon}->obeyw("creframe","$args");

# Set the central pixel to a value of 1.0
$args = "in=$tempfile1 out=$tempfile2 section='0,0' newval=1";
$Mon{kappa_mon}->obeyw("chpix","$args");

# Smooth this spike using a Gaussian kernel of FWHM equal to the Airy
# radius. This produces a Gaussian PSF image. NOTE, the FWHM is the
# Airy radius, not the diameter as might be expected. In practice it
# seems like the FWHM of the point sources in a SCUBA-2 map is much
# closer to the Airy radius than the Airy diameter. Gausmooth
# preserves total data sum, so the output PSF image will have a total
# data sum of unity.
$args = "in=$tempfile2 fwhm=$airy_pix out=$tempfile1";
$Mon{kappa_mon}->obeyw("gausmooth","$args");

# Normalise the PSF to a peak value of 1.0 if requested
if ($norm eq "peak") {
  _FIND_IMAGE_STATISTICS_ IMAGE=$tempfile1 VERBOSE=0
  my $peak = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MAX};
  $Mon{kappa_mon}->obeyw("cdiv","in=$tempfile1 scalar=$peak out=$psf");
  orac_print " normalizing..." if ($verbose);
} else {
  # Otherwise just copy input to output
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$tempfile1 out=$psf");
}

# If smoothing return the smoothed and subtracted version as the PSF
if ($smooth) {
  orac_print " smoothing and subtracting from original..." if ($verbose);
  my $temp_psf = new ORAC::TempFile;
  my $tempfile_psf = $temp_psf->file;
  $Mon{kappa_mon}->obeyw("gausmooth","in=$psf out=$tempfile2 fwhm=$smooth_pix");
  $Mon{kappa_mon}->obeyw("sub","in1=$psf in2=$tempfile2 out=$tempfile_psf");
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$tempfile_psf out=$psf");
}
# Add a copy of the FITS header from the current Grp/Frm
my $fitshdr = $Obj->fits;
$fitshdr->writehdr(File => $psf);

# All done
orac_print " done\n" if ($verbose);
