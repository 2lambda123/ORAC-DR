# -*-cperl-*-

=head1 NAME

_MAKE_MOSAIC_GROUP_PSF_ - calculate a jack-knife map from two halves of the data

=head1 SYNOPSIS

 _MAKE_MOSAIC_GROUP_PSF_

 _MAKE_MOSAIC_GROUP_PSF_ JACKKNIFE_METHOD=ALTERNATE JACKKNIFE_WEIGHT=NMAP

=head1 DESCRIPTION

This primitive creates the overall Group coadd and the corresponding
map-filtered PSF coadd.

If the user has provided a PSF, it is padded to be the same size as
the signal image coadd.

The output map-filtered psf image is created from the central 90x90
pixels, padded with zeros.

Nearest-neighbour binning is used.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<METHOD>

Image combination method for creating the two halves of the jack-knife
map. May be any supported by C<wcsmosaic>. Default is C<nearest>.

=item B<VERBOSE>

Flag to indicate whether messages should be printed to the
screen. Default is 1 (yes).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item KAPPA

NDFCOPY

=item ORAC-DR PRIMITIVES

_CREATE_MAP_PSF_, _MAKE_MOSAIC_GROUP_BATCH_

=back

=head1 OUTPUT DATA

The name of the jack-knife map is stored in the Group uhdr using the
keyword C<JACKKNIFE_MAP>.

=head1 OUTPUT FILES

Creates single Group file with the suffix C<_wmos>.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2012-2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Only proceed if we've reached the last Frame in the Group
if ($Grp->lastmember($Frm)) {
  # If this primitive is being called from PICARD then the user must
  # have provided a PSF image or else there is no point in continuing
  if ($Frm->uhdr("PICARD")) {
    orac_termerr "No PSF image supplied - unable to continue\n"
      unless ($Frm->uhdr("RECPAR_PSF_MATCHFILTER"));
  }

  # Should I be verbose (default to yes)
  my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

  # Name of the output coadds for the signal map and the map-filtered psf
  my %out = ( newimage => scalar($Grp->inout("_wmos")),
	      mappsf => scalar($Grp->inout("_wpsf")) );

  if ($verbose) {
    my $extra = (defined $Frm->uhdr("RECPAR_PSF_MATCHFILTER")) ? "coadd" : "and psf coadds";
    orac_print "\nCreating map $extra...\n";
  }
  # If invoked from PICARD, this uhdr entry will not be defined
  $Frm->uhdr("MAKEMAP_CONFIG_TYPE", "BLANK_FIELD")
    unless (defined $Frm->uhdr("MAKEMAP_CONFIG_TYPE"));
  # There is no need to create a psf coadd if the user has specified a
  # psf
  my @tags = ("newimage");
  push(@tags,"mappsf") unless (defined $Frm->uhdr("RECPAR_PSF_MATCHFILTER"));
  my $nfiles = 1;
  # Tag the current Frames with mosaic
  $Grp->membertagset("mosaic");
  foreach my $tag ( @tags ) {
    _MAKE_MOSAIC_GROUP_BATCH_ VERBOSE=0 METHOD=nearest MOSTAG=$tag
    if ($Grp->file_exists) {
      # Make a copy of the group file using the pre-determined name
      my $in = $Grp->file;
      my $out = $out{$tag};
      $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$in out=$out");
      # Delete the group file as it's no longer needed
      $Grp->erase;
    }
    $nfiles = $Grp->uhdr("NMOSFILES");
  }
  # Reset Frame states
  $Grp->membertagretrieve("mosaic");

  # Store the output coadd in the Group
  $Grp->files($out{newimage});
  if ($Grp->file_exists) {
    # Read the header if the file exists
    $Grp->readhdr;
    $Grp->tagset("coadd");

    # Now if the user has given a PSF image, we need to make sure it has
    # the same dimensions as the map
    if (@tags == 1) {
      my $inpsf = $Frm->uhdr("RECPAR_PSF_MATCHFILTER");
      my $args = "in=$inpsf out=".($out{mappsf})." like=".($Grp->file);
      $Mon{ndfpack_mon}->obeyw("ndfcopy","$args");
    }
    # Store it in the Group for later retrieval
    $Grp->files($out{mappsf});
    $Grp->tagset("psf");
    # Trim the (coadded) PSF image and pad with zeros to remove
    # low-signal-to-noise pixels - the result will be stored in the Grp
    # uhdr as PSF_IMAGE and picked up by later primitives
    _CREATE_MAP_PSF_ PSF_BOX=90

    # Now return to the signal coadd
    $Grp->tagretrieve("coadd");
    my $files = ($nfiles == 1) ? "file" : "files";
    orac_print "Group coadd $out{newimage} created from $nfiles $files\n";
    $Grp->product("newimage");
    $Grp->tagset("newimage");
    # Set a uhdr entry for calibrating the data
    $Grp->uhdr("ORAC_FILTER", $Frm->uhdr("ORAC_FILTER"));
    $Grp->uhdr("NOCALIB",0);
  } else {
    orac_err "Unable to create Group coadd or map PSF\n";
    $Grp->uhdr("NOCALIB",1);
  }
} else {
  # The Group file does not yet exist and so calibration should not be
  # attempted - set the NOCALIB flag to true
  $Grp->uhdr("NOCALIB",1);
}
