# -*-cperl-*-

=head1 NAME

_ENG_STEER_ - steering primitive for the engineering pipeline

=head1 SYNOPSIS

_ENG_STEER_

=head1 DESCRIPTION

This primitive deals with setting recipe parameters, storing each in
the current Frame uhdr with a prefix C<RECPAR_>.

=head1 OUTPUT DATA

The Frm uhdr contains the supported recipe parameters.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia.  All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my @recpars = ( 'LOGFILE',
		'MAPSPEED_NBOLEN',
		'MAPSPEED_NBOLST',
		'MAPSPEED_STEP',
		'NEP_MAX',
		'NEP_MIN',
		'NOISE_FREQRANGE',
		'VERBOSE'
	      );

# Store given parameters
ORAC::Recipe::Parameters::verify_parameters( \%RECPARS, \@recpars );

# Allow a VERBOSE flag to get extra info printed to screen
if ( defined $RECPARS{VERBOSE} ) {
  $Frm->uhdr("RECPAR_VERBOSE", $RECPARS{VERBOSE});
}

### Writing a logfile ###
# Flag to denote whether to collect info to write to a log file
if ( defined $RECPARS{LOGFILE} ) {
  $Frm->uhdr("RECPAR_LOGFILE", $RECPARS{LOGFILE});
}

### Frequency ranges for noise observations
if (defined $RECPARS{NOISE_FREQRANGE}) {
  my $range = $RECPARS{NOISE_FREQRANGE};
  # primitive assumes a string
  $range = join(",", @$range) if ref($range);
  $Frm->uhdr("RECPAR_NOISE_FREQRANGE", $range);
}

### Define the NEP thresholds for reasonable values
my $nep_min = (defined $RECPARS{NEP_MIN}) ? $RECPARS{NEP_MIN} : 2.0e-17;
my $nep_max = (defined $RECPARS{NEP_MAX}) ? $RECPARS{NEP_MAX} : 2.0e-14;
$Frm->uhdr("NEP_MIN", $nep_min);
$Frm->uhdr("NEP_MAX", $nep_max);

### Parameters for mapping speed calculation
$Frm->uhdr("RECPAR_MAPSPEED_NBOLST", $RECPARS{MAPSPEED_NBOLST})
  if (defined $RECPARS{MAPSPEED_NBOLST});
$Frm->uhdr("RECPAR_MAPSPEED_NBOLEN", $RECPARS{MAPSPEED_NBOLEN})
  if (defined $RECPARS{MAPSPEED_NBOLEN});
$Frm->uhdr("RECPAR_MAPSPEED_STEP", $RECPARS{MAPSPEED_STEP})
  if (defined $RECPARS{MAPSPEED_STEP});
