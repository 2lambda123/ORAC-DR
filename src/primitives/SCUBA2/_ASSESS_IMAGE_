# -*-cperl-*-

=head1 NAME

_ASSESS_IMAGE_ - check image for an emission peak

=head1 SYNOPSIS

 _ASSESS_IMAGE_ GROUP=1

=head1 DESCRIPTION

This primitive performs a simple analysis of an image which is
expected to contain a sufficiently point-like source. The method
calculates the peak signal-to-noise ratio (SNR) in the given input,
then applies the matched filter and calculates the peak SNR in that
image. If a source is present, the peak SNR in the matched-filtered
image should be about a factor of 2 greater than that in the input
image.

The primitive checks that the peak SNR in the signal map is at least
3, and that the peak SNR in the matched-filtered map is at least 5
(and that the matched-filtered peak SNR exceeds the signal peak
SNR). If these criteria are satisfied, the peak position is determined
and returned to the caller.

Images that do not contain a peak will not show an increase in the
peak SNR of the matched-filtered image.

If given a matched-filtered image, the primitive simply checks that
the peak SNR exceeds 5. If so, the other two criteria are also assumed
true.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<GROUP>

Flag to denote whether to use the current Group file. Default is 0
(use the current Frame file).

=item B<IMAGE>

Name of image to analyze. Default is to use the current file in either
the Frame or Group (see B<GROUP> parameter).

=item B<VERBOSE>

Flag to denote whether informational messages are printed. Default is
1 (yes).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item KAPPA

STATS, WCSATTRIB

=item ORAC-DR PRIMITIVES

_APPLY_MATCHED_FILTER_, _CALC_SNR_IMAGE_, _GET_PIXEL_SCALE_

=back

=head1 NOTES

The input image should be in an offset coordinate system but no checks
are made. Weird things may happen as a result.

=head1 OUTPUT DATA

On exit, the primitive hash C<%_ASSESS_IMAGE_> will contain the
following keys:

=over 2

=item PEAK

A flag to denote whether or not a well-defined centre peak was located
in the search region. A value of 1 indicates a peak was found, 0
indicates no peak.

=item POSITION

An array reference with the X, Y offsets from (0,0) in arcsec of the
peak. Will be undef if the centroid was not calculated.

=back

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009,2011,2014 the University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should I be verbose (default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Which object?
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;

# Input file
my $in = get_prim_arg($_PRIM_ARGS_, "IMAGE", $Obj->file);
# Image to use for finding the peak value and position
my $image = $in;
$Obj->tagset("assess_image");
my $inproduct = $Obj->product;

my ($peakval, $peakerr, @xy);
my $posn = \@xy;
my $has_peak = 0;

_GET_PIXEL_SCALE_ GROUP=$group IMAGE=$in VERBOSE=0
my $pixscale = $_GET_PIXEL_SCALE_{PIXSCALE};

# Find the position of the brightest peak in the signal map
_CALC_SNR_IMAGE_ IN=$image VERBOSE=0
my $results = $_CALC_SNR_IMAGE_{RESULTS};
my $peaksn = $results->{MAX} if (defined $results);

# The booleans SIG_PEAK, SIG_MFPEAK and MF_GREATER are used to
# indicate that the peak S/N in the signal map exceeds 3-sigma, the
# peak S/N in the matched-filtered map exceeds 5-sigma and that the
# peak S/N in the matched-filtered map exceeds that in the signal map,
# respectively. A S/N cutoff of 3 corresponds to a peak S/N of ~6 in
# the matched-filtered map. To allow some leeway in this scaling,
# a matched-filtered cutoff S/N of 5 is used.
my ($SIG_PEAK, $SIG_MFPEAK, $MF_GREATER);

my $image_mf;
if ($inproduct eq "Matched-filtered") {
  # If assessing an image that has already been matched-filtered, use
  # the MF peak criteria for the peak and set all others the same
  $SIG_PEAK = ($peaksn && $peaksn > 5) ? 1 : 0;
  $SIG_MFPEAK = $SIG_PEAK;
  $MF_GREATER = $SIG_MFPEAK;
  $image_mf = $image;
} else {
  $SIG_PEAK = ($peaksn && $peaksn > 3) ? 1 : 0;
  # In principle an existing matched-filtered image could be used but
  # there is no guarantee it is derived from the input image
  _APPLY_MATCHED_FILTER_ VERBOSE=0 IN=$image GROUP=$group CALCNEFD=0
  $image_mf = $Obj->file;

  _CALC_SNR_IMAGE_ IN=$image_mf VERBOSE=0
  my $results = $_CALC_SNR_IMAGE_{RESULTS};
  if (defined $results) {
    my $mfpeaksn = $results->{MAX};
    $SIG_MFPEAK = 1 if ($mfpeaksn > 5);
    $MF_GREATER = 1 if ($mfpeaksn > $peaksn);
  }
}
$Obj->product($inproduct);

# Proceed if the criteria are met
if ( $SIG_PEAK && $SIG_MFPEAK && $MF_GREATER ) {
  orac_warn "Peak S/N is only ".(sprintf "%.1f", $peaksn).": source may not be located accurately\n"
    if ($peaksn < 6);

  $has_peak = 1;

  my $point_focus = ($Obj->hdr("OBS_TYPE") =~ /focus|pointing/i) ? 1 : 0;
  # Find position of max value - restrict search to a 60-arcsec box for
  # calibrators. Might be worth using the map size as defined in
  # header to avoid picking up edge pixels for other targets.
  my $npix = int(60.0 / $pixscale) + 1;
  my $ndf = ($Cal->iscalsource($Obj->hdr("OBJECT")) || $point_focus)
    ? $image_mf."(0~$npix,0~$npix,)" : $image_mf;
  $Mon{kappa_mon}->obeyw("stats","ndf=$ndf");
  my ($ORAC_STATUS, $pkpos) = $Mon{kappa_mon}->get("stats", "maxwcs");
  # Split into coordinates
  @xy = split(/\,\s+/, $pkpos);

  # Now find the value in the original image at the maximum
  $in = $image."($xy[0]~1,$xy[1]~1,)";
  $Mon{kappa_mon}->obeyw("stats","ndf=$in");
  ($ORAC_STATUS, $peakval) = $Mon{kappa_mon}->get("stats", "maximum");
  $Mon{kappa_mon}->obeyw("stats","ndf=$in comp=err");
  ($ORAC_STATUS, $peakerr) = $Mon{kappa_mon}->get("stats", "maximum");

  # For pointing data processed with the regular reduction recipes,
  # the maps will not be in offset coordinates. Since the processing
  # is not concerned with checking offsets, mark these data as
  # non-pointing data.
  if ($point_focus) {
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$image_mf mode=get name=skyrefis");
    ($ORAC_STATUS, my $skyrefis) = $Mon{ndfpack_mon}->get("wcsattrib","value");
    $point_focus = 0  if (lc($skyrefis) ne "origin");
  }
  # For pointing and focus observations, check to see if the peak lies
  # within 30" of the centre
  if ($point_focus) {
    # First check the WCS format for the input file
    $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$in mode=get name=format(1)");
    ($ORAC_STATUS, my $format) = $Mon{ndfpack_mon}->get("wcsattrib","value");
    my ($x, $y) = @xy;
    my $units2as = 3600;
    if ($format =~ /^s/) {
      $units2as = 1;
    } elsif ($format !~ /^d/) {
      if ($x =~ /:/ || $y =~ /:/) {
	use Astro::Coords;
	my $coord = Astro::Coords->new( ra => $x, dec => $y, units => "sexagesimal",
					type => "J2000");
	$x = $coord->ra(format => 'deg');
	$y = $coord->dec(format => 'deg');
      }
    }
    my $dr = sprintf "%.1f", ($units2as * sqrt($x*$x + $y*$y));
    if ($dr > 30) {
      orac_warn "S/N peak is far from centre ($dr arcsec) - source is probably not detected\n";
      $has_peak = 0;
    }
  }
} else {
  orac_warn "Image $in has no significant maximum\n";
  $has_peak = 0;
}

# Store flag to indicate a peak exists
$_ASSESS_IMAGE_{PEAK} = $has_peak;
if ($has_peak) {
  # And store the corresponding peak details
  $_ASSESS_IMAGE_{POSITION} = $posn;
  $_ASSESS_IMAGE_{PEAKVAL} = $peakval;
  $_ASSESS_IMAGE_{PEAKERR} = $peakerr;
}

$Obj->tagretrieve("assess_image");
