#! -*-perl-*-

=head1 NAME

_ALIGN_AND_MOSAIC_SUBARRAY - Align and mosaic subarray frames together

=head1 SYNOPSIS

 _ALIGN_AND_MOSAIC_SUBARRAY

=head1 DESCRIPTION

This primitive aligns and mosaics the individual subarray frames into
array images either by using KAPPA WCSALIGN followed by CCDPACK
MAKEMOS or performing both steps with KAPPA WCSMOSAIC. The former
approach calls two other primitives to do the aligning and
mosaicking. A check is made to see if the version of KAPPA supports
WCSMOSAIC.

This primitive operates on the current Frame object and selects images
in groups of up to four (one for each subarray) and produces a mosaic
of these images. No operation is performed is there is only a single
subarray.

If the output need not be aligned to a celestial reference frame, then
if a group file exists, that is the reference for the alignment, else
the first image in the frame object is chosen as reference.

=head1 ARGUMENTS

=over 4

=item B<MAKEMOS>

A flag to denote whether to use CCDPACK MAKEMOS for mosaicking the
images. Default is 0 (no), which uses KAPPA WCSMOSAIC instead. Note
that WCSMOSAIC is considerably faster than calling WCSALIGN and
MAKEMOS separately.

=item B<METHOD>

The method to be used for resampling the aligned images. This
corresponds to the C<method> parameter for WCSMOSAIC and WCSALIGN,
which is different from that for MAKEMOS. See WCSALIGN and/or
WCSMOSAIC documentation for further details. Default value is
C<nearest>, which is recommended for robust processing of exposure
time and weights components.

=item B<MAKEMOS_METHOD>

The method by which MAKEMOS combines the images. Default is
C<mean>. See the MAKEMOS documentation for a description of the
possible values.

=item B<REBIN>

A flag to determine whether to rebin or resample. Default is
resample. See the WCSMOSAIC/WCSALIGN documentation for further
information.

=item B<SKYREF>

A flag to denote whether to align the images to a celestial coordinate
frame. The default is 0 (false) and the images will be aligned with
either the group file if it exists or the first image in the Frame.

=item B<VERBOSE>

A flag to denote whether the primitive should issue verbose
information messages. Default is true (1).

=back

=head1 ALGORITHMS

KAPPA: WCSMOSAIC, WCSALIGN. CCDPACK: MAKEMOS

=head1 FILE SUFFIX

An output file is created for each set of up-to-four subarray images
in the Frame with a suffix of C<_arr>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005-2008 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

# Should I be verbose? (default to yes)
my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1 );

# Check for input parameters: MAKEMOS
my $makemos = get_prim_arg( $_PRIM_ARGS_, "MAKEMOS", 0 );

# Rebin or resample? Default is resample (rebin = 0).
my $rebin = get_prim_arg( $_PRIM_ARGS_, "REBIN", 0);

# Method for determining the output pixel values (used by WCSMOSAIC
# and WCSALIGN - use of NEAREST is advised in order to obtain accurate
# EXP_TIME and WEIGHTS handling
my $method = get_prim_arg( $_PRIM_ARGS_, "METHOD", "nearest" );

# Are we aligning images in a SKY frame? Default to yes.
my $skyalign = get_prim_arg( $_PRIM_ARGS_, "SKYREF", 1);

# MAKEMOS image combination method
my $makemos_method = get_prim_arg( $_PRIM_ARGS_, "MAKEMOS_METHOD", "mean" );

# Check version of KAPPA is new enough to use WCSMOSAIC
if (starversion_lt('kappa', 'V1.5')) {
  $makemos = 1;
  orac_warn "Installed Kappa version does not support WCSMOSAIC, falling back on WCSALIGN+MAKEMOS";
}

my $moving = $Grp->uhdr("MOVING");
# Some non-obvious stuff here. GROUPREF should be 0 for moving
# sources. First time through, the MOVING flag will not be set so
# GROUPREF will be 1, but that doesn't matter at this stage because
# the group file will not exist. The moving flag must be checked after
# the refereince image has been created for correct subsequent
# processing.
my $pointfocus = ( $Frm->uhdr("ORAC_OBSERVATION_TYPE") =~ /focus/i ||
		   $Frm->uhdr("ORAC_OBSERVATION_TYPE") =~ /point/i) ? 1 : 0;
my $groupref = ( $moving ) ? 0 : 1;

# Determine reference image for alignment. Use current coordinate
# frame
_GET_REFERENCE_IMAGE_ SKYREF=$skyalign VERBOSE=$verbose GROUPREF=$groupref
my $refimage = $_GET_REFERENCE_IMAGE_{REFIMAGE};
# Query moving flag again
$moving = $Grp->uhdr("MOVING");

# Set the WLIM parameter for WCSMOSAIC/WCSALIGN
my $wlim = 0.2;

# Number of files in current frame
my $nfiles = $Frm->nfiles;
my $nsubim = $nfiles / ( $Frm->numsubarrays );

# Inform user of number of images being created
if ( $verbose && ($nsubim != $nfiles) ) {
  my $outmethod;
  if ($makemos) {
    $outmethod = "WCSALIGN+MAKEMOS";
  } else {
    $outmethod = "WCSMOSAIC";
  }
  orac_print("Aligning and mosaicking $nfiles files into $nsubim subarray images with $outmethod\n");
}

# Set the attributes for moving sources for SCIENCE observations
if ( $moving  && !$pointfocus ) {
  orac_print "Setting attributes for moving sources...\n";
  for my $i (1..$nfiles) {
    my $in = $Frm->file($i);
    my $args = "ndf=$in mode=mset setting='skyrefis=origin,alignoffset=1'";
    $Mon{ndfpack_mon}->obeyw("wcsattrib","$args");
  }
}

# Align all the images in the Frame if we're using MAKEMOS.
if ( $makemos ) {
  _ALIGN_ARRAYS_ SKYREF=$skyalign REFIMAGE=$refimage
}

# Set the reference image to be used
my $ref = ( $pointfocus ) ? "!" : $refimage;

# Array of output filenames to store in Frame object on completion
my @out;

# Array of input subheaders
my $fits = $Frm->fits;
my @insubhdrs = $fits->subhdrs;

# Array of output subheaders to associate with each frame in @out
my @subhdrs;

# Do we have sub-headers? If not, then we have just 4 (or
# N_WORKING_SUBARRAYS) images to mosaic
if ( defined $Frm->hdr->{SUBHEADERS}->[0]->{SEQSTART}  || 
     defined $Frm->hdr->{SUBHEADERS}->[0]->{NSUBSCAN} ) {
  # Hash to store each SEQSTART/NSUBSCAN combination as appropriate
  # images are mosaicked, plus an indexing hash to associate groups of
  # related files with the file index.
  my (%commonfiles, %indxr);

  # Loop over number of files to store associations
  my $j = 0;
  for my $i (1..$nfiles) {
    my $seqstart = $Frm->hdrval('SEQSTART',$i-1);
    my $nsubscan = $Frm->hdrval('NSUBSCAN',$i-1);
    # Define a unique identified key from subscan number and seqstart
    my $commonkey = $nsubscan."_".$seqstart;
    push @{ $commonfiles{$commonkey} }, $Frm->file($i);
    # Now we need a way to link the array of common files to the
    # correct file name for creating the output files. Do this with
    # another hash with the same keys as above with file indices as
    # values. This takes advantage of how the files are stored in the
    # Frm and ensures we match up files correctly.
    push(@{ $indxr{$commonkey}}, $i );
  }
  # Loop over groups of files to mosaic them - sort to preserve time
  # order (KLUDGE: should sort on TIME not just on index)
  foreach my $arraygrp ( sort { $indxr{$a}->[0] <=> $indxr{$b}->[0] } keys %indxr ) {
    # For deciding the output file name we no longer need subarray designation
    # Input: s8aYYYYMMDD_OBSNUM_SUBSCAN_suffix
    # Output: sYYYYMMDD_OBSNUM_SUBSCAN_suffix
    my $out = $Frm->inout('_arr',$indxr{$arraygrp}[0]);
    $out = $Frm->rewrite_outfile_subarray( $out );

    # Need to merge the headers associated with these files note that
    # Frm->file index is off by one relative to subhdrs
    my ($refhdr, @thesehdrs) = map { $insubhdrs[$_-1] } @{$indxr{$arraygrp}};

    # drop anything that is different
    if (@thesehdrs) {
      ($refhdr, my @different) = $refhdr->merge_primary(@thesehdrs);
    }

    my @files = @{ $commonfiles{$arraygrp} };
    my $numingrp = scalar( @files );
    # If numingrp == 1 we have only a single subarray so we just
    # ndfcopy the input to output
    if ( $numingrp > 1 ) {
      # Write filenames into temp file
      my $infiles = write_file_list( @files );
      # Combine images with chosen method
      if ( $makemos ) {
	my $args = "in=^$infiles method=$makemos_method out=$out";
	$Mon{ccdpack_reg}->obeyw("makemos","$args");
      } else {
	my $args = "ref=$ref method=$method lbnd=! ubnd=! wlim=$wlim ".
	  "out=$out in=^$infiles";
	$Mon{kappa_mon}->obeyw("wcsmosaic","$args");
      }
    } else {
      # Only 1 subarray - @files will have only 1 element
      my $in = $files[0];
      $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$in out=$out");
    }

    # Add to output array
    push (@out, $out);
    push (@subhdrs, $refhdr);
  }

} else {
  # If there are no subheaders, this must be the first data to be
  # processed. This means the number of files in the Frame will be
  # equal to the number of subarrays.
  my ($in, $out) = $Frm->inout('_arr');
  if ( $nfiles > 1 ) {
    # Write filenames into temp file - note the files have been
    # aligned already if makemos has been chosen
    my $infiles = write_file_list( $Frm->files );
    # Combine images with chosen method
    if ( $makemos ) {
      my $args = "in=^$infiles method=$makemos_method out=$out";
      $Mon{ccdpack_reg}->obeyw("makemos","$args");
    } else {
      my $args = "ref=$ref method=$method lbnd=! ubnd=! wlim=$wlim ".
	"out=$out in=^$infiles";
      $Mon{kappa_mon}->obeyw("wcsmosaic","$args");
    } 
  } else {
    # Only 1 file - ie 1 subarray
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$in out=$out");
  }
  # Add to output array
  push (@out, $out);
}

# Store the output files and merged subhdrs
$Frm->files( @out );
$fits->subhdrs(@subhdrs);

# Create EXP_TIME and WEIGHTS components - only reliable if
# Nearest-neighbour rebinning has been used
if ( $method eq "nearest" ) {
  _CREATE_COMPS_DREAMSTARE_
  # Set Frame headers that might come in handy later
  $Frm->uhdr("EXP_TIME",1);
  $Frm->uhdr("WEIGHTS",1);
} else {
  orac_warn "Exp_time and weights not created for method = $method\n";
  $Frm->uhdr("EXP_TIME",0);
  $Frm->uhdr("WEIGHTS",0);
}

# Now is the time to align the images into a sky coordinate frame for
# POINTING and FOCUS observations or data taken with only a single
# subarray
if ( $pointfocus || ($Frm->numsubarrays == 1)) {
  _ALIGN_ARRAYS_ METHOD=$method REFIMAGE=$refimage VERBOSE=1 COMP=1
}

# Set the aligned flag so we don't waste time repeating it again later
$Frm->uhdr("ALIGNED",1);
