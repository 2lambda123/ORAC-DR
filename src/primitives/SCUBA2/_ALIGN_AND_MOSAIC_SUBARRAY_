#! -*-perl-*-

=head1 NAME

_ALIGN_AND_MOSAIC_SUBARRAY - Align and mosaic subarray frames together

=head1 SYNOPSIS

 _ALIGN_AND_MOSAIC_SUBARRAY

=head1 DESCRIPTION

This primitive aligns and mosaics the individual subarray frames into
array images either by using KAPPA WCSALIGN followed by CCDPACK
MAKEMOS or performing both steps with KAPPA WCSMOSAIC. The former
approach calls two other primitives to do the aligning and
mosaicking. A check is made to see if the version of KAPPA supports
WCSMOSAIC.

This primitive operates on the current Frame object and selects images
in groups of four (one for each subarray) and produces a mosaic of
these four. The number of output files is one quarter of the total
number of files in the Frame.

If the output need not be aligned to a celestial reference frame, then
if a group file exists, that is the reference for the alignment, else
the first image in the frame object is chosen as reference.

=head1 ARGUMENTS

=over 4

=item SINGLESTEP

A flag to determine whether to perform the alignment and mosaicking in
one step using WCSMOSAIC. Default is 1 (Yes). If set to 0, then the
following argument MUST be set. Note that the values of the METHOD and
REBIN parameters are passed on to the primitives called if SINGLESTEP
is 0.

=item METHOD

Keyword specifying the method for determing how the output pixels are
populated. The default is nearest-neighbour resampling
(C<nearest>). See the documentation for WCSMOSAIC or WCSALIGN for
further details. The recommended choices are C<nearest>, C<bilinear>,
ir C<sincsinc>.

=item REBIN

A flag to determine whether to rebin or resample. Default is
resample. See the WCSMOSAIC/WCSALIGN documentation for further
information.

=item SKYALIGN

A flag to denote whether to align the images to a celestial coordinate
frame. The default is 0 (false) and the images will be aligned with
either the group file if it exists or the first image in the Frame.

=item FRAME

Celestial frame for reference image. No default but not used if
SKYALIGN is false.

=item COMBINE

The method to be used to combine the images. In principle could be any
value supported by MAKEMOS (see MAKEMOS documentation for further
details). Currently, only MEAN or MEDIAN are supported. MEDIAN is the
default.

=item VERBOSE

A flag to denote whether the primitive should issue verbose
information messages. Default is true (1).

=back

=head1 KNOWN ISSUES

If no group file is present the primitive should create a non-rotated
RA/Dec reference based on the world coordinates of the first frame.
Currently, if the world coordinates are rotated the output aligned
frames will be rotated (as will be the case for a SCUBA-2 image
aligned with Nasmyth coordinates).

=head1 ALGORITHMS

Uses KAPPA WCSMOSAIC. This primitive is currently a very general
implementation.

=head1 FILE SUFFIX

An output file is created for each set of four subarray images in the
Frame with a suffix of C<_arr>. 

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005-2007 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

# First check for SINGLESTEP
my $singlestep = (exists $_ALIGN_AND_MOSAIC_SUBARRAY_{SINGLESTEP} &&
		  defined $_ALIGN_AND_MOSAIC_SUBARRAY_{SINGLESTEP}) ?
                  $_ALIGN_AND_MOSAIC_SUBARRAY_{SINGLESTEP} : 1;

# Rebin or resample? Default is resample (rebin = 0).
my $rebin = (exists $_ALIGN_AND_MOSAIC_SUBARRAY_{REBIN} &&
	     defined $_ALIGN_AND_MOSAIC_SUBARRAY_{REBIN}) ?
             $_ALIGN_AND_MOSAIC_SUBARRAY_{REBIN} : 0;

# Method for determining the output pixel values
my $method = (exists $_ALIGN_AND_MOSAIC_SUBARRAY_{METHOD} &&
	      defined $_ALIGN_AND_MOSAIC_SUBARRAY_{METHOD}) ? 
              lc($_ALIGN_AND_MOSAIC_SUBARRAY_{METHOD}) : "nearest"; 

# Should I be verbose? (default to yes)
my $verbose = (exists $_ALIGN_AND_MOSAIC_SUBARRAY_{VERBOSE} &&
               defined $_ALIGN_AND_MOSAIC_SUBARRAY_{VERBOSE}) ?
               $_ALIGN_AND_MOSAIC_SUBARRAY_{VERBOSE} : 1;

# Placeholder
my $skyalign = 0;

# If a single step, then check version of KAPPA is new enough
if (starversion_lt('kappa', 'V1.5')) {
  $singlestep = 0;
  orac_warn "Kappa version does not support WCSMOSAIC, falling back on dual-step method";
}

# Check to see if we're doing this all in one step
if ($singlestep) {

  # Check that we have more than one subarray to align
  my $no_of_subarrays = $Frm->numsubarrays;
  if ( $no_of_subarrays == 1 ) {
    # Dummy warning for now
    orac_warn "Note: data exist for only 1 subarray - skipping this primitive";
    # Of course, now we should ignore everything else...
  }

  orac_print("Aligning and mosaicking subarray images with WCSMOSAIC \n");

  # Set the WLIM parameter for WCSMOSAIC
  my $wlim = 0.2;

  # Number of files in current frame
  my $nfiles = $Frm->nfiles;

  # Array of output filenames to store in Frame object on completion
  my @out;

  # Determine reference image for aligning all images to. If SKYALIGN
  # is set, then create a reference image in the specified Celestial
  # coordinate frame.
  my $refimage;
  if ( $skyalign ) {
    # Set the output coordinate frame
    my $celframe = "EQUATORIAL";# placeholder
    _CREATE_REFERENCE_IMAGE_ FRAME=$celframe VERBOSE=1
    $refimage = $_CREATE_REFERENCE_IMAGE_{RESULTS};
  } else {
    # if there's a Grp file, use that
    if ($Grp->file_exists) {
      $refimage = $Grp->file;
    } else {
      # Last resort use the first file in the current Frm
      $refimage = $Frm->file(1);
    }
  }

  # Do we have sub-headers? If not, then we have just 4 (or
  # N_WORKING_SUBARRAYS) images to mosaic
  if ( defined $Frm->hdr->{SUBHEADERS}->[0]->{SEQSTART}  || 
       defined $Frm->hdr->{SUBHEADERS}->[0]->{NSUBSCAN} ) {
    # Hash to store each SEQSTART/NSUBSCAN combination as appropriate
    # images are mosaicked
    my %commonfiles;

    # Loop over number of files to store associations
    for my $i (1..$nfiles) {
      my $seqstart = $Frm->hdr->{SUBHEADERS}->[$i-1]->{SEQSTART};
      my $nsubscan = $Frm->hdr->{SUBHEADERS}->[$i-1]->{NSUBSCAN};
      # Define a unique identified key from nsubscan and seqstart
      push @{ $commonfiles{$seqstart."_".$nsubscan} }, $Frm->file($i);
    }

    # Loop over groups of files to mosaic them
    foreach my $arraygrp ( keys %commonfiles ) {
      # Note this collapses all files into the first one: should really
      # keep different nsubscan files separate
      my ($in, $out) = $Frm->inout('_arr');
      my $intmp = new ORAC::TempFile;
      my $numingrp = scalar( @{ $commonfiles{$arraygrp} } );
      # Write filenames into temp file
      for my $i (1 .. $numingrp) {
	print {$intmp->handle} $commonfiles{$arraygrp}->[$i-1] ."\n" ;
      }
      # Run WCSMOSAIC
      my $args = "ref=$refimage method=$method lbnd=! ubnd=! wlim=$wlim ".
	"out=$out in=^".$intmp->file;
      $Mon{kappa_mon}->obeyw("wcsmosaic","$args");
      # Add to output array
      push (@out, $out);
      # Remove temp file
      undef $intmp;
    }

  } else {
    my ($in, $out) = $Frm->inout('_arr');
    my $intmp = new ORAC::TempFile;
    # Write filenames into temp file
    foreach my $i (1..$nfiles) {
      print {$intmp->handle} $Frm->file($i) ."\n";
    }

    # Run WCSMOSAIC
    my $args = "ref=$refimage method=$method lbnd=! ubnd=! wlim=$wlim ".
      "out=$out in=^".$intmp->file;
    $Mon{kappa_mon}->obeyw("wcsmosaic","$args");
    # Add to output array
    push (@out, $out);
    # Remove temp file
    undef $intmp;
  }

  # Store the output files
  $Frm->files( @out );

} else { # OK, if SINGLESTEP is zero, check for COMBINE
  my $combine = (exists $_ALIGN_AND_MOSAIC_SUBARRAY_{COMBINE} &&
		 defined $_ALIGN_AND_MOSAIC_SUBARRAY_{COMBINE}) ?
		 lc($_ALIGN_AND_MOSAIC_SUBARRAY_{COMBINE}) : "median";

  # Call other primitives
  orac_print("Aligning and mosaicking subarray images in two stages \n");
  _ALIGN_ARRAYS_  METHOD=$method REBIN=$rebin
  _MAKE_MOSAIC_FRAME_ COMBINE=$combine
}
