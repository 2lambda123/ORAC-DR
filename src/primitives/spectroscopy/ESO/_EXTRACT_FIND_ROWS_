#+
# Name:
#    _EXTRACT_FIND_ROWS_ 

#
# Purpose:
#    Finds the rows containing the spectra.
#
# Language:
#    Perl5
#
# Description:
#    This primitive finds the rows in a group image at which to centre the
#    spectral-extraction windows. 
#
#    These are stored in a Group user-header called BEAMS, which is a
#    reference to an array of references to hashes, each hash having keys
#    POS and MULT, specifiying the beam position and multiplier
#    respectively.
#
#    Any residual bias in the supplied frame is removed by taking a
#    multiply clipped mean from the data.  A zero background helps the
#    identification of the spectral rows, both avoiding additional noise
#    peaks or making a beam undetected.
#
#    When determining the location of the rows on which the spectra fall,
#    a y-profile spectrum is created by taking the median to remove the
#    effects of outliers.  The profile is then thresholded at zero to
#    separate the positive and negative beams, which are analysed
#    separately.
#
# Arguments:
#    ROWSCAL = CHARACTER (Given)
#       If this is set to "SAVE", the primitive will store the beam
#       information it detects to the calibration rows system.  If it 
#       is set to "LOAD", the primitive will ask the calibration system
#       for the beam information rather than trying to determine it from
#       the data.  If unset, the beam information will be determined from
#       the image, and used without being stored to the calibration
#       system.
#    SMOOTH = INTEGER (Given)
#        A positive integer applies a median filter using a kernel size
#        of SMOOTH rounded up to the next whole odd integer.  If it is
#        not positive, no smoothing occurs.  [0]
#
# Notes:
#    -  The number of beams found is compared with the expected
#    number.  If the totals are not equal, say becuase of low
#    signal-to-noise, user header NBEAMS is set to 0, implying no
#    extraction.
#    -  The primitive reports the location, strength, and multiplier of
#    each peak found; or reports that the beam information came from the
#    calibration system.
#    -  The negative beam is multiplied by -1 before analysis.
#    -  If not all the beams are located, group user header NBEAMS is
#    set to zero.
#
# Output Data:
#    -  Residual sky-subtracted frame inheriting the frame's name but with 
#    the _srs suffix.
#    -  The one-dimensional collapsed spectral-axis profile inheriting the
#    frame's name but with the _ypr suffix.
#
# Tasks:
#    KAPPA: AXLABEL, COLLAPSE, CMULT, CSUB, STATS, THRESH; FIGARO: EMLT.
#
# Authors:
#    MJC: Malcolm J. Currie (Starlink)
#    PH: Paul Hirst (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Parameters
# ==========

# Load the rows from the calibration system, or store the rows.
    my $calload = ( defined $_EXTRACT_FIND_ROWS_{ROWSCAL} &&
                    $_EXTRACT_FIND_ROWS_{ROWSCAL} eq 'LOAD' ) ? 1 : 0;
    my $calsave = ( defined $_EXTRACT_FIND_ROWS_{ROWSCAL} &&
                    $_EXTRACT_FIND_ROWS_{ROWSCAL} eq 'SAVE' ) ? 1 : 0;

# Size of the smoothing box.  0 or negative is no smoothing.
    my $smooth = defined $_EXTRACT_FIND_ROWS_{SMOOTH} ? $_EXTRACT_FIND_ROWS_{SMOOTH} : 0;
    $smooth = ( $smooth > 0 ) ? $smooth : 0;
    $smooth = 0 if ( $Frm->recipe =~/STANDARD/ );
    
# Derive the smoothing kernel size.
    my ( $boxsize, $param );
    if ( $smooth ) {
       $boxsize = int( $smooth / 2 ) * 2 + 1;
    }

# Determine the residual background.
# ==================================

# Get the input filename.  We now will use an output file here in
# addition to adding some entries to the group uhdr.
    my $in = $Grp->file;
    my $grpFrm = new $Frm( $in );

# For repeated AA..BB.. or even some ABBA patterns, the sky can vary
# leaving a residual offset.  This can bias the optimal extraction,
# and even not detect one any beams with an effectively reduced signal.
# Note later for optimal extraction the beams are thresholded at zero,
# and that's where the sky level should be.  
#
# Therefore we perform a polynomial fit to the background along the
# spatial direction (disabled for now in favour of a bias correction).
#    $param = "variance fittype=poly nxpar=4 nypar=1 overwrite cosys=w accept";
#    $Mon{ 'kappa_mon' }->obeyw( "fitsurface", "ndf=$in $param" );

#    $Mon{ 'kappa_mon' }->obeyw( "makesurface", "ndf=$in $param" );
#    $param = "image=$in ys1=min ys2=max weight degree=3";

# Find the mode of the sky via a multiply clipped mean.
    $Mon{ 'kappa_mon' }->obeyw( "stats", "ndf=$in comp=Data clip=[2,2.5,3]" );
    ( my $ORAC_STATUS, my $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

# Generate the input and output filenames.  Use suffix _srs for
# sky-residual subtraction.
    my ( $in, $ssout ) = $grpFrm->inout( "_srs" );
      
# Subtract the sky correction from varying sky levels.
    $Mon{ 'kappa_mon' }->obeyw( "csub", "in=$in out=$ssout scalar=$mean" );
    orac_print "$in to $ssout: residual sky ($mean) subtracted\n";
    $grpFrm->file( $ssout );

# Want to retain this improved image for extraction.
    $Grp->file( $ssout );

# Variables we're going to set:
# central rows and multipliers of each beam; and ...
    my @beams;

# upper threshold.
    my $uth = 1000000;

    if ( ! $calload ) {

# We get the number of beams there should be from the Grp->uhdr.  This
# should have been put there by _EXTRACT_DETERMINE_NBEAMS_.
       my $nbeams = $Grp->uhdr( "NBEAMS" );

# Try to detect beams in the image.
# =================================

# Collapse the image along the dispersion axis into a Y PRofile (_ypr) file.
#      my $colfile = $in . "_ypr";
       my ( $in, $colfile ) = $grpFrm->inout( "_ypr" );

       $param = "in=$in out=$colfile axis=1 estimator=median title=$colfile"; 
       $Mon{ 'kappa_mon' }->obeyw( "collapse", "$param" );
       orac_print "Collapse $in along the first axis to make $colfile\n";

# Send the Y PRofile file off to display.
       my $yprFrm = new $Frm;
       $yprFrm->file( $colfile );
       $Display->display_data( $yprFrm ) if defined $Display;

       my $ncol = new ORAC::TempFile;
       my $ncolfile = $ncol->file;
       $Mon{ 'kappa_mon' }->obeyw( "cmult", "in=$colfile scalar=-1 out=$ncolfile" );

# Positive beams
# --------------

# How many positive beams should there be?
       my $posbeams = 0;
       $posbeams = 1 if ( $nbeams==1 );
       $posbeams = 1 if ( $nbeams==2 );
       $posbeams = 1 if ( $nbeams==3 );
       $posbeams = 2 if ( $nbeams==4 );

# Set the beam multiplier.  Three beams impleis one double strength
# positive beams sandwiched between two negative beams.
       my $mult = 1;
       $mult = 2 if ( $nbeams==3 );

# Create temporary file names.
       my $tmp = new ORAC::TempFile;
       my $tmpfile = $tmp->file;
       my $ORAC_STATUS;

       my $smoothed = new ORAC::TempFile;
       my $smofile = $smoothed->file;

       my $posbeamsfound = 0;
       if ( $posbeams ) {

# Need to thresh to only see the positive half.
          $param = "in=$colfile out=$tmpfile thrlo=0 newlo=bad thrhi=$uth newhi=$uth";
          $Mon{ 'kappa_mon' }->obeyw( "thresh", "$param" ); 

# Smooth
# ------
          if ( $smooth ) {
             $param = "in=$tmpfile estimator=median box=$boxsize out=$smofile";
             $Mon{ 'kappa_mon' }->obeyw( "block", "$param");
             $tmpfile = $smofile;
          }

# Locate and store the positive beams.
# ------------------------------------

# Create an image so that source extraction can follow on the (smoothed)
# collapsed positive half.  Figaro:EMLT is not robust for ESO data.
          _FIND_PEAKS_BY_MAKING_IMAGE_ PROFILE=$tmpfile MAXPEAKS=$posbeams

# Extract the result parameter.
          $posbeamsfound = $_FIND_PEAKS_BY_MAKING_IMAGE_{FOUND};
          orac_print "Detected $posbeamsfound of $posbeams positive beams\n";

# Loop over the detected beams, writing the details to the array of hashes.
          my $pixref = $_FIND_PEAKS_BY_MAKING_IMAGE_{POS};
          my $peakref = $_FIND_PEAKS_BY_MAKING_IMAGE_{PEAK};
          foreach my $i ( 1 .. $posbeamsfound ) {
             $beams[ $i ] = {POS => $pixref->[ $i-1 ], MULT => $mult};
orac_warn "Store beam info $i, POS to " .  $pixref->[ $i-1 ] . "MULT: $mult\n";
             orac_print "Found beam $i (factor $mult) at: pixel $pixref->[ $i-1 ]; " .
                        "peak mean strength = $peakref->[ $i-1 ].\n";
          }
       }

# Now do the negative beams.
# --------------------------
       my $negbeams = 0;
       $negbeams = 0 if ( $nbeams == 1 );
       $negbeams = 1 if ( $nbeams == 2 );
       $negbeams = 2 if ( $nbeams == 3 );
       $negbeams = 2 if ( $nbeams == 4 );
       $mult = -1;

# Need a new smoothed work array.
       my $smoothed = new ORAC::TempFile;
       my $smofile = $smoothed->file;

       my $negbeamsfound = 0;
       if ( $negbeams ) {

# Need to thresh to only see the positive half of the negated file.
          $param = "in=$ncolfile out=$tmpfile thrlo=0 newlo=bad thrhi=$uth newhi=$uth";
          $Mon{ 'kappa_mon' }->obeyw( "thresh", "$param" );

# Smooth
# ------
          if ( $smooth ) {
             $param = "in=$tmpfile estimator=median box=$boxsize out=$smofile";
             $Mon{ 'kappa_mon' }->obeyw( "block", "$param" );
             $tmpfile = $smofile;
          }

# Locate and store the negative beams.
# ------------------------------------
# Create an image so that source extraction can follow on the smoothed
# collapsed negative half.  Figaro:EMLT is not robust for ESO data.
          _FIND_PEAKS_BY_MAKING_IMAGE_ PROFILE=$tmpfile MAXPEAKS=$negbeams
      
          $negbeamsfound = $_FIND_PEAKS_BY_MAKING_IMAGE_{FOUND};
          orac_print "Detected $negbeamsfound of $negbeams negative beams.\n";

# Loop over the detected beams, writing the details to the group user
# header.
          my $pixref = $_FIND_PEAKS_BY_MAKING_IMAGE_{POS};
          my $peakref = $_FIND_PEAKS_BY_MAKING_IMAGE_{PEAK};

          foreach my $i ( 1 .. $negbeamsfound ) {
             my $j = $i + $posbeamsfound;
orac_warn "Store beam info $j, POS to " .  $pixref->[ $i-1 ] . "MULT: $mult\n";
             $beams[ $j ] = {POS => $pixref->[ $i-1 ], MULT => $mult};
             orac_print "Found beam $j (factor $mult) at: pixel $pixref->[ $i-1 ]; " .
                        "peak mean strength = $peakref->[ $i-1 ].\n";
          }
       }

# Validate and save the beam information.
# =======================================

# Check that all the expected beams were found.
       if ( ( $posbeamsfound + $negbeamsfound ) == $nbeams ) {

# Push the array of hashes into the user header.
          $Grp->uhdr( "BEAMS", \@beams );

# Save to the calibration system.
          if ( $calsave ) {

# Push these off to the calibration system.
             $Cal->rowindex->add( $Grp->file, {%{$Grp->hdr}, %{$Grp->uhdr}, %{$Frm->hdr}, %{$Frm->uhdr}});
             orac_print "Filed beam information to rows calibration system.\n";
          }

       } else {

# Don't let it do any extraction for now.
          orac_print "Did not find all the beams.  Will not extract this time round.\n";
          $nbeams = 0;
          $Grp->uhdr( "NBEAMS", $nbeams );
       }

    } else {

# Load from the calibration system.
# =================================
# Simply get the beam information from the calibration system.
       my ( $nbeams, @beams ) = $Cal->rows;

# Store in the user headers.
       $Grp->uhdr( "NBEAMS", $nbeams );
       $Grp->uhdr( "BEAMS", \@beams );

       orac_print "Retrieved beam information from calibration system.\n";
    }

    orac_print "\n";

# Podule
# ======

=head1 NAME

_EXTRACT_FIND_ROWS_ -- Finds the rows containing the spectra.

=head1 DESCRIPTION

This primitive finds the rows in a group image at which to centre the
spectral-extraction windows. 

These are stored in a Group user-header called BEAMS, which is a
reference to an array of references to hashes, each hash having keys
POS and MULT, specifiying the beam position and multiplier
respectively.

Any residual bias in the supplied frame is removed by taking a
multiply clipped mean from the data.  A zero background helps the
identification of the spectral rows, both avoiding additional noise
peaks or making a beam undetected.

When determining the location of the rows on which the spectra fall,
a I<y>-profile spectrum is created by taking the median to remove the
effects of outliers.  The profile is then thresholded at zero to
separate the positive and negative beams, which are analysed
separately.

=head1 ARGUMENTS

=over 4

=item ROWSCAL = CHARACTER (Given)

If this is set to "SAVE", the primitive will store the beam
information it detects to the calibration rows system.  If it 
is set to "LOAD", the primitive will ask the calibration system
for the beam information rather than trying to determine it from
the data.  If unset, the beam information will be determined from
the image, and used without being stored to the calibration
system.
 
=item SMOOTH = INTEGER (Given)

A positive integer applies a median filter using a kernel size
of SMOOTH rounded up to the next whole odd integer.  If it is
not positive, no smoothing occurs.  [0]

=back

=head1 NOTES

=over 4

=item *

The number of beams found is compared with the expected
number.  If the totals are not equal, say becuase of low
signal-to-noise, user header NBEAMS is set to 0, implying no
extraction.

=item *

The primitive reports the location, strength, and multiplier of
each peak found; or reports that the beam information came from the
calibration system.

=item *

The negative beam is multiplied by -1 before analysis.

=item *

If not all the beams are located, group user header NBEAMS is
set to zero.

=back

=head1 OUTPUT DATA

=over 4

=item *

Residual sky-subtracted frame inheriting the frame's name but with 
the _ss suffix.

=item *

The one-dimensional collapsed spectral-axis profile inheriting the
frame's name but with the _ypr suffix.

=back

=head1 TASKS

KAPPA: AXLABEL, COLLAPSE, CMULT, CSUB, STATS, THRESH; FIGARO: EMLT.

=head1 AUTHORS

Paul Hirst <p.hirst@jach.hawaii.edu>
Malcolm J. Currie <mjc@star.rl.ac.uk>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut
