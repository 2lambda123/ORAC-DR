=head1 NAME

_INTERLEAVE_COADD_ - Interleave and coadd multiple integrations.

=head1 DESCRIPTION

This primitive takes all the integrations (sub-frames) in an observation and
interleaves and/or co-adds them as necessary to form a single NDF.

=head1 NOTES

This essentially replaces the old primitives _INTERLEAVE_DETECTOR_POSITIONS_
and _COADD_MULTIPLE_EXPOSURES_

The interleaved observation is stored in a file with a _inc suffix.

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# OK, we're going to do this by working out what the sampling pattern
# used was, then looping through all the frames, adding them into the
# final NDF as appropriate. Thus, we make no assumptions about the
# number of integrations at each detector position, or about which
# position is in which integration component of the HDS, instead
# referring to the DINDEX header in the integration (ie .Ix) NDF
# headers.
my $nfiles = $Frm->nfiles;

# We only need to do this if we actually have done more than one
# integration.
if ($nfiles > 1) {

  # The ORAC_SCAN_INCREMENT is in pixels. If it's fractional, that means
  # we've made sub-pixel steps to increase the spectral resolution, and
  # that means we need to do an expansion.
  my $detincr = $Frm->uhdr("ORAC_SCAN_INCREMENT");
  my $expansion_factor = nint ( 1 / $detincr );

  # Set up two temporary files. The first will hold the expanded frames,
  # the second will hold the ARD mask information.
  my $expand = new ORAC::TempFile;
  my $efile = $expand->file;
  my $ard = new ORAC::TempFile;
  my $ardfile = $ard->file;

  # Create the ARD file here as there's no need to do this N times.
  # The ARD file blanks out all but the first out of every $a columns
  # Only if we have to do the expansion (i.e. the scan increment is
  # not one pixel, i.e. the expansion factor is not equal to one)
  if ($expansion_factor != 1) {
    foreach my $x (0 .. $Frm->uhdr("ORAC_X_DIM") - 1 ) {
      foreach my $y ( 1 .. $expansion_factor ) {
        if ($y != 1) {
	        my $eval = $expansion_factor * $x + $y;
          print {$ard->handle} "COLUMN( $eval )\n";
        }
      }
    }
    close $ard->handle or die "Could not close $ardfile: $!";
  }

  # Use a temporary file to store the list of input files for MAKEMOS
  # otherwise we overflow the max length of the command line parameter
  my $list = new ORAC::TempFile;
  my $listfile = $list->file;

  foreach my $i (1 .. $nfiles) {

    # Get input and output file names. This is to go to a step ready for
    # mosaicking.
    # ipm = interleave pre-mosaic This is essentially a temp file.
    my ( $in, $out )=$Frm->inout("_ipm", $i);

    # If necessary, expand the file in the spectral dimension and
    # mask out the rows. Otherwise, just copy the input file into
    # the output file.
    if( $expansion_factor == 1 ) {
      $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$in out=$out");
    } else {
      $Mon{'kappa_mon'}->obeyw("pixdupe", "in=$in out=$efile expand=[$expansion_factor, 1]");
      $Mon{'kappa_mon'}->obeyw("ardmask", "in=$efile out=$out ardfile=$ardfile");
    }

    # Now shift the image in +x by DINDEX-1 pixels
    my $origin = $Frm->hdr->{"I$i"}->{DINDEX};
    $Mon{'ndfpack_mon'}->obeyw("setorigin", "ndf=$out origin=\[ $origin\]");

    # Add to makemos list file
    print { $list->handle } "$out\n";

    # Update the Frm object and report
    $Frm->file($i, $out);
    orac_print ("$in to $out: Prepared for interleave-coadd\n");
  }

  close $list->handle or die "Could not close $listfile: $!";

  # We're going to 1 NDF now, and we're thru with $in
  $Frm->files( $Frm->file );
  $Frm->file( $Frm->file );

  my ($in, $out) = $Frm->inout( "_inc" );

  # Set up the parameters for MAKEMOS.
  my $mosparam = "genvar=true usevar=true logto=neither logfile=! method=mean"
               . " scale=false zero=false in=^$listfile"
               . " title=$out out=$out";

  # Perform the MAKEMOS.
  $Mon{'ccdpack_reg'}->obeyw("makemos", $mosparam);

  # Copy FITS headers from input file.
  my $headerin = $in;
  $headerin =~ s/\.I\d$//;
  my $ORAC_STATUS = ( copy_hdsobj( "$headerin.HEADER.MORE.FITS", "$out.MORE.FITS" ) ? ORAC__OK : ORAC__ERROR );


  # Update the Frame object and merge the headers.
  $Frm->files($out);
  $Frm->mergehdr;
  orac_print ("Frames interleaved and coadded into $out\n");
  $Frm->file($out);

  # Update the uhdr.
  $Mon{"ndfpack_mon"}->obeyw( "ndftrace", "ndf=$out" );
  ( $ORAC_STATUS, my @dims ) = $Mon{"ndfpack_mon"}->get("ndftrace", "dims");

  $Frm->uhdr("ORAC_X_DIM", $dims[0]);
  $Frm->uhdr("ORAC_GRATING_DISPERSION", $Frm->uhdr("ORAC_GRATING_DISPERSION")/$expansion_factor);

  # Proffer to display
  $Display->display_data( $Frm ) if defined $Display;
}

# Tidy up output.
orac_print "\n";
