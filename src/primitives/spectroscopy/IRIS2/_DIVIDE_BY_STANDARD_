=head1 NAME

_DIVIDE_BY_STANDARD_ - Divides a spectrum or an array by a suitable standard.

=head1 DESCRIPTION

Asks the calibration system for a suitable standard star, and divides by it.
This primitive works for either 1D or 2D data.

This primitive outputs a file with a _dbs suffix for 1D data, or a _dbsi
suffix for 2D data.

=head1 NOTES

=over 4

=item *

The input frames should have been normalised to 1 second exposures.

=item *

Only works if the user header PAIR_COMPLETE is true, i.e. we have come
to a frame that completes a pair.

=back

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>

Stuart Ryder <sdr@aaoepp.aao.gov.au>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

if ($Frm->uhdr("PAIR_COMPLETE")) {

  my $base = $Grp->raw;
  my $in = $Grp->file;
  my $out;

  # Copy the group uhdr into the frame uhdr for the Cal system to see it
  my $ndims = $Grp->uhdr("NDIMS");
  $Frm->uhdr("NDIMS", $ndims);

  # Need a different name for images and spectra for display system.
  if($ndims == 2) {
     $out = $base."_dbsi";
  } else {
     $out = $base."_dbs";
  }

  # Find me a standard
  my $std = $Cal->standard;
  orac_print "Standard: $std will be used\n";

  # Shift the spectrum to the same wavelength as the standard
  # SDR: Alignment is done by cross-correlating object with std.
  #      But what if the object has a spectrum completely unlike
  #      that of the standard? Only way to check for any flexure
  #      is to look for any shift in sky lines, but these have
  #      already been removed from group! Flexure, and reproduce-
  #      ability of spectral format are not big issues for IRIS2.
  # _ALIGN_SPECTRUM_TO_STD_ STANDARD=$std
  # $in = $Grp->file;

  # Divide by it
  $Mon{'kappa_mon'}->obeyw("div", "in1=$in in2=$std out=$out title=$out");
  orac_print "$in to $out: Divided by standard: $std\n";

  # Update the Group object
  $Grp->file( $out );

  # Display the dbs frame
  $Display->display_data( $Grp ) if defined $Display;

  orac_print "\n";
}
