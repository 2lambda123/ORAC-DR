=head1 NAME

_STANDARD_BLACKBODY_ - Divide a standard star spectrum by a blackbody model.

=head1 DESCRIPTION

Creates a blackbody model of the standard, and divides the extracted
spectrum by it.

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>
Malcolm J. Currie <mjc@jach.hawaii.edu>

Based loosely on code by:
b.cavanagh@jach.hawaii.edu

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research Council.
Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=cut

my $temp = $Grp->uhdr("TEMPERATURE");

if( defined( $temp ) && $temp ne 'UNKNOWN' ) {

# Filenames and things
  my $base = $Grp->raw;
  my $in = $Grp->file;

# Create a blackbody spectrum.
  my $bb = new ORAC::TempFile;
  my $bbfile = $bb->file;

# Need a temp file or two.
  my $tmp = new ORAC::TempFile;
  my $tmpfile = $tmp->file;

# Copy the input spectrum into a temp file and make sure the Axis
# label and units are such that FIGARO can understand them.
  $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$in out=$tmpfile");
  $Mon{'ndfpack_mon'}->obeyw("axlabel", "ndf=$tmpfile dim=1 label=Wavelength");
  $Mon{'ndfpack_mon'}->obeyw("axunits", "ndf=$tmpfile dim=1 units=Micron");

# Make the black body spectrum
  $Mon{'figaro4'}->obeyw("bbody", "in=$tmpfile out=$bbfile temp=$temp logar=false");

# This is in silly units (Jy/sr) Convert it to F-lambda back into the tmp file
  $Mon{'figaro2'}->obeyw("fwconv", "spectrum=$bbfile flux_unit=erg output=$tmpfile");

# Normalise it to 1 at the waveband centre.
  my $gwlen = $Frm->uhdr("WAVEBAND_CENTRE");
  if( $gwlen =~ /UNKNOWN/ ) {
    $gwlen = $Frm->uhdr("ORAC_GRATING_WAVELENGTH");
  }

  $Mon{'kappa_mon'}->obeyw("stats", "ndf=$tmpfile($gwlen~1)");
  (my $ORAC_STATUS, my $mean) = $Mon{'kappa_mon'}->get("stats", "mean");

  $Mon{'kappa_mon'}->obeyw("cdiv", "in=$tmpfile scalar=$mean out=$bbfile");

# Bodge on a variance component
  $Mon{'ndfpack_mon'}->obeyw("setvar", "ndf=$bbfile variance=0");

  my $suffix = "std";
  my $out = $base . "_" . $suffix;

# Divide by the black-body specrum
  $Mon{'kappa_mon'}->obeyw("div", "in1=$in in2=$bbfile out=$out title=$out");
  orac_print "$in to $out: Divided by Black Body Standard Star Model\n";
  $Grp->file($out);

# Set the PRODUCT keyword for the cube divided by the standard blackbody.
  my $product = "std";
  my $comment = "Spectrum divided by standard blackbody";
  $Grp->product( $product, $comment );

# Create the preview images and create the jsa:product keyword within them.
  my $preview_suffix = $suffix . "_rsp";
  _TAG_AS_REPRESENTATIVE_ UPDATE=0 GROUP=1 PRODUCT=$product SUFFIX=$preview_suffix COMMENT=$comment

# Update the headers with the PRODUCT.
  $Grp->allow_header_sync( 1 );
  $Grp->sync_headers( 1 );
  $Grp->allow_header_sync( 0 );

} else {

  orac_warn "Unable to determine temperature of standard. Will not divide by black body.\n";

}


orac_print "\n";
