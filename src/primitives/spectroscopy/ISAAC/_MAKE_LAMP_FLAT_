#+
# Name:
#    _MAKE_LAMP_FLAT_
#
# Purpose:
#    Makes calibration-lamp flats from the current group of frames.
#
# Language:
#    Perl5
#
# Description:
#    This primitive makes lamp flats from the DIFFERNCE_PAIR group, one
#    for each combination of filter, grating, and central wavelength.
#    For each difference frame, regions of the image beyond the slit are
#    flagged as bad, and divided by illumination along the slit.  The
#    latter is either a polynomial fit or a smoothed version of the 
#    collapsed image, expanded to all rows.  Then the primitive uses
#    a median to combine the illumination-corrected frames pixel by pixel,
#    and then divides the resultant image by its mean form the initial
#    flat field.  This flat is clipped to have values between 0.1 and
#    2.0, other values being set to bad, to produce the final flat.
#    The primitive files the resultant flats in its calibration index. 
#
# Arguments:
#    CLEAN = LOGICAL (Given)
#       If true (1), the frames are cleaned using a box filter to remove
#       any small blemishes.  Pixels deviating by more than 3 standard
#       deviations from its 15x15 pixel neighbourhood are rejected.  This
#       is done iteratively, three times.  If false (0), no cleaning is
#       performed.  [0]
#    ILLUM_METHOD = CHARACTER (Given)
#       The method by which the slit illumination correction is made.
#       Allowed values are "P" for polynomial and "S" for smoothing.
#       ["P"]
#    POLY_ORDER = INTEGER (Given)
#       The polynomial order when ILLUM_METHOD is "P".  It must be
#       a positive integer. [5]
#
# Notes:
#    -  This primitive is suitable for ISAAC in spectroscopy mode.
#    -  Processing only occurs for flat-type frames, and when the
#    steering header MAKE_FLAT is true.
#    -  The list of flats groups is given by the group user header
#    LAMP_FLAT_GROUPS.  The filter, grating name, and central
#    wavelength come from the user headers ORAC_FILTER,
#    ORAC_GRATING_NAME, ORAC_GRATING_WAVELENGTH respectively of
#    the first member of each of these groups.
#    -  Each flat is displayed.
#
# Tasks:
#    CCDPACK: MAKEFLAT; KAPPA: NDFCOPY.
#
# Output Data:
#    The flat fields.  Each is called is "flat_<param>_<groupnumber>" for 
#    the first cycle, and "flat_<filter>_<groupnumber>_c<cyclenumber>"
#    for subsequent cycles, where <groupnumber> is the frame number of
#    the group; "flat_<param> is the group name containing the filter,
#    grating, and central wavelength (cf. _LAMP_FLAT_STEER_); and
#    <cyclenumber> is the cycle number derived from steering header
#    CYCLE_NUMBER. 
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Selection
# =========
#
# This should only be performed on OBJECT frames, when it's time to
# make a flat.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "FLAT" && 
         $Frm->uhdr( "MAKE_FLAT" ) ) {

# Arguments
# =========
       my $clean = $_MAKE_LAMP_FLAT_{CLEAN};
       $clean = defined( $clean ) ? $clean : 0;

# Restrict to the alternatives.
       my $illum = $_MAKE_LAMP_FLAT_{ILLUM_METHOD};
       $illum = defined( $illum ) ? $illum : "P";
       if ( $illum !~ /^P/ && $illum !~ /^S/ ) {
          $illum = "P";
       }

# Obtain a polynomial order.
       my $poly_order = 5;
       if ( $illum =~ /^P/ ) {
          $poly_order = $_MAKE_LAMP_FLAT_{ORDER};
          $poly_order = defined( $poly_order ) ? $poly_order : 5;

# It must be a positive integer.
          $poly_order = 5 unless $poly_order !~ /^\d+$/;
       }

# Selection within groups
# =======================

# Get the cycle number.  Supply a default for recipes not supporting
# this yet.  Defined because the default is zero.  Probably don't need
# this but leave just in case.
       my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
       $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Obtain the group of difference frames.
       if ( ! ( defined $Grp->uhdr( "DIFFERENCE_GROUP" ) ) ) {
          orac_err "Group header DIFFERENCE_GROUP does not exist.  Programming error. " .
                   "_MAKE_LAMP_FLAT_ primitive requires _DIFFERENCE_PAIRS_ to be invoked too.\n";  
       }
       my $diffGrp = $Grp->uhdr( "DIFFERENCE_GROUP" );

# Access the existing array of flat groups by reference.
       if ( ! ( defined $Grp->uhdr( "LAMP_FLAT_GROUPS" ) ) ) {
          orac_err "Group header LAMP_FLAT_GROUPS does not exist.  Programming error. " .
                   "_MAKE_LAMP_FLAT_ primitive requires _LAMP_FLAT_STEER_ to be invoked too.\n";  
       }
       my $group_ref = $Grp->uhdr( "LAMP_FLAT_GROUPS" );
       my @groups = @$group_ref;

# Produce a flat for each group.
       foreach my $groupname ( @groups ) {

# Using the group name access the group itself.
          my $filterGrp = $Grp->uhdr( $groupname );
          my $filterFrm = $filterGrp->frame( 0 );

# Obtain the root flat name stored as the group file name.
          my $flatname = $filterGrp->file;

# Obtain the filter name, central wavelength, and grating name from the
# first member frame's user header.
          my $filter = $filterFrm->uhdr( "ORAC_FILTER" );
          my $grating = $filterFrm->uhdr( "ORAC_GRATING_NAME" );
          my $cw = $filterFrm->uhdr( "ORAC_GRATING_WAVELENGTH" );

# Extract from the differenced group those frames belonging to this group.
          my $flatGrp = $diffGrp->subgrp( ORAC_FILTER => $filter,
                                          ORAC_GRATING_NAME => $grating,
                                          ORAC_GRATING_WAVELENGTH => $cw );

# Make this the main group for this context.
          {
             my $Grp = $flatGrp;
             my $Frm = $flatGrp->frame( 0 );

# Form a list of input file names for MAKEFLAT from the other members
# of the group.  This is not as obvious as it sounds since we are
# trying to do this by looking at the current file values for each
# Frame object in the loop.  First time around everything is fine.
# Second time around we realise that the previous frames now have the
# wrong names since they have been flat-fielded etc.  We now have to
# construct the input names from the template.  The template is the
# current frame name.
             $Grp->template( $Frm->file );

# Remove illumination correction
# ==============================
             foreach $Frm ( $Grp->members ) {

# Mask those areas of the frame off the end of the slit.
                _MASK_ENDS_OF_SLIT_

                if ( $illum =~ /^P/ ) {
                   _NORMALIZE_FLAT_BY_POLY_ ORDER=$poly_order
                } else {
                   _NORMALIZE_FLAT_BY_SMOOTH_ BOXSIZE=5
                }
             }

# Make lists of files to process
# ==============================

# Form a list of input file names for CCDPACK tasks.  Set up the object
# list assuming that everything in the Group members list contains the
# file pointer to pre-flatfielded data.
             my @objects = $Grp->membernames;
             my $objlist = join( ",", @objects );

# Create text file to hold the list of input files, one per line.  This
# is needed because expanded lists of files may make the command line too
# long for the ADAM message system.
             unlink( "objlist.inlist$$" );
             open( INLIST, ">objlist.inlist$$" ) ||
               orac_throw "Unable to open objlist.inlist$$ to create a list of frames to process.  Error: $!.\n";
             print INLIST join( "\n", @objects ), "\n";
             close( INLIST );

# Make a normalised flat
# ======================

# Require a temporary file to hold the initial flat.
             my $tmp = new ORAC::TempFile;
             my $tmpfile = $tmp->file;

# Assign the parameters depending on whether or not to clean during flat
# formation.
             my ( $param1, $param2 );
             if ( $clean ) {
                $param2 = "method=fastmed sigmas=2.0 reset accept"; 
             } else {
                $param2 = "clean=f method=fastmed sigmas=2.0 reset accept"; 
             }

# Assign the remaining parameters.  Note that output flat is hardwired.
             $param1 = "in='^objlist.inlist$$' out=$tmpfile title=\'Flat field\'";

# Median filter of the debiassed and dark-corrected object frames to
# produce the flatfield.
             $Mon{ "ccdpack_red" }->obeyw( "makeflat", "$param1 $param2" );
             unlink( "objlist.inlist$$" );

# Report the status of the processing.
             orac_print "Frames $objlist used for flat\n";

# Generate the flat's name.
# =========================

# Specify the file cycle suffix.
             my $cyclesuffix = "";
             if ( $cycleno > 0 ) {
                $cyclesuffix = "_c" . $cycleno;
             }
 
# There is a different naming rule for polarimetry data.
             my $out = $flatname . $cyclesuffix;

# Apply thresholds to the flat.
# =============================

# Apply the thresholds, setting values outside these ranges to be bad.
             my $param = "thrlo=0.1 thrhi=2.0 newlo=bad newhi=bad";
             $Mon{ 'kappa_mon' }->obeyw( "thresh", "in=$tmpfile out=$out $param" );

# Report the status of the processing.
             orac_print "Pixels in the flat $out beyond the range 0.1 to 2.0 are set to bad.\n";

# Record and display the flat
# ===========================

# Want to use the imaging version.
             $Frm->uhdr( "ORAC_OBSERVATION_MODE" => "imaging" );

# Set the current flat in the calibration object.
             _FILE_FLAT_ NAME=$out

# Want to return to the spectroscopy mode.
             $Frm->uhdr( "ORAC_OBSERVATION_MODE" => "spectroscopy" );

# Display the image.
             _DISPLAY_FLAT_IMAGE_

          }
          orac_print "\n";
       }
    }

# Podule
# ======

=head1 NAME

_MAKE_LAMP_FLAT_ -- Makes calibration-lamp flats from the current group of frames.

=head1 DESCRIPTION

This primitive makes lamp flats from the DIFFERNCE_PAIR group, one
for each combination of filter, grating, and central wavelength.
For each difference frame, regions of the image beyond the slit are
flagged as bad, and divided by illumination along the slit.  The
latter is either a polynomial fit or a smoothed version of the 
collapsed image, expanded to all rows.  Then the primitive uses
a median to combine the illumination-corrected frames pixel by pixel,
and then divides the resultant image by its mean form the initial
flat field.  This flat is clipped to have values between 0.1 and
2.0, other values being set to bad, to produce the final flat.
The primitive files the resultant flats in its calibration index. 

=head1 ARGUMENTS

=over 4

=item CLEAN = LOGICAL (Given)

If true (1), the frames are cleaned using a box filter to remove any
small blemishes.  Pixels deviating by more than 3 standard deviations
from its 15x15 pixel neighbourhood are rejected.  This is done
iteratively, three times.  If false (0), no cleaning is performed. [0]

=item ILLUM_METHOD = CHARACTER (Given)

The method by which the slit illumination correction is made. Allowed
values are "P" for polynomial and "S" for smoothing.  ["P"]

=item POLY_ORDER = INTEGER (Given)

The polynomial order when ILLUM_METHOD is "P".  It must be
a positive integer. [5]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ISAAC in spectroscopy mode.

=item *

Processing only occurs for flat frames, and when the
steering header MAKE_FLAT is true.

=item *

The list of flats groups is given by the group user header
LAMP_FLAT_GROUPS.  The filter, grating name, and central
wavelength come from the user headers ORAC_FILTER,
ORAC_GRATING_NAME, ORAC_GRATING_WAVELENGTH respectively of
the first member of each of these groups.

=item *

Each flat is displayed.

=back

=head1 TASKS

CCDPACK: MAKEFLAT; KAPPA: NDFCOPY.

=head1 OUTPUT DATA

The flat field.  It is called is
"flat_E<lt>paramE<gt>_E<lt>groupnumberE<gt>" for the first cycle, and
"flat_E<lt>paramE<gt>_E<lt>groupnumberE<gt>_cE<lt>cyclenumberE<gt>"
for subsequent cycles, where E<lt>groupnumberE<gt> is the frame number
of the group; flat_E<lt>paramE<gt> is the group name containing the
filter, grating, and central wavelength (cf.
L<_LAMP_FLAT_STEER_|_LAMP_FLAT_STEER_>); and E<lt>cyclenumberE<gt> is
the cycle number derived from steering header CYCLE_NUMBER.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
