=head1 NAME

_COADD_CHOP_ - Coadd the chop beams.

=head1 DESCRIPTION

This primitive coadds (averages) the two chop beams in the current frame.
Nothing happens if the observation isn't of type CHOP.

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# Chop subtraction is only applicable to CHOP mode, oh and NDCHOP (ND_CHOP ?)

if ($Frm->uhdr("CHOPPING")) {

  # Process all the sub-files.

  my @files = ();
  my $mfiles = $Frm->nfiles / 2;

  my $tmp = new ORAC::TempFile;
  my $tmpfile = $tmp->file;

  foreach my $i (1 .. $mfiles) {

    # Generate the input numbers
    my $b = 2 * $i;
    my $a = $b -1;

    # Generate the input filenames.
    my $ina = $Frm->file($a);
    my $inb = $Frm->file($b);

    # If we're going to a single frame here, then need to know now
    # so we create an ndf rather than hds
    if ($mfiles == 1) {
      $Frm->files($Frm->file);
      $Frm->mergehdr;
    }

    # Generate the output filename, do the maths, report
    # acb = added chop beam (For FLATs)
    my $out = $Frm->inout( "_acb", $i);
    $Mon{'kappa_mon'}->obeyw("add", "in1=$ina in2=$inb out=$tmpfile");
    $Mon{'kappa_mon'}->obeyw("cdiv", "in=$tmpfile scalar=2 out=$out title=$out");
    orac_print "$ina + $inb to $out: averaged chop beams\n";

    # Note the new filename for the output frame
    push @files, $out;
  }

  # File the output frames in the Frame object
  $Frm->files(@files);

} else {
  orac_print "Not a CHOP observation; therefore no chop beam coaddition.\n";
}

# Display the frame
$Display->display_data($Frm) if defined $Display;

# Keep it tidy
orac_print "\n";
