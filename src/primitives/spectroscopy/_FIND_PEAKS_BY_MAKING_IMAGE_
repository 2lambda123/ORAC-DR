#+
# Name:
#    _FIND_PEAKS_BY_MAKING_IMAGE_
#
# Purpose:
#    Finds spectral beams in a wavelength-collapsed profile of a 2-d spectrum.
#
# Language:
#    Perl5
#
# Description:
#    This primitive takes a profile of a 2-d spectrum collapsed along
#    the wavelength axis, and turns it into a 5-pixel wide image, from
#    which objects are detected.  This is non-parametric unlike
#    Figaro:EMLT, which depends on the profile shape, and can prefer
#    faint blips over strong beams.  Objects are detected as positive
#    signal above the background.  So to detect negative features, the
#    profile should be multiplied by minus one and reanalysed.
#
# Arguments:
#    FOUND = INTEGER (Returned)
#       The number of peaks found up to MAXPEAKS.
#    MAXPEAKS = INTEGER (Given)
#       The maximum number of peaks to find.  [1]
#    PARFILE = LITERAL (Given)
#       The name of the paramater file.  The default is derived from
#       $Cal->find_file->(extractor_peaks.sex).  []
#    PEAK( FOUND ) = REAL (Returned)
#       The intensity of the peaks in order of descending intensity.
#    POS( FOUND ) = REAL (Returned)
#       The pixel positions of the peaks in order of descending
#       intensity.
#    PROFILE = NDF (Given)
#       The one-dimensional profile to be analysed for peaks.
#
# Notes:
#    -  Applies to any spectral profile.
#    -  The calibration files for the extraction are 
#    extraction_peaks.sex and extraction_peaks.param.  These are
#    generic and are found in $ORAC_CAL_ROOT/general-IR.  However,
#    extraction_peaks.sex may be tailored to different instruments,
#    notably the detection threshold; thus an instrument-specific
#    version may be placed in $ORAC_DATA_CAL.  An instrument version
#    the extraction_peaks.param file can be made (but not advised)
#    provided the PARAMETERS_NAME field is modified to point to
#    its location ($ORAC_DATA_CAL).  The results catalogue reports
#    the pixel co-ordinate of the peak and its flux, from which the
#    brightest MAXPEAKS are returned.  The detection threshold may
#    be changed by editing the DETECT_THRESH parameter in the
#    extraction_peaks.sex file, defaulting to 1.5 standard
#    deviations above the background.
#    -  The detection level is reported.
#    -  The image is the original profile flanked by symmetric half-
#    and quarter-strength copies.
#
# Tasks:
#    KAPPA: CMULT, MANIC, NDFCOPY, PASTE; EXTRACTOR.
#
# Deficiencies:
#    -  No validation that the profile is one-dimensional.

# Authors:
#    MJC: Malcolm J. Currie (Starlink)
#
# Copyright:
#    Copyright (C) 2003-2005 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# For OS-independent filename creation.
    use File::Spec;

# Parameters
# ==========

# Load the rows from the calibration system, or store the rows.
    my $profile = $_FIND_PEAKS_BY_MAKING_IMAGE_{PROFILE};
    if ( !defined $profile ) {
       orac_throw "Programming error: _FIND_PEAKS_BY_MAKING_IMAGE_ invoked without " .
                  "PROFILE argument defined.\n";
    }

# Obtain the number of objects to locate, defaulting to 1.
    my $beams_wanted = defined $_FIND_PEAKS_BY_MAKING_IMAGE_{MAXPEAKS} ? 
                         $_FIND_PEAKS_BY_MAKING_IMAGE_{MAXPEAKS} :
                         1;

# Obtain the name of the EXTRACTOR file in the calibration search path,
# and form the full file name including path.
    my $parfile = defined $_FIND_PEAKS_BY_MAKING_IMAGE_{PARFILE} ?
                            $_FIND_PEAKS_BY_MAKING_IMAGE_{PARFILE} :
                            "extractor_peaks.sex";

    $parfile = $Cal->find_file( $parfile );

    my ( $beams_found, @pos, @peak );

# Form image version of the profile
# =================================

# Create some work arrays.
    my $pad = new ORAC::TempFile;
    my $padfile = $pad->file;

    my $pad1 = new ORAC::TempFile;
    my $pad1file = $pad1->file;

    my $pad2 = new ORAC::TempFile;
    my $pad2file = $pad2->file;

    my $pad3 = new ORAC::TempFile;
    my $pad3file = $pad3->file;

    my $pad4 = new ORAC::TempFile;
    my $pad4file = $pad4->file;

    my $half = new ORAC::TempFile;
    my $halffile = $half->file;

    my $quart = new ORAC::TempFile;
    my $quartfile = $quart->file;

    my $image = new ORAC::TempFile;
    my $imagefile = $image->file;

# Create half and quarter times copies of the profile.
    $Mon{ 'kappa_mon' }->obeyw( "cmult", "in=$profile scalar=0.5 out=$halffile" );
    $Mon{ 'kappa_mon' }->obeyw( "cmult", "in=$profile scalar=0.25 out=$quartfile" );

# Make the 2-d array with five rows, placing the supplied profile in the central row.
    $Mon{ 'kappa_mon' }->obeyw( "manic", "in=$profile axes=[1,0] lbound=-1 ubound=3 out=$padfile" );

# Make the quarter and half scaled images into 2-d arrays, the signal weakening from the centre.
    $Mon{ 'kappa_mon' }->obeyw( "manic", "in=$quartfile axes=[1,0] lbound=-1 ubound=-1 out=$pad1file" );
    $Mon{ 'kappa_mon' }->obeyw( "manic", "in=$quartfile axes=[1,0] lbound=3 ubound=3 out=$pad2file" );
    $Mon{ 'kappa_mon' }->obeyw( "manic", "in=$halffile axes=[1,0] lbound=0 ubound=0 out=$pad3file" );
    $Mon{ 'kappa_mon' }->obeyw( "manic", "in=$halffile axes=[1,0] lbound=2 ubound=2 out=$pad4file" );

# Paste the scaled profiles into the 2-d array.
    my $param = "p1=$pad1file p2=$pad2file p3=$pad3file p4=$pad4file";
    $Mon{ 'kappa_mon' }->obeyw( "paste", "in=$padfile $param out=$imagefile" );
    $Mon{ 'ndfpack_mon' }->obeyw( "ndfcopy", "in=$padfile out=bum" );

# Perform inventory on the field
# ==============================

# Specify the EXTRACTOR parameters.  The name and format of the results  
# catalogue is fixed, containing just the x pixel position and the peak
# flux in the ASCII file ${ORAC_DATA_CAL}/extractor_peaks.param.  Set
# the default catalogue name.
    my $resfile = "profile_peak.cat";

# Read the EXTRACTOR parameter file line by line until the DETECT_THRESH
# parameter is encountered.  Extract its value.  Note the
# parameter file is whitespace separated.
    open( my $fh_parfile, "< $parfile" ) ||
      orac_throw "Unable to open $parfile to read the source inventory.  Error: $!.\n";
    my $found = 0;
    my $sigma = 1.5;
    my $line;
    while ( defined( $line = <$fh_parfile> ) && ! $found ) {
       if ( $line =~ /^DETECT_THRESH/ ) {
          $found = 1;
          my @words = split( /\s+/, $line );
          $sigma = $words[ 1 ];
       }
    }

# Obtain the catalogue name from the .sex file.
    while ( defined( $line = <$fh_parfile> ) && ! $found ) {
       if ( $line =~ /^CATALOG_NAME/ ) {
          $found = 1;
          my @words = split( /\s+/, $line );
          $resfile = $words[ 1 ];
       }
    }
 
# Finished with the parameter file.
    close( $fh_parfile );

# Report the processing status.
    orac_print "Detecting profile peaks in at $sigma times sky noise above sky.\n";

# Derive an inventory of the images in $resfile.
    $param = "image=$imagefile config=$parfile";
    my $extractor_status = $Mon{ "extractor" }->obeyw( "extract", "$param" );

# We can handle a failure here by setting the number of found features to 0.
# So we test a # local status rather than let ORAC-DR go on to the next file.
    if ( $extractor_status == ORAC__OK ) {

# Read the results file into an array.  Obtain the number of objects.
# Remove the results file.
       open( my $fh_resfile, "< $resfile" ) ||
         orac_throw "Unable to open $resfile to read the source inventory.  Error: $!.\n";

# Read the file, junking the first two header lines.
       my @lines = <$fh_resfile>;

# Obtain the number of peaks found.
       my $numpeaks = $#lines + 1;

# Tidy the file.
       close( $fh_resfile );
       unlink ( $resfile );

# Split on space and store each line as a reference to a hash in a
# temporary array, where we store the actual text for the row in the
# first element in the array for later recovery.
       my @fields = map { [ $_, split /\s+/,$_ ] } @lines;

# Need to sort on the second column, the peak flux, in ascending order.
       my @sorted = sort { $a->[3] <=> $b->[3] } @fields;

# Copy the table again, since the actual line is in position zero, then
# extract the columns into arrays.
       my @newlines = map { $_->[0] } @sorted;

       for ( my $ifd = 0; $ifd < $numpeaks; $ifd++ ) {
          my @fields = split( /\s+/, $newlines[$ifd] );

          push( @pos, $fields[1] );
          push( @peak, $fields[2] );
       }

# Now take the desired number of peaks.
       if ( $beams_wanted < $numpeaks ) {
          my @tmpos = ();
	  my @tmpeak = ();
          for ( my $i = 0; $i < $beams_wanted; $i++ ) {
             my $p = pop( @pos );
	     push( @tmpos, $p );
             $p = pop( @peak );
	     push( @tmpeak, $p );
          }

          @pos = @tmpos;
	  @peak = @tmpeak;
          $beams_found = $beams_wanted;
       } else {
          $beams_found = $numpeaks;
       }

    } else {
       $beams_found = 0;
       @pos = ();
       @peak = ();
    }

# Return the values.
# ==================
    $_FIND_PEAKS_BY_MAKING_IMAGE_{FOUND} = $beams_found;
    $_FIND_PEAKS_BY_MAKING_IMAGE_{POS} = \@pos;
    $_FIND_PEAKS_BY_MAKING_IMAGE_{PEAK} = \@peak;

# Podule
# ======

=head1 NAME

_FIND_PEAKS_BY_MAKING_IMAGE_ -- Finds spectral beams in a a wavelength-collapsed profile of a 2-d spectrum.

=head1 DESCRIPTION

This primitive takes a profile of a 2-d spectrum collapsed along the
wavelength axis, and turns it into a 5-pixel wide image, from which
objects are detected.  This is non-parametric unlike Figaro:EMLT,
which depends on the profile shape, and can prefer faint blips over
strong beams.  Objects are detected as positive signal above the
background.  So to detect negative features, the profile should be
multiplied by minus one and reanalysed.

=head1 ARGUMENTS

=over 4

=item FOUND = INTEGER (Returned)

The number of peaks found up to MAXPEAKS.

=item MAXPEAKS = INTEGER (Given)

The maximum number of peaks to find.  [1]

=item PARFILE = LITERAL (Given)

The name of the paramater file.  The default is derived from
$Cal-E<gt>find_file-E<gt>(extractor_peaks.sex).  []

=item PEAK( FOUND ) = REAL (Returned)

The intensity of the peaks in order of descending intensity.

POS( FOUND ) = REAL (Returned)

The pixel positions of the peaks in order of descending intensity.
=item PROFILE = NDF (Given)

The one-dimensional profile to be analysed for peaks.

=back

=head1 NOTES

=over 4

=item *

Applies to any spectral profile.

=item *

The calibration files for the extraction are 
extraction_peaks.sex and extraction_peaks.param.  These are
generic and are found in F<$ORAC_CAL_ROOT/general-IR>.  However,
extraction_peaks.sex may be tailored to different instruments,
notably the detection threshold; thus an instrument-specific
version may be placed in F<$ORAC_DATA_CAL>.  An instrument version
the extraction_peaks.param file can be made (but not advised)
provided the PARAMETERS_NAME field is modified to point to
its location (F<$ORAC_DATA_CAL>).  The results catalogue reports
the pixel co-ordinate of the peak and its flux, from which the
brightest MAXPEAKS are returned.  The detection threshold may
be changed by editing the DETECT_THRESH parameter in the
extraction_peaks.sex file, defaulting to 1.5 standard
deviations above the background.

=item *

The detection level is reported.

=item *

The image is the original profile flanked by symmetric half-
and quarter-strength copies.

=back

=head1 TASKS

KAPPA: CMULT, MANIC, NDFCOPY, PASTE; EXTRACTOR.

=head1 DEFICIENCIES

=over 4

=item *

No validation that the profile is one-dimensional.

=back

=head1 AUTHORS

Malcolm J. Currie (Starlink) <mjc@star.rl.ac.uk>

=head1 COPYRIGHT

Copyright (C) 2003-2005 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
