# -*-perl-*-

=head1 NAME

_CROSS_CORR_ALL_BEAMS_POL_ -- Cross correlates and shifts extracted beams
for polarimetry recipes.

=head1 DESCRIPTION

Takes the extracted beams from _EXTRACT_ALL_BEAMS_POL_ and cross
correlates each beam with the first one, then shifts each beam, so
that they're all shift-aligned with the first beam.

The input spectra are found in the POS_E, POS_O, NEG_E, and NEG_O (for
positive E and O, and negative E and O beams, respectively) components
in the current $Grp's E<lt>ANGLEE<gt>_GROUP uhdr group, i.e. for
the 0-degree waveplate angle observations, the Group object referenced
to in the current $Grp's 0_GROUP uhdr is used.

The resulting spectra are created in an HDS container with a filename
ending in _ccs, and the cross-correlation functions are stored in an
HDS container with a filename ending in _ccf.

If the maximum value of the cross-correlation function is less than
0.6, or if the shift is greater than 2 pixels, then the spectra are
not aligned and shifted.

=head1 AUTHORS

Paul Hirst <p.hirst@jach.hawaii.edu>
Brad Cavanagh (JAC) <b.cavanagh@jach.hawaii.edu>
Malcolm J. Currie <mjc@star.rl.ac.uk>

=head1 COPYRIGHT

Copyright (C) 1998-2005 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# We should have a "NBEAMS" header from _EXTRACT_DETERMINE_NBEAMS_.
my $nbeams = $Grp->uhdr("NBEAMS");

# Obtain the waveplate angle to get the proper group.
my $pol_angle = $Frm->uhdr("ORAC_WAVEPLATE_ANGLE");
$pol_angle =~ /(\d+)\./;
$pol_angle = $1;
my $group_header = "${pol_angle}_GROUP";
my $tempGrp = $Grp->uhdr("$group_header");

my $base = $tempGrp->raw;
my $in = $tempGrp->file;

my $out = $base . "_ccs";
my $ccf = $base . "_ccf";

# If there's only one beam (or, ahem no beams), don't bother
if ($nbeams > 1) {

  # Cross-correlate with positive e-beam.
  my $beamin = $in . ".POS_E";
  my $mainbeam = $beamin;

  # The output file - Cross-correlation shift.
  my $ORAC_STATUS = ( create_hdsobj( $out, 'UKIRT_POL', [ 0 ] ) ? ORAC__OK : ORAC__ERROR );

  # And the CCF file
  $ORAC_STATUS = ( create_hdsobj( $ccf, 'CCF', [ 0 ] ) ? ORAC__OK : ORAC__ERROR );

  # Copy the first beam over.
  my $beamout = $out.".POS_E";
  $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$mainbeam out=$beamout title=$beamout");
  orac_print "Copied $mainbeam to $beamout\n";

  # Loop over the remaining beams.
  my @beams = qw/ POS_O NEG_E NEG_O /;
  foreach my $beam ( @beams ) {

    $beamin = $in . ".$beam";
    $beamout = $out . ".$beam";
    my $ccfout = $ccf . ".$beam";

    # Cross correlate spectra with SCROSS.
    $Mon{'figaro1'}->obeyw("scross", "spectrum=$beamin template=$mainbeam record cross=$ccfout xstart=min xend=max"); 
    (my $ORAC_STATUS, my $shift) = $Mon{'figaro1'}->get("scross", "shift");
    orac_print "$ccfout: Cross-correlation Function of main and offset beam $beam\n";

    # Do a stats on the ccf.
    $Mon{'kappa_mon'}->obeyw("stats", "ndf=$ccfout(~100)");
    ($ORAC_STATUS, my $maximum) = $Mon{'kappa_mon'}->get("stats", "maximum");
    ($ORAC_STATUS, my $maxpos) = $Mon{'kappa_mon'}->get("stats", "maxpos");
    my $string = sprintf ("%4.1f", 100*$maximum);

    if($maximum > 0.6 && $maximum < 1 && abs( $shift ) < 6) {
      # OK, we'll use it
      orac_print "Peak of CCF (at $string %) indicates a shift of: $shift - Accepted\n";
      $shift *= -1;

      # Apply the shift, using an interpolation kernel that closely matches the
      # Figaro:ISHIFT results, but without the variance side effects.
      my $param = "in=$beamin out=$beamout abs=$shift method=sincsinc params=[2,1.5]";
      $Mon{'kappa_mon'}->obeyw("slide", "$param");
      $Mon{'ndfpack_mon'}->obeyw("settitle", "ndf=$beamout title=$beamout");

      # Fix up the AXIS structure to get rid of any bad pixels.
#      my $dispersion = $Frm->uhdr( "ORAC_GRATING_DISPERSION" );
#      my $refwave = $Frm->uhdr( "ORAC_GRATING_WAVELENGTH" );
#      my $xdim = $Frm->uhdr( "ORAC_X_DIM" );
#      my $firstwave = $refwave - ( $xdim / 2 ) * $dispersion;
#      my $lastwave = $refwave + ( $xdim / 2 ) * $dispersion;

      # Check that the range is valid.
#      if ( abs( $firstwave - $lastwave ) < 0.001 ) {
#        orac_err "Estimated wavelength range was 0 microns.  Something has gone wrong.\n";
#        orac_err "$in cannot be wavelength calibrated.";
#        my $ORAC_STATUS = ORAC__ERROR;
#      }

#      my $incr = ( $lastwave - $firstwave ) / $xdim;
#      my $exprs = "$firstwave+(INDEX-1)*($incr)-(($shift)*($dispersion))";
#      $Mon{'ndfpack_mon'}->obeyw( "setaxis", "ndf=$beamout mode=expression exprs=$exprs dim=1" );
#      $Mon{'ndfpack_mon'}->obeyw( "axlabel", "ndf=$beamout label=\'Estimated wavelength\' dim=1" );
#      $Mon{'ndfpack_mon'}->obeyw( "axunits", "ndf=$out units=micron dim=1" );

      orac_print "$beamin to $beamout: shifted by $shift\n";
    } else {

      # We'll reject the shift and simply copy it over.
      orac_print "Peak of CCF (at $string %) indicates a shift of: $shift - Rejected\n";
      $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$beamin out=$beamout");
      orac_print "$beamin to $beamout: copied without shifting\n";
    }

  }

  $tempGrp->file($out);

  # Update the group object.
  $Grp->uhdr("$group_header", $tempGrp);
}
