# -*-cperl-*-

=head1 NAME

_FLUX_CALIBRATE_ - Flux calibrate a spectrum.

=head1 DESCRIPTION

Flux calibrate a spectrum that has been divided by a standard star by
multiplying by an appropriate scaling factor. This scaling factor depends
on the magnitude and spectral type of the standard star.

This primitive works on either 1D or 2D observations. If a 1D observation
is flux calibrated, the resulting file ends in _fc. If a 2D observation is
flux calibrated, the resulting file ends in _fci.

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>
Malcolm J. Currie <mjc@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research Council.
Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

if ($Frm->uhdr("PAIR_COMPLETE")) {

  my $raw = $Grp->raw;
  my $in = $Grp->file;
  my $out;

  # Copy the group uhdr into the frame uhdr for the Cal system to see it
  my $ndims = $Grp->uhdr("NDIMS");
  $Frm->uhdr("NDIMS", $ndims);

  # Need a different name if an image to keep the display system happy
  if($ndims == 2) {
    $out = $raw."_fci";
  } else {
    $out = $raw."_fc";
  }

  # Find me a standard
  my $std = $Cal->standard;
  orac_print "Standard: $std will be used\n";

  # Need to find the mag of the std in the band that we're observing in.

  # Get the index entry for that standard
  my $stdidx = $Cal->standardindex->indexentry( $std );

  # Get the VMAG and SPECTYPE from it
  my $stdvmag = $stdidx->{'VMAG'};
  my $stdspec = $stdidx->{'SPECTYPE'};

  if( ( defined( $stdvmag ) && defined( $stdspec ) ) &&
      ( $stdvmag ne 'UNKNOWN' && $stdspec ne 'UNKNOWN' ) ) {

    # Get the waveband name.
    my $wband = $Frm->uhdr( "WAVEBAND" );

    # Now get the mag of the std in that band.
    _GET_REFERENCE_MAGNITUDE_ BAND=$wband SPECTRAL_TYPE=$stdspec VMAG=$stdvmag
    my $mag = $_GET_REFERENCE_MAGNITUDE_{MAG};

    # And the reference flux.
    _GET_REFERENCE_FLUX_ BAND=$wband
    my $flux = $_GET_REFERENCE_FLUX_{FLUX};

    if ($mag ne "UNKNOWN" && $flux ne "UNKNOWN") {
      # OK to proceed

      my $stdflux = 10**( -0.4 * $mag ) * $flux;

      $Mon{'kappa_mon'}->obeyw("cmult", "in=$in out=$out scalar=$stdflux title=$out");
      $Mon{'ndfpack_mon'}->obeyw("setunits", "ndf=$out units='W/m**2/um'");
      $Mon{'ndfpack_mon'}->obeyw("setlabel", "ndf=$out label=Flux");

      orac_print "$in to $out: Flux calibrated\n";

      $Grp->file($out);

      # Set the PRODUCT header.
      my $comment;
      my $product = "reduced";
      if ( $ndims == 2 ) {

        # Set the product for reduced spectral image.
        $comment = "Flux-calibrated spectral image";

        $Grp->product( $product, $comment );

        # Create the preview images and create the jsa:product keyword within them.
        _TAG_AS_REPRESENTATIVE_ UPDATE=0 GROUP=1 PRODUCT=$product SUFFIX=fc_rimg COMMENT=$comment

      } else {

        # Set the product name for the reduced spectrum.
        $comment = "Flux-calibrated spectrum";
        $Grp->product( $product, $comment );

        # Create the preview images and create the jsa:product keyword within them.
        _TAG_AS_REPRESENTATIVE_ UPDATE=0 GROUP=1 PRODUCT=$product SUFFIX=fc_rsp COMMENT=$comment

      }

      # Update the headers with the PRODUCT.
      $Grp->allow_header_sync( 1 );
      $Grp->sync_headers( 1 );
      $Grp->allow_header_sync( 0 );

      # Display the spectrum
      $Display->display_data( $Grp ) if defined $Display;

    } else {
      orac_print "Could not flux calibrate\n";
    }

  } else {

    orac_print "Do not have one of V magnitude, spectral type, or temperature for standard.\nWill not flux calibrate.\n\n";

  }

  # Tidy up output.
  orac_print "\n";

}
