=head1 NAME

_ALIGN_SPECTRUM_TO_STD_ - Cross correlate and shift before divide by
standard star.

=head1 DESCRIPTION

Cross correlates the spectrum with the standard star spectrum and shifts
it, so as to get better atmospheric cancellation if the instrument has
flexed between the standard and the target observations.

Takes a STANDARD parameter telling it the name of the standard to use.

Doesn't do anything unless the group NDIMS is 1

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>
Malcolm J. Currie <mjc@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research Council.
Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use Starlink::HDSPACK qw/ copy_hdsobj /;

my $ndims = $Grp->uhdr("NDIMS");

if($ndims == 1) {

   my $std = $_ALIGN_SPECTRUM_TO_STD_{STANDARD};

   if (!defined $std) {
      die "Called _ALIGN_SPECTRUM_TO_STD_ with no std parameter\n";
   }

   # Copy the standard into a temporary NDF so we don't trounce the
   # standard later on.
   my $std_tmp = new ORAC::TempFile;
   my $std_tmp_file = $std_tmp->file;
   $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$std out=$std_tmp_file" );

   my $in = $Grp->file;
   my $base = $Grp->raw;
   my $out = $base."_aws";    # Aligned with std
   my $ccf = $base."_scf";    # Std cross-correlation function

   # Make sure the input spectrum and the standard spectrum are the
   # same dimensions. If they're not, create a new spectrum with the
   # same length as the input spectrum and paste the standard spectrum
   # into it. This will maintain the wavelength scale of the standard
   # spectrum, taking into account the origin of the standard
   # spectrum.
   $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
   ( my $ORAC_STATUS, my @spec_ubnd ) = $Mon{'ndfpack_mon'}->get("ndftrace", "ubound" );
   ( $ORAC_STATUS, my @spec_lbnd ) = $Mon{'ndfpack_mon'}->get("ndftrace", "lbound" );
   my $x_spec_ubnd = $spec_ubnd[0];
   my $x_spec_lbnd = $spec_lbnd[0];
   $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$std" );
   ( $ORAC_STATUS, my @std_ubnd ) = $Mon{'ndfpack_mon'}->get("ndftrace", "ubound" );
   ( $ORAC_STATUS, my @std_lbnd ) = $Mon{'ndfpack_mon'}->get("ndftrace", "lbound" );
   my $x_std_ubnd = $std_ubnd[0];
   my $x_std_lbnd = $std_lbnd[0];
   if( $x_spec_lbnd != $x_std_lbnd ||
       $x_spec_ubnd != $x_std_ubnd ) {

     my $params = "ndf=$std_tmp_file($x_spec_lbnd:$x_spec_ubnd)";
     $Mon{'ndfpack_mon'}->obeyw( "setbound", "$params" );

     $ORAC_STATUS = ( copy_hdsobj( "$in.AXIS", "$std_tmp_file.AXIS" ) ? ORAC__OK : ORAC__ERROR );

   }

   $Mon{'figaro1'}->obeyw("scross", "spectrum=$in template=$std_tmp_file record cross=$ccf xstart=min xend=max");

   ($ORAC_STATUS, my $shift) = $Mon{'figaro1'}->get("scross", "shift");
   orac_print "$ccf: Cross-correlation Function of target and standard spectra\n";

   # Do a stats on the ccf.
   $Mon{'kappa_mon'}->obeyw("stats", "ndf=$ccf(~100)");
   ($ORAC_STATUS, my $maximum) = $Mon{'kappa_mon'}->get("stats", "maximum");
   my $string = sprintf ("%4.1f", 100*$maximum);

   # Is it reasonable?
   if ($maximum > 0.6 && $maximum < 1 && $shift < 2) {

      # OK, we'll use it
      orac_print "Peak of CCF (at $string %) indicates a shift of: $shift - Accepted\n";
      $shift *= -1;

      # Apply the shift, using an interpolation kernel that closely matches the
      # Figaro:ISHIFT results, but without the variance side effects.
      my $param = "in=$in out=$out abs=$shift method=sincsinc params=[2,1.5]";
      $Mon{'kappa_mon'}->obeyw("slide", "$param");

      # Fix up the AXIS structure to get rid of any bad pixels.
      my $dispersion = $Frm->uhdr( "ORAC_GRATING_DISPERSION" );
      my $refwave = $Frm->uhdr( "ORAC_GRATING_WAVELENGTH" );
      my $xdim = $Frm->uhdr( "ORAC_X_DIM" );
      my $firstwave = $refwave - ( $xdim / 2 ) * $dispersion;
      my $lastwave = $refwave + ( $xdim / 2 ) * $dispersion;

      # Check that the range is valid.
      if ( abs( $firstwave - $lastwave ) < 0.001 ) {
        orac_err "Estimated wavelength range was 0 microns.  Something has gone wrong.\n";
        orac_err "$in cannot be wavelength calibrated.";
        my $ORAC_STATUS = ORAC__ERROR;
      }

      my $incr = ( $lastwave - $firstwave ) / $xdim;
      my $exprs = "$firstwave+(INDEX-1)*($incr)-(($shift)*($dispersion))";
      $Mon{'ndfpack_mon'}->obeyw( "setaxis", "ndf=$out mode=expression exprs=$exprs dim=1" );
      $Mon{'ndfpack_mon'}->obeyw( "axlabel", "ndf=$out label=\'Estimated wavelength\' dim=1" );
      $Mon{'ndfpack_mon'}->obeyw( "axunits", "ndf=$out units=um dim=1" );

      orac_print "$in to $out: shifted by $shift\n";
      $Grp->file($out);

      # Set the PRODUCT header for archiving.
      my $comment = "Spectrum aligned with standard";
      _SET_FILE_FITS_ITEM_ FILE=$out KEY=PRODUCT VALUE=aligned COMMENT=$comment

   } else {

      # We'll reject the shift - simply don't file $out as the group file
      orac_print "Peak of CCF (at $string %) indicates a shift of: $shift - Rejected\n";
   }
}
