=head1 NAME

_SECOND_ORDER_SKY_SUBTRACTION_POL_ -- Remove any secondary sky, after
initial sky-subtraction has already been performed.

=head1 DESCRIPTION

This primitive removes any remnant sky from a previously
sky-subtracted frame. It does so by collapsing the frame along the
dispersion axis, forming a sky spectrum that is then expanded out and
subtracted from the input frame.

=head1 PARAMETERS

=over 4

=item METHOD = STRING (Given)

The estimator method to use when collapsing to form the sky
spectrum. [median]

=item YMIN = INTEGER (Given)

The lower bound over which the sky spectrum should be formed. If not
defined, this will default to the lower bound of the array.

=item YMAX = INTEGER (Given)

The upper bound over which the sky spectrum should be formed. If not
defined, this will default to the upper bound of the array.

=back

=head1 NOTES

None.

=head1 OUTPUT DATA

=over 4

=item The sky-subtracted frame with suffix _soss.

=back

=head1 TASKS

KAPPA: COLLAPSE, MANIC, SUB.

=head1 REQUIRED PERL MODULES.

None.

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu> (JAC)

=head1 COPYRIGHT

Copyright (C) 2006 Particle Physics and Astronomy Research Council.
All Rights Reserved.

=cut

# Tell the user what we're doing.
orac_print "Performing second-order sky subtraction.\n";

# Obtain parameters.
my $method = ( defined( $_SECOND_ORDER_SKY_SUBTRACTION_POL_{METHOD} )
               ? lc( $_SECOND_ORDER_SKY_SUBTRACTION_POL_{METHOD} )
               : 'median'
             );

my $ymin = ( defined( $_SECOND_ORDER_SKY_SUBTRACTION_POL_{YMIN} )
             ? $_SECOND_ORDER_SKY_SUBTRACTION_POL_{YMIN}
             : $Frm->uhdr( "ORAC_Y_LOWER_BOUND" )
           );
my $ymax = ( defined( $_SECOND_ORDER_SKY_SUBTRACTION_POL_{YMIN} )
             ? $_SECOND_ORDER_SKY_SUBTRACTION_POL_{YMIN}
             : $Frm->uhdr( "ORAC_Y_UPPER_BOUND" )
           );

my $tempGrp = $Grp->uhdr( $Frm->uhdr( "GROUP_HEADER" ) );

# Get the input file.
my $in = $tempGrp->raw;

# Determine the output file.
my $base = $tempGrp->file;
my $out = $base . "_soss";

# Collapse the frame along the wavelength axis into a temporary file.
my $tmp = new ORAC::TempFile;
my $tmpfile = $tmp->file;
my $params = "in=$in(,$ymin:$ymax) out=$tmpfile axis=2 estimator=$method";
$Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# Get the bounds of the input frame so that we can expand the
# collapsed "spectrum" into an NDF of the same size.
_GET_DIMENSIONS_
my $lbound_ref = $_GET_DIMENSIONS_{LBOUND};
my $ubound_ref = $_GET_DIMENSIONS_{UBOUND};
my $lbound = $lbound_ref->[0];
my $ubound = $ubound_ref->[0];

# Expand this out into the same size as the input frame.
my $tmp2 = new ORAC::TempFile;
my $tmpfile2 = $tmp2->file;
$params = "in=$tmpfile out=$tmpfile2 axes=[1,0] lbound=$lbound ubound=$ubound";
$Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Subtract.
$params = "in1=$in in2=$tmpfile2 out=$out";
$Mon{'kappa_mon'}->obeyw( "sub", "$params" );

# Tell the user what we did.
orac_print "$in to $out: Performed second-order sky subtraction.\n";

# Update the object.
$tempGrp->file( $out );

$Grp->uhdr( $Frm->uhdr( "GROUP_HEADER" ), $tempGrp );

# Display if requested.
$Display->display_data( $Grp ) if defined $Display;

# Tidy-up output.
orac_print "\n";
