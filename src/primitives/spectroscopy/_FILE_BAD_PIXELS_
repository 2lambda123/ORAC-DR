=head1 NAME

_FILE_BAD_PIXELS_ - Files a bad pixel mask with the calibration system.

=head1 DESCRIPTION

This primitive files a bad pixel mask with the calibration system for
future use. It optionally obtains a bad pixel mask from the calibration
system and merges it with the current one, then files the merged bad
pixel mask with the calibration system.

This primitive takes the current Frame (or file, if passed via the
parameter), optionally merges it with the bad pixel mask already existing
in the calibration system, then converts the result to a CGS4-style bad
pixel mask consisting of zeroes and bad pixels. The result is filed to
the calibration system and kept in a file named bpm_I<n>, where
I<n> is the observation number of the current observation.

=head1 PARAMETERS

=item FILE - create a bad pixel mask using the given file.

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# If we get passed a FILE argument, we use it, otherwise we use $Frm.
# $out from this shouldn't get used. $in maybe
my ($in, $out) = $Frm->inout("_bad");
my $ndf = ( $_FILE_BAD_PIXELS_{FILE} || undef );
if (!defined $ndf) {
   $ndf = $in;
}
# Stuff this into a temporary frame object
my $tFrm = new $Frm;
$tFrm->file($ndf);

# Determine if we're to start the BPM from scratch
if ($Frm->uhdr("ARRAY_TESTS_FRESH_BPM") eq "FALSE") {
   ($in, $out) = $tFrm->inout("_bpc");
   # Pull in the bad pixels from the filed mask - so this becomes cumulative
   my $mask = $Cal->mask;
   $Mon{'kappa_mon'}->obeyw("add", "in1=$in in2=$mask out=$out title=$out");
   orac_print ("$in to $out: Accumulated bad pixels from $mask\n");
   $tFrm->file($out);
} else {
   orac_print ("Starting Bad Pixel Mask from Fresh\n");
}

# Make it into a conventional cgs4 bpm - 0s everywhere good bad values elewhere
($in, $out) = $tFrm->inout("_bpm");
$Mon{'kappa_mon'}->obeyw("thresh", "in=$in newlo=0 newhi=0 out=$out title=$out thrhi=0 thrlo=0");
$Mon{'ndfpack_mon'}->obeyw("setbad", "ndf=$out value=true");
orac_print "$in to $out: To cgs4 bpm format\n";
$tFrm->file($out);


# Store as the current bpm
my $number = $Frm->uhdr("ORAC_OBSERVATION_NUMBER");
my $bpm = "bpm_$number";
$Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$out out=$bpm");
$tFrm->file($bpm);
$tFrm->readhdr;

$Cal->mask($bpm);
orac_print "$out to $bpm: copied and filed as the current bad pixel mask\n";

# Add to index file
$Cal->maskindex->add($tFrm->file, $tFrm->hdr );
orac_print "$bpm added to mask index file\n";
