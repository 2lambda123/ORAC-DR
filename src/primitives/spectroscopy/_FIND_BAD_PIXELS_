=head1 NAME

_FIND_BAD_PIXELS_ - Finds bad pixels in a frame.

=head1 DESCRIPTION

Used in array tests to add the bad pixels detected in this frame into the
bad pixel mask.

Applies thresholds to the data frames and flags pixels outside
the limits as bad.

For BIAS frames, we do a 3-sigma clipped stats and flag pixels more
than 6 sigma from the mean. The actual threshold limits applied are
reported. In addition, we also flag pixels whose BIAS variance is more
than 6-sigma above the mean in a 3-sigma clipped stats.

For DARK frames, we set the thresholds to 1700 and 15 if the exposure
is greater than 80 seconds, and 1500 and -100 if it is not. This will
need updating if MICHELLE elects to use an automated bad pixel
detection scheme in the future and when UIST support is added - these
values are CGS4 specific.

The bad pixels detected are added into the current bad pixel mask and
then this is filed with the calibration system as a new and current
bad pixel mask.

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

if ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "BIAS") {
   # Threshold on the pixel value

   my ($in, $out) = $Frm->inout("_bpd");

   # Do a kappa stats
   $Mon{'kappa_mon'}->obeyw("stats", "ndf=$in comp=Data clip=\[ 3 \]");

   # Get the mean and standard deviation
   my $ORAC_STATUS;

   ($ORAC_STATUS, my $mean) = $Mon{'kappa_mon'}->get("stats", "mean");
   ($ORAC_STATUS, my $sigma) = $Mon{'kappa_mon'}->get("stats", "sigma");

   my $thrhi = $mean + 6*$sigma;
   my $thrlo = $mean - 6*$sigma;

   $Mon{'kappa_mon'}->obeyw("thresh", "in=$in newlo=bad newhi=bad out=$out title=$out thrhi=$thrhi thrlo=$thrlo");
   orac_print "Bad pixels thresholds: low=$thrlo, high=$thrhi\n";

   $Mon{'ndfpack_mon'}->obeyw("setbad", "ndf=$out value=true");
   orac_print "$in to $out: Bad pixels detected by thresholding bias values\n";


   # Now search for anomolously large values in the variance component.
   # These would be pixels with unstable BIAS values.

   # Do a kappa stats
   $Mon{'kappa_mon'}->obeyw("stats", "ndf=$in comp=Variance clip = \[ 3 \]");

   # Get the mean and standard deviation

   ($ORAC_STATUS, $mean) = $Mon{'kappa_mon'}->get("stats", "mean");
   ($ORAC_STATUS, $sigma) = $Mon{'kappa_mon'}->get("stats", "sigma");

   $thrhi = $mean + 6*$sigma;

   my $tmp = new ORAC::TempFile;
   my $tmpfile = $tmp->file;

   $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$out out=$tmpfile");

   $Mon{'kappa_mon'}->obeyw("errclip", "in=$tmpfile out=$out limit=$thrhi mode=Variance");
   orac_print "Bad pixel threshold: variance high=$thrhi\n";
   orac_print "$out to $out: Unstable bias pixels detected and flagged\n";

   # Check the created bad pixel mask for suitability.
   _CHECK_BAD_PIXEL_MASK_ FILE=$out

   # Do NOT update the frame object as we don't want the _bpm going onto
   # the next stage.

   _FILE_BAD_PIXELS_ FILE=$out

}

if ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "DARK") {

   # This is going to get run on darks of all exposure times, not just the
   # long dark.

   # Mask any pixels with Really excessive or Really low dark current

    my ($in, $out) = $Frm->inout("_bpd");

   # Do a kappa stats
   #$Mon{'kappa_mon'}->obeyw("stats", "ndf=$in comp=Data");

   # Get the mean and standard deviation
   #my $ORAC_STATUS;

   #($ORAC_STATUS, my $mean) = $Mon{'kappa_mon'}->get("stats", "mean");
   #($ORAC_STATUS, my $sigma) = $Mon{'kappa_mon'}->get("stats", "sigma");

   #my $thrhi = $mean + 10*$sigma;
   #my $thrlo = $mean - 10*$sigma;

   my $thrlo;
   my $thrhi;

   # Fix these values for now. This may need attention with Michelle
   if (($Frm->uhdr("ORAC_EXPOSURE_TIME")) > 80) {
      $thrhi = 1700;
      $thrlo = 15;
   } else {
      $thrhi=1500;
      $thrlo = -100;
   }

   $Mon{'kappa_mon'}->obeyw("thresh", "in=$in newlo=bad newhi=bad out=$out title=$out thrhi=$thrhi thrlo=$thrlo");

   orac_print "Bad pixel thresholds: low=$thrlo, high=$thrhi\n";
   orac_print "$in to $out: Bad pixels detected by thresholding dark values\n";

   # Check the created bad pixel mask for suitability.
   _CHECK_BAD_PIXEL_MASK_ FILE=$out

   # Do NOT update the frame object as we don't want the _bpm going onto
   # the next stage.

   _FILE_BAD_PIXELS_ FILE=$out

}
orac_print "\n";
