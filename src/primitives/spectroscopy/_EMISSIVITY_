
=head1 NAME

_EMISSIVITY_ - Calculates telescope emissivity.

=head1 DESCRIPTION

Expects to be run on a SKY frame (taken pointing at the sky) and an
OBJECT frame (taken pointing at the mirror covers ie dome).

File extensions created:

Frames:

=over 4

=item B<_ess>

Emissivity Sky Spectrum

=item B<_eds>

Emissivity Dome Spectrum

=back

Group:

Group file contains ratio of sky and dome spectra

=over 4

=item B<_sm>

Smoothed by 5 pixels - used to select region

=back

Spectra are extracted from both files and divided by the exposure time
for that frame.

The "emissivity" spectrum is the ratio of these two spectra.

The emissivity spectrum is smoothed with a box of 5 pixels.  The
location of the minimum of the smoothed spectrum is found, and a
5-pixel window centred at this point is extracted from the sky and
dome spectra.  The mean values of these two windows are calculated and
printed.  The ratio of these two mean values is printed as the
emissivity.

=head1 PARAMETERS

=over 4

=item START

The row from which to start extracting.

=item END

The row at which to end extracting.

=back

=head1 ORAC

Engines referenced: KAPPA

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# Get the extraction region. This is from the (instrument specific) steerage now

_EMISSIVITY_SETUP_

my $start = $Frm->uhdr("EMISSIVITY_START");
my $end = $Frm->uhdr("EMISSIVITY_END");

if((!defined $start) || (!defined $end)) {
  die "_EMISSIVITY_ primitive called without first _EMISSIVITY_SETUP_\n";
}

# Define the name of the sky or dome spectrum, and store it and
# the observation number as user headers in the group file.
# The first header is used to determine whether or not both
# frames have each been converted to a spectrum---a requirment
# before the emissivity can be calculated.  The latter is used
# in the tabulated results.
    
my ($in, $out);
if ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "SKY") {
   ($in, $out) = $Frm->inout("_ess", $Frm->file);
   $Grp->uhdr("EMIS_SKY", $out);
   $Grp->uhdr("EMIS_SKN", $Frm->number);
} else {
   ($in, $out) = $Frm->inout("_eds", $Frm->file);
   $Grp->uhdr("EMIS_DOME", $out);
   $Grp->uhdr("EMIS_DMN", $Frm->number);
}

# Report on progress.
orac_print "Extracting rows $start to $end.\n";

# Extract the spectrum (with row averaging rather than summing)
# into a temporary file.  This is the same for sky and dome.
my $tmp = new ORAC::TempFile;
my $tmpfile = $tmp->file;
my $param = "axis=2 in=$in out=$tmpfile low=$start high=$end estimator=mean";
$Mon{'kappa_mon'}->obeyw("collapse", "$param");

# Divide it by the exposure time.
my $exptime = ($Frm->uhdr("ORAC_EXPOSURE_TIME"));
$Mon{'kappa_mon'}->obeyw("cdiv", "in=$tmpfile scalar=$exptime out=$out");

# Report on progress.
orac_print "$in to $out: spectrum extracted and divided.\n";

# Calculate the emissivity.

# Can only proceed once we've got both frames.
if (defined $Grp->uhdr("EMIS_SKY") && defined $Grp->uhdr("EMIS_DOME")) {

my $emis_sky = $Grp->uhdr("EMIS_SKY");
my $emis_dome = $Grp->uhdr("EMIS_DOME");
my $group_file = $Grp->file;

$param = "in1=$emis_sky in2=$emis_dome out=$group_file";
$Mon{'kappa_mon'}->obeyw("div", "$param" );

# Report on progress.
orac_print "Emissivity spectrum calculated: $group_file.\n";

# Now we do a 5x5-pixel box smooth on the emissivity spectrum, and find
# the lowest point.  The lowest point will have the least sky
# contribution.  Note that the box size must be odd.

$in = $group_file;
$out = $in . "_sm";
my $box = 5;
$param = "in=$in out=$out estimator=mean box=$box";
$Mon->{'kappa_mon'}->obeyw("block", "$param");

# Determine the position of that minimum point in the unsmoothed spectrum
# measured in pixel indices and axis co-ordinates (wavelength).
$Mon->{'kappa_mon'}->obeyw("stats", "ndf=$out");
my $ORAC_STATUS;
($ORAC_STATUS, my $wlenpix) = $Mon{'kappa_mon'}->get("stats", "minpos");
($ORAC_STATUS, my $wlen) = $Mon{'kappa_mon'}->get("stats", "mincoord");

# Determine the average sky and dome pixel values in a $box-wide
# window centred on the minimum pixel.
$Mon->{'kappa_mon'}->obeyw("stats", "ndf=$emis_sky($wlenpix~$box)");
($ORAC_STATUS, my $sky_val) = $Mon{'kappa_mon'}->get("stats", "mean");

$Mon->{'kappa_mon'}->obeyw("stats", "ndf=$emis_dome($wlenpix~$box)");
($ORAC_STATUS, my $dome_val) = $Mon{'kappa_mon'}->get("stats", "mean");  

# Calculate the emissivity from sky and dome values just obtained.
my $emissivity = 100.0 * $sky_val / $dome_val;

# Format results for output.
$emissivity = sprintf "%.2f", $emissivity;
$wlen = sprintf "%7.4f", $wlen;
$sky_val = sprintf "%.2f", $sky_val;
$dome_val = sprintf "%.2f", $dome_val;

orac_print "Emissivity measured from $box pixels centered at: $wlen um.\n";
orac_print "Sky value: $sky_val; Dome value: $dome_val.\n";
orac_print "Emissivity = $emissivity %.\n";

# Tabulate the results.

# Log the results into files... (normal and long forms)
my $log = new ORAC::LogFile("emissivity.log");
my $longlog = new ORAC::LogFile("emissivity_long.log");

# with this header
my @headers = ("UTDATE   Grating  Frames  Sky    Dome    Inst     Wlen  Emissivity",
               "------------------------------------------------------------------" );

my @longheaders = ("#UTDATE UTTIME Grpnum Sframe Dframe Instrument Disperser CenWavl MeasWavl Airmass SkyCnts DomeCnts Airtemp Barpress Dewpoint DomeTemp Humidity Mirr_ne mirr_nw Mirr_se Mirr_sw Mirrbtnw Mirrtpnw sectemp topairnw trussene trusswsw wind_dir wind_spd csotau taudate tausrc Emissivity");


# Write the headers to the file...
$log->header( @headers );
$longlog->header(@longheaders);


# and to the screen as well for now.
orac_print join("\n", @headers)."\n";

my $inst = $Frm->uhdr("ORAC_INSTRUMENT");

# Prepare some output.
my $utdate = $Frm->uhdr( "ORAC_UTDATE" );
my $grating = $Frm->uhdr( "ORAC_GRATING_NAME" );
my $string = sprintf("%-8s %8.8s %3.3d,%3.3d %6.2f %6.2f %8s %s %6.2f", $utdate, $grating, $Grp->uhdr( "EMIS_SKN" ), $Grp->uhdr( "EMIS_DMN" ), $sky_val, $dome_val, $inst, $wlen, $emissivity );

# Send to row of statistics to the logfile and the screen.
$log->addentry( $string );
orac_print "$string\n";

# Do the long log
$string = "$utdate ";
$string .= $Frm->uhdr("ORAC_UTSTART") . " ";
$string .= $Frm->hdr("GRPNUM") . " ";
$string .= $Grp->uhdr("EMIS_SKN") . " ";
$string .= $Grp->uhdr("EMIS_DMN") . " ";
$string .= $Frm->uhdr("ORAC_INSTRUMENT") . " ";
$string .= $Frm->uhdr("ORAC_GRATING_NAME") . " ";
$string .= $Frm->uhdr("ORAC_GRATING_WAVELENGTH") . " ";
$string .= $wlen . " ";
$string .= $Frm->uhdr("ORAC_AIRMASS_START") . " ";
$string .= $sky_val . " " . $dome_val . " ";
$string .= $Frm->hdr("AIRTEMP") . " ";
$string .= $Frm->hdr("BARPRESS") . " ";
$string .= $Frm->hdr("DEWPOINT") . " ";
$string .= $Frm->hdr("DOMETEMP") . " ";
$string .= $Frm->hdr("HUMIDITY") . " ";
$string .= $Frm->hdr("MIRR_NE") . " ";
$string .= $Frm->hdr("MIRR_NW") . " ";
$string .= $Frm->hdr("MIRR_SE") . " ";
$string .= $Frm->hdr("MIRR_SW") . " ";
$string .= $Frm->hdr("MIRRBTNW") . " ";
$string .= $Frm->hdr("MIRRTPNW") . " ";
$string .= $Frm->hdr("SECONDAR") . " ";
$string .= $Frm->hdr("TOPAIRNW") . " ";
$string .= $Frm->hdr("TRUSSENE") . " ";
$string .= $Frm->hdr("TRUSSWSW") . " ";
$string .= $Frm->hdr("WIND_DIR") . " ";
$string .= $Frm->hdr("WIND_SPD") . " ";
$string .= $Frm->hdr("CSOTAU") . " ";
$string .= $Frm->hdr("TAUDATE") . " ";
$string .= $Frm->hdr("TAUSRC") . " ";
$string .= $emissivity;


$longlog->addentry($string);


} else {
#       orac_print "Don't have both SKY and DOME observed yet.\n";
}
