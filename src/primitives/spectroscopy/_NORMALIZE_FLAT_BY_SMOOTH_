# _NORMALIZE_FLAT_BY_SMOOTH_			-*-perl-*-

=head1 NAME

NORMALIZE_FLAT_BY_SMOOTH - normalizes a 2-D image by using a moving box filter

=head1 DESCRIPTION

Normalizes a 2D image (usually a flat-field) and removes any large-scale changes
with wavelength by applying the following procedure:

1. The 2-D image is collapsed in Y to an average 1-D spectrum.

2. The spectrum is smoothed using a moving box filter.

3. The smoothed spectrum is grown in Y to an image with dimensions matching
the original image.

4. The original image is divided by the smoothed image.

=head1 PARAMETERS

=over 4

=item BOXSIZE

Defines the smoothing box size, in pixels. This should be an odd number in the range 
1:XMAX/2. Defaults to 5.

=back

=head1 ORAC

=head2 Engines referenced

KAPPA, FIGARO

=head2 Tasks called

=over 4

=item kappa_mon

block, div

=item figaro1

growx

=item figaro4

xtract

=back

=head2 Objects addressed

$Frm

=head2 REVISION

  $Id$

=head1 AUTHOR

b.cavanagh@jach.hawaii.edu

=cut

# Obtain the parameters.  The box size must be an odd-numbered
# positive integer.
    my $boxsize = ( $_NORMALIZE_FLAT_BY_SMOOTH_{BOXSIZE} || 5 );

    if ( ( $boxsize % 2 ) == 0 ) { 
       my $oldbox = $boxsize;
       $boxsize -= 1;
       orac_warn "Flat normalization smoothing box size modified " .
                 "to $oldbox to $boxsize.\n";
    } else ( $boxsize !~ /^\d+$/ ) {
       orac_warn "Flat normalization smoothing box size modified to 5. " .
                 "Supplied value, $boxsize, is not a positive integer.\n";
       $boxsize = 5;
    }

# Process all the sub-files.
    foreach my $i ( 1..$Frm->nfiles ) {

# Generate the input and output filenames.
       my ( $in, $out ) = $Frm->inout( "_nf", $i );
  
# Get the dimensions of the input image.
       my $xdim = $Frm->uhdr( "ORAC_DIM1" );
       my $ydim = $Frm->uhdr( "ORAC_DIM2" );

# Cope with the missing headers by accessing the array dimensions of
# the frame.
       my $param = "ndf=" . $Frm->file;
       my $ORAC_STATUS;
       $Mon{"ndfpack_mon"}->obeyw( "ndftrace", "$param" );
       if ( !( defined $xdim && defined $ydim ) ) {

# Extract the dimensions of the frame.
          ( $ORAC_STATUS, my @dims ) = $Mon{"ndfpack_mon"}->get( "ndftrace", "dims" );
          $xdim = $dims[ 0 ];
          $ydim = $dims[ 1 ];
       }

# Modify the boxsize for small arrays.
      if ( int( $xdim / 2 ) < $boxsize ) {
         my $oldbox = $boxsize;
         ( ( int( $xdim/2 ) % 2 ) == 0 ) ? ( $boxsize = int( $xdim / 2 ) - 1 ) : ( $boxsize = int( $xdim / 2 ) );
         orac_warn "Flat normalization smoothing box size modified from $oldbox to $boxsize.\n";
      }

# Collapse the 2-D image to a work 1-D spectrum.  Use available variance
# information in the combination and to generate variance of the
# 1-D array.  Task XTRACT aborts if there is no variance present
# when VARUSE is set to true.  So first determine whether or not there
# is a VARIANCE array.  Without the VARIANCE array, variance is
# derived from the scatter of values along the Y axis for the given X
# pixel.
       ( $ORAC_STATUS, my $varpresent ) = $Mon{"ndfpack_mon"}->get( "ndftrace", "variance");
       my $spec = new ORAC::TempFile;
       my $specname = $spec->file;
       $param = "out=$specname colaps=\[0,1\] info=no varuse=$varpresent";
       $Mon{'figaro4'}->obeyw( "xtract", "in=$in $param" );

# Smooth the 1-D spectrum using a box filter, and store in a tepmorary
# file.
       my $boxspec = new ORAC::TempFile;
       my $boxspecname = $boxspec->file;
       $param = "out=$boxspecname box=$boxsize estimator=mean wlim=!";
       $Mon{'kappa_mon'}->obeyw( "block","in=$specname $param" );
  
# Grow the smoothed spectrum into a 2-D temporary image.  Figaro/GROWX
# being simpler works, but doesn't support WCS.  For KAPPA there is a
# need to set the bounds and origin.
       my $smoothimage = new ORAC::TempFile;
       my $smoothimagename = $smoothimage->file;
#       $param = "image=$smoothimagename ystart=1 yend=$ydim ysize=$ydim new=true";
#       $Mon{'figaro1'}->obeyw( "growx","spectrum=$boxspecname $param" );
       $Mon{'ndfpack_mon'}->obeyw( "setbound", "ndf=$boxspecname(,1)" );
       $param = "in=$boxspecname out=$smoothimagename expand=[1,$ydim]";
       $Mon{'kappa_mon'}->obeyw( "pixdupe", "$param" );
       $Mon{'ndfpack_mon'}->obeyw( "setorigin", "$smoothimagename origin=[1,1]" );
  
# Divide the flat field by the smoothed image.
       $param = "in2=$smoothimagename out=$out title=$out";
       $Mon{'kappa_mon'}->obeyw( "div", "in1=$in $param" );

# Update the Frame object for the current sub-file.
       $Frm->file( $i, $out );

# Print a congratulatory message.
       orac_print "$in to $out: flat normalized.\n";

# Have the option to display the normalised flat. 
       $Display->display_data( $Frm ) if ( defined $Display );

}

