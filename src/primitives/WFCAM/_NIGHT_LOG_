
=head1 NAME

_NIGHT_LOG_ - Produces a text listing a summary of a frame's headers.

=head1 DESCRIPTION

Produces a line of text in a log file summarising the header values of
the frame. Is used both as part of the generall data reduction, so as
to produce an on-the-fly listing of what has been reduced so far, and
as part of the NIGHT_LOG recipe to provide a summary of a set (usually
the whole night's worth) of observations.

=head1 ARGUMENTS

The following arguments are available:

=over 4

=item OUT

When set (to any value) the log file is written to F<$ORAC_DATA_OUT>
rather than to F<$ORAC_DATA_IN>.

=back

=head1 OUTPUT DATA

The text log file F<E<lt>dateE<gt>.nightlog>, where
E<lt>dateE<gt> is the UT date.  For the multi-mode instruments UIST,
Michelle, IRIS2, and ISAAC the file is F<E<lt>dateE<gt>_sp.nightlog>.

The file is in F<$ORAC_DATA_IN> by default, or in F<$ORAC_DATA_OUT> if
the OUT argument is set.  This primitive is called from
_SPECTROSCOPY_HELLO_ with the OUT argument set, so the on-the-fly
nightlog appears in F<$ORAC_DATA_OUT>, and without the argument from
the NIGHT_LOG recipe, so that we can create a summary of a night's
observations in F<$ORAC_DATA_IN>.

The on-the-fly log in F<$ORAC_DATA_OUT> is always appended to, being
created only if it doesn't exist.  Thus multiple entries for the same
observation may exist in the on-the-fly log if the pipeline is rerun.

The "clean" log file in F<$ORAC_DATA_IN> is re-started if the observation
number equals 1 and is appended to otherwise, being created as necessary.

=head1 NOTES

=over 4

=item *

The logfile created by this primitive does not follow the standard
ORAC-DR naming convention (F<log.xxxx>) since it can be used to write
log files to directories other than F<$ORAC_DATA_OUT> and unique file
names are required.

=item *

No external algorithm engines are required by this primitive.

=item *

Run with the oracdr option -resume to prevent deletion of allready existing group files

=item *

Run with the oracdr option -noeng for efficiency

=back

=head1 AUTHORS

Frossie Economou (JAC)

Paul Hirst (JAC) <p.hirst@jach.hawaii.edu>

Tim Jenness (JAC)

Malcolm J. Currie (Starlink) <mjc@star.rl.ac.uk>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Add DR deduced headers, fix up problem headers
#_FIX_HEADERS_

# Obtain the frame number and UT date.
my $obsnum = $Frm->number;
my $obsdate = $Frm->uhdr( "ORAC_UTDATE" );

# Were we given the LONG option?
my $long = $_NIGHT_LOG_{"LONG"};
my $longsuff = "";
$longsuff = "-long" if ($long);

# Were we given the ENG option?
my $eng = $_NIGHT_LOG_{"ENG"};
$longsuff .= "-eng" if ($eng);

my $suffix = ".nightlog" . $longsuff;

# Specify the location of the nightly log file. [depends on the arguments]
my $nightlog;
if ( exists $_NIGHT_LOG_{"OUT"} ) {

  # ORAC_DATA_OUT is the current directory and the default location for
  # log files.
  $nightlog = "${obsdate}${suffix}";

  # If we're working in ORAC_DATA_OUT, always append to the file, creating
  # the logfile if it doesn't exist.
} else {

  # A non-standard location so full path is required
  $nightlog = $ENV{ "ORAC_DATA_IN" } . "/${obsdate}${suffix}";

  # If we're working in ORAC_DATA_IN, start fresh if this is frame 1
  # We don't care about the return value from unlink.
  unlink $nightlog if $obsnum == 1;
}

# Flag to indicate whether or not the log is there already.
my $is_there;
$is_there = ( -e $nightlog ? 1 : 0 );

# Create a new log object.
my $log = new ORAC::LogFile( $nightlog );

# Only proceed if we have a valid object
if ( defined $log ) {
  if ( $is_there ) {
    orac_print "Appending to Log: $nightlog\n";
  } else {
    orac_print "Log created as $nightlog\n";
  }

  # Create the empty strings.
  my $heading1="";
  my $heading2="";
  my $entry = "";

  # Observation number
  $heading1 .= " Obs |";
  $heading2 .= "-----|";
  #             12345
  $entry .= sprintf("%5d ", $obsnum);

  # Group number and flag 
  $heading1 .= " Grp |";
  $heading2 .= "-----|";
  #             12345
  $entry .= sprintf("%5d ", $Frm->findgroup);

  # Camera Number
  $heading1 .= " Cam |";
  $heading2 .= "-----|";
  #             12345
  $entry .= sprintf("%5d ", $Frm->hdr("CAMNUM"));

  # Object name and std flag
  $heading1 .= "   Object  Std|";
  $heading2 .= "--------------|";
  #             123456789012 1
  # Set the is-std Y/N value.
  my $isstd = $Frm->uhdr( "ORAC_STANDARD" );
  $isstd = "Y" if ( $isstd eq "1" );
  $isstd = "N" if ( $isstd eq "0" );
  $entry .= sprintf ("%12.12s %1.1s ", $Frm->uhdr("ORAC_OBJECT"), $isstd);

  # Observation Type
  $heading1 .= "Obstype|";
  $heading2 .= "-------|";
  #             1234567
  $entry .= sprintf("%7.7s ", $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ));


  if($long) {
    # RA
    $heading1 .= "RA    |";
    $heading2 .= "------|";
    #             123456
    $entry .= sprintf("%6.3f ", $Frm->uhdr( "ORAC_RA_BASE" ));

    # Dec
    $heading1 .= "Dec    |";
    $heading2 .= "-------|";
    #             1234567
    $entry .= sprintf("%7.3f ", $Frm->uhdr( "ORAC_DEC_BASE" ));
  }

  # RA offset
  $heading1 .= "RAoff|";
  $heading2 .= "-----|";
  #             12345
  $entry .= sprintf("%5.1f ", $Frm->uhdr( "ORAC_RA_TELESCOPE_OFFSET" ));

  # Dec offset
  $heading1 .= "DECof|";
  $heading2 .= "-----|";
  #             12345
  $entry .= sprintf("%5.1f ", $Frm->uhdr( "ORAC_DEC_TELESCOPE_OFFSET" ));

  # UT
  $heading1 .= " UT     |";
  $heading2 .= "--------|";
  #             12345678
  # Format the UT start in hours, minutes, and seconds from decimal hours.
  my $ut = $Frm->uhdr( "ORAC_UTSTART" );

  $ut =~ m/.*T(.*)/;
  $ut = $1;

  $entry .= sprintf("%8.8s ", $ut);

  # AirMass
  $heading1 .= " AM |";
  $heading2 .= "----|";
  #             1234
  $entry .= sprintf("%4.2f ", $Frm->uhdr( "ORAC_AIRMASS_START" ));

  # Exposure time
  $heading1 .= "DExpT |";
  $heading2 .= "------|";
  #             123456
  $entry .= sprintf("%6.2f ", $Frm->uhdr( "ORAC_EXPOSURE_TIME" ));

  # Number of exposures per integration
  $heading1 .= "Nxp|";
  $heading2 .= "---|";
  #             123
  $entry .= sprintf("%3d ", $Frm->uhdr( "ORAC_NUMBER_OF_EXPOSURES" ));

  if ($long) { 
   # Detector mode
    $heading1 .= "MODE    |";
    $heading2 .= "--------|";
    #             12345678
    $entry .= sprintf("%8.8s ", $Frm->uhdr( "ORAC_DETECTOR_READ_TYPE" ));

    # Array size
    $heading1 .= "row_Xcol_|";
    $heading2 .= "---------|";
    #             123456789
    # Obtain the array dimensions.
    my $x1 = $Frm->uhdr( "ORAC_X_LOWER_BOUND" );
    my $x2 = $Frm->uhdr( "ORAC_X_UPPER_BOUND" );
    my $y1 = $Frm->uhdr( "ORAC_Y_LOWER_BOUND" );
    my $y2 = $Frm->uhdr( "ORAC_Y_UPPER_BOUND" );

    my $xdim = $x2-$x1+1;
    my $ydim = $y2-$y1+1;
    my $rowxcol = "${xdim}x${ydim}";
    $entry .= sprintf("%9.9s ", $rowxcol);
  }  

  # Filter
  $heading1 .= "Filter|";
  $heading2 .= "------|";
  #             123456
  $entry .= sprintf("%6.6s ", $Frm->uhdr( "ORAC_FILTER" ));

  # DR recipe
  $heading1 .= "    DR Recipe   |";
  $heading2 .= "----------------|";
  #             1234567890123456
  $entry .= sprintf("%-16s", $Frm->recipe);


  $log->header($heading1, $heading2);
  $log->addentry($entry);
} else {
  orac_warn "Could not create nightlog $nightlog.\n";
}
