    # Get information about the catalogue to be used and the mean extinction.
    # This should come from the primitive _PHOTOMDATA_. It's a fatal error
    # if either one doesn't exist...

    my $filt = (defined $_DOPHOTOM_IMAGE_{FILTER} ? $_DOPHOTOM_IMAGE_{FILTER} : "");
    my ($Finfo,$Cinfo);
    orac_print "Doing $filt band photometry on " . $Frm->file .
        " using catalogue " . $Frm->uhdr("CATFILE") . "\n";
    _PHOTOMDATA_ FILTER=$filt
    if (! $Finfo) {
        orac_throw "_DOPHOTOM_IMAGE_: Missing filter information.";
    }
    if (! $Cinfo) {
        orac_throw "_DOPHOTOM_IMAGE_: Missing catalogue information.";
    }
    no strict 'refs';
    no strict 'vars';

    # Parse the names of the catalogue columns and the variables that will
    # be associated with them.

    my @allcolnames = @{$$Cinfo{'columns'}};
    my @allcolvars = @{$$Cinfo{'vars'}};

    # Get the exposure time and airmass. Then calculate the extinction

    my $exposed = $Frm->uhdr("ORAC_EXPOSURE_TIME");
    my $airmass = $Frm->uhdr("ORAC_AIRMASS_START");
    my $extinct = eval $$Finfo{'extinct'};
   
    # Loop for each extension

    my $sumzp = 0.0;
    my $sumzp4 = 0.0;
    my $sumnzp = 0;
    my $sumvar = 0.0;
    my $sumvar4 = 0.0;
    foreach my $i (1 .. $Frm->findnsubs) {
        my $frm = $Frm->getasubframe($i);
        my $catname = $frm->uhdr("CATFILE");
        my $percorr = $frm->uhdr("PERCORR");

        # Right, get some photometric standards that should appear on the
        # current image

        my @gpars = ();
        if ($$Cinfo{'accessmethod'} eq "searchfits") {
            @gpars = ("local","",$$Cinfo{'location'});
        } elsif ($$Cinfo{'accessmethod'} eq "searchinternet") {
            @gpars = ($$Cinfo{'vizcat'},"cds","");
        } else {
            orac_throw "_DOPHOTOM_IMAGE_: Non-standard access method";
        }

        # Get a temporary file for the FITS table and get the standards

        my $tmpstds = ORAC::TempFile->new(0);
        my $stdsfile = $tmpstds->file;
        unlink $stdsfile if (-e $stdsfile);
        my $errmsg;
        my $retval = cir_getstds($frm->file,$stdsfile,@gpars,2000.0,5,$errmsg);
        if ($retval != CIR_OK) {
            orac_err "CIR_GETSTDS: Failed in _DOPHOTOM_IMAGE_\n$errmsg";
            next;
        }

        # Open the output subset catalogue and see how many standards there are

        my $status = 0;
        my $fptr = Astro::FITS::CFITSIO::open_file($stdsfile,READONLY,$status);
        my ($hdutype,$nrows);
        $fptr->movabs_hdu(2,$hdutype,$status);
        if ($status != 0) {
            orac_err "_DOPHOTOM_IMAGE_: Unable to read extracted FITS table";
            next;
        }
        $fptr->get_num_rows($nrows,$status);

        # If there aren't any rows, then go to the next image extension...

        if ($nrows <= 0) {
            $fptr->close_file($status) if ($fptr);
            $tmpstds->DESTROY;
	    next;
        }

        # Get the column numbers for the RA, Dec and all filter columns

        my ($racol,$deccol);
        $fptr->get_colnum(CASESEN,"ra",$racol,$status);
        $fptr->get_colnum(CASESEN,"dec",$deccol,$status);
        my @allcolnums = ();
        my $ncols = @allcolnames;
        my $colnum;
        foreach my $col (@allcolnames) {
	    $fptr->get_colnum(CASESEN,$col,$colnum,$status);
            push @allcolnums,$colnum;
        }
        if ($status != 0) { 
            orac_err "_DOPHOTOM_IMAGE_: One or more columns missing from standard FITS table";
            $fptr->close_file($status) if ($fptr);
            $tmpstds->DESTROY;
            next;
        }

        # Open the object catalogue for the image and read some stuff from
        # the header

        my ($ellcol,$classcol,$corecol,$core4col,$pkcol,$saturate,$apcor,$apcor4,$junk);
        my $cptr = Astro::FITS::CFITSIO::open_file($catname,READONLY,$status);
        $cptr->get_colnum(CASESEN,"Ellipticity",$ellcol,$status);
        $cptr->get_colnum(CASESEN,"Classification",$classcol,$status);
	$cptr->get_colnum(CASESEN,"Core_flux",$corecol,$status);
	$cptr->get_colnum(CASESEN,"Core4_flux",$core4col,$status);
	$cptr->get_colnum(CASESEN,"Peak_height",$pkcol,$status);
	$cptr->read_key(TFLOAT,"SATURATE",$saturate,$junk,$status);
	$cptr->read_key(TFLOAT,"APCOR",$apcor,$junk,$status);
	$cptr->read_key(TFLOAT,"APCOR4",$apcor4,$junk,$status);
	$cptr->close_file($status);
        if ($status != 0) {
            orac_err "_DOPHOTOM_IMAGE_: Columns or keywords missing from object catalogue";
            $fptr->close_file($status) if ($fptr);
            $tmpstds->DESTROY;
            next;
        }

        # Loop over each of the standard stars and see if you can find
        # a matching star in the object catalogue

        my $imatch = 0;
        my @zp = ();
        my @zp4 = ();
        foreach my $j (1 .. $nrows) {
            my ($val,$anynul,$rastd,$decstd);
            $fptr->read_col(TFLOAT,$racol,$j,1,1,0.0,$val,$anynul,$status);
            $rastd = $$val[0];
            $fptr->read_col(TFLOAT,$deccol,$j,1,1,0.0,$val,$anynul,$status);
            $decstd = $$val[0];

            # Do the search of the catalogue

            _SEARCHCAT_ CATNAME=$catname RA=$rastd DEC=$decstd RADIUS=2.0
            my $cptr = $_SEARCHCAT_{CPTR};
            my $ntrows = $_SEARCHCAT_{NTROWS};
            my $bestrow = $_SEARCHCAT_{BESTROW};

            # If none matched, then go on to the next one

            if ($ntrows == 0) {
                $cptr->close_file($status) if ($cptr);
                next;
            }

            # If you got a match, then read the magnitude information from 
            # the standard catalogue

            for (my $k = 0; $k < $ncols; $k++) {
                my $col = $allcolnames[$k];
                my $varname = $allcolvars[$k];
                $fptr->read_col(TFLOAT,$allcolnums[$k],$j,1,1,0.0,$val,$anynul,
                    $status);
                ${$varname} = $$val[0];
            }

            # Read the required information from the object catalogue

            my ($coreflux,$core4flux,$ellipt,$iclass,$pkht);
	    $cptr->read_col(TFLOAT,$corecol,$bestrow,1,1,0.0,$val,$anynul,
		$status);
	    $coreflux = $$val[0];
	    $cptr->read_col(TFLOAT,$core4col,$bestrow,1,1,0.0,$val,$anynul,
		$status);
	    $core4flux = $$val[0];
	    $cptr->read_col(TFLOAT,$ellcol,$bestrow,1,1,0.0,$val,$anynul,
		$status);
	    $ellipt = $$val[0];
	    $cptr->read_col(TFLOAT,$classcol,$bestrow,1,1,0.0,$val,$anynul,
		$status);
	    $iclass = $$val[0];
	    $cptr->read_col(TFLOAT,$pkcol,$bestrow,1,1,0.0,$val,$anynul,
		$status);
	    $pkht = $$val[0];
	    $cptr->close_file($status);

            # Check that this has the right classification and that
            # it is neither trailed nor saturated

            next if (int($iclass) != -1 || $pkht >= $saturate || $ellipt > 0.5);

            # Ok, we've jumped through all the hoops.  Now work out the
            # instrumental magnitude.

            my $cf = $coreflux/$exposed;
            $cf = 1.0 if ($cf < 1.0);
            my $fluxmag = 2.5*log10($cf) + $apcor + $percorr;
            $cf = $core4flux/$exposed;
            $cf = 1.0 if ($cf < 1.0);
            my $fluxmag4 = 2.5*log10($cf) + $apcor4 + $percorr;

            # Work out the reference magnitude for the standard

            my $refmag = eval $$Finfo{'refmag'};

            # Get the zero point now and store it away

            $zp[$imatch++] = $refmag + $fluxmag + $extinct;
            $zp4[$imatch] = $refmag + $fluxmag4 + $extinct;
        }

        # Tidy the temporary standards file away

        $fptr->close_file($status);
        $tmpstds->DESTROY;

        # If anything matched, then get the median the MAD and a 3 sigma 
        # clipped mean for both apertures

        if ($imatch != 0) {
            my ($retval,$zpmed,$zpmad,$zpcav,$zpsig,$lcut,$hcut);
            my $errmsg;
            $retval = cir_medmad(\@zp,undef,$imatch,$zpmed,$zpmad,$errmsg);
            $lcut = $zpmed - 3.0*1.48*$zpmad;
            $hcut = $zpmed + 3.0*1.48*$zpmad;
            $retval = cir_meansigcut(\@zp,undef,$imatch,$lcut,$hcut,$zpcav,
                $zpsig,$errmsg);
            
            $sumzp += $imatch*$zpcav;
            $sumvar += $imatch*$zpsig*$zpsig;
            $sumnzp += $imatch;
            $retval = cir_medmad(\@zp4,undef,$imatch,$zpmed,$zpmad,$errmsg);
            $lcut = $zpmed - 3.0*1.48*$zpmad;
            $hcut = $zpmed + 3.0*1.48*$zpmad;
            $retval = cir_meansigcut(\@zp4,undef,$imatch,$lcut,$hcut,$zpcav,
                $zpsig,$errmsg);
            $sumzp4 += $imatch*$zpcav;
            $sumvar4 += $imatch*$zpsig*$zpsig;
        }
    }

    # Right, what is the weighted mean over all the extensions?

    if ($sumnzp > 0) {
        $sumzp /= $sumnzp;
        $sumzp4 /= $sumnzp;
        $sumvar = sqrt($sumvar/$sumnzp);
        $sumvar4 = sqrt($sumvar4/$sumnzp);
    }      
    $Frm->uhdr("ZP",$sumzp);
    $Frm->uhdr("ZPERR",$sumvar);
    $Frm->uhdr("ZP4",$sumzp4);
    $Frm->uhdr("ZPERR4",$sumvar4);

    # Finally, write these results to the extension headers...

    foreach my $i (1 .. $Frm->findnsubs) {
        my $frm = $Frm->getasubframe($i);
        $frm->update_header("MAGZPT",TFLOAT,$Frm->uhdr("ZP"),"Photometric ZP(mags) for default extinction (core_flux)");
        $frm->update_header("MAGZRR",TFLOAT,$Frm->uhdr("ZPERR"),"Photometric ZP error(mags) (core_flux)");   
        $frm->update_header("MAGZPT4",TFLOAT,$Frm->uhdr("ZP4"),"Photometric ZP(mags) for default extinction (core4_flux)");
        $frm->update_header("MAGZRR4",TFLOAT,$Frm->uhdr("ZPERR4"),"Photometric ZP error(mags) (core4_flux)");   

        # And to the catalogues

        my $catfile = $frm->uhdr("CATFILE");
        my $status = 0;
        my $fptr = Astro::FITS::CFITSIO::open_file($catfile,READWRITE,$status);
        $fptr->update_key(TFLOAT,"MAGZPT",$Frm->uhdr("ZP"),"Photometric ZP(mags) for default extinction (core_flux)",$status);
        $fptr->update_key(TFLOAT,"MAGZRR",$Frm->uhdr("ZPERR"),"Photometric ZP error (mags) (core_flux)",$status);
        $fptr->update_key(TFLOAT,"MAGZPT4",$Frm->uhdr("ZP4"),"Photometric ZP(mags) for default extinction (core4_flux)",$status);
        $fptr->update_key(TFLOAT,"MAGZRR4",$Frm->uhdr("ZPERR4"),"Photometric ZPerror (mags) (core4_flux)",$status);
        $fptr->close_file($status);
    }

=head1 NAME

_DOPHOTOM_IMAGE_

=head1 DESCRIPTION

Find a photometric zeropoint for each frame in an input file. The standards
to be used as well as the transformations and default extinctions are defined 
in the primitive _PHOTOMDATA_. The objects in an IMCORE catalogue are matched
with standards.  The flux in two apertures are compared with the standard
magnitudes to define a zeropoint. The two zeropoints and their scatters are
written to the header of the file and the catalogue.

=head1 ARGUMENTS

=over 4

=item FILTER = char (Given)

The name of the filter for this image/catalogue.

=back

=head1 NOTES

=over 4

=item *

The catalogue for the current frame is sought in the uhdr component CATFILE

=item *

The zeropoints are stored in the uhdr components ZP, ZPERR, ZP4 adn ZPERR4

=back

=head1 AUTHORS

JRL: Jim Lewis (CASU, IoA)

=head1 COPYRIGHT

Copyright (C) 2003-2006 Cambridge Astronomy Survey Unit. 
All Rights Reserved

=cut


