    use Data::Dumper;
    use Proc::Simple;
    use File::Temp qw(tempfile); # using this because I don't want the 
				 # temporary file destroyed when the descriptor
				 # goes out of scope as would happen if I used 
				 # the ORAC temp file module...

    my $ipix = (defined $_IMCORE_FACTORY_{IPIX} ? $_IMCORE_FACTORY_{IPIX} : 5);
    my $thresh = (defined $_IMCORE_FACTORY_{THRESH} ? $_IMCORE_FACTORY_{THRESH} : 1.5);
    my $icrowd = (defined $_IMCORE_FACTORY_{ICROWD} ? $_IMCORE_FACTORY_{ICROWD} : 1);
    my $rcore = (defined $_IMCORE_FACTORY_{RCORE} ? $_IMCORE_FACTORY_{RCORE} : 3.5);
    my $grid = (defined $_IMCORE_FACTORY_{GRID} ? $_IMCORE_FACTORY_{GRID} : 64);

    # Set up the instructions

    my $instructions = {};
    $instructions->{infile} = $Frm->file;
    $instructions->{ipix} = $ipix;
    $instructions->{thresh} = $thresh;
    $instructions->{grid} = $grid;
    $instructions->{cattype} = 1;
    $instructions->{icrowd} = $icrowd;
    $instructions->{rcore} = $rcore;
    $instructions->{cpm} = $Frm->hdr("CIR_CPM");
    my $line = Dumper($instructions);
    my ($dtmp,$dfh);
    ($dfh,$dtmp) = tempfile("factoryXXXXXXX");
    print $dfh "$line\n";
    $dfh->close;
    my $factory = sprintf("%s/recipes/WFCAM/bin/imcore_factory",$ENV{'ORAC_DIR'});
    my $procobj = Proc::Simple->new();
    $procobj->kill_on_destroy(0);
    my @allinc = ();
    foreach my $inc (split ':',$ENV{PERL5LIB}) {
	push @allinc,'-I';
	push @allinc,$inc;
    }
    foreach my $inc (split ':',$ENV{ORAC_PERL5LIB}) {
	push @allinc,'-I';
	push @allinc,$inc;
    }
    my $status = $procobj->start("$^X",@allinc,"$factory","$dtmp");
    my $pid = $procobj->pid;
    my $infile = $Frm->file;
    orac_print("Doing imcore on $infile remotely pid=$pid\n");
