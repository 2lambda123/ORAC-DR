    my $medfilt = (defined $_RESET_ANOM_{MEDFILT} ? $_RESET_ANOM_{MEDFILT} : 51);
    my $linfilt = (defined $_RESET_ANOM_{LINFILT} ? $_RESET_ANOM_{LINFILT} : 25);

    # Do the reset anomaly for each image.  Note that we have to write
    # the instruction to the header of each image extension...

    orac_print "Doing reset anomaly correction for " . $Frm->file . "\n";
    foreach my $i (1 .. $Frm->findnsubs) {
        my $frm = $Frm->getasubframe($i);
        next if (defined($frm->hdr("RSTANOM")) && ($frm->hdr("RSTANOM") =~ /^Done/));
        my $hline = sprintf("%s %d %d",RANOM_FILT,$medfilt,$linfilt);
        $frm->update_header("RSTANOM",TSTRING,$hline,"Reset anomaly instruction");

        # Now do the correction

        my $errmsg;
        my $retval = cir_tartup($frm->file,$errmsg);
        if ($retval != CIR_OK) {
            orac_err "CIR_TARTUP: failed in _RESET_ANOM_\n$errmsg\n";
        }
    }

=head1 NAME

_RESET_ANOM_ -- Correct for reset anomaly in a file

=head1 DESCRIPTION

This primitive cycles through all of the image extensions in an input file
and corrects the reset anomaly by median filtering each quadrant. If it's 
already been done, then the image is skipped

=head1 ARGUMENTS

=over 4

=item MEDFILT = int (Given)

The size of the median filter in pixels

=item LINFILT = int (Given)

The size of the linear filter in pixels

=head1 NOTES

None

=head1 AUTHORS

JRL: Jim Lewis (CASU, IoA)

=head1 COPYRIGHT

Copyright (C) 2003-2006 Cambridge Astronomy Survey Unit. 
All Rights Reserved

=cut


