# -*-cperl-*-

=head1 NAME

_JCMT_PICARD_RESULTS_ - store basic observation info in hash

=head1 SYNOPSIS

_JCMT_PICARD_RESULTS_

=head1 DESCRIPTION

This PICARD primitive stores a hash reference containing details of
the current file, such as name, source and wavelength.

The stored hash is used and re-stored in subsequent primitives, and
the values are available for writing to a log file once processing is
complete.

Note that if the hash already exists, this primitive will overwrite
it.

=head1 ARGUMENTS

This primitive has no arguments.

=head1 EXTERNAL TASKS

No external tasks are used.

=head1 OUTPUT DATA

The uhdr entry C<PICARD_RESULTS> contains a hash reference. The hash
contains the following keys:

=over 4

=item * airmass

Mean airmass for current file.

=item * date

The date of the observation in YYYYMMDD.dayfrac format.

=item * file

Name of input file.

=item * freq

Frequency in GHz.

=item * obsnum

Observation number.

=item * source

Source name.

=item * tau

Mean optical depth at 225 GHz for current file.

=item * wavelen

Wavelength in um.

=item * wvm

Mean WVM tau for current file.

=back

=head1 OUTPUT FILES

None

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

use constant CSOL => 2.9979e8;

my %picard_results;
$picard_results{file} = $Frm->file;
$picard_results{date} = sprintf "%.7f", $Frm->hdr("ORACTIME");

# Object, observation number and wavelength
$picard_results{source} = $Frm->hdr("OBJECT");
$picard_results{obsnum} = $Frm->hdr("OBSNUM");
my ($freq, $wavelen);
if ( $Frm->hdr("INSTRUME") eq "SCUBA-2" ) {
  $wavelen = 1.0e6 * $Frm->hdr("WAVELEN");
  $freq = sprintf "%8.4f", CSOL / (1.0e9 * $Frm->hdr("WAVELEN"));
} else {
  if ($Frm->hdr("OBS_SB") eq "USB") {
    $freq = 0.5 * ($Frm->hdr("LOFREQS") + $Frm->hdr("LOFREQE")) +
      $Frm->hdr("IFFREQ");
  } else {
    $freq = 0.5 * ($Frm->hdr("LOFREQS") + $Frm->hdr("LOFREQE")) -
      $Frm->hdr("IFFREQ");
  }
  $wavelen = sprintf "%3d", CSOL / (1.0e3 * $freq);
  $freq = sprintf "%8.4f", $freq;
}
$picard_results{wavelen} = $wavelen;
$picard_results{freq} = $freq;

# Optical depth
use JCMT::Tau;
my $tau = 0.5 * ($Frm->hdr("WVMTAUST") + $Frm->hdr("WVMTAUEN"));
$picard_results{wvm} = $tau;
($picard_results{tau}, my $status) = get_tau( $Frm->hdr("FILTER"),
					      "CSO", $tau);

# Airmass
$picard_results{airmass} = 0.5 * ( $Frm->hdr("AMSTART") +
				   $Frm->hdr("AMEND"));

$Frm->uhdr("PICARD_RESULTS", \%picard_results);
