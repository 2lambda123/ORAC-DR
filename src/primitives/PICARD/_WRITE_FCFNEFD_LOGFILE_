# -*-cperl-*-

=head1 NAME

_WRITE_FCFNEFD_LOGFILE_ - write log file for fcfnefd workflow

=head1 SYNOPSIS

_WRITE_FCFNEFD_LOGFILE_

=head1 DESCRIPTION

This PICARD primitive writes a simple ORAC-DR log file with the
results accumulated in the hash stored in the C<PICARD_RESULTS> uhdr
entry.

=head1 ARGUMENTS

This primitive has the following argument:

=over 4

=item LOGFILE

Flag to indicate whether or not a log file should be written. Default
is 1 (write a log file). May be overridden with the C<LOGFILE> recipe
parameter.

=back

=head1 EXTERNAL TASKS

None.

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Creates a log file called C<log.fcfnefd>.

=head1 LOGFILE FORMAT

The log file contains the following entries:

=over 4

=item 1. Input filename

=item 2. Object name

=item 3. Wavelength (um)

=item 4. Flux within an aperture (in pW, default radius is 30 arcsec)

=item 5. Mean noise in the image derived from apertures of the same size (pW)

=item 6. Mean exposure time (s)

=item 7. WVM tau

=item 8. Airmass

=item 9. Noise derived from variance (mJy/beam)

=item 10. Flux conversion factor derived from Gaussian fit to source
(Jy/beam/pW)

=item 11. Flux conversion factor derived using the integrated flux
within an aperture (Jy/sq arcsec/pW)

=item 12. Flux conversion factor derived using the integrated flux
within an aperture using autophotom (Jy/sq arcsec/pW)

=item 13. Flux conversion factor derived using the peak signal from a
Gaussian beam of the measured total flux density (Jy/beam/pW)

=item 14. Flux conversion factor derived using the peak signal from a
Gaussian beam of the measured total flux density using autophotom
(Jy/beam/pW)

=item 15.  Flux conversion factor derived from Gaussian fit to source
after processing with a matched filter (Jy/beam/pW)

=item 16. Zenith-corrected NEFD (mJy s**0.5)

=item 17. NEFD at current WVM tau based on value in S2SRO Call for Proposals (mJy s**0.5)

=item 18. Radius of aperture used for measurements (arcsec)

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2010 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Is a log file wanted?
my $uselog = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
$uselog = $Frm->uhdr("RECPAR_LOGFILE") if (defined $Frm->uhdr("RECPAR_LOGFILE"));

if ( $uselog ) {
  orac_print ("\nCalling _WRITE_FCFNEFD_LOGFILE_: write flux/nefd/fcf info to log file\n", "yellow");

  # This uhdr entry should exist if this primitive is being called....!
  if ( $Frm->uhdr("PICARD_RESULTS") ) {
    orac_print "Writing results to log file, log.fcfnefd...";

    my $logfile = new ORAC::LogFile("log.fcfnefd");
    $logfile->header("# log.fcfnefd log file in TOPCAT ASCII format",
		     "#             (mjd)                    (um)   (pW)        (pW)    (s)      tau           (mJy) (Jy/bm/pW) (Jy/asec^2/pW) (Jy/asec^2/pW) (Jy/bm/pW) (Jy/bm/pW) (Jy/bm/pW) (mJy.s^0.5)  (arcsec) (mJy.s^0.5) (mJy.s^0.5)",
		     "# File        Date     Object     Wavelen Flux        Noise   Texp     WVM  Airmass   Noise    FCF        FCFasec        FCFas_ap      FCFeq     FCFeq_ap   FCFmatch    NEFD_zen   Radius      NEFD      NEFD_eff  Nbol",
                    );

    # Pick out the radius used for aperture photometry if defined. Leave
    # blank if none is defined.
    my $radius = (defined $Frm->uhdr("RECPAR_APERTURE_RADIUS"))
      ? $Frm->uhdr("RECPAR_APERTURE_RADIUS") : 30;
    my %current_results = %{ $Frm->uhdr("PICARD_RESULTS") };

    my $datafile = $current_results{file};
    my $date = oractime2iso($current_results{date});
    my $source   = $current_results{source};
    $source =~ s/\s//g;
    my $wavelen  = $current_results{wavelen};
    my $wvm      = sprintf "%6.3f", $current_results{wvm};
    my $airmass  = sprintf "%5.3f", $current_results{airmass};

    my $noise    = sprintf "%8.2f", $current_results{noise};
    my $texp     = sprintf "%6.2f", $current_results{texp};

    # FCF
    my $print_fcf = sub {
      my $fcf = shift;
      return ($fcf) ? sprintf "%8.3f", $fcf : "NaN";
    };
    my $fcf = $print_fcf->($current_results{fcf_beam});
    my $fcf_as = $print_fcf->($current_results{fcf_asec});
    my $fcf_eq = $print_fcf->($current_results{fcf_equivbeam});
    my $fcf_ma = $print_fcf->($current_results{fcf_matchbeam});
    my $fcf_as_ap = $print_fcf->($current_results{fcf_asec_ap});
    my $fcf_eq_ap = $print_fcf->($current_results{fcf_equivbeam_ap});

    # Flux and image noise - these are left in pW
    my $flux_ap  = sprintf "%10.4f", $current_results{flux_ap};
    my $imnoise = sprintf "%8.5g", $current_results{imnoise};

    # Apply a zenith correction to the NEFD
    my $tau = $current_results{tau};
    my $zencorr = exp( $tau * ($current_results{airmass} - 1) );
    my $nefd_zen = sprintf "%5d", ($current_results{nefd} / $zencorr);

    # Actual NEFD
    my $nefd = sprintf "%5.2f", $current_results{nefd};
    my $eff_nefd = sprintf "%5.2f", $current_results{effnefd};
    my $nbol = $current_results{nbol_nefd};

    $logfile->addentry("$datafile   $date    $source  $wavelen $flux_ap $imnoise $texp  $wvm  $airmass $noise $fcf  $fcf_as  $fcf_as_ap $fcf_eq  $fcf_eq_ap $fcf_ma $nefd_zen  $radius  $nefd   $eff_nefd   $nbol");

    orac_print " done\n";
  } else {
    orac_warn "No results = no log file\n";
  }
}
