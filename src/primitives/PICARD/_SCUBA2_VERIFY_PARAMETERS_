# -*-cperl-*-

=head1 NAME

_SCUBA2_VERIFY_PARAMETERS_ - read recipe parameters for SCUBA-2 processing

=head1 SYNOPSIS

_SCUBA2_VERIFY_PARAMETERS_

=head1 DESCRIPTION

Sets up a few useful user-header entries for controlling the
processing of SCUBA-2 data.

=head1 ARGUMENTS

This primitive has no arguments.

=head1 EXTERNAL TASKS

No external tasks are used.

=head1 NOTES

See the documentation for the individual recipes for which parameters
are used.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# List of available recipe parameters
my @recpars = (
	       'APERTURE_RADIUS',
	       'AUTOPHOTOM',
	       'AUTOPHOTOM_INNER',
	       'AUTOPHOTOM_OUTER',
	       'BACKGROUND_FITMETHOD',
	       'DISPLAY',
	       'FINDBACK_BOX',
	       'FIT_FIXAMP',
	       'FIT_GAUSSIAN',
	       'FIT_METHOD',
	       'FITSURFACE_FITTYPE',
	       'FITSURFACE_FITPAR',
	       'FITSURFACE_KEEPSURFACE',
	       'FLUX_850',
	       'FLUX_450',
	       'LOGFILE',
	       'MAP_WIDTH',
	       'MAP_HEIGHT',
	       'MASK_SOURCE',
	       'MOSAIC_TASK',
	       'MAKEMOS_METHOD',
	       'MAKEMOS_SIGMAS',
	       'NEFD_CFP',
	       'PCA_COMP',
	       'PCA_KEEPFILES',
	       'PCA_FLATCLEAN',
	       'PCA_REUSE',
	       'PSF_MATCHFILTER',
	       'PSF_NORM',
	       'REGISTER_DEC',
	       'REGISTER_IMAGES',
	       'REGISTER_RA',
	       'SMOOTH_DATA',
	       'SMOOTH_FWHM',
	       'USEFCF',
	       'USEFCF_CALTYPE',
	       'VERBOSE',
	       'WCSMOSAIC_METHOD',
	       'WCSMOSAIC_PARAMS',
	      );

# Retrieve object
my $src = uc($Frm->hdr("OBJECT"));
# Strip spaces from name
$src =~ s/\s+//g;
# Add source-specific fluxes to recipe parameters
push(@recpars, "FLUX_850.$src","FLUX_450.$src");

# Store given parameters
ORAC::Recipe::Parameters::verify_parameters( \%RECPARS, \@recpars );

# Allow a VERBOSE flag to get extra info printed to screen
if ( defined $RECPARS{'VERBOSE'} ) {
  $Frm->uhdr("RECPAR_VERBOSE", $RECPARS{VERBOSE});
}

### Writing a logfile ###
# Flag to denote whether to collect info to write to a log file
if ( defined $RECPARS{'LOGFILE'} ) {
  $Frm->uhdr("RECPAR_LOGFILE", $RECPARS{LOGFILE});
}
# Do we want to write the CfP NEFD to a log file?
if ( defined $RECPARS{'NEFD_CFP'} ) {
  $Frm->uhdr("RECPAR_NEFD_CFP", $RECPARS{'NEFD_CFP'});
}

### Aperture photometry and source masking ###
# Radius of aperture for masking/photometry
if ( defined $RECPARS{'APERTURE_RADIUS'} ) {
  $Frm->uhdr("RECPAR_APERTURE_RADIUS", $RECPARS{APERTURE_RADIUS});
} else {
  # Define a suitable minimum value
  $Frm->uhdr("RECPAR_APERTURE_RADIUS", 30.0);
}

### Source fluxes ###
# Source fluxes at 850/450 um.
$Frm->uhdr("RECPAR_FLUX_850", $RECPARS{FLUX_850})
  if ( defined $RECPARS{'FLUX_850'} );
$Frm->uhdr("RECPAR_FLUX_450", $RECPARS{FLUX_450})
  if ( defined $RECPARS{'FLUX_450'} );
# Override with source-specific value if given by name
$Frm->uhdr("RECPAR_FLUX_850", $RECPARS{"FLUX_850.$src"})
  if ( defined $RECPARS{"FLUX_850.$src"} );
$Frm->uhdr("RECPAR_FLUX_450", $RECPARS{"FLUX_450.$src"})
  if ( defined $RECPARS{"FLUX_450.$src"} );

### Calibration ###
# Does the user want to use the FCF derived in the recipe?
if ( defined $RECPARS{'USEFCF'} ) {
  $Frm->uhdr("RECPAR_USEFCF", $RECPARS{USEFCF});
}
if ( $Frm->uhdr("RECPAR_USEFCF") && defined $RECPARS{'USEFCF_CALTYPE'}) {
  $Frm->uhdr("RECPAR_USEFCF_CALTYPE", uc($RECPARS{USEFCF_CALTYPE}));
}

### Map parameters ###
# New map width and height
if ( defined $RECPARS{'MAP_WIDTH'} ) {
  $Frm->uhdr("RECPAR_MAP_WIDTH", $RECPARS{MAP_WIDTH});
}
if ( defined $RECPARS{'MAP_HEIGHT'} ) {
  $Frm->uhdr("RECPAR_MAP_HEIGHT", $RECPARS{MAP_HEIGHT});
}

### Displaying data ###
# Flag to denote whether or not to display data
if ( defined $RECPARS{'DISPLAY'} ) {
  $Frm->uhdr("RECPAR_DISPLAY", $RECPARS{DISPLAY});
}

### PSF properties for matched-filter ###
# Name of PSF file in current directory for matched filter
if ( defined $RECPARS{'PSF_MATCHFILTER'} ) {
  $Frm->uhdr("RECPAR_PSF_MATCHFILTER", $RECPARS{PSF_MATCHFILTER});
}
# Name of PSF normalization scheme (must be peak or sum)
if ( defined $RECPARS{'PSF_NORM'} ) {
  $Frm->uhdr("RECPAR_PSF_NORM", $RECPARS{PSF_NORM});
}

### Source fitting ###
# What KAPPA task should be used to fit the source? Must be beamfit or psf.
if ( defined $RECPARS{'FIT_METHOD'} ) {
  my $method = lc($RECPARS{'FIT_METHOD'});
  $Frm->uhdr("RECPAR_FIT_METHOD", $RECPARS{FIT_METHOD})
    if ( $method eq "beamfit" || $method eq "psf" );
}
# Does the user wish to force a gaussian fit?
if ( defined $RECPARS{'FIT_GAUSSIAN'} ) {
  $Frm->uhdr("RECPAR_FIT_GAUSSIAN", $RECPARS{FIT_GAUSSIAN});
}
# Does the user wish to fix the amplitude of the fit to the peak signal?
if ( defined $RECPARS{'FIT_FIXAMP'} ) {
  $Frm->uhdr("RECPAR_FIT_FIXAMP", $RECPARS{FIT_FIXAMP});
}

### Background removal parameters ###
# Does the user want to mask out the source before fitting a surface?
if ( defined $RECPARS{'MASK_SOURCE'} ) {
  $Frm->uhdr("RECPAR_MASK_SOURCE", $RECPARS{MASK_SOURCE});
}

# Has the user requested the use of findback or
# fitsurface/makesurface? Default to fitsurface.
my $bgmethod = "fitsurface";
if ( defined $RECPARS{'BACKGROUND_FITMETHOD'} ) {
  $bgmethod = lc($RECPARS{'BACKGROUND_FITMETHOD'});
  $Frm->uhdr("RECPAR_BACKGROUND_FITMETHOD", $bgmethod);
}

if ( $bgmethod eq "findback" ) {
  # Size of box for findback
  $Frm->uhdr("RECPAR_FINDBACK_BOX", $RECPARS{'FINDBACK_BOX'})
    if ( defined $RECPARS{'FINDBACK_BOX'} );
} elsif ( $bgmethod eq "fitsurface" ) {
  # Fitsurface - fittype
  $Frm->uhdr("RECPAR_FITSURFACE_FITTYPE", lc($RECPARS{'FITSURFACE_FITTYPE'}))
    if ( defined $RECPARS{'FITSURFACE_FITTYPE'} );

  # Read the parameters if defined and store in an array
  if ( defined $RECPARS{'FITSURFACE_FITPAR'} ) {
    my @fitpar;
    if (ref($RECPARS{'FITSURFACE_FITPAR'}) eq "ARRAY") {
      @fitpar = @{$RECPARS{'FITSURFACE_FITPAR'}};
    } else {
      @fitpar = ($RECPARS{'FITSURFACE_FITPAR'}, $RECPARS{'FITSURFACE_FITPAR'});
    }
    $Frm->uhdr("RECPAR_FITSURFACE_FITPAR", \@fitpar);
  }

  # The user can specify whether to keep the fitted surface on disk
  my $keepsurface = (defined $RECPARS{'FITSURFACE_KEEPSURFACE'}) ?
    $RECPARS{'FITSURFACE_KEEPSURFACE'} : 0;
  $Frm->uhdr("RECPAR_FITSURFACE_KEEPSURFACE", $keepsurface);
} elsif ( $bgmethod eq "none" ){
  orac_warn "Skipping background removal at user request\n";
} else {
  # Placeholder for surfit
  orac_throw "Unknown background-removal method, $bgmethod\n";
}

### Matched filter ###
# Flag to smooth data
$Frm->uhdr("RECPAR_SMOOTH_DATA", $RECPARS{SMOOTH_DATA})
  if (defined $RECPARS{SMOOTH_DATA});
# FWHM of smoothing Gaussian
$Frm->uhdr("RECPAR_SMOOTH_FWHM", $RECPARS{SMOOTH_FWHM})
  if (defined $RECPARS{SMOOTH_FWHM});

### Mosaicking parameters ###
# Mosaic task to use
if (defined $RECPARS{MOSAIC_TASK}) {
  $Frm->uhdr("RECPAR_MOSAIC_TASK", lc($RECPARS{MOSAIC_TASK}));
} else {
  $Frm->uhdr("RECPAR_MOSAIC_TASK", "wcsmosaic");
}

# Wcsmosaic/wcsalign parameters - required for all methods
if (defined $RECPARS{WCSMOSAIC_METHOD}) {
  # Store lower case string
  $Frm->uhdr("RECPAR_WCSMOSAIC_METHOD", lc($RECPARS{WCSMOSAIC_METHOD}));

  # Only store PARAMS for the relevant choices of METHOD
  if ($Frm->uhdr("RECPAR_WCSMOSAIC_METHOD") !~ /^[near|bili]/) {
    $Frm->uhdr("RECPAR_WCSMOSAIC_PARAMS", $RECPARS{WCSMOSAIC_PARAMS})
      if (defined $RECPARS{WCSMOSAIC_PARAMS});
  }
}

# Makemos parameters if required
if ($Frm->uhdr("RECPAR_MOSAIC_TASK") eq "makemos") {
  if (defined $RECPARS{MAKEMOS_METHOD}) {
    $Frm->uhdr("RECPAR_MAKEMOS_METHOD", lc($RECPARS{MAKEMOS_METHOD}));
    # The SIGMAS method requires a sigma to be defined - default to 4
    # if not separately defined
    if ($Frm->uhdr("RECPAR_MAKEMOS_METHOD") eq "sigmas") {
      $Frm->uhdr("RECPAR_MAKEMOS_SIGMAS", (defined $RECPARS{MAKEMOS_SIGMAS})
		 ? $RECPARS{MAKEMOS_SIGMAS} : 4.0);
    }
  }
}

# Use autophotom for aperture photometry?
if (defined $RECPARS{AUTOPHOTOM}) {
  $Frm->uhdr("RECPAR_AUTOPHOTOM", $RECPARS{AUTOPHOTOM});
  $Frm->uhdr("RECPAR_AUTOPHOTOM_INNER", $RECPARS{AUTOPHOTOM_INNER})
    if (defined $RECPARS{AUTOPHOTOM_INNER});
  $Frm->uhdr("RECPAR_AUTOPHOTOM_OUTER", $RECPARS{AUTOPHOTOM_OUTER})
    if (defined $RECPARS{AUTOPHOTOM_OUTER});
}

# Register all the input images to a common position?
if (defined $RECPARS{REGISTER_IMAGES}) {
  $Frm->uhdr("RECPAR_REGISTER_IMAGES", $RECPARS{REGISTER_IMAGES});
  # If so read reference RA, Dec if given
  if ( defined $RECPARS{REGISTER_RA} && $RECPARS{REGISTER_DEC}) {
    $Frm->uhdr("RECPAR_REGISTER_RA", $RECPARS{REGISTER_RA});
    $Frm->uhdr("RECPAR_REGISTER_DEC", $RECPARS{REGISTER_DEC});
  }
}

# PCA analysis - parameter to determine which files are left on disk
# +1 = keep PCA files
# -1 = keep all files
#  0 = delete *all* files
$Frm->uhdr("RECPAR_PCA_KEEPFILES",
	   (defined $RECPARS{PCA_KEEPFILES})? $RECPARS{PCA_KEEPFILES} : 1);
# Flag to denote whether to use existing PCA solutions (provided they
# do actually exist...). Default to 1.
$Frm->uhdr("RECPAR_PCA_REUSE",
	   (defined $RECPARS{PCA_REUSE}) ? $RECPARS{PCA_REUSE} : 1);
if (defined $RECPARS{PCA_COMP}) {
  my $comp = $RECPARS{PCA_COMP};
  if (ref($comp) ne "ARRAY") {
    # Could be a single digit
    if ($comp =~ /^\d+$/) {
      $comp = [$comp];
    } elsif ($comp =~ /^\d+\.\.\d+$/) {
      # Or an array slice
      my @letters = split(/\.\./, $comp, 2);
      my @comp = map { $_ } $letters[0] .. $letters[-1];
      # Only use first 8 components
      @comp = @comp[0..7] if (@comp > 8);
      $comp = \@comp;
    }
  }
  $Frm->uhdr("RECPAR_PCA_COMP",$comp);
}
# Flatfield flag for cleaning the data before running PCA
$Frm->uhdr("RECPAR_PCA_FLATCLEAN", $RECPARS{PCA_FLATCLEAN})
  if (defined $RECPARS{PCA_FLATCLEAN});
