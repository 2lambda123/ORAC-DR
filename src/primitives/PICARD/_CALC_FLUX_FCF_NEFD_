# -*-cperl-*-

=head1 NAME

_CALC_FLUXNOISE_ - calculate the flux of a source

=head1 SYNOPSIS

_CALC_FLUXNOISE_

=head1 DESCRIPTION

This PICARD primitive is designed to calculate fluxes, noise levels
and FCFs by aperture photometry from images of SCUBA-2 calibration
sources. NEFDs are also calculated

=head1 ARGUMENTS

This primitive has no arguments.

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item ORAC-DR primitives:

SCUBA2: _FIND_INTEGRATED_INTENSITY_, _GET_PIXEL_SCALE_,
_REMOVE_BACKGROUND_FROM_IMAGE_

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Creates files with suffix C<_back> for all input files.

Creates a log file called C<log.fluxnoise>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

orac_print ("\nCalling _CALC_FLUX_FCF_NEFD_: calculate fluxes, FCFs, NEFDs etc\n", "yellow");

# Retrieve the source info
my %sources = %{ $Frm->uhdr("SOURCES") };

if ( %sources ) {
  orac_print "Calculating fluxes, NEFDs, FCFs...";
  my $radius = $Frm->uhdr("APERTURE_RADIUS");

  # Now loop over the files and calculate the various desired quantities
  my @files = $Frm->raw;

  foreach my $i ( 1 .. @files ) {

    my $file = $files[$i-1];
    next unless (defined $sources{$file});

    my %current_source = %{ $sources{$file} };

    _FIND_INTEGRATED_INTENSITY_ IMAGE=$file RADIUS=$radius MASK=0

    $current_source{flux_ap} = $_FIND_INTEGRATED_INTENSITY_{SUM};

    # Calculate various things
    $current_source{fcf_ap} = $current_source{source_flux} / $current_source{flux_ap} * $current_source{beam_area};

    $current_source{noise_ap} = $current_source{noise} * $current_source{fcf_ap} * $current_source{pixscale} * 2.0 / $Frm->uhdr("FWHM");

    $current_source{nefd} = 1000.0 * $current_source{noise_ap} * sqrt($current_source{texp});

    $current_source{nefd_zen} = $current_source{nefd} / exp( $current_source{tau} * ($current_source{airmass} - 1) );

    $sources{$file} = \%current_source;
  }
  orac_print " done\n";

  $Frm->uhdr("SOURCES",\%sources);
} else {
  orac_warn "No sources to process\n";
}
