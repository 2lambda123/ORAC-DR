# -*-cperl-*-

=head1 NAME

_CALIBRATE_SCUBA2_DATA_ - calibrate SCUBA-2 data in specified units

=head1 SYNOPSIS

_CALIBRATE_SCUBA2_DATA_

=head1 DESCRIPTION

This PICARD primitive will calibrate the specified data using either a
derived or a standard flux conversion factor. If the data are already
calibrated but the units differ from the desired output units, the
current calibration will be undone first.

The user can request that data tagged with a particular tag be
calibrated instead of the current files. However, the calibrated files
will always be stored in the current Frame.

Requires access to the SCUBA-2 calibration class.

=head1 ARGUMENTS

This primitive has the following arguments:

=over 2

=item B<TAG>

Retrieve and calibrate files of a particular tag if present. Default
is to use the current files.

=item B<UNITS>

Calibration units. Must be C<ARCSEC> or C<BEAM>. Default is
C<BEAM>. Overridden by the recipe parameter C<USEFCF_CALTYPE> if
C<USEFCF> is given.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item ORAC-DR primitives:

SCUBA2: _CALIBRATE_DATA_

PICARD: _UNCALIBRATE_SCUBA2_DATA_

=back

=head1 OUTPUT DATA

The calibrated data file is stored in the current Frame object.

=head1 OUTPUT FILES

Writes output files with the suffix C<_cal>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2013-2014 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Check that the input data are from SCUBA-2
if ($Frm->hdr("INSTRUME") ne "SCUBA-2") {
  orac_termerr "Input data are not from SCUBA-2\n";
}

# Should the data be calibrated using derived or standard FCFs?
my $usefcf = ($Frm->uhdr("RECPAR_USEFCF") || $Frm->uhdr("RECPAR_FCF"))
  ? 1 : 0;

# Retrieve calibration type - override with recipe parameter
my $caltype = get_prim_arg($_PRIM_ARGS_, "UNITS", "BEAM");
$caltype = $Frm->uhdr("RECPAR_FCF_CALTYPE")
  if (defined $Frm->uhdr("RECPAR_FCF_CALTYPE") && $usefcf);

# Skip if the data are already calibrated in the required units
return ORAC__OK if ($Frm->uhdr("DATA_UNITS") =~ /$caltype/i);

# Undo current calibration if necessary
if ($Frm->uhdr("DATA_UNITS") ne "pW") {
  _UNCALIBRATE_SCUBA2_DATA_ VERBOSE=0
}

# Intro message
orac_print "\nCalling _CALIBRATE_SCUBA2_DATA_: calibrate data using standard, given or derived FCF\n", "yellow";

# Select data with a particular tag if given (and it exists)
my $tag = get_prim_arg($_PRIM_ARGS_, "TAG", undef);
if ($tag) {
  $Frm->tagretrieve($tag) if $Frm->tagexists($tag);
}

# SNR maps cannot be calibrated
if ($Frm->product eq "snr" || $Frm->uhdr("DATA_UNITS") eq "") {
  orac_warn "Input is a signal-to-noise map: unable to calibrate\n";
  return ORAC__OK;
}

# Retrieve existing results if present
my %picard_results;
if (defined $Frm->uhdr("PICARD_RESULTS")) {
  %picard_results = %{ $Frm->uhdr("PICARD_RESULTS") };
}

# Calibrate using derived FCF is requested
if ( $usefcf ) {
  # If no FCF has been given and there are existing results then the
  # FCF is obtained from those
  my $fcf;
  if (!$Frm->uhdr("RECPAR_FCF") && %picard_results) {
    my $fcftype = "fcf_".lc($caltype);
    $fcf = $picard_results{$fcftype};
    if (!$fcf) {
      orac_warn "Unknown calibration type, $caltype: falling back on BEAM\n";
      $caltype = "BEAM";
      $fcftype = "fcf_beam";
      $fcf = $picard_results{$fcftype};
    }
  } else {
    # Otherwise use the specified FCF
    $fcf = $Frm->uhdr("RECPAR_FCF");
  }
  if (defined $fcf) {
    orac_print "Calibrating data using derived $caltype FCF...\n";
    _CALIBRATE_DATA_ UNITS=$caltype FCF=$fcf
  } else {
    orac_warn "No FCF derived, using standard $caltype FCF instead\n";
    _CALIBRATE_DATA_ UNITS=$caltype
  }
} else {
  # Otherwise use default calibration `per beam'
  _CALIBRATE_DATA_ UNITS=$caltype
}

$caltype = "ARCSEC**2" if ($caltype eq "ARCSEC");
$Frm->uhdr("DATA_UNITS", "mJy/$caltype");
