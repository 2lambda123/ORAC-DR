# -*-cperl-*-

=head1 NAME

_WRITE_FLUXNOISE_LOGFILE_ - write log file for fluxnoise workflow

=head1 SYNOPSIS

_WRITE_FLUXNOISE_LOGFILE_

=head1 DESCRIPTION

This PICARD primitive writes a simple ORAC-DR log file

=head1 ARGUMENTS

This primitive has no arguments.

=head1 EXTERNAL TASKS

None.

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Creates a log file called C<log.fluxnoise>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

orac_print ("\nCalling _WRITE_FLUXNOISE_LOGFILE_: write flux/nefd/fcf info to log file\n", "yellow");

my @files = $Frm->raw;
orac_print "Writing results to log file, log.fluxnoise...";

my %sources = %{ $Frm->uhdr("SOURCES") };

my $logfile = new ORAC::LogFile("log.fluxnoise");
$logfile->header("# PICARD log file: log.fluxnoise",
		 "#   File            Object     Flux        Noise   Texp     WVM  Airmass  Noise   FCF     NEFD_zen    NEFD_cfp    Radius",
		 "#                              (pW)        (pW)    (s)     tau            (Jy)  (Jy/pW)  (mJy.s^0.5) (mJy.s^0.5) (arcsec)",
		 "#-----------------------------------------------------------------------------------------------------------------------------");

my $radius = $Frm->uhdr("APERTURE_RADIUS");
for my $i (1 .. @files) {

  my $file = $files[$i-1];
  # Skip non-calibrators
  next unless (defined $sources{$file});

  my %current_source = %{ $sources{$file} };

  my $source   = $current_source{source};
  my $flux_ap  = sprintf "%10.2f", $current_source{flux_ap};
  my $noise    = sprintf "%8.2f", $current_source{noise};
  my $texp     = sprintf "%6.2f", $current_source{texp};
  my $tau      = sprintf "%6.3f", $current_source{wvm};
  my $airmass  = sprintf "%5.3f", $current_source{airmass};
  my $noise_ap = sprintf "%8.4f", $current_source{noise_ap};
  my $fcf_ap   = sprintf "%7.3g", $current_source{fcf_ap};
  my $nefd_zen = sprintf "%5d", $current_source{nefd_zen};
  my $nefd_cfp = sprintf "%5d", $current_source{nefd_cfp};

  $logfile->addentry("$file $source  $flux_ap $noise $texp  $tau  $airmass $noise_ap  $fcf_ap    $nefd_zen     $nefd_cfp         $radius");
}

orac_print " done\n";
