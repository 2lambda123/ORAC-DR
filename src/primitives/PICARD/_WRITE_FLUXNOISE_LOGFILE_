# -*-cperl-*-

=head1 NAME

_WRITE_FLUXNOISE_LOGFILE_ - write log file for fluxnoise workflow

=head1 SYNOPSIS

_WRITE_FLUXNOISE_LOGFILE_

=head1 DESCRIPTION

This PICARD primitive writes a simple ORAC-DR log file

=head1 ARGUMENTS

This primitive has no arguments.

=head1 EXTERNAL TASKS

None.

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Creates a log file called C<log.fluxnoise>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

orac_print ("\nCalling _WRITE_FLUXNOISE_LOGFILE_: write flux/nefd/fcf info to log file\n", "yellow");

# This uhdr entry should exist if this primitive is being called....!
my @sources = @{ $Frm->uhdr("PICARD_RESULTS") };

if ( @sources ) {
  orac_print "Writing results to log file, log.fluxnoise...";

  my $logfile = new ORAC::LogFile("log.fluxnoise");
  $logfile->header("# PICARD log file: log.fluxnoise",
#		   "#   File            Object     Wavelen Flux        Noise   Texp     WVM  Airmass  Noise  Noise  FCF     NEFD_zen    NEFD_cfp    Radius",
#		   "#                               (um)   (pW)        (pW)    (s)     tau            (Jy)   (Jy) (Jy/pW)  (mJy.s^0.5) (mJy.s^0.5) (arcsec)",
#		   "#----------------------------------------------------------------------------------------------------------------------------------");
		   "#   File  Object Wavelen WVM  Airmass  FCF     NEFD_zen    NEFD_cfp",
		   "#                 (um)   tau          (Jy/pW) (mJy.s^0.5) (mJy.s^0.5)",
		   "#----------------------------------------------------------------------");

  # Pick out the radius used for aperture photometry if defined. Leave
  # blank if none is defined.
  my $radius = (defined $Frm->uhdr("APERTURE_RADIUS"))
    ? $Frm->uhdr("APERTURE_RADIUS") : "";
  for my $file ( 0 .. $#sources ) {

    my %current_results = %{ $sources[$file] };

    my $datafile = $current_results{file};
    my $source   = $current_results{source};
    my $wavelen  = $current_results{wavelen};
    my $wvm      = sprintf "%6.3f", $current_results{wvm};
    my $airmass  = sprintf "%5.3f", $current_results{airmass};

#    my $flux_ap  = sprintf "%10.2f", $current_results{flux_ap};
#    my $noise    = sprintf "%8.2f", $current_results{noise};
#    my $texp     = sprintf "%6.2f", $current_results{texp};
#    my $noise_ap = sprintf "%8.4f", $current_results{noise_ap};
#    my $skynoi_ap = sprintf "%8.4f", $current_results{skynoi_ap};
#    my $fcf_ap   = sprintf "%7.3g", $current_results{fcf_ap};

    # FCF
    my $fcf = sprintf "%7.3f", $current_results{fcf};

    # Apply a zenith correction to the NEFD
    my $tau = $current_results{tau};
    my $zencorr = exp( $tau * ($current_results{airmass} - 1) );
    my $nefd_zen = sprintf "%5d", ($current_results{nefd} / $zencorr);

    # NEFD at this tau based on values given in the Call for Proposals
    # the relation appears to be a quadratic of the form:
    # Amult * (wvm - off)*(wvm - off) + Bmult * (wvm - off) + const
    my ( $amult, $bmult, $const, $off );
    if ( $wavelen eq "850") {
      ( $amult, $bmult, $const, $off ) = ( 924.79, 196.91, 39.914, 0.0);
    } else {
      ( $amult, $bmult, $const, $off ) = ( 7.5e4, 0.0, 70.0, 0.02);
    }
    my $nefd_cfp = sprintf "%5d", ($amult * ($wvm - $off)*($wvm - $off) +
				   $bmult * ($wvm - $off) + $const);

#    $logfile->addentry("$file $source  $wavelen $flux_ap $noise $texp  $tau  $airmass $noise_ap  $skynoi_ap $fcf_ap    $nefd_zen     $nefd_cfp         $radius");
    $logfile->addentry("$datafile $source  $wavelen $wvm  $airmass $fcf    $nefd_zen     $nefd_cfp");
  }

  orac_print " done\n";
} else {
  orac_warn "No sources = no log file\n";
}
