# -*-cperl-*-

=head1 NAME

_CROP_IMAGES_ - trim images to specified map size

=head1 SYNOPSIS

_CROP_IMAGES_

=head1 DESCRIPTION

This PICARD primitive is designed to trim input images to the size
given by the map parameters in the header or to a user-specified size.

The user may specify the desired map width and height or a map radius
(for a circular ouput region) via recipe parameters.

=head1 ARGUMENTS

This primitive has no arguments.

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item ORAC-DR primitives:

SCUBA2: _CROP_IMAGE_, _MASK_IMAGE_

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Creates output files with the suffix C<_crop>.

=head1 NOTES

If recipe parameters are used then all images are cropped to the same
size.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2011 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

orac_print ("\nCalling _CROP_IMAGES_: trim images to specified map size\n", "yellow");

# If a map radius has been given the map is "cropped" to a circle
my $mapradius = $Frm->uhdr("RECPAR_MAP_RADIUS")
  if (defined $Frm->uhdr("RECPAR_MAP_RADIUS"));

my $verbose = ( defined $Frm->uhdr("RECPAR_VERBOSE") ) ?
  $Frm->uhdr("RECPAR_VERBOSE") : 1;

# Trimmed files
my ($in, $out) = $Frm->inout("_crop");

# If a map radius has been given then use that to create a circular output map
if ($mapradius) {
  # Set a minimum size if an aperture radius is given
  if (defined $Frm->uhdr("RECPAR_APERTURE_RADIUS")) {
    my $minmapsize = 4.0 * $Frm->uhdr("RECPAR_APERTURE_RADIUS");
    $mapradius = $minmapsize if ($mapradius < $minmapsize);
  }
  # However, the circular region cannot extend beyond the existing map boundary.
  my $param = ($Frm->hdr("MAP_HGHT") > $Frm->hdr("MAP_WDTH")) ? "MAP_WDTH" : "MAP_HGHT";
  if ($mapradius > $Frm->hdr($param)) {
    $mapradius = $Frm->hdr($param);
    orac_warn "Output image radius cannot exceed input map size ($mapradius arcsec)\n"
  }
  orac_print "Output image will be a circle of radius $mapradius arcsec\n" if $verbose;
  # Trim image to the specified radius
  my $masked = ORAC::TempFile->new(0);
  _MASK_IMAGE_ INVERT=1 IMAGE=$in MASKED=$masked RADIUS=$mapradius
  # Shrink the image by eliminating bad pixels around the edge
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$masked out=$out trimbad");
} else {
  # Output image will be rectangular: check for recipe parameters
  my $extraparams = "";
  my $newwidth = $Frm->uhdr("RECPAR_MAP_WIDTH")
    if (defined $Frm->uhdr("RECPAR_MAP_WIDTH"));
  my $newheight = $Frm->uhdr("RECPAR_MAP_HEIGHT")
    if (defined $Frm->uhdr("RECPAR_MAP_HEIGHT"));

  # If the aperture radius is defined then ensure that the map height
  # and width exceed twice the diameter of the aperture
  if (defined $Frm->uhdr("RECPAR_APERTURE_RADIUS")) {
    my $minmapsize = 4.0 * $Frm->uhdr("RECPAR_APERTURE_RADIUS");
    if ($newwidth) {
      $newwidth = $minmapsize if (defined $Frm->uhdr("RECPAR_MAP_WIDTH") &&
				  $Frm->uhdr("RECPAR_MAP_WIDTH") < $minmapsize);
    } else {
      $newwidth = $minmapsize if ($Frm->hdr("MAP_WDTH") < $minmapsize);
    }
    if ($newheight) {
      $newheight = $minmapsize if (defined $Frm->uhdr("RECPAR_MAP_HEIGHT") &&
				   $Frm->uhdr("RECPAR_MAP_HEIGHT") < $minmapsize);
    } else {
      $newheight = $minmapsize if ($Frm->hdr("MAP_HGHT") < $minmapsize);
    }
  }

  $extraparams .= " WIDTH=$newwidth" if (defined $newwidth);
  $extraparams .= " HEIGHT=$newheight" if (defined $newheight);

  if ( $extraparams ne "" ) {
    orac_print "Output image will have".$extraparams." arcsec\n" if $verbose;
  } else {
    orac_print "Trimming $in...\n" if $verbose;
  }

  # Trim image to the specified size
  _CROP_IMAGE_ IMAGE=$in OUT=$out $extraparams
}

# Store trimmed files
$Frm->files($out);
