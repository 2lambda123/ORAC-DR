# -*-cperl-*-

=head1 NAME

_WRITE_CHECKCAL_LOGFILE_ - write log file for calibrator check workflow

=head1 SYNOPSIS

_WRITE_CHECKCAL_LOGFILE_

=head1 DESCRIPTION

This PICARD primitive writes a simple ORAC-DR log file with the
results accumulated in the hash stored in the C<PICARD_RESULTS> uhdr
entry.

=head1 ARGUMENTS

This primitive has the following argument:

=over 4

=item LOGFILE

Flag to indicate whether or not a log file should be written. Default
is 1 (write a log file). May be overridden with the C<LOGFILE> recipe
parameter.

=back

=head1 EXTERNAL TASKS

None.

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Creates a log file called C<log.checkcal>.

=head1 LOGFILE FORMAT

The log file contains the following entries:

=over 4

=item 1. Input filename

=item 2. UT date (YYYY-MM-DDTHH:MM:SS.S)

=item 3. Object name

=item 4. Observation number

=item 5. Wavelength (um)

=item 6. Airmass

=item 7. 225-GHz tau

=item 8. tau at observing wavelength

=item 9. Aperture radius (arcsec)

=item 10. USEFCF flag

=item 11. Flux within an aperture (pW)

=item 12. Uncertainty in derived flux above (pW)

=item 13. Noise derived from variance (mJy/beam)

=item 14. Flux conversion factor derived using the integrated flux
within an aperture (Jy/sq arcsec/pW)

=item 15. Uncertainty in above FCF

=item 16. Flux conversion factor derived from peak of Gaussian fit to
source (Jy/beam/pW)

=item 17. Uncertainty in above FCF

=item 18.  Flux conversion factor derived from peak of Gaussian fit to
source after processing with a matched filter (Jy/beam/pW)

=item 19. Uncertainty in above FCF

=item 20. FWHM of main beam (arcsec)

=item 21. Contribution of error beam (per cent)

=item 22. Flag to indicate whether the beam fit was a Gaussian

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2010,2013 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Is a log file wanted?
my $uselog = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
$uselog = $Frm->uhdr("RECPAR_LOGFILE") if (defined $Frm->uhdr("RECPAR_LOGFILE"));

if ( $uselog && $Frm->uhdr("PICARD_RESULTS") ) {
  orac_print ("\nCalling _WRITE_CHECKCAL_LOGFILE_: write flux/nefd/fcf info to log file\n", "yellow");

  my $logfilename = "log.checkcal";
  orac_print "Writing results to log file, $logfilename...";

  my $logfile = new ORAC::LogFile($logfilename);
  $logfile->header("# log.checkcal log file in TOPCAT ASCII format",
		   "#     ()    (YYYY-MM-DDThh:mm:ss) ()   ()    (um) () () ()  (arcsec) () (pW)        (pW)  (mJy/beam)  (Jy/asec^2/pW) (Jy/asec^2/pW) (Jy/bm/pW) (Jy/bm/pW) (Jy/bm/pW) (Jy/bm/pW) (arcsec) (%) ()",
		   "# File        Date     Obs Object     Wavelen  Airmass  Tau225    Tau  Radius  USEFCF  Flux_ap  Err_ap   Noise  FCFasec    FCFasec_err    FCFbeam      FCFbeam_err     FCFmatch   FCFmatch_err     FWHMmain Error_beam Gaussian",
		  );

  # Pick out the radius used for aperture photometry if defined. Leave
  # blank if none is defined.
  my %picard_results = %{ $Frm->uhdr("PICARD_RESULTS") };

  # Basic info
  my $datafile = $picard_results{file};
  my $date     = oractime2iso($picard_results{date});
  my $wavelen  = $picard_results{wavelen};
  my $tau      = sprintf "%6.3f", $picard_results{tau};
  my $tau225   = sprintf "%6.3f", $picard_results{tau225};
  my $airmass  = sprintf "%5.3f", $picard_results{airmass};
  my $radius   = $picard_results{radius};
  my $source   = $picard_results{source};
  $source =~ s/\s//g;

  # USEFCF flag to indicate whether or not the data were calibrated
  # using the derived FCF
  my $usefcf = (defined $Frm->uhdr("RECPAR_USEFCF")) ? $Frm->uhdr("RECPAR_USEFCF") : 0;

  # FCFs and uncertainties
  my $print_fcf = sub {
    my $fcf = shift;
    return ($fcf) ? sprintf "%8.4f", $fcf : "NaN";
  };
  my $fcf_as = $print_fcf->($picard_results{fcf_arcsec});
  my $fcf_as_err = $print_fcf->($picard_results{fcf_arcsec_err});
  my $fcf_bm = $print_fcf->($picard_results{fcf_beam});
  my $fcf_bm_err = $print_fcf->($picard_results{fcf_beam_err});
  my $fcf_ma = $print_fcf->($picard_results{fcf_beammatch});
  my $fcf_ma_err = $print_fcf->($picard_results{fcf_beammatch_err});

  # Measured source flux and uncertainty - these are in pW
  my $flux  = sprintf "%10.4f", $picard_results{flux};
  my $flux_err = sprintf "%8.5g", $picard_results{flux_err};

  # Noise in calibrated image
  my $noise = $print_fcf->($picard_results{noise});;

  # Fit to source - FWHM and error beam
  my $fwhm = $print_fcf->($picard_results{fwhm});
  my $errbeam = $print_fcf->($picard_results{errbeam});

  $logfile->addentry(join("  ", $datafile, $date, $source, $wavelen, $tau225, $tau,
			  $airmass, $radius, $usefcf, $flux, $flux_err, $noise,
			  $fcf_as, $fcf_as_err, $fcf_bm, $fcf_bm_err,
			  $fcf_ma, $fcf_ma_err, $fwhm, $errbeam,
			  $picard_results{gaussian}));

  orac_print " done\n";
} else {
  orac_warn "No results to write\n" if (!$Frm->uhdr("PICARD_RESULTS"));
}
