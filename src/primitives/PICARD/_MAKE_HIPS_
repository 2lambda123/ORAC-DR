=head1 NAME

_MAKE_HIPS_ - Covert a collection of JSA tiles to a HiPS structure

=head1 DESCRIPTION

This primitive rearranges the given HEALPix tiles into the directory
structure used by HiPS, converting them to FITS files with minimal
headers.

The output is written in the directory specified by the C<HIPS_DIR>
recipe parameter.

=head1 BUGS

=over 4

=item *

This primitive is extremely slow due to the amount of I/O performed.

=item *

This primitive assumes that it will be given 1024x1024 tiles (which
it then splits into 512x512 tiles as recommended for HiPS).
This behavior should be controlled via C<_MAKE_HIPS_STEER_> because
it sets up the C<jsadicer> options which control the tiling parameters.

=item *

This primitive uses newly-constructed names for files which will
overwrite any already present with those names.

=back

=head1 COPYRIGHT

Copyright (C) 2019 East Asian Observatory
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA

=cut

use DateTime;
use File::Spec;
use IO::File;

# Read steering parameters.
my $maxorder = $Frm->uhdr('HIPS_MAX_ORDER');

# Read recpars.
my $root = $RECPARS{'HIPS_DIR'} // "hips-$$";

my $hips_creator = $RECPARS{'HIPS_CREATOR'} // 'ivo://NONE/NONE';
my $hips_title = $RECPARS{'HIPS_TITLE'} // 'Untitled';
my $initial_ra = $RECPARS{'HIPS_INITIAL_RA'};
my $initial_dec = $RECPARS{'HIPS_INITIAL_DEC'};
my $initial_fov = $RECPARS{'HIPS_INITIAL_FOV'};

my $fits_opts = 'comp=D proexts=false prohis=false encoding="FITS-WCS(CD)" axisorder="RA DEC WAVE" bitpix="-32"';

my $ORAC_STATUS;

my $untrim_bounds = sub {
    my ($bound, $size) = @_;
    $bound -= $size - 1 if $bound < 0;
    my $lower = $size * int($bound / $size);
    return ($lower, $lower + $size - 1);
};

if ($Grp->lastallmembers($Frm)) {
    # Mosaic all files for the same tile.
    my %tiles = ();

    do {
        my %grouped = ();

        foreach my $Obj ($Grp->allmembers()) {
            for (my $i = 0; $i < $Obj->nfiles(); $i ++) {
                my $file = $Obj->file($i + 1);
                my $tile = $Obj->hdrval('TILENUM', $i);

                push @{$grouped{$tile}}, $file;
            }
        }

        while (my ($tile, $files) = each %grouped) {
            orac_say("  Mosaicing tile $tile");

            my $mosaic;

            if (1 == scalar @$files) {
                $mosaic = $files->[0];
            }
            else {
                $mosaic  = sprintf('mosaic_%i', $tile);

                my $mosfiles = write_file_list(@$files);

                $Mon{'ccdpack_reg'}->obeyw('makemos', "in=^$mosfiles out=$mosaic method=mean usevar=true");
                $Mon{'ndfpack_mon'}->obeyw('provrem', "ndf=$mosaic ancestor=all");

                $Grp->push_intermediates($mosaic);
            }

            $tiles{$tile} = $mosaic;
        }
    };

    # Chop up tiles to 512 pixels (ours are 1024) and permute axes.
    do {
        my %chopped = ();
        while (my ($tile, $file) = each %tiles) {
            orac_say("Splitting file $file");

            $Mon{'ndfpack_mon'}->obeyw('ndftrace', "ndf=$file quiet");
            ($ORAC_STATUS, my @lbnd) = $Mon{'ndfpack_mon'}->get('ndftrace', 'lbound');
            ($ORAC_STATUS, my @ubnd) = $Mon{'ndfpack_mon'}->get('ndftrace', 'ubound');
            die 'Unexpected width' unless ($ubnd[0] - $lbnd[0]) == 1023;
            die 'Unexpected height' unless ($ubnd[1] - $lbnd[1]) == 1023;

            foreach my $subtile (
                        [0, 512, 0],
                        [1, 0, 0],
                        [2, 512, 512],
                        [3, 0, 512],
                    ) {
                my ($i, $x, $y) = @$subtile;
                $x += $lbnd[0];
                $y += $lbnd[1];
                my $xx = $x + 511;
                my $yy = $y + 511;

                my $out = sprintf('%s_%i', $file, $i);
                $Mon{'ndfpack_mon'}->obeyw('ndfcopy', "in=$file($x:$xx,$y:$yy) out=$out trim");
                $Grp->push_intermediates($out);

                $Mon{'kappa_mon'}->obeyw('stats',"ndf=$out");
                ($ORAC_STATUS, my $ngood) = $Mon{'kappa_mon'}->get('stats', 'numgood');
                next unless $ngood > 0;

                my $permuted = $out . '_perm';
                $Mon{'kappa_mon'}->obeyw('permaxes', "in=$out out=$permuted perm=[2,1]");
                $Grp->push_intermediates($permuted);

                $chopped{4 * $tile + $i} = $permuted;
            }
        }

        %tiles = %chopped;
    };

    # Construct the HiPS.
    orac_say('Creating HiPS properties file');
    mkdir $root;
    do {
        my $datestr = DateTime->now(time_zone => "UTC")->strftime("%Y-%m-%dT%H:%MZ");
        my $fh = new IO::File(File::Spec->catfile($root, 'properties'), 'w');
        print $fh "creator_did = $hips_creator\n";
        print $fh "obs_title = $hips_title\n";
        print $fh "dataproduct_type = image\n";
        print $fh "dataproduct_subtype = live\n";
        print $fh "hips_version = 1.4\n";
        print $fh "hips_release_date = $datestr\n";
        print $fh "hips_status = private master unclonable\n";
        print $fh "hips_tile_format = fits\n";
        print $fh "hips_tile_width = 512\n";
        print $fh "hips_order = $maxorder\n";
        print $fh "hips_frame = equatorial\n";
        print $fh "hips_initial_ra = $initial_ra\n" if defined $initial_ra;
        print $fh "hips_initial_dec = $initial_dec\n" if defined $initial_dec;
        print $fh "hips_initial_fov = $initial_fov\n" if defined $initial_fov;
        close $fh;
    };

    my $isfirst = 1;
    for (my $order = $maxorder; $order > -1; $order --) {
        orac_say("Processing HiPS order: $order");
        if ($isfirst) {
            $isfirst = 0;
        }
        else {
            my %grouped = ();

            while (my ($tile, $file) = each %tiles) {
                my $sub = int($tile / 4);
                push @{$grouped{$sub}}, $file;
            }

            my %merged = ();

            while (my ($tile, $files) = each %grouped) {
                orac_say("  Processing tile $tile");

                my $pasted;

                if (1 == scalar @$files) {
                    $pasted = $files->[0];
                }
                else {
                    $pasted = sprintf('tile_%i_%i_unsquashed', $order, $tile);
                    $Grp->push_intermediates($pasted);
                    my $in = join ' ', @$files;
                    $Mon{'kappa_mon'}->obeyw('paste', "$in out=$pasted transp=true confine=false");
                }

                my $out = sprintf('tile_%i_%i', $order, $tile);
                $Mon{'kappa_mon'}->obeyw('sqorst', "in=$pasted out=$out mode=factors factors=[0.5,0.5] method=auto");
                $Grp->push_intermediates($out);

                $Mon{'ndfpack_mon'}->obeyw('ndftrace', "ndf=$out quiet");
                ($ORAC_STATUS, my @lbnd) = $Mon{'ndfpack_mon'}->get('ndftrace', 'lbound');
                ($ORAC_STATUS, my @ubnd) = $Mon{'ndfpack_mon'}->get('ndftrace', 'ubound');

                die 'Unexpected width' if ($ubnd[0] - $lbnd[0]) > 512;
                die 'Unexpected height' if ($ubnd[1] - $lbnd[1]) > 512;

                my ($x, $xx) = $untrim_bounds->($lbnd[0], 512);
                my ($y, $yy) = $untrim_bounds->($lbnd[1], 512);

                my $untrim = sprintf('%s_untrim', $out);
                $Mon{'ndfpack_mon'}->obeyw('ndfcopy', "in=$out($x:$xx,$y:$yy) out=$untrim");
                $Grp->push_intermediates($untrim);

                $merged{$tile} = $untrim;

            }

            %tiles = %merged;
        }

        my $orderdir = File::Spec->catdir($root, sprintf('Norder%i', $order));
        mkdir $orderdir;

        while (my ($tile, $file_orig) = each %tiles) {
            # Copy the file and remove all unnecessary information because
            # Aladin seems to fail to read the files properly if the header
            # is too long!
            my $file = $file_orig . '_copy';
            $Grp->push_intermediates($file);

            $Mon{'ndfpack_mon'}->obeyw('ndfcopy', "in=$file_orig out=$file");

            $Mon{'ndfpack_mon'}->obeyw('wcsremove', "ndf=$file frames=*");
            $Mon{'ndfpack_mon'}->obeyw('setorigin', "ndf=$file origin=[1,1]");

            my $hdrfile = new ORAC::TempFile();
            my $fh = $hdrfile->handle();
            printf $fh "ORDER   = %20i                                                  \n", $order;
            printf $fh "NPIX    = %20i                                                  \n", $tile;
            close $fh;
            $Mon{'ndfpack_mon'}->obeyw('fitstext', "ndf=$file file=$hdrfile");

            my $dirnum = int($tile / 10000) * 10000;
            my $tiledir = File::Spec->catdir($orderdir, sprintf('Dir%i', $dirnum));
            mkdir $tiledir;
            my $tilefile = File::Spec->catfile($tiledir, sprintf('Npix%i.fits', $tile));

            orac_say("  Writing tile $tilefile");
            $Mon{'convert_mon'}->obeyw('ndf2fits', "in=$file out=$tilefile $fits_opts");
        }

        if ($order == 3) {
            # Make an "allsky" file -- this is a concatenated grid of 27x28 64x64 tiles.
            orac_say("  Creating 'all sky' file");

            my @thumbnails = ();

            while (my ($tile, $file_orig) = each %tiles) {
                my $file = $file_orig . '_thumb';
                $Mon{'kappa_mon'}->obeyw('sqorst', "in=$file_orig out=$file mode=factors factors=[0.125,0.125] method=auto");

                my $x = 64 * ($tile % 27);
                my $y = 64 * (27 - int($tile / 27));

                $Mon{'ndfpack_mon'}->obeyw('setorigin', "ndf=$file origin=[$x, $y]");

                $Mon{'ndfpack_mon'}->obeyw('ndftrace', "ndf=$file quiet");
                ($ORAC_STATUS, my @lbnd) = $Mon{'ndfpack_mon'}->get('ndftrace', 'lbound');
                ($ORAC_STATUS, my @ubnd) = $Mon{'ndfpack_mon'}->get('ndftrace', 'ubound');
                die 'Unexpected lbnd x' unless $lbnd[0] == $x;
                die 'Unexpected lbnd y' unless $lbnd[1] == $y;
                die 'Unexpected ubnd x' unless $ubnd[0] == $x + 63;
                die 'Unexpected ubnd y' unless $ubnd[1] == $y + 63;

                push @thumbnails, $file;
            }

            my $allsky = "allskyfile";
            my $allskyref = "allskyfileref";
            $Mon{'kappa_mon'}->obeyw('creframe', "out=$allskyref mode=bl lbound=[0, 0] ubound=[1727, 1791]");

            my $files = write_file_list($allskyref, @thumbnails);

            $Mon{'kappa_mon'}->obeyw('paste', "in=^$files out=$allsky transp=true confine=true");

            my $tilefile = File::Spec->catfile($orderdir, 'Allsky.fits');
            $Mon{'convert_mon'}->obeyw('ndf2fits', "in=$allsky out=$tilefile $fits_opts");

            $Grp->push_intermediates($allsky, $allskyref, @thumbnails);
        }
    }
}
