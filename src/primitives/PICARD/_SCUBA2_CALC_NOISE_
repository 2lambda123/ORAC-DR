# -*-cperl-*-

=head1 NAME

_SCUBA2_CALC_NOISE_ - calculate the mean noise in a SCUBA-2 image

=head1 SYNOPSIS

 _SCUBA2_CALC_NOISE_

 _SCUBA2_CALC_NOISE_ GROUP=1

 _SCUBA2_CALC_NOISE_ METHOD=MASK RADIUS=30

=head1 DESCRIPTION

This PICARD primitive calculates the mean noise level within the
current file. A variety of methods are available for estimating the
noise, though the default is to use the variance in the current file
(which returns the median of the error). See the documentation for the
SCUBA-2 primitive L<_CALC_IMAGE_NOISE_|_CALC_IMAGE_NOISE_> for further
details.

The user may select either the current Frame or Group file, though a
warning is issued if the latter and no Group file exists.

The default aperture has a radius of 30", though this is overridden by
the presence of the C<APERTURE_RADIUS> recipe parameter.

=head1 ARGUMENTS

This primitive has the following arguments:

=over 4

=item B<GROUP>

A flag to indicate that the group file should be use if it
exists. Default is 0 (use the current Frame file).

=item B<LOGFILE>

A flag to denote whether to store information in the C<PICARD_RESULTS>
hash for later writing to a logfile. Overridden by the presence of the
C<RECPAR_LOGFILE> recipe parameter. Default is 1.

=item B<METHOD>

Method by which the noise is determined. Valid values are C<MINIMUM>,
C<MASK> and C<VARIANCE>. Default is variance. Minimum matching is
supported.

=item B<RADIUS>

Radius of the aperture used to calculate the noise level. Default is
30 arcsec, though overridden by the C<APERTURE_RADIUS> recipe
parameter.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item ORAC-DR primitives:

SCUBA2: _CALC_IMAGE_NOISE_

=back

=head1 OUTPUT DATA

The noise is stored in the C<%picard_results> hash with key C<noise>.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2011,2013 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Use the Group or Frame file?
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);

my $proceed = 1;
if ($group && !$Grp->file_exists) {
  orac_warn "Group file does not exist - unable to determine noise\n";
  $proceed = 0;
}

if ($proceed) {
  # Tell the user what's going on
  orac_print ("\nCalling _CALC_NOISE_: calculate noise in image\n", "yellow");

  # Are results to be written to a log file? Override with recipe parameter.
  my $logfile = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
  $logfile = $Frm->uhdr("RECPAR_LOGFILE")
    if (defined $Frm->uhdr("RECPAR_LOGFILE"));

  # Radius of aperture in arcsec for calculating noise and texp
  my $radius = get_prim_arg($_PRIM_ARGS_, "RADIUS", 30);
  $radius = $Frm->uhdr("RECPAR_APERTURE_RADIUS")
    if (defined $Frm->uhdr("RECPAR_APERTURE_RADIUS"));

  # Method for calculating noise
  my $method = get_prim_arg($_PRIM_ARGS_, "METHOD", "var");
  $method = $Frm->uhdr("RECPAR_NOISE_METHOD")
    if (defined $Frm->uhdr("RECPAR_NOISE_METHOD"));

  # Note we don't want this primitive to write a log file
  _CALC_IMAGE_NOISE_ METHOD=$method LOGFILE=0 RADIUS=$radius GROUP=$group

  # Store the results hash in the Frame uhdr
  if ( $logfile ) {
    # Retrieve existing results if present
    my %picard_results = %{ $Frm->uhdr("PICARD_RESULTS") }
      if (defined $Frm->uhdr("PICARD_RESULTS"));
    $picard_results{noise} = $_CALC_IMAGE_NOISE_{SIGMA};
    $Frm->uhdr("PICARD_RESULTS", \%picard_results);
  }
}
