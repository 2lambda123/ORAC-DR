# -*-cperl-*-

=head1 NAME

_CALC_SCUBA2_NEFD_ - derive NEFDs from input images of SCUBA-2 sources

=head1 SYNOPSIS

_CALC_SCUBA2_NEFD_

=head1 DESCRIPTION

This PICARD primitive is designed to calculate noise equivalent flux
densities (NEFDs) from images of SCUBA-2 sources. The data are
calibrated if necessary either using the default conversion factors in
the pipeline or FCFs derived in a previous primitive (if stored as
C<PICARD_RESULTS> data).

=head1 ARGUMENTS

This primitive has one argument:

=over 4

=item B<LOGFILE>

A flag to denote whether to store information in the C<PICARD_RESULTS>
hash for later writing to a logfile. Overridden by the presence of the
C<RECPAR_LOGFILE> recipe parameter. Default is 1.

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item ORAC-DR primitives:

SCUBA2: _CALCULATE_NEFD_, _CALIBRATE_DATA_

=back

=head1 NOTES

This primitive creates new files on disk if the data require
calibrating.

=head1 OUTPUT DATA

FCFs are written to a log file C<log.nefd>. See
L<_ADD_NEFD_LOG_ENTRY_|_ADD_NEFD_LOG_ENTRY_> for details on the format.

=head1 OUTPUT FILES

New output files with the suffix C<_cal> will be created if the data
need calibrating.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2010 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# First step is to redefine the calibration object as SCUBA2. Retrieve
# the original headers
my $thing1 = $Cal->thingone;
my $thing2 = $Cal->thingtwo;
# Create the new Cal object
$Cal = orac_calib_override( "ORAC::Calib::SCUBA2" );
# Store the header things in the new Calib object
$Cal->thingone($thing1);
$Cal->thingtwo($thing2);

# Tell the user what's going on
orac_print ("\nCalling _CALC_SCUBA2_NEFD_: calculate NEFD for calibrated SCUBA-2 image data\n", "yellow");

# Are results to be written to a logfile? Override with recipe parameter.
my $logfile = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
$logfile = $Frm->uhdr("RECPAR_LOGFILE")
  if (defined $Frm->uhdr("RECPAR_LOGFILE"));
# If the logfile parameter is true, then we want _CALCULATE_NEFD_ to
# return the derived NEFD and so we must tell it that no log file is
# needed.
my $nefdlog = ($logfile) ? 0 : 1;

# Should the raw/original input files be used?
my $raw = get_prim_arg($_PRIM_ARGS_, "RAW", 0);

# Should the data be calibrated using derived or standard FCFs?
my $usefcf = (defined $Frm->uhdr("RECPAR_USEFCF"))
  ? $Frm->uhdr("RECPAR_USEFCF") : 0;

# Use the original files if necessary
if ( $raw ) {
  $Frm->files( $Frm->raw );
}

# Retrieve existing results if present
my @picard_results;
if (defined $Frm->uhdr("PICARD_RESULTS")) {
  @picard_results = @{ $Frm->uhdr("PICARD_RESULTS") };
}

# Calibrate the data if necessary - use the default calibration of
# `per beam'
unless ( @picard_results && $usefcf ) {
  _CALIBRATE_DATA_
}

# Now, _CALCULATE_NEFD_ only operates on the current Frame or Group
# file, so we need to trick it. First we store the list of files in
# the Frame, then we take a copy of the Frame before creating a new
# template SCUBA2 Frame object.  Then loop over all the files in the
# Frame, read the header from each and store as the Frame file. Now
# we can derive the NEFD.

# Retrieve info about files in Frame
my $nfiles = $Frm->nfiles;
my @files = $Frm->files;
# List of calibrated files if done below
my @out;
# Make a copy to restore later
my $inFrm = $Frm;

# Create a new Frame object
$Frm = $Frm->new;

# Loop over each file
foreach my $i ( 1 .. $nfiles ) {
  # Define the header for the new Frame
  $Frm->files($files[$i-1]);
  $Frm->readhdr;

  # Obtain basic results and define current results hash
  _GET_CURRENT_RESULTS_ CURRENT=$i-1 PICARD_RESULTS=\@picard_results
  my %current_results = %{ $_GET_CURRENT_RESULTS_{RESULTS} };

  if ( @picard_results && $usefcf ) {
    my $out = $Frm->inout("_cal");
    # Calibrate data
    my $fcf = 1000.0 * $current_results{fcf_equivbeam};
    my $args = "in=".($Frm->file)." out=$out scalar=$fcf";
    $Mon{kappa_mon}->obeyw("cmult","$args");
    $Frm->files($out);
    push(@out, $out);
  }

  # Inform user of progress. If the data are from a single
  # observation, print that number
  my $object = $Frm->hdr("OBJECT");
  my $obs = $Frm->hdr("OBSNUM");
  my $extra = ( defined $obs ) ? ", obs $obs" : "";
  orac_print "\nCalculating NEFD for $files[$i-1] (".$object.$extra.")\n";

  _CALCULATE_NEFD_ GROUP=0 VERBOSE=1 ESTIMATOR=MODE KEEP_NEFD=1 LOGFILE=$nefdlog

  # Store NEFD in current hash
  $current_results{nefd} = $_CALCULATE_NEFD_{NEFD};

  # Store the current results
  $picard_results[$i-1] = \%current_results;
}
# Since no new files were created, restore the original Frame object
$Frm = $inFrm;

# Store calibrated output files if created
$Frm->files(@out) if @out;

# Store the results hash in the Frame uhdr
if ( $logfile ) {
  $Frm->uhdr("PICARD_RESULTS", \@picard_results);
}
