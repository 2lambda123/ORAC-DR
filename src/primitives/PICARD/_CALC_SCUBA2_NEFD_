# -*-cperl-*-

=head1 NAME

_CALC_SCUBA2_NEFD_ - derive NEFDs from input images of SCUBA-2 sources

=head1 SYNOPSIS

_CALC_SCUBA2_NEFD_

=head1 DESCRIPTION

This PICARD primitive is designed to calculate noise equivalent flux
densities (NEFDs) from images of SCUBA-2 sources. The data are
calibrated if necessary either using the default conversion factors in
the pipeline or FCFs derived in a previous primitive (if stored as
C<PICARD_RESULTS> data).

=head1 ARGUMENTS

This primitive has one argument:

=over 4

=item B<LOGFILE>

A flag to denote whether to store information in the C<PICARD_RESULTS>
hash for later writing to a logfile. Overridden by the presence of the
C<RECPAR_LOGFILE> recipe parameter. Default is 1.

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item ORAC-DR primitives:

SCUBA2: _CALCULATE_NEFD_, _CALIBRATE_DATA_

=back

=head1 NOTES

This primitive creates new files on disk if the data require
calibrating.

=head1 OUTPUT DATA

FCFs are written to a log file C<log.nefd>. See
L<_ADD_NEFD_LOG_ENTRY_|_ADD_NEFD_LOG_ENTRY_> for details on the format.

=head1 OUTPUT FILES

New output files with the suffix C<_cal> will be created if the data
need calibrating.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2010 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Tell the user what's going on
orac_print ("\nCalling _CALC_SCUBA2_NEFD_: calculate NEFD for calibrated SCUBA-2 image data\n", "yellow");

# Are results to be written to a logfile? Override with recipe parameter.
my $logfile = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
$logfile = $Frm->uhdr("RECPAR_LOGFILE")
  if (defined $Frm->uhdr("RECPAR_LOGFILE"));
# If the logfile parameter is true, then we want _CALCULATE_NEFD_ to
# return the derived NEFD and so we must tell it that no log file is
# needed.
my $nefdlog = ($logfile) ? 0 : 1;

# Should the raw/original input files be used?
my $raw = get_prim_arg($_PRIM_ARGS_, "RAW", 0);

# Should the data be calibrated using derived or standard FCFs?
my $usefcf = (defined $Frm->uhdr("RECPAR_USEFCF"))
  ? $Frm->uhdr("RECPAR_USEFCF") : 0;

# Use the original files if necessary
if ( $raw ) {
  $Frm->files( $Frm->raw );
}

# Retrieve existing results if present
my %picard_results;
if (defined $Frm->uhdr("PICARD_RESULTS")) {
  %picard_results = %{ $Frm->uhdr("PICARD_RESULTS") };
}

# Calibrate using derived FCF is requested
if ( $usefcf ) {
  my $fcf;
  my $caltype = (defined $Frm->uhdr("RECPAR_USEFCF_CALTYPE"))
    ? $Frm->uhdr("RECPAR_USEFCF_CALTYPE") : "BEAMEQUIV";
  if ( $caltype eq "BEAMEQUIV" ) {
    $fcf = $picard_results{fcf_equivbeam};
  } elsif ( $caltype eq "BEAM" ) {
    $fcf = $picard_results{fcf_beam};
  } elsif ( $caltype eq "ARCSEC" ) {
    $fcf = $picard_results{fcf_asec};
  } else {
    orac_warn "Unknown calibration type, $caltype: falling back on BEAMEQUIV\n";
    $caltype = "BEAMEQUIV";
    $fcf = $picard_results{fcf_equivbeam};
  }
  orac_print "Calibrating data using derived $caltype FCF...\n";
  my $out = $Frm->inout("_cal");
  # Calibrate data in mJy per whatever
  $fcf *= 1000.0;
  my $args = "in=".($Frm->file)." out=$out scalar=$fcf";
  $Mon{kappa_mon}->obeyw("cmult","$args");
  $Frm->files($out);
} else {
  # Otherwise use default calibration `per beam'
  _CALIBRATE_DATA_
}

# Inform user of progress.
my $object = $Frm->hdr("OBJECT");
my $obs = $Frm->hdr("OBSNUM");
orac_print "\nCalculating NEFD for ".($Frm->file)." ($object)\n";

my $keep_nefd = ($Frm->uhdr("RECPAR_KEEPFILES") == 0) ? 0 : 1;
_CALCULATE_NEFD_ GROUP=0 VERBOSE=1 ESTIMATOR=MODE KEEP_NEFD=$keep_nefd LOGFILE=$nefdlog

# Store NEFD in current hash
$picard_results{nefd} = $_CALCULATE_NEFD_{NEFD};
$picard_results{effnefd} = $_CALCULATE_NEFD_{EFFNEFD};
$picard_results{nbol_nefd} = $_CALCULATE_NEFD_{NBOL_NEFD};

# Store the results hash in the Frame uhdr
if ( $logfile ) {
  $Frm->uhdr("PICARD_RESULTS", \%picard_results);
}
