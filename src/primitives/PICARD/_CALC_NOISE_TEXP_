# -*-cperl-*-

=head1 NAME

_CALC_NOISE_TEXP_ - calculate the mean noise and exposure time in an aperture

=head1 SYNOPSIS

_CALC_NOISE_TEXP_

=head1 DESCRIPTION

This PICARD primitive calculates the mean noise level and exposure
time within a specified aperture.

The default aperture has a radius of 30", though this is overridden by
the presence of the C<APERTURE_RADIUS> recipe parameter.

=head1 ARGUMENTS

This primitive has the following arguments:

=over 4

=item B<LOGFILE>

A flag to denote whether to store information in the C<PICARD_RESULTS>
hash for later writing to a logfile. Overridden by the presence of the
C<RECPAR_LOGFILE> recipe parameter. Default is 1.

=item B<RADIUS>

Radius of the aperture used to calculate the mean exposure time and
noise level. Default is 30 arcsec, though overridden by the
C<APERTURE_RADIUS> recipe parameter.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

NDFCOPY

=item ORAC-DR primitives:

SCUBA2: _FIND_INTEGRATED_INTENSITY_, _FIND_MAP_PEAK_, _GET_MAP_CENTRE_;

PICARD: _GET_CURRENT_RESULTS_

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

Creates files with suffix C<_err> for all images of calibrators which
contain the square-root of the variance component for that image.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2011 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Tell the user what's going on
orac_print ("\nCalling _CALC_NOISE_TEXP_: calculate fluxes, noise etc\n", "yellow");

# Are results to be written to a logfile? Override with recipe parameter.
my $logfile = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
$logfile = $Frm->uhdr("RECPAR_LOGFILE")
  if (defined $Frm->uhdr("RECPAR_LOGFILE"));

# Radius of aperture in arcsec for calculating noise and texp
my $radius = get_prim_arg($_PRIM_ARGS_, "RADIUS", 30);
$radius = $Frm->uhdr("RECPAR_APERTURE_RADIUS")
  if (defined $Frm->uhdr("RECPAR_APERTURE_RADIUS"));

# Retrieve existing results if present
my %picard_results;
if (defined $Frm->uhdr("PICARD_RESULTS")) {
  %picard_results = %{ $Frm->uhdr("PICARD_RESULTS") };
}

# Calculate mean Texp within an aperture centred on the source
my $xypos = $Frm->uhdr("MAP_PEAK_POSITION");
if (!$xypos) {
  _FIND_MAP_PEAK_ GROUP=0 FITPEAK=1 PLOTFIT=0 VERBOSE=0
  $xypos = $_FIND_MAP_PEAK_{POSITION};
  my ($x, $y) = @$xypos;
  unless ($x && $y) {
    _GET_MAP_CENTRE_
    $xypos = $_GET_MAP_CENTRE_{XYPOS};
  }
}
my $image = $Frm->file .".more.smurf.exp_time";
_FIND_INTEGRATED_INTENSITY_ IMAGE=$image RADIUS=$radius XYPOS=$xypos REMOVEBACK=0
my $meantexp = $_FIND_INTEGRATED_INTENSITY_{SUM} / $_FIND_INTEGRATED_INTENSITY_{NUMGOOD};

# Now repeat for the variance - unfortunately we have to copy it out
# first to a temporary file
my $var = new ORAC::TempFile;
$image = $var->file;

my $args = "in=".($Frm->file)." out=$image comp=var";
$Mon{ndfpack_mon}->obeyw("ndfcopy","$args");
_FIND_INTEGRATED_INTENSITY_ IMAGE=$image RADIUS=$radius XYPOS=$xypos REMOVEBACK=0
my $meanvar = $_FIND_INTEGRATED_INTENSITY_{SUM} / $_FIND_INTEGRATED_INTENSITY_{NUMGOOD};

$picard_results{texp} = $meantexp;
$picard_results{noise} = sqrt($meanvar);

# Store the results hash in the Frame uhdr
if ( $logfile ) {
  $Frm->uhdr("PICARD_RESULTS", \%picard_results);
}
