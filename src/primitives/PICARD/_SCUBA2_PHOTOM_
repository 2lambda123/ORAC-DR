# -*-cperl-*-

=head1 NAME

_SCUBA2_PHOTOM_ - perform aperture photometry on SCUBA-2 images

=head1 SYNOPSIS

 _SCUBA2_PHOTOM_

 _SCUBA2_PHOTOM_ ESTIMATOR=MEAN

 _SCUBA2_PHOTOM_ RADIUS=45 INNER=1.5 OUTER=2.5

=head1 DESCRIPTION

This PICARD primitive is designed to calculate the flux of source in
SCUBA-2 images using aperture photometry. There are three main
methods:

=over 2

=item 1

Calculate the sum within a given aperture, correcting for any offset
by analyzing the image outside the aperture (default).

=item 2

As above, but estimate the background offset using an annulus (see the
parameters B<INNER> and B<OUTER> below).

=item 3

Use the Starlink C<AUTOPHOTOM> package to perform aperture photometry
using the given aperture and annulus dimensions.

=back

The choice of these methods is made solely through the use of the
recipe parameters C<AUTOPHOTOM> and C<ANNULUS>.

The results may be written to the terminal screen or stored in a log
file, C<log.flux>.

=head1 ARGUMENTS

This primitive has the following arguments:

=over 4

=item B<ESTIMATOR>

Estimator for DC background calculation. May be C<MEAN>, C<MEDIAN> or
C<MODE>. Default is C<MEDIAN>.

=item B<INNER>

Inner radius for annulus to be used for background estimation, as a
multiple of the aperture radius (see B<RADIUS> below). Default is 1.25.

=item B<INNER_RADIUS>

Explicit value of inner radius of annulus in arcsec. Should be larger
than RADIUS. Supercedes the value of INNER if both are set. May be
overridden with the recipe parameter C<ANNULUS_INNER_RADIUS>.

=item B<LOGFILE>

A flag to denote whether to write results to a logfile. Overridden by
the presence of the C<RECPAR_LOGFILE> recipe parameter. Default is 1.

=item B<OUTER>

Outer radius for annulus to be used for background estimation, as a
multiple of the aperture radius (see B<RADIUS> below). Default is 2.0.

=item B<OUTER_RADIUS>

Explicit value of inner radius of annulus in arcsec. Should be larger
than RADIUS. Supercedes the value of OUTER if both are set. May be
overridden with the recipe parameter C<ANNULUS_OUTER_RADIUS>.

=item B<RADIUS>

Radius aperture to be used for flux calculation in arcsec. Default is
30.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item ORAC-DR primitives:

SCUBA2: _APERTURE_PHOTOMETRY_, _FIND_INTEGRATED_INTENSITY_,
_FIND_MAP_PEAK_, _GET_MAP_CENTRE_

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

A log file, C<log.flux>.

=head1 LOGFILE FORMAT

The logfile has the following columns:

=over 2

=item UT

The UT date in C<YYYYMMDD.frac> format.

=item HST

The time of the observation in Hawaii.

=item Obs

The observation number.

=item Source

The source name.

=item Mode

The observing mode.

=item Filter

The filter name.

=item Elevation

The elevation of the observation.

=item CSO

Equivalent CSO tau derived from the tau used to reduce
the observation.

=item Tau

The tau value used for the reduction.

=item Seeing

The seeing value as stored in the header.

=item Sum

Sum of all values within the aperture, corrected for the background,
in the same units as the input data.

=item Flux

Total flux within the aperture, corrected for the background, in units
of (original units) * arcsec**2.

=item Err

Uncertainty in the total flux (in same units).

=item Radius

Aperture radius in arcsec.

=item Inner

Inner radius of annulus used for background estimate as a multiple of
the aperture radius.

=item Outer

Outer radius of annulus used for background estimate as a multiple of
the aperture radius.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>,
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2011 Science and Technology Facilities Council.
Copyright (C) 2011 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

orac_print ("\nCalling _SCUBA2_PHOTOM_: perform aperture photometry on SCUBA-2 images\n", "yellow");

# Are results to be written to a logfile? Override with recipe
# parameter
my $logfile = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
$logfile = $Frm->uhdr("RECPAR_LOGFILE")
  if (defined $Frm->uhdr("RECPAR_LOGFILE"));

# Aperture radius
my $ap_radius = get_prim_arg($_PRIM_ARGS_, "RADIUS", 30.0);
$ap_radius = $Frm->uhdr("RECPAR_APERTURE_RADIUS")
  if (defined $Frm->uhdr("RECPAR_APERTURE_RADIUS"));

# Inner and outer radii for noise annulus
my ($inner, $outer);
if ($Frm->uhdr("RECPAR_ANNULUS") || $Frm->uhdr("RECPAR_AUTOPHOTOM")) {
  _CALC_ANNULUS_SCALE_ RADIUS=$ap_radius PRIMARGS=$_PRIM_ARGS_
  $inner = $_CALC_ANNULUS_SCALE_{ANNULUS_INNER};
  $outer = $_CALC_ANNULUS_SCALE_{ANNULUS_OUTER};
}

# Fit the source position - start with a default
my $initpos;
if (defined $Frm->uhdr("RECPAR_REGISTER_RA") && defined $Frm->uhdr("RECPAR_REGISTER_DEC")) {
  $initpos = [$Frm->uhdr("RECPAR_REGISTER_RA"), $Frm->uhdr("RECPAR_REGISTER_DEC")];
} else {
  _GET_MAP_CENTRE_
  $initpos = $_GET_MAP_CENTRE_{XYPOS};
}
my $xypos = $initpos;
_FIND_MAP_PEAK_ GROUP=0 FITPEAK=1 PLOTFIT=0 VERBOSE=0 INITPOS=$initpos
my ($x, $y) = @{$_FIND_MAP_PEAK_{POSITION}};
$xypos = [$x, $y] if ( $x && $y );

# Perform photometry using chosen method - autophotom overrides all other choices
my ($sum, $totalflux);
if ($Frm->uhdr("RECPAR_AUTOPHOTOM")) {
  _APERTURE_PHOTOMETRY_ RADIUS=$ap_radius INNER=$inner OUTER=$outer XYPOS=$xypos
  $sum = $_APERTURE_PHOTOMETRY_{SUM};
  $totalflux = $_APERTURE_PHOTOMETRY_{TOTALFLUX};
} else {
  # Estimator for DC background removal - override with recipe parameter
  my $estimator = get_prim_arg($_PRIM_ARGS_, "ESTIMATOR", "median");
  $estimator = $Frm->uhdr("RECPAR_STATS_ESTIMATOR")
    if (defined $Frm->uhdr("RECPAR_STATS_ESTIMATOR"));

  # Has the user specified that an annulus should be used for background estimation?
  if ($Frm->uhdr("RECPAR_ANNULUS")) {
    _FIND_INTEGRATED_INTENSITY_ RADIUS=$ap_radius XYPOS=$xypos ANNULUS=1 INNER=$inner OUTER=$outer
  } else {
    _FIND_INTEGRATED_INTENSITY_ RADIUS=$ap_radius XYPOS=$xypos
  }
  $sum = $_FIND_INTEGRATED_INTENSITY_{SUM};
  $totalflux = $_FIND_INTEGRATED_INTENSITY_{TOTALFLUX};
}


# Retrieve results and write to desired output
my %results = ( SUM => $sum, TOTALFLUX => $totalflux,
		PEAK => $_FIND_MAP_PEAK_{PEAK}, PEAKERR => $_FIND_MAP_PEAK_{PEAKERR} );
unless ($Frm->uhdr("RECPAR_AUTOPHOTOM")) {
  foreach my $value ( qw/ NUMGOOD NUMPIX SIGMA SIGMATOTAL TOTALFLUXERR /) {
    $results{$value} = $_FIND_INTEGRATED_INTENSITY_{$value};
  }
}

if ($logfile) {
  my $log_inner = "****";
  my $log_outer = "****";
  if ($Frm->uhdr("RECPAR_ANNULUS") || $Frm->uhdr("RECPAR_AUTOPHOTOM")) {
    $log_inner = $inner;
    $log_outer = $outer;
  }
  # Write results to a log file
  orac_print "Storing results in log.flux\n";
  my $logtype = "flux";
  my @names = ("Name", "Sum", "Total", "Err", "Radius", "Inner", "Outer", "Peak", "ErrPk");
  my $peak = (defined $results{PEAK}) ? $results{PEAK} : "*****";
  my $peakerr = (defined $results{PEAKERR}) ? $results{PEAKERR} : "*****";
  my @values = ( $Frm->file, $results{SUM}, $results{TOTALFLUX},
		 ($results{TOTALFLUXERR}) ? $results{TOTALFLUXERR} : 0.0,
		 $ap_radius, $log_inner, $log_outer, $peak, $peakerr );
  _ADD_LOG_ENTRY_ LOGFILE=$logtype ENTRIES=\@values PARAMS=\@names
} else {
  # Print to screen
  orac_print "Aperture photometry results for ".($Frm->hdr("OBJECT"))." (".($Frm->file)."):\n"
    ."Sum  = ".(sprintf "%10.2f", $results{SUM})."\nFlux = ".(sprintf "%10.2f", $results{TOTALFLUX})."\n";
  if ($results{TOTALFLUXERR}) {
    orac_print "Err  = ".(sprintf "%10.2f", $results{TOTALFLUXERR})."\n";
  }

  orac_print "Using an aperture with r = $ap_radius arcsec";
  if ($Frm->uhdr("RECPAR_ANNULUS") || $Frm->uhdr("RECPAR_AUTOPHOTOM")) {
    orac_print " and an annulus with radii $inner and $outer times that value";
  }
  orac_print "\n";
}
