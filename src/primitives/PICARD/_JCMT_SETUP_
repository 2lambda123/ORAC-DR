# -*-cperl-*-

=head1 NAME

_JCMT_SETUP_ - make JCMT infrastructure available to PICARD

=head1 SYNOPSIS

_JCMT_SETUP_

=head1 DESCRIPTION

Sets up a few useful user-header entries for dealing with JCMT data.

=head1 ARGUMENTS

This primitive has no arguments.

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

NDFTRACE

=item ORAC-DR PRIMITIVES

_JCMT_VERIFY_PARAMETERS_

=back

=head1 NOTES

None.

=head1 OUTPUT DATA

The input data are tagged with C<newimage>. If the units are blank, it
is assumed that the input file is a signal-to-noise ratio (SNR)
image. In this case, an C<snr> product is defined and the data are
tagged with the same.

The uhdr will contain the specified recipe parameters as wel las the following flags:

=over 2

=item * PICARD

Indicates that this is an instance of PICARD

=item * DATA_UNITS

Current units for the input data file

=item * NOCALIB

Indicates whether or not the input data are uncalibrated (SCUBA-2 only)

=item * SKY_SUBTRACTION

Indicates that a background has been subtracted from the data, which
forces any further background subtraction to have a suffix of C<_back>
rather than the default C<_sky> (SCUBA-2 only)

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# This is a PICARD recipe
$Frm->uhdr("PICARD",1);

# Terminate the recipe if the given map has too few bolometers, or
# just warn if the number seems suspiciously low
if ($Frm->hdr("NBOLOEFF")) {
  if ($Frm->hdr("NBOLOEFF") < 50) {
    orac_err "".$Frm->file." was made with only ".(sprintf "%d", $Frm->hdr("NBOLOEFF"))." bolometers\n";
    orac_termerr "Image analysis will probably not succeed - Skipping this file\n";
  } elsif ($Frm->hdr("NBOLOEFF") < 100) {
    orac_warn "".$Frm->file." was made with only ".(sprintf "%d", $Frm->hdr("NBOLOEFF"))." bolometers\n";
    orac_warn "Image analysis may not succeed - examine results carefully\n";
  }
}

# Read and store recipe parameters
_JCMT_VERIFY_PARAMETERS_

# For Picard, the observation has always ended :-)
$Frm->uhdr("OBSEND",1);

# Tag the contents of the frame with "newimage"
$Frm->tagset("newimage");
$Frm->product("newimage");

# Get the current units so we quote the calibration factor - assume
# that all input data have the same units, so pick the first file in
# the Frame and use that as a template. Note that ORAC_DATA_UNITS
# could be used here except that it always falls back on a default of
# pW for SCUBA-2 data, which is incorrect for S/N maps.
my $in = $Frm->file;
$Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$in");
my ($ORAC_STATUS, $dataunits) = $Mon{ndfpack_mon}->get("ndftrace","units");
$Frm->uhdr("DATA_UNITS", $dataunits);

# Set a few additional header entries for SCUBA-2 data
if ($Frm->hdr("INSTRUME") eq "SCUBA-2") {
  # Check the units to see if the data need calibrating. For example,
  # NEFDs can only be calculated for calibrated data.
  if ( $Frm->uhdr("DATA_UNITS") eq "pW") {
    $Frm->uhdr("NOCALIB", 0);
  } else {
    $Frm->uhdr("NOCALIB", 1);
  }
  # For the purposes of Picard, say that sky subtraction has been done
  # so background-subtracted images have the suffix _back
  $Frm->uhdr("SKY_SUBTRACTION", 1);
}

# If the units are not defined, then the Frame contains a S/N image
# and it should be tagged as such
if ($dataunits eq "") {
  $Frm->tagset("snr");
  $Frm->product("snr");
}

orac_print "Processing data for ".$Frm->hdr("OBJECT")."\n";
