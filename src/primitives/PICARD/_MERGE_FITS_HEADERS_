# vim: syn=perl sw=2 sts=2

=head1 NAME

_MERGE_FITS_HEADERS_ - merge FITS headers

=head1 DESCRIPTION

This primitive takes a set of input files and merges their
FITS headers, writing the merged header into the target
file.  This can be used after using a routine, such as MAKEMOS,
which does not process the FITS headers.

=head1 ARGUMENTS

=over 4

=item INLIST

The files from which to read the FITS headers for merging.
This is an array reference.

=item OUT

The file to update with the merged header.  If not specified
then the merged headers will be written to the file in the
frame.

=back

=head1 COPYRIGHT

Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut

my $inlist = get_prim_arg($_PRIM_ARGS_, 'INLIST', undef);
my $out = get_prim_arg($_PRIM_ARGS_, 'OUT', undef);

orac_termerr('INLIST not specified')
    unless defined $inlist;

orac_termerr('INLIST is not an array reference')
    unless 'ARRAY' eq ref $inlist;

unless (defined $out) {
  orac_termerr('OUT not specifed and frame has multiple files')
      unless 1 == $Frm->nfiles();

  $out = $Frm->file(1);
}

my $in = write_file_list(@$inlist);
$Mon{'smurf_mon'}->obeyw('fitsmerge', "in=^$in ndf=$out");
