# -*-cperl-*-

=head1 NAME

_MOSAIC_JCMT_IMAGES_ - combine JCMT images taking NDF components into account

=head1 SYNOPSIS

_MOSAIC_JCMT_IMAGES_

=head1 DESCRIPTION

This PICARD primitive is designed to combine multiple SCUBA-2 or ACSIS
images, taking into account the existence of the EXP_TIME and WEIGHTS
NDF components.

The mosaicking step can be performed by KAPPA/wcsmosaic or
CCDPACK/makemos (not yet implemented).

All the input images must be of the same source and they must be
aligned to the same grid for the EXP_TIME sum to work correctly.

=head1 ARGUMENTS

This primitive supports the following arguments:

=over 4

=item B<METHOD>

Pixel-spreading scheme. Default is C<NEAREST> for nearest-neighbour.

=item B<PARAMS>

Optional parameters if B<METHOD> is not C<NEAREST> or
C<BILINEAR>. Should be specified as a string of 1 or 2 values
(separated by a comma). See documentation for wcsalign/wcsmosaic for
further details.

=item B<TASK>

Task to perform the mosaicking step. May be C<wcsmosaic> or
C<makemos>. Default is C<wcsmosaic>.

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item CCDPACK

MAKEMOS

=item KAPPA

NDFCOPY, WCSMOSAIC

=item ORAC-DR primitives:

_ADD_IMAGE_COMPS_, _ALIGN_IMAGES_

=back

=head1 OUTPUT DATA

The mosaic is stored in the current Group and tagged with C<newimage>.

=head1 OUTPUT FILES

Creates a single output file with the suffix C<_mos>.

=head1 NOTES

=over 2

=item *

Processing is delayed until the last Frame in the Group is
reached. Care should be taken that any downstream primitives are aware
of this.

=item *

Does not handle multiple sources (will try and mosaic them all!).

=item *

Has not been tested on ACSIS data and is unlikely to work given the
dependence on SCUBA-2 primitives.

=item *

The output EXP_TIME is created via a simple sum of pixel values so all
the input images should be created on the same grid.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010,2012-2013 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

orac_print ("\nCalling _MOSAIC_JCMT_IMAGES_: combine JCMT images\n", "yellow");

# Obtain mosaicking task - set wcsmos flag
my $task = lc(get_prim_arg($_PRIM_ARGS_, "TASK", "wcsmosaic"));
$task = $Frm->uhdr("RECPAR_MOSAIC_TASK")
  if defined $Frm->uhdr("RECPAR_MOSAIC_TASK");
my $wcsmos = ( $task =~ /^wcsmos/ ) ? 1 : 0;

# Pixel-spreading scheme for wcsalign/wcsmosaic
my $method = lc(get_prim_arg( $_PRIM_ARGS_, "METHOD", "nearest"));
$method = $Frm->uhdr("RECPAR_WCSMOSAIC_METHOD")
  if (defined $Frm->uhdr("RECPAR_WCSMOSAIC_METHOD"));

# PARAMS for wcsalign/wcsmosaic
my $params = get_prim_arg($_PRIM_ARGS_, "PARAMS", undef);
if (defined $Frm->uhdr("RECPAR_WCSMOSAIC_PARAMS")) {
  my $mospar = $Frm->uhdr("RECPAR_WCSMOSAIC_PARAMS");
  $params = (ref($mospar) eq 'ARRAY') ? "$mospar->[0],$mospar->[1]" : $mospar;
}
my $parstring = "[$params]" if (defined $params);

# If not using wcsmosaic, get the method parameter for makemos
my ($makemos_method, $sigmas);
if (!$wcsmos) {
  $makemos_method = get_prim_arg($_PRIM_ARGS_, "MAKEMOS_METHOD", "median");
  $makemos_method = $Frm->uhdr("RECPAR_MAKEMOS_METHOD")
    if (defined $Frm->uhdr("RECPAR_MAKEMOS_METHOD"));
  $sigmas = $Frm->uhdr("RECPAR_MAKEMOS_SIGMAS") if ($makemos_method eq "sigmas");
}

my $verbose = ( defined $Frm->uhdr("RECPAR_VERBOSE") ) ?
  $Frm->uhdr("RECPAR_VERBOSE") : 0;

# Flag for combining all files in all group members. If false, just
# combine files in the current Frame.
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 1);

# Only proceed for the last member of the Group
if ($Grp->lastmember($Frm)) {
  my $srcmos = (defined $Frm->uhdr("RECPAR_MOSAIC_EACH"))
    ? $Frm->uhdr("RECPAR_MOSAIC_EACH") : 0;

  # Determine sub-groups based on OBJECT
  my @subgroups = ($srcmos) ? $Grp->subgrps("OBJECT") : ($Grp);
  # Aligned intermediate files to be deleted at the end of processing
  my @aligned;

  # Loop over sub-groups
  foreach my $subgrp (@subgroups) {
    $Frm->tagset("mosaic_jcmt_images");

    if (@subgroups > 1) {
      orac_print "Processing ".($subgrp->frame(0)->hdr("OBJECT")).": ";
    } else {
      orac_print "Reached last Group member: ";
    }

    # Define output file name - derive from current Frame file if not specified
    my $out = (scalar(@subgroups) == 1 && defined $Frm->uhdr("RECPAR_OUTPUT_NAME"))
      ? $Frm->uhdr("RECPAR_OUTPUT_NAME")
	: $subgrp->frame(-1)->inout("_mos");

    # Store the files from all the members of the group if desired
    # (otherwise use all files in current Frame). Store files in a
    # temporary override of Frm to avoid issues with deleting the
    # wrong files and skipping steps due to the presence of one or
    # more tags.
    my @files = ($group) ? map { $_->files } $subgrp->members : $Frm->files;

    # Combine images
    if (@files > 1) {
      my $uhdr = $Frm->uhdr;
      my $Frm = $Frm->new;
      $Frm->files(@files);
      $Frm->readhdr;
      $Frm->uhdr(%{$uhdr});

      my $complist = ($Frm->hdr("INSTRUME") eq "SCUBA-2")
	? "exp_time,weights" : "exp_time,eff_time";

      orac_print "mosaicking ".($Frm->nfiles)." images...\n";

      # Write input list for wcsmosaic here to avoid realigning aligned
      # files
      my $inlist = write_file_list( $Frm->files ) if ($wcsmos);

      # Align components to same pixel grid, using the first image as
      # the reference.
      if ($Frm->tagexists("snr")) {
	# Only align SNR images if not using wcsmosaic
	unless ($wcsmos) {
	  orac_print "Aligning images...\n";
	  _ALIGN_IMAGES_ METHOD=$method REFIMAGE=! PARAMS=$params
	}
      } else {
	orac_print "Aligning images and ".join(", ", split(/,/,$complist))
	  ." components...\n";
	_ALIGN_IMAGES_ METHOD=$method REFIMAGE=! EXTEN=smurf COMPS=$complist PARAMS=$params
      }

      # Mosaic the given images
      if ( $wcsmos ) {
	my $args = "ref=! variance genvar=! method=$method out=$out "
	  ."in=^$inlist lbnd=! ubnd=!";
	$args .= " params=$parstring" if (defined $params);
	$Mon{kappa_mon}->obeyw("wcsmosaic","$args");
      } else {
	# Input list now contains aligned files
	$inlist = write_file_list( $Frm->files );
	my $args = "in=^$inlist method=$makemos_method ref=! "
	  ."nozero noscale out=$out usevar genvar logto=neither";
	$args .= " sigmas=$sigmas" if ($sigmas);
	$Mon{ccdpack_reg}->obeyw("makemos","$args");
      }

      # Merge the FITS headers into the mosaiced file.
      _MERGE_FITS_HEADERS_ OUT=$out

      # Add up exposure times and other NDF components if present: Frm
      # contains the aligned files
      unless ($Frm->tagexists("snr")) {
	_ADD_IMAGE_COMPS_ OUT=$out EXTEN=smurf COMPS=$complist
      }
      push(@aligned, $Frm->files);
    } else {
      # Only 1 file so copy input to output
      orac_print "1 file, copying to output...\n";
      my $args = "in=$files[0] out=$out";
      $Mon{ndfpack_mon}->obeyw("ndfcopy","$args");
    }

    # Store the output coadd, read the header and tag it
    $subgrp->files($out);
    $subgrp->tagset("coadd");
    $subgrp->readhdr;
    $subgrp->tagset("newimage");
    $subgrp->product("newimage");

    # Return current Frame to original state
    $Frm->tagretrieve("mosaic_jcmt_images");
  }
  # Store the aligned files so they can deleted
  $Frm->push_intermediates(@aligned) if @aligned;
} else {
  orac_print "Delaying processing until the last Group member\n";
}
