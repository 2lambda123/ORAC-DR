# -*-cperl-*-

=head1 NAME

_MOSAIC_JCMT_IMAGES_ - combine JCMT images taking NDF components into account

=head1 SYNOPSIS

_MOSAIC_JCMT_IMAGES_

=head1 DESCRIPTION

This PICARD primitive is designed to combine multiple SCUBA-2 or ACSIS
images, taking into account the existence of the EXP_TIME and WEIGHTS
NDF components.

The mosaicking step can be performed by KAPPA/wcsmosaic or
CCDPACK/makemos (not yet implemented).

All the input images must be of the same source and they must be
aligned to the same grid for the EXP_TIME sum to work correctly.

=head1 ARGUMENTS

This primitive supports the following arguments:

=over 4

=item B<METHOD>

Pixel-spreading scheme. Default is C<NEAREST> for nearest-neighbour.

=item B<PARAMS>

Optional parameters if B<METHOD> is not C<NEAREST> or
C<BILINEAR>. Should be specified as a string of 1 or 2 values
(separated by a comma). See documentation for wcsalign/wcsmosaic for
further details.

=item B<TASK>

Task to perform the mosaicking step. May be C<wcsmosaic> or
C<makemos>. Default is C<wcsmosaic>.

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

MAKEMOS, WCSMOSAIC

=item ORAC-DR primitives:

SCUBA2: _ADD_IMAGES_, _ALIGN_ARRAYS_, _FIND_IMAGE_STATISTICS_, _SHIFT_IMAGES_

=back

=head1 OUTPUT DATA

The mosaic is stored in the current Group and tagged with C<newimage>.

=head1 OUTPUT FILES

Creates a single output file with the suffix C<_mos>.

=head1 NOTES

=over 2

=item *

Processing is delayed until the last Frame in the Group is
reached. Care should be taken that any downstream primitives are aware
of this.

=item *

Does not handle multiple sources (will try and mosaic them all!).

=item *

Has not been tested on ACSIS data and is unlikely to work given the
dependence on SCUBA-2 primitives.

=item *

The output EXP_TIME is created via a simple sum of pixel values so all
the input images should be created on the same grid.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010,2012-2013 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

orac_print ("\nCalling _MOSAIC_JCMT_IMAGES_: combine JCMT images\n", "yellow");

# Obtain mosaicking task - set wcsmos flag
my $task = lc(get_prim_arg($_PRIM_ARGS_, "TASK", "wcsmosaic"));
$task = $Frm->uhdr("RECPAR_MOSAIC_TASK")
  if defined $Frm->uhdr("RECPAR_MOSAIC_TASK");
my $wcsmos = ( $task =~ /^wcsmos/ ) ? 1 : 0;

# Pixel-spreading scheme for wcsalign/wcsmosaic
my $method = lc(get_prim_arg( $_PRIM_ARGS_, "METHOD", "nearest"));
$method = $Frm->uhdr("RECPAR_WCSMOSAIC_METHOD")
  if (defined $Frm->uhdr("RECPAR_WCSMOSAIC_METHOD"));

# PARAMS for wcsalign/wcsmosaic
my $params = get_prim_arg($_PRIM_ARGS_, "PARAMS", undef);
if (defined $Frm->uhdr("RECPAR_WCSMOSAIC_PARAMS")) {
  my $mospar = $Frm->uhdr("RECPAR_WCSMOSAIC_PARAMS");
  $params = (ref($mospar) eq 'ARRAY') ? "$mospar->[0],$mospar->[1]" : $mospar;
}
my $parstring = "[$params]" if (defined $params);

# If not using wcsmosaic, get the method parameter for makemos
my ($makemos_method, $sigmas);
if (!$wcsmos) {
  $makemos_method = get_prim_arg($_PRIM_ARGS_, "MAKEMOS_METHOD", "median");
  $makemos_method = $Frm->uhdr("RECPAR_MAKEMOS_METHOD")
    if (defined $Frm->uhdr("RECPAR_MAKEMOS_METHOD"));
  $sigmas = $Frm->uhdr("RECPAR_MAKEMOS_SIGMAS") if ($makemos_method eq "sigmas");
}

my $verbose = ( defined $Frm->uhdr("RECPAR_VERBOSE") ) ?
  $Frm->uhdr("RECPAR_VERBOSE") : 0;

# Only proceed for the last member of the Group
if ($Grp->lastmember($Frm)) {
  # Collate images
  my $refimage;
  my @infiles = map { $_->files } $Grp->members;

  # If processing SCUBA-2 data, shift the images to a common origin if
  # requested. Always do this for SCUBA-2 calibration sources as the
  # position is known.
  my $info = "images";
  if ( $Frm->hdr("INSTRUME") eq "SCUBA-2" &&
       ( $Frm->uhdr("RECPAR_REGISTER_IMAGES") ||
	 $Cal->iscalsource($Frm->hdr("OBJECT")) ) ) {
    $Frm->uhdr("NSHIFT", 0);
    my $Frmobj = $Frm->new(\@infiles);
    my $nfiles = $Frmobj->nfiles;
    _SHIFT_IMAGES_ VERBOSE=1 FRAME=$Frmobj

    if ($Frm->uhdr("NSHIFT") > 1) {
      @infiles = $Frmobj->files;
      $nfiles = $Frmobj->nfiles;
      $info = "shifted images";
    } else {
      orac_warn "No images were shifted\n";
    }
  }

  my $nfiles = scalar(@infiles);
  orac_print "Reached last Group member: mosaicking $nfiles $info...\n";
  # Write list of files for wcsmosaic
  my $inlist = write_file_list( @infiles );

  # Add up the EXP_TIME and WEIGHTS component - set a uhdr flag to
  # indicate the chosen component `exists'
  $Frm->uhdr("EXP_TIME",1);
  my $comps = "EXP_TIME";
  my $things_to_align = "exposure times";
  # Only SCUBA-2 has the weights component
  if ( $Frm->hdr("INSTRUME") eq "SCUBA-2" ) {
    $comps .= ",WEIGHTS";
    $Frm->uhdr("WEIGHTS",1);
    $things_to_align .= " and weights";
  } else {
    # Heterodyne data has EFF_TIME
    $comps .= ",EFF_TIME";
    $Frm->uhdr("EFF_TIME",1);
    $things_to_align .= " and effective integration times";
  }

  # Align components to same pixel grid, use the first image as the
  # reference.
  my $tmpfrm = $Frm->new;
  $tmpfrm->files(@infiles);
  orac_print "Aligning $things_to_align...\n";
  _ALIGN_ARRAYS_ METHOD=$method REFIMAGE=! COMP=1 FRAME=$tmpfrm PARAMS=$params
  @infiles = $tmpfrm->files;
  # Add the aligned files to the intermediates for deletion
  $Frm->push_intermediates(@infiles);

  # Combine images
  my $out = (defined $Frm->uhdr("RECPAR_OUTPUT_NAME")) ? $Frm->uhdr("RECPAR_OUTPUT_NAME")
    : $Frm->file . "_mos";
  if ( $wcsmos ) {
    my $args = "ref=! variance genvar=! method=$method out=$out "
      ."in=^$inlist lbnd=! ubnd=!";
    $args .= " params=$parstring" if (defined $params);

    $Mon{kappa_mon}->obeyw("wcsmosaic","$args");
  } else {
    # Now that the files are all aligned makemos can be called
    $inlist = write_file_list( @infiles );
    my $args = "in=^$inlist method=$makemos_method ref=! "
      ."nozero noscale out=$out usevar genvar logto=neither";
    $args .= " sigmas=$sigmas" if ($sigmas);

    $Mon{ccdpack_reg}->obeyw("makemos","$args");
  }

  $Grp->file($out);
  $Grp->readhdr;
  $Grp->tagset("newimage");

  # Add up exposure times and other NDF components
  _ADD_IMAGES_ INLIST=\@infiles OUT=$out COMPS=$comps

} else {
  orac_print "Delaying processing until the last Group member\n";
}
