# -*-cperl-*-

=head1 NAME

_JCMT_VERIFY_PARAMETERS_ - read recipe parameters for processing JCMT data

=head1 SYNOPSIS

_JCMT_VERIFY_PARAMETERS_

=head1 DESCRIPTION

Sets up a few useful user-header entries for controlling the
processing of JCMT data. Instrument-specific recipe parameters should
be listed here, though setting the uhdr entries should be done with a
dedicated primitive.

=head1 ARGUMENTS

This primitive has no arguments.

=head1 EXTERNAL TASKS

The following external task is used:

=over 2

=item ORAC-DR PRIMITIVES:

_SCUBA2_VERIFY_PARAMETERS_

=back

=head1 OUTPUT DATA

The Frame uhdr contains entries for all valid recipe parameters given
in the recipe parameter file.

=head1 NOTES

See the documentation for the individual recipes for which parameters
are used.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2013 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# List of available generic recipe parameters
my @recpars = (
	       'CROP_METHOD',
	       'DISPLAY',
	       'KEEPFILES',
	       'KEEPFIT',
	       'LOGFILE',
	       'MAKEMOS_METHOD',
	       'MAKEMOS_SIGMAS',
	       'MAP_WIDTH',
	       'MAP_HEIGHT',
	       'MAP_RADIUS',
	       'MOSAIC_EACH',
	       'MOSAIC_TASK',
	       'NDF_EXTEN',
	       'OUTPUT_NAME',
	       'STACK_KEYS',
	       'STATS_COMP',
	       'STATS_ESTIMATOR',
	       'STATS_THRESH',
	       'VERBOSE',
	       'WCSMOSAIC_METHOD',
	       'WCSMOSAIC_PARAMS',
	      );

# Set a flag for SCUBA-2 data - saves testing a string each time
my $scuba2 = ($Frm->hdr("INSTRUME") eq "SCUBA-2") ? 1 : 0;

if ($scuba2) {
  # SCUBA-2-specific parameters
  push (@recpars,
	'ANNULUS',
	'ANNULUS_INNER',
        'ANNULUS_INNER_RADIUS',
	'ANNULUS_OUTER',
        'ANNULUS_OUTER_RADIUS',
	'APERTURE_RADIUS',
	'AUTOPHOTOM',
	'BACKGROUND_FITMETHOD',
	'EXTRACT_METHOD',
	'FAKEMAP_SCALE',
	'FINDBACK_BOX',
	'FINDCLUMPS_CFG',
	'FIT_FIXAMP',
	'FIT_FIXBACK',
	'FIT_GAUSSIAN',
	'FIT_METHOD',
	'FITSURFACE_FITTYPE',
	'FITSURFACE_FITPAR',
	'FITSURFACE_KEEPSURFACE',
	'FLUX_850',
	'FLUX_450',
	'MASK_METHOD',
	'MASK_SOURCE',
	'NOISE_METHOD',
	'PCA_COMP',
	'PCA_FLATCLEAN',
	'PCA_REUSE',
	'PSF_BOX',
	'PSF_FWHM',
	'PSF_MATCHFILTER',
	'PSF_NORM',
	'PSF_RELAMPS',
	'REGISTER_DEC',
	'REGISTER_IMAGES',
	'REGISTER_RA',
	'REMOVE_BACKGROUND',
	'RESIST_CFG',
	'SMOOTH_DATA',
	'SMOOTH_FWHM',
	'SNRCUT',
	'SNRMAP',
	'USEFCF',
	'USEFCF_CALTYPE',
	'USEFWHM',
	'USESNR',
	'WHITEN_BOX',
	'WHITEN_THRESH',
	'WHITEN_ESTIMATOR'
       );

  # Retrieve object
  my $src = uc($Frm->hdr("OBJECT"));
  # Strip spaces from name
  $src =~ s/\s+//g;
  # Add source-specific fluxes to recipe parameters
  push(@recpars, "FLUX_850.$src","FLUX_450.$src");
  # Store the source name
  $Frm->uhdr("SRCNAME",$src);
} else {
  # Placeholder for dealing with other instruments
}

# Store the valid recipe parameters in the %RECPARS hash
ORAC::Recipe::Parameters::verify_parameters( \%RECPARS, \@recpars );

# Now set uhdr entries for defined recipe parameters

### User information ###
# Allow a VERBOSE flag to get extra info printed to screen
if ( defined $RECPARS{'VERBOSE'} ) {
  $Frm->uhdr("RECPAR_VERBOSE", $RECPARS{VERBOSE});
}
# Flag to denote whether to collect info to write to a log file
if ( defined $RECPARS{'LOGFILE'} ) {
  $Frm->uhdr("RECPAR_LOGFILE", $RECPARS{LOGFILE});
}
# Name of output file
if (defined $RECPARS{'OUTPUT_NAME'}) {
  $Frm->uhdr("RECPAR_OUTPUT_NAME", $RECPARS{OUTPUT_NAME});
}

### Keeping files at the end of processing ###
# Parameter to determine which files created as part of the processing
# are left on disk - default to keeping all created files
# +1 = keep chosen files (primitive should define name)
# -1 = keep all files
#  0 = keep *no* files
$Frm->uhdr("RECPAR_KEEPFILES",
	   (defined $RECPARS{KEEPFILES}) ? $RECPARS{KEEPFILES} : -1);
# Flag to keep results of fit to source on disk - default to no
$Frm->uhdr("RECPAR_KEEPFIT",
	   (defined $RECPARS{KEEPFIT}) ? $RECPARS{KEEPFIT} : 0);

### Method for cropping images: statistical, rectangle or circle
if (defined $RECPARS{CROP_METHOD}) {
  my $crop_method = lc($RECPARS{CROP_METHOD});
  $crop_method = ($crop_method =~ /^stat/) ? "statistical" :
    ($crop_method =~ /^rect/ ? "rectangle" : "circle");
  $Frm->uhdr("RECPAR_CROP_METHOD", $crop_method);
}

### Map parameters ###
# New map radius or width and height
$Frm->uhdr("RECPAR_MAP_RADIUS", $RECPARS{MAP_RADIUS})
  if (defined $RECPARS{'MAP_RADIUS'});
$Frm->uhdr("RECPAR_MAP_WIDTH", $RECPARS{MAP_WIDTH})
  if (defined $RECPARS{'MAP_WIDTH'});
$Frm->uhdr("RECPAR_MAP_HEIGHT", $RECPARS{MAP_HEIGHT})
  if (defined $RECPARS{'MAP_HEIGHT'});

# Flag to denote whether or not to display data
if ( defined $RECPARS{'DISPLAY'} ) {
  $Frm->uhdr("RECPAR_DISPLAY", $RECPARS{DISPLAY});
}

# Name of the NDF extension to analyze, rather than the top-level data
# structure. Note that it will be assumed that this extension exists
# under the .more.smurf hierarchy so the user must give only the
# unique portion of the extension name.
if ( defined $RECPARS{'NDF_EXTEN'} ) {
  $Frm->uhdr("RECPAR_NDF_EXTEN", $RECPARS{NDF_EXTEN});
}

### Mosaicking parameters ###
# Mosaic task to use
if (defined $RECPARS{MOSAIC_TASK}) {
  $Frm->uhdr("RECPAR_MOSAIC_TASK", lc($RECPARS{MOSAIC_TASK}));
} else {
  $Frm->uhdr("RECPAR_MOSAIC_TASK", "wcsmosaic");
}
# Are different objects to be mosaicked separately?
if (defined $RECPARS{MOSAIC_EACH}) {
  $Frm->uhdr("RECPAR_MOSAIC_EACH", $RECPARS{MOSAIC_EACH});
}
# Wcsmosaic/wcsalign parameters - required for all methods
if (defined $RECPARS{WCSMOSAIC_METHOD}) {
  # Store lower case string
  $Frm->uhdr("RECPAR_WCSMOSAIC_METHOD", lc($RECPARS{WCSMOSAIC_METHOD}));

  # Only store PARAMS for the relevant choices of METHOD
  if ($Frm->uhdr("RECPAR_WCSMOSAIC_METHOD") !~ /^[near|bili]/) {
    $Frm->uhdr("RECPAR_WCSMOSAIC_PARAMS", $RECPARS{WCSMOSAIC_PARAMS})
      if (defined $RECPARS{WCSMOSAIC_PARAMS});
  }
}
# Makemos parameters if required
if ($Frm->uhdr("RECPAR_MOSAIC_TASK") eq "makemos") {
  if (defined $RECPARS{MAKEMOS_METHOD}) {
    $Frm->uhdr("RECPAR_MAKEMOS_METHOD", lc($RECPARS{MAKEMOS_METHOD}));
    # The SIGMAS method requires a sigma to be defined - default to 4
    # if not separately defined
    if ($Frm->uhdr("RECPAR_MAKEMOS_METHOD") eq "sigmas") {
      $Frm->uhdr("RECPAR_MAKEMOS_SIGMAS", (defined $RECPARS{MAKEMOS_SIGMAS})
		 ? $RECPARS{MAKEMOS_SIGMAS} : 4.0);
    }
  }
}

# FITS header keywords to sort files by when stacking
if (defined $RECPARS{STACK_KEYS}) {
  $Frm->uhdr("RECPAR_STACK_KEYS", $RECPARS{STACK_KEYS});
}

### Statistics estimators - suitable defaults should be set in the
### relevant primitives if not defined here ###
# Component: variance, error or exposure time
if (defined $RECPARS{STATS_COMP}) {
  my $comp = lc($RECPARS{STATS_COMP});
  $Frm->uhdr("RECPAR_STATS_COMP", $comp)
    if ($comp =~ /^[var|err|texp]/);
}
# Estimator: mean/median/mode/min/max
if (defined $RECPARS{STATS_ESTIMATOR}) {
  my $estimator = uc($RECPARS{STATS_ESTIMATOR});
  $Frm->uhdr("RECPAR_STATS_ESTIMATOR", $RECPARS{STATS_ESTIMATOR})
    if ($estimator eq "MEAN" || $estimator eq "MODE" || $estimator eq "MEDIAN" ||
	$estimator eq "MIN" || $estimator eq "MAX");
}
# Threshold - multiplier for the estimator
if (defined $RECPARS{STATS_THRESH}) {
  $Frm->uhdr("RECPAR_STATS_THRESH", $RECPARS{STATS_THRESH});
}

# Now deal with instrument-specific parameters
if ($scuba2) {
  _SCUBA2_VERIFY_PARAMETERS_
}
