# -*-cperl-*-

=head1 NAME

_CALC_SCUBA2_FCF_ - derive FCFs from input images of SCUBA-2 calibration sources

=head1 SYNOPSIS

_CALC_SCUBA2_FCF_

=head1 DESCRIPTION

This PICARD primitive is designed to calculate flux conversion factors
(FCFs) from images of SCUBA-2 calibration sources. These values are
stored in the C<PICARD_RESULTS> data if requested.

=head1 ARGUMENTS

This primitive has one argument:

=over 4

=item B<LOGFILE>

A flag to denote whether to store information in the C<PICARD_RESULTS>
hash for later writing to a logfile. Overridden by the presence of the
C<RECPAR_LOGFILE> recipe parameter. Default is 1.

=back

=head1 EXTERNAL TASKS

The following external task is used:

=over 4

=item ORAC-DR primitives:

SCUBA2: _FIND_CALIBRATION_MAP_;
PICARD: _GET_CURRENT_RESULTS_

=back

=head1 OUTPUT DATA

FCFs are written to a log file C<log.fcf>. See
L<_FIND_CALIBRATION_MAP_|_FIND_CALIBRATION_MAP_> for details on the
format.

=head1 OUTPUT FILES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2010,2013 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

orac_print ("\nCalling _CALC_SCUBA2_FCF_: calculate an FCF for uncalibrated SCUBA-2 data\n", "yellow");

# Are results to be written to a logfile? Override with recipe
# parameter
my $logfile = get_prim_arg($_PRIM_ARGS_, "LOGFILE", 1);
$logfile = $Frm->uhdr("RECPAR_LOGFILE")
  if (defined $Frm->uhdr("RECPAR_LOGFILE"));

# Check the units - we can ONLY derive an FCF for uncalibrated data,
# ie pW
if ( $Frm->uhdr("DATA_UNITS") eq "pW") {

  # Retrieve existing results if present
  my %picard_results;
  if (defined $Frm->uhdr("PICARD_RESULTS")) {
    %picard_results = %{ $Frm->uhdr("PICARD_RESULTS") };
  }
  my $datafile = (defined $picard_results{file}) ? $picard_results{file} : $Frm->file;

  my $object = $Frm->hdr("OBJECT");

  # Set a flag to denote whether a flux can be determined for the
  # current wavelength
  my $fluxexists = 0;
  if ( $Cal->iscalsource($object) ) {
    $fluxexists = 1;
  } else {
    my $long = ( $Frm->hdr("FILTER") =~ /850/ ) ? 1 : 0;
    if ( $long && defined $Frm->uhdr("RECPAR_FLUX_850") ) {
      $fluxexists = 1;
    } elsif ( !$long && defined $Frm->uhdr("RECPAR_FLUX_450") ) {
      $fluxexists = 1;
    }
  }

  if ( $fluxexists ) {
    orac_print "\nCalculating FCF for $datafile ($object)\n";
    # Set store=0 because we don't want to try and store the FCF in the
    # calibration system
    _FIND_CALIBRATION_MAP_ GROUP=0 LOGFITPAR=1

    my $fcfs = $_FIND_CALIBRATION_MAP_{FCF};
    if ($logfile && defined $fcfs) {
      $picard_results{fcf_beam} = $fcfs->{BEAM};
      $picard_results{fcf_beam_err} = $fcfs->{BEAM_ERR};
      $picard_results{fcf_beammatch} = $fcfs->{BEAMMATCH};
      $picard_results{fcf_beammatch_err} = $fcfs->{BEAMMATCH_ERR};
      $picard_results{fcf_arcsec} = $fcfs->{ARCSEC};
      $picard_results{fcf_arcsec_err} = $fcfs->{ARCSEC_ERR};
    }
    my $fluxes = $_FIND_CALIBRATION_MAP_{FLUXES};
    if ($logfile && $fluxes) {
      # Retrieve aperture photometry results
      $picard_results{flux} = $fluxes->{ARCSEC};
      $picard_results{flux_err} = $fluxes->{ARCSEC_ERR};
    }

    # The Frame may have been marked as bad if no FCFs could be
    # determined, but downstream processing doesn't care about that so
    # mark the Frame as good again.
    unless ($Frm->isgood) {
      $Frm->isgood(1) if ($Frm->uhdr("PICARD_RESULTS"));
    }
  } else {
    my $fluxrecpar = ($Frm->hdr("FILTER") =~ /850/) ? "FLUX_850" : "FLUX_450";
    orac_err "Unable to calculate FCF from $datafile:\n $object is not a known calibrator and no flux given.\n Please specify the $fluxrecpar recipe parameter for $object\n";
  }

  # Store the results hash in the Frame uhdr
  if ( $logfile ) {
    $Frm->uhdr("PICARD_RESULTS", \%picard_results);
  }

} else {
  orac_warn "Unable to calculate an FCF: data are already calibrated (in "
    .$Frm->uhdr("DATA_UNITS").")\n";
}
