=head1 NAME

_FIND_CALIBRATION_MAP_ - determine the map flux conversion factor

=head1 SYNOPSIS

 _FIND_CALIBRATION_MAP_

=head1 DESCRIPTION

For calibrators, finds the total integrated intensity
using L<_FIND_INTEGRATED_INTENSITY_|_FIND_INTEGRATED_INTENSITY_>
and calculates a flux conversion factor from the known flux
of the calibrator:

  fcf = V_sum /  S_tot

This value is then stored in the index file C<index.gains>.

Additionally, the peak response is calculated by finding the
peak flux and the fitted peak signal.

  fcf = V_peak / S_peak

=head1 EXTERNAL TASKS

None.

=head1 NOTES

This primitive is frame based (C<$Frm>).

=head1 ARGUMENTS

None.

=head1 OUTPUT DATA

Entry in C<index.fcf> log file if the frame is a calibrator.

=head1 AUTHORS

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1  COPYRIGHT

Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# Check that we are a calibrator (regardless of filter)
if ($Cal->iscalsource($Frm->hdr("OBJECT"))) {

  # Find the integrated intensity
  # turn off logfile in production code
  _FIND_INTEGRATED_INTENSITY_  LOGFILE=0 VERBOSE=0

  # Find the peak
  _FIND_MAP_PEAK_ LOGFILE=0 VERBOSE=0

  # Retrieve the results
  my %results = (
		 BEAM => $_FIND_MAP_PEAK_{RESULTS},
		 ARCSEC => $_FIND_INTEGRATED_INTENSITY_{RESULTS},
		);


  # Now need to correct for pixel scale. This can be calculated
  # by looking at the SCUPIXSZ keyword in the header [assuming it
  # exists]. Only in a rebinned header.
  unless (exists $Frm->uhdr->{'SCUPIXSZ'}) {
    orac_err("Failed to read pixel size from FITS header!");
    my $ORAC_STATUS = ORAC__ERROR;
  }

  my $pixscale = $Frm->uhdr('SCUPIXSZ') ** 2;

  # Get list of filters
  my @filter = $Frm->filters;

  # Copy of the frame header since we need to modify it
  my %hdr = %{$Frm->hdr};

  # Loop over the different type of results
  foreach my $type (keys %results) {

    # Type specific configurations
    my ($ismap, $scale, $units);
    if ($type eq 'ARCSEC') {
      $ismap = 1;  # Need full integrated flux
      $scale = $pixscale; # Need to correct for pixel scale
      $units = "Jy/arcsec**2/V";
    } else {
      $ismap = 0;
      $scale = 1;
      $units = "Jy/beam/V";
    }

    orac_print "Determining calibration of type $type\n";

    # Now Loop over frames
    for my $i (1.. $Frm->nfiles ) {

      # skip if we have no result for this filter
      # or it is negative - we may want report this failure to the user
      next unless (defined $results{$type}->[$i] &&
		   $results{$type}->[$i] > 0);

      # Now get the flux for this filter
      my $flux = $Cal->fluxcal($Frm->hdr("OBJECT"), $filter[$i-1], $ismap);

      if (defined $flux) {

	orac_print "Flux: $type $flux, ". $results{$type}->[$i]. "\n";

	# Calculate the new gain
	my $fcf = $flux / ($results{$type}->[$i] * $scale);

	# Announce the new gain
	orac_print("Storing new gain for ".$filter[$i-1].": $fcf $units\n",'yellow');

	# Set the current gain - add to index file
	# This means that we have to create a hash with the
	# new keyword GAIN and the selected filter FILTER
	$hdr{GAIN} = $fcf;
	$hdr{UNITS} = $type;
	$hdr{FILTER} = uc($filter[$i-1]);

	$Cal->gainsindex->add($Frm->file($i), \%hdr);

	# Additionally it seems that a user-friendly logfile is
	# a requirement
	_ADD_FCF_LOG_ENTRY_ FILTER=$filter[$i-1] FCF=$fcf UNITS=$type

      }

    }

  }

}
