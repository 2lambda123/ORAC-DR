=head1 NAME

REDUCE_NOISE - Reduce a noise observation

=head1 DESCRIPTION

Process a noise observation and produce a 1-D data file.
Noisy bolometers are reported.

=head1 PARAMETERS

THRESHOLD - reports bolometers with threshold above this value
            (default value= 100nV).

=head1 TASKS

Uses the SURF REDUCE_NOISE task

=head1 NOTES

Writes the resultant bad bolometer list to the badbols index
file.

=cut

# Read the arguments
my $thresh = ($_REDUCE_NOISE_{THRESHOLD} || 100.0);

# Input file (assume only one sub-frame)
my ($in, $out) = $Frm->inout('_noise');

# Create temporary file object - note that reduce_noise
# will not overwrite an existing file..... so we need to unlink
# it first - this could cause problems if the temporary file
# is reallocated in the meantime.
my $temp = new ORAC::TempFile(0);
my $fname = $temp->file;

# Run the task
unlink $fname; # kluge until reduce_noise can overwrite
$Mon{surf_mon}->obeyw("reduce_noise","in=$in out=$out file=$fname");

# Note that the output from reduce_noise is 2-Dimensional
# with the chop error stored in the variance array in the first
# slice of the second axis (ie comp=err section=(,1))
# The graph subsystem could be made to do this (the data range needs
# to be set with ZMIN/ZMAX and not YMIN/YMAX.) but it may be simpler
# to extract the variance array and make a temporary NDF.

# Update Frame
$Frm->file($out);

# Display if required
$Display->display_data($Frm) if defined $Display;

# Now read in temp text file, and extract lines that have 
# noise error greater than 100nV

{
  my $fh = new IO::File("< $fname");
  my @badbols = (); # Store the bad bolometers list
  orac_print "Noisy bolometers (>$thresh nV):\n";

  if (defined $fh) {
    foreach my $line (<$fh>) {
      # Check that line starts with a bolometer name
      if ($line =~ /^[A-I]\d/) {
	my @bits = split(/\s+/, $line);
	if ($bits[2] > $thresh) {
	  orac_print "\t$bits[0]:\t$bits[2] nV\n",'clear'; 
	  # Store the bolometer name
	  push(@badbols, $bits[0]);
	}
      }

    }
    close($fh);
  }

  # Write the information to the index file
  # Making sure that the THRESHOLD and BADBOLS information
  # is stored by updating the header
  # Take a copy of the header before we modify it
  my %hdr = %{$Frm->hdr};
  $hdr{'THRESHOLD'} = $thresh;

  # Calculate the badbols string to store (has to contain
  # something
  $hdr{BADBOLS} = ( $#badbols > -1 ? join(",",@badbols) : 'NONE');
  
  # Actually add the index entry
  $Cal->badbolsindex->add($out, \%hdr);
  orac_print "Adding noise observation to index file\n";
}
