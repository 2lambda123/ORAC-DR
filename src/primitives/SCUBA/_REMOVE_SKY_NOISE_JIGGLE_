=head1 NAME

REMOVE_SKY_NOISE_JIGGLE

=head1 DESCRIPTION

Determine sky bolometers (if not specified) and then
remove the sky noise using these bolometers

=head1 TASKS

Uses no tasks directly.

=head1 ARGUMENTS

Recognised input arguments:

  BOLOMETERS - Specifies a default bolometer list
  BOL$sub    - List of bolometers for each subinstrument
  MODE       - Sky removal mode
  ADD        - Whether to add back sky signal to data

=head1 OUTPUT VARIABLES

None

=cut

# First see whether we need to determine the sky bolometers
# ourselves

# Pass all the arguments matching BOL* into the 
# _DETERMINE_SKY_BOLOMETERS_JIGGLE_ routine. Will just return
# them unchanged (but in a different hash so that other tasks
# know where to look)

# Set the default bolometers and convert to each sub
$args = "";
if (exists $_REMOVE_SKY_NOISE_JIGGLE_{BOLOMETERS}) {
  foreach $sub ($Frm->subs) {
    $args .= " BOL$sub=".$_REMOVE_SKY_NOISE_JIGGLE_{BOLOMETERS};
  }
}

# Sets the sky bols for each sub instrument
foreach $key (keys %_REMOVE_SKY_NOISE_JIGGLE_) {
  if ($key =~ /^BOL/) {
    $args .= " $key=".$_REMOVE_SKY_NOISE_JIGGLE_{$key};
  }
}

_DETERMINE_SKY_BOLOMETERS_JIGGLE_ $args


# Now remove sky using the values obtained from the previous primitive.
# MODE can be passed through from above
if (exists $_REMOVE_SKY_NOISE_JIGGLE_{MODE}) {
  $mode = "MODE=" . $_REMOVE_SKY_NOISE_JIGGLE_{MODE};
} else {
  $mode = "";
}

# ADD can be passed through
if (exists $_REMOVE_SKY_NOISE_JIGGLE_{ADD}) {
  $add = "ADD=" . $_REMOVE_SKY_NOISE_JIGGLE_{ADD};
} else {
  $add = "";
}

_REMOVE_SKY_JIGGLE_ $mode $add


  
