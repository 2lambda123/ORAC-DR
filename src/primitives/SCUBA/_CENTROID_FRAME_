=head1 NAME

CENTROID_FRAME

=head1 DESCRIPTION

Find the centroid(s) of the current frame(s).
Assumes that the centroid is near the origin in axis
coordinates. [Errors not reported until the KAPPA
centroid task writes them to a parameter].

=head1 TASKS

Uses the KAPPA CENTROID task.
Uses the KAPPA STATS task to retrieve the peak
signal in the map

=head1 ARGUMENTS

  BOX = Size of search box in each dimension.
        Default is 9 pixels.

=head1 NOTE

KLUGE ALERT!!!!!!!!!!!!!!!!!!!!1

THIS PRIMITIVE ASSUMES THAT IT IS RUN AFTER _REBIN_FRAME_
(since centroid is meaningless without an image) AND
THAT _REBIN_FRAME_ USED A SUFFIX OF '_reb' (since REBIN_FRAME
does not update the Frame object) AND THAT REBIN_FRAME WAS
RUN WITH AN AZ REGRID OPTION

It may be necessary to merge this with a new REBIN_FRAME....

This primitive also writes results to a logfile (log.pointing)

=cut


my $box = ( $_CENTROID_FRAME_{BOX} || 9 );

my @filters = $Frm->filters;

# Create logfile object
my $log = new ORAC::LogFile("log.pointing");

# Write header to logfile
my $time = gmtime();
$log->header("Pointing log file - created on $time",
	     "\n#     Time       Filter Az   DAZ   DEL   Peak  Seeing  CSO   ST",
	     "------------------------------------------------------------------"
	    );

# Loop over frames
foreach my $i (1..$Frm->nfiles) {
  
  my ($in, $out) = $Frm->inout('_reb',$i);

  my $args = " cosys=d mode=i cerror=true search=$box";

  $Mon{kappa_mon}->obeyw("centroid","ndf=$out init=[0,0] $args");

  # Read the result
  my ($ORAC_STATUS, @centre) = $Mon{kappa_mon}->get("centroid","centre");

  my $daz = sprintf "%6.2f", $centre[0];
  my $del = sprintf "%6.2f", $centre[1];

  orac_print "Centroid position: $daz, $del\n";

  # Store the peak signal in the image (might be useful
  # for measuring flux changes in blazars

  # Run stats on an NDF section of the pixel at the centroid position

  $Mon{kappa_mon}->obeyw("stats","NDF=$out($centre[0],$centre[1])");

  ($ORAC_STATUS, my $max) = $Mon{kappa_mon}->get("stats","maximum");

  # Local copy of information
  my $num = sprintf "%-4d", $Frm->number;
  my $time= sprintf "%11.2f", $Frm->hdr('ORACTIME');
  my $see = sprintf "%5.2f", $Frm->hdr('SEEING');
  my $cso = sprintf "%5.2f", $Frm->hdr('TAU_225');
  $max= sprintf "%7.3f", $max; 
  $daz = sprintf "%5.1f", $centre[0];
  $del = sprintf "%5.1f", $centre[1];
  my $filt= sprintf "%4d",   $filters[$i-1];
  my $lst = $Frm->hdr('STSTART');
  $lst =~ s/\.\d+$//;  # Strip decimals from seconds

  # Calculate average azimuth for the pointing
  my $az = int (($Frm->hdr('STRT_AZD') + $Frm->hdr('END_AZD') ) /2.0 );
  my $az = sprintf "%3d", $az;

  # Add log entry
  $log->addentry("$num $time $filt  $az $daz $del $max $see $cso $lst");

}
