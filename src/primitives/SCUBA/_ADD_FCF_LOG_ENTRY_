# -*- cperl -*-

=head1 NAME

_ADD_FCF_LOG_ENTRY_ - Write an FCF log entry to disk

=head1 SYNOPSIS

 _ADD_FCF_LOG_ENTRY_ FILTER=450W FCF=52.5 UNITS=ARCSEC

=head1 DESCRIPTION

Write a single log entry containing the results of an
Flux Conversion Factor calculation.

=head1 ARGUMENTS

=over 4

=item FILTER

The filter name associated with the result.

=item FCF

The Flux conversion factor to write to the log file.

=item UNITS

The units of the FCF. This can be either ARCSEC (for jansky per
square arcseconds) or BEAM (jansky per beam).

=back

=head1 NOTES

=over 4

=item *

FILTER and FCF must be supplied to this primitive (since that
is the only way to pass the result into the primitive).

=item *

One entry is written each time this primitive is called. If multiple
files are to be processed, this primitive should be called multiple
times.

=item *

Obtains header values from the current frame.

=back

=head1 FORMAT

The logfile has the following columns:

=over 4

=item UT

The UT date in C<YYYYMMDD.frac> format.

=item HST

The time of the observation in Hawaii.

=item Obs

The observation number.

=item Source

The source name.

=item Mode

The observing mode.

=item Number of Integrations

The number of integrations.

=item Filter

The specific filter associated with the fcf result.

=item Chop throw

The chop throw of the observation.

=item Chop PA

The chop position angle in Az-El coordinates.  If the chop was
originally specified in Ra-Dec coordinates, it will rotate in Az-El
coordinates during the observation.  In this case, the average
position angle is recorded.  Note, this column is only included if the
user has access to PAL.

=item Chop PA Error

The error in the chop position angle in Az-El coordinates.  If the
chop was originally specified in Az-El coordinates, this error is
zero.  If the chop was rotating in Az-El coordinates, the error is the
difference between the average position angle and the position angle
at the beginning of the observation.  Note, this column is only
included if the user has access to PAL.

=item Elevation

The elevation of the observation.

=item CSO

Equivalent CSO tau derived from the tau used to reduce
the observation.

=item Tau

The tau value used for the reduction.

=item Seeing

The seeing value as stored in the header.

=item FCF

The flux conversion factor

=item FCF Units

The units of the FCF. Can be BEAM (Jy/beam/V) or ARCSEC
(Jy/arcsec**2/V).

=back

=head1 FILES

C<log.fcf> - the log file

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>
Elese Archibald E<lt>e.archibald@jach.hawaii.eduE<gt>

Copyright (C) 2000 Particle Physics and Astronomy Research Council.
All Rights Reserved.

=cut

use JCMT::Tau;
use Math::Trig;

# Check the arguments
my $filter;
my $fcf;
my $units;
foreach (qw/FILTER UNITS FCF/) {
  unless (exists $_ADD_FCF_LOG_ENTRY_{$_}) {
    orac_err("ADD_FCF_LOG_ENTRY: $_ must be specified as an argument");
    my $ORAC_STATUS = ORAC__ERROR;
  }
}
$filter = $_ADD_FCF_LOG_ENTRY_{FILTER};
$units  = $_ADD_FCF_LOG_ENTRY_{UNITS};
$fcf    = $_ADD_FCF_LOG_ENTRY_{FCF};


# Check whether the user has access to PAL.  This affects whether
# the chop pa (if defined in local coordinates) can be transformed
# to the az-el coordinate system.  The chop pa and its associated
# error will only be written into the log file if PAL is accessible.

my $pal_avail = 0;
eval "use Astro::PAL";
if ($@) {
   orac_print "PAL not available - FCF log file will be incomplete\n";
} else {
   $pal_avail = 1;
}

# Create the log file object
my $log = new ORAC::LogFile("log.fcf");
# Write header to logfile
my $time = gmtime();

if ($pal_avail == 0) {
$log->header("# Flux conversion factor log file - created on $time",
	     "\nUT                HST   Obs Source       Mode         N_int Filter Thr El CSO    Tau   Seeing   FCF    FCF_Units",
	     "#---------------------------------------------------------------------------------------------------------------",
	    );
} else {
$log->header("# Flux conversion factor log file - created on $time",
	     "\nUT                HST   Obs Source       Mode         N_int Filter Thr   PA  dPA   El CSO    Tau   Seeing   FCF    FCF_units",
	     "#---------------------------------------------------------------------------------------------------------------------------",
	    );
}


# Extract information from headers


# ORACUT
my $utdate = $Frm->hdr('ORACUT');
my $uttime = sprintf "%8.7f", $Frm->hdr('ORACTIME');

# HSTSTART (no decimal places)
my $hst    = $Frm->hdr('HSTSTART');
my (@hst)  = split(/:/, $hst);
$hst = sprintf '%5s', $hst[0] . ":" . $hst[1];

# RUN
my $run    = sprintf "%4d", $Frm->hdr('RUN');

# OBJECT
my $src    = substr((sprintf "%-12s", uc($Frm->hdr('OBJECT'))),0,12);

# MODE
my $mode = &construct_mode( $Frm );
$mode = sprintf "%-11s", $mode;

# Number of Integrations
my $n_int = sprintf "%4d", $Frm->hdr('N_INT');

# Filter System
my $flt= $Frm->hdr("FILTER");

# Chop throw
my $thr = sprintf "%4.0f", $Frm->hdr('CHOP_THR');

# Chop pa in az-el coordinates if slalib is available.
my $chop_pa_azel = -999; # init even though we don't use unless PAL
my $chop_pa_azel_err = 999;
if ($pal_avail == 1) {
    ($chop_pa_azel, $chop_pa_azel_err) = &calc_chop_pa_azel($Frm);
}
$chop_pa_azel = sprintf '%4.0f', $chop_pa_azel;
$chop_pa_azel_err = sprintf '%3.0f', $chop_pa_azel_err;


# Average of END_ELD and STRT_ELD
my $el     = ($Frm->hdr('END_ELD') + $Frm->hdr('STRT_ELD'))/ 2.0;
$el        = sprintf "%2.0f", $el;

# TAU from calibration object
my $tau = sprintf "%5.2f", $Cal->tau($filter);

# Use that tau to calculate CSO
my ($cso, $status) = JCMT::Tau::get_tau('CSO',$filter, $tau);
if ($status != 0) {
  $cso = "*****";
} else {
  $cso = sprintf "%5.3f", $cso;
}

# Seeing
my $see = sprintf "%5.2f", $Frm->hdr('SEEING');

# GAIN
$fcf   = sprintf "%8.3f", $fcf;

# Units
$units = sprintf "%-6s", $units;

# Add the entry
if ($pal_avail == 0) {
$log->addentry("$uttime $hst $run $src $mode  $n_int   $filter $thr $el $cso $tau $see  $fcf  $units");
} else {
$log->addentry("$uttime $hst $run $src $mode  $n_int   $filter $thr $chop_pa_azel  $chop_pa_azel_err   $el $cso $tau $see  $fcf  $units");
}



# Given information in the fits header, construct a sensible name for
# the observing mode.
no warnings 'redefine';
sub construct_mode {
my $Frm = shift;
my $mode = $Frm->hdr('MODE');
my $sam_mode = $Frm->hdr('SAM_MODE');
my $jigl_cnt = $Frm->hdr('JIGL_CNT');
my $sam_dx = $Frm->hdr('SAM_DX');

if ($mode =~ /map/i && $sam_mode =~ /jiggle/i) {
  $mode = 'JIGMAP_'.$jigl_cnt;
} elsif ($mode =~ /point/i) {
  $mode = 'POINTING_'.$jigl_cnt;
} elsif ($mode =~ /map/i && $sam_mode =~ /raster/i) {
  $mode = 'SCANMAP_'.$sam_dx;
}

return $mode;

}



# Calculate the chop position angle in Az-El coordinates.  If the chop
# is originally specified in Az-El coordinates, this is trivial.  The
# position angle just needs to be read from the fits header.  If the
# chop is originally specified in LO coordinates, the position angle
# needs to be transformed from one coordinate frame to the other.
# Furthermore, the chop will rotate in the Az-El frame as the
# observation proceeds.  The average position angle and associated
# error and hence calculated in this case.

sub calc_chop_pa_azel {
    my $Frm = shift;
    my $chop_crd = $Frm->hdr('CHOP_CRD');

    my ($chop_pa_azel,$chop_pa_azel_err);

    if ($chop_crd =~ /az/i) {

        $chop_pa_azel = $Frm->hdr('CHOP_PA');
        $chop_pa_azel_err = 0;

    } elsif ($chop_crd =~ /lo/i) {

        # Calculate apparent ra and dec in radians
	# Subroutine arguments are fits header and ut clock error (assume = 0)
        my ($ra_app, $dec_app) = calc_apparent( scalar($Frm->hdr), '0' );

        # latitude of observatory in radians
	my $lat_obs = deg2rad($Frm->hdr('LAT-OBS'));

        # Read LST from header and convert string to radians
        # Second argument in subroutine call sets format hh:mm:ss
        my $lst_start = string2rad($Frm->hdr('STSTART'),1);
        my $lst_end = string2rad($Frm->hdr('STEND'),1);

        # Calculate hour angle in radians
        my $ha_start = $lst_start - $ra_app;
        my $ha_end = $lst_end - $ra_app;

        # Calculate parallactic angle in radians
        my $para_start = Astro::PAL::palPa($ha_start,$dec_app,$lat_obs);
        my $para_end = Astro::PAL::palPa($ha_end,$dec_app,$lat_obs);

        # Convert parallactic angle to degrees
        my $para_start_deg = rad2deg($para_start);
        my $para_end_deg = rad2deg($para_end);

        # Read in chop pa in local coordinates, convert to az-el, units = deg
        my $chop_pa_azel_start = $para_start_deg - $Frm->hdr('CHOP_PA');
        my $chop_pa_azel_end = $para_end_deg - $Frm->hdr('CHOP_PA');

        # Average chop pa and error
        $chop_pa_azel = ($chop_pa_azel_start + $chop_pa_azel_end) / 2.0;
        $chop_pa_azel_err = abs($chop_pa_azel - $chop_pa_azel_start);

    } else {

        # This happens for NA 2 bol chopping. If we care we will need to
        # convert the NA chop position angle to AZ by adding on the
        # appropriate value for the elevation averaged over the observation
        $chop_pa_azel = "999";
        $chop_pa_azel_err = "999";

    }

    return ($chop_pa_azel, $chop_pa_azel_err);

}




# Calculate the apparent ra/dec from the SCUBA header information.
# Currently can only handle RJ, RB, GA and PLANET, RD
# Expects a hash with SCUBA headers. Calculates it for the supplied
# UTSTART, UTDATE  values (which are used to derive MJD)
# Returns apparent ra/dec or an empty list.

# The second argument is the error in the times found in the headers
# in seconds. It is required for the MJD calculation.

sub calc_apparent ($$) {
    my $hdr = shift;
    my $uterr = shift;
    our $DEBUG;

    # Read all the header info we require
    my $coord_type = $hdr->{CENT_CRD};

    # Copy some values to save typing later
    my $long;
    if ($coord_type =~ /^[REP]/) { # RA,RJ,EQ,PL
	# We have a right ascension
	$long = string2rad($hdr->{LONG},1);
    } else {
	# We have degrees
	$long = string2rad($hdr->{LONG},0);
    }
    my $long2= string2rad($hdr->{LONG2},1);
    my $lat  = string2rad($hdr->{LAT},0);
    my $lat2 = string2rad($hdr->{LAT2},0);
    my $mjd1 = $hdr->{MJD1};
    my $mjd2 = $hdr->{MJD2};

    # Calculate the MJD
    my $mjd = calc_mjd( $hdr->{UTDATE}, $hdr->{UTSTART}, $uterr);
    if ($DEBUG) {
	print "MJD = $mjd Cord = $coord_type\n";
	print "String inputs: ", $hdr->{LONG} , ",", $hdr->{LAT},"\n";
	print "Input coords: $long, $lat\n";
    }

    # First convert from the input frame to RJ
    if ($coord_type eq 'RB' || $coord_type eq 'RJ' || $coord_type eq 'GA') {
	# Initialise J2000 RA/DEc variables
	my ($raj, $decj) = ($long, $lat);
	if ($coord_type eq 'RB') {
	    # RB -> RJ
	    ($raj, $decj) = Astro::PAL::palFk45z( $raj, $decj, 1950.0 );
	} elsif ($coord_type eq 'GA') {
	    # GA -> RJ
	    ($raj, $decj) = Astro::PAL::palGaleq( $raj, $decj );
	}

	# Now convert to apparent
	my ($ra_app, $dec_app) = Astro::PAL::palMap( $raj, $decj, 0.0, 0.0,
						     0.0, 0.0, 2000.0, $mjd );

	return ($ra_app, $dec_app);

    } elsif ($coord_type eq 'RD') {

	# Do nothing
	return ($long, $lat);

    } elsif ($coord_type eq 'PLANET') {
	# Need to interpolate to current MJD
	if ($mjd1 == $mjd2) {
	    # ASsume a constant
	    return ($long, $lat);
	} else {
	    # interpolate
	    my $ra_app = $long + ( $long2 - $long ) * ( $mjd - $mjd1 ) /
		($mjd2 - $mjd1);
	    my $dec_app =$lat  + ( $lat2  - $lat  ) * ( $mjd - $mjd1 ) /
		($mjd2 - $mjd1);
	    return ($ra_app, $dec_app);
	}

    }

    # Return empty list on error
    return ();
}



# Convert string of form  hh:mm:ss.s or dd:mm:ss.s
# to radians. Returns undef on error.
# Second argument indicates whether it is a time (1) or an angle (0)
#  $rad = string2rad("18:15:22.0", 1);

sub string2rad ($$) {
    my $ra = shift;
    my $istime = shift;

    # Replace : with space
    $ra =~ s/:/ /g;

    # Convert the RA from the header to radians
    my $pos = 1;
    ($pos, my $reslt, my $jf) = Astro::PAL::palDafin($ra, $pos);
    $reslt *= 15.0 if $istime;

    return ( $jf == 0 ?  $reslt : undef);
}




# Calculate modified julian date from SCUBA UTSTART and UTDATE
# returns undef on error. An optional offset in seconds can be
# supplied to this routine (usually zero) indicating an
# error in the UTSTART string [with SCUBA the times are written
# before we are on source so there is a discrepancy]
# The offset is added to the MJD and can be negative or positive.

sub calc_mjd ($$$) {
    # Split the date string into parts
    my @date = split(/:/, $_[0]);

    # Now convert the time to radians so we can determine
    # the fraction of day
    my $pos = 1;
    my $uttime = $_[1];
    $uttime =~ s/:/ /g;
    ($pos, my $reslt, my $jf) = Astro::PAL::palDafin($uttime, $pos);
    return undef if $jf != 0;

    # Convert the result to a time in radians
    $reslt *= 15.0;

    # Add the error (in seconds converted to radians)
    $reslt += &Astro::PAL::DS2R * $_[2];

    # And convert the result to fraction of day
    my $frac = $reslt / &Astro::PAL::D2PI;

    # Calculate the MJD from the date
    my ($mjd, $status) = Astro::PAL::palCldj( $date[0], $date[1], $date[2] );
    return undef if $status != 0;

    # Add on the fraction
    $mjd += $frac;
    return $mjd;
}

