=head1 NAME

REDUCE_SKYDIP - Reduce a skydip observation

=head1 DESCRIPTION

Process skydip data and calculate the resultant tau..
If the fit is good the current value in the calibration object
is updated for each successful filter..

=head1 PARAMETERS

Allowed parameters are:

  T_HOT - specify the hot load temperature
  T_COLD_{filt} - specify the cold load temperature for filter
  ETA_TEL_{filt}  - specify eta_tel for filter (eg 450, 850, 1350)

The filter name is usually 850, 450, 350, 750....

eg  _REDUCE_SKYDIP_ T_COL_850=100 ETA_TEL_850=0.9

=head1 TASKS

Uses the SURF SKYDIP task.

=cut

# Get list of sub-instruments
my @subs = $Frm->subs;
my @filts = $Frm->filters;

# Get input name
my $in = $Frm->file;

# Check argument list for a hot load temperature
my $t_hot = ($_REDUCE_SKYDIP_{T_HOT} || undef);
$t_hot = 'T_HOT='.$t_hot if defined $t_hot;

# Also, if T_HOT is not specified but we are processing data older
# than 19980203 then we should use the value of T_AMB for T_HOT

unless (defined $t_hot) {
  if ($Frm->hdr('ORACUT') < 19980204) {
    my $tamb = $Frm->hdr('T_AMB');
    $t_hot = "T_HOT=$tamb";
  }
}


# Print a header for the result printing
orac_print "  Sub    TAUZ   ETA_TEL  B       Residual/K\n",'clear';


# Loop over sub-instruments
for (my $i = 0; $i < $Frm->nsubs; $i++) {

  my $sub = uc($subs[$i]);
  my $filt= $filts[$i];
  
  # Choose names for temporary output files
  # These simply contain the reduced data and are only
  # created so that we can plot the result
  my $out = "skydip_" . $sub . '_' . $Frm->number . '_sdip';
  my $model = $out . '_model';

  # Set the input args if specified
  my $hidden = ' ';

  if (exists $_REDUCE_SKYDIP_{"T_COLD_$filt"}) {
    my $tcold = $_REDUCE_SKYDIP_{"T_COLD_$filt"};
    $hidden .= " T_COLD=$tcold ";
  }
  if (exists $_REDUCE_SKYDIP_{"ETA_TEL_$filt"}) {
    my $etatel = $_REDUCE_SKYDIP_{"ETA_TEL_$filt"};
    $hidden .= " ETA_TEL=$etatel ";
  }

  $hidden .= $t_hot if defined $t_hot;

  # Set the input arguments
  my $args = "sub_instrument=$sub $hidden accept";

  # Perform the fit
  # Take default values for all fitting parameters
  # Must reset parameters between invocations - one of the parameters
  # is not cleared so the fit for 850 doesn't quite work - must
  # be some 450ness left over for eta_tel or b.
  my $ORAC_STATUS = $Mon{surf_mon}->resetpars; # Reset some parameters
  $Mon{surf_mon}->obeyw("skydip", "in=$in out=$out model_out=$model $args");

  # Retrieve result from the monolith
  # First check that fit was good
  ($ORAC_STATUS, my $goodfit) = $Mon{surf_mon}->get("skydip","goodfit");

  if ($goodfit eq 'TRUE') {

    ($ORAC_STATUS, my $tauz) = $Mon{surf_mon}->get("skydip","tauz_fit");
    ($ORAC_STATUS, my $tauz_err) = $Mon{surf_mon}->get("skydip","tauz_err");
    ($ORAC_STATUS, my $etatel) = $Mon{surf_mon}->get("skydip","eta_tel_fit");
    ($ORAC_STATUS, my $bfit) = $Mon{surf_mon}->get("skydip","b_fit");
    ($ORAC_STATUS, my $sigma) = $Mon{surf_mon}->get("skydip","sigma");

    # Formatted string
    my $string = sprintf("%6.3f  %5.2f  %5.2f %10.1f", $tauz, $etatel, $bfit, $sigma);
  
    orac_print " $sub:\t$string [updating index]\n";

    # Update the model filename in the frame
    # this will immediately be overwritten but allows us to store
    # the filename in the Frm history mechanism for later removal
    # if desired
    $Frm->file($i+1, $model);

    # Update the file name in the Frame
    $Frm->file($i+1, $out);

    # Set the title so that it reflects the sub
    my $title = "Skydip: $sub";
    $Mon{ndfpack_mon}->obeyw("settitle","ndf=$out title='$title'");

    # Update the skydip value stored in the Skydip index
    # This requires that we set a couple of things in the
    # header before updating the index
    my %hdr = %{$Frm->hdr};
    $hdr{TAUZ} = $tauz;
    $hdr{TAUZ_ERR} = $tauz_err;
    $hdr{FILTER} = uc($filts[$i]);
    $hdr{BWF} = $bfit;
    $hdr{RESIDUAL} = $sigma;

    # With very old data the TAU_225 and TAU_RMS fields are missing
    # We should check for that (otherwise the index writing fails)
    $hdr{TAU_225} = '-1' unless exists $hdr{TAU_225};
    $hdr{TAU_RMS} = '0' unless exists $hdr{TAU_RMS};

    # Write the index
    $Cal->skydipindex->add($out, \%hdr);

  } else {
    orac_print "$sub:";
    orac_print "  ***** Fit failed *****\n",'red';

    # Update the file name in the frame to bad
    $Frm->file($i+1, undef);

  }

}



# COPYRIGHT
#
#   Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#   Council. All Rights Reserved.


