=head1 NAME

REDUCE_SKYDIP - Reduce a skydip observation

=head1 SYNOPSIS

_REDUCE_SKYDIP_
_REDUCE_SKYDIP_ T_COLD_850=100 ETA_TEL_850=0.9

=head1 DESCRIPTION

Process skydip data and calculate the resultant tau.
If the fit is good the current value in the calibration object
is updated for each successful filter.

=head1 PARAMETERS

Allowed parameters are:

=over 4

=item C<T_HOT>

Specify the hot load temperature. In general this is not very useful
since C<T_HOT> varies with weather conditions. It is assumed that this
value has been corrected for emissivity of the SCUBA optics.

=item C<T_COLD_{filt}>

Cold load temperature for the specified filter. I<filt> can be
450, 850, 1350 etc. 

=item C<ETA_TEL_{filt}>

Telescope efficiency factor (C<eta_tel>) for specified filter.
I<filt> can be 450, 850, 1350 etc. 

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item SURF

C<SKYDIP>

=item KAPPA

C<SETTITLE>

=back

=head1 NOTES

=over 4

=item *

For data taken prior to UT date 19980204, C<T_AMB> is used
rather than C<T_HOT> since T_HOT was not written to the data
headers until that date.

=item *

For data taken prior to UT date 20000401 C<T_COLD> and C<T_HOT>
are modified to use the best available values:

 Filter   T_hot              T_cold    Eta_tel
			   	     
 450 WB   T_hot_meas - 3K    95 K      0.75
 450 NB   T_hot_meas - 3K    102 K     0.75
 850 WB   T_hot_meas - 1K    90 K      0.85
 850 NB   T_hot_meas - 1K    92 K      0.85

Note that C<T_HOT> is modified in order for the number to correctly
represent the C<T_HOT> seen by the SCUBA optics rather than the
measured temperature of the chopper wheel.

=cut

my %SDIP_PARS = (
		 '450n' => {
			    T_HOT => -3,
			    T_COLD => 102,
			    ETA_TEL => 0.75,
			   },
		 '450w' => {
			    T_HOT => -3,
			    T_COLD => 95,
			    ETA_TEL => 0.75,
			   },
		 '850n' => {
			    T_HOT => -1,
			    T_COLD => 92,
			    ETA_TEL => 0.85,
			   },
		 '850w' => {
			    T_HOT => -1,
			    T_COLD => 90,
			    ETA_TEL => 0.85,
			   },
		);

# Date before which modifications are to be applied
my $MOD_DATE = 20000501;

=back

=head1 FILES

The following files are generated:

=over 4

=item F<index.skydip>

Skydip index file.

=item I<{root}>F<_sdip>

Reduced skydip data. May be subsequently removed by
the C<_DELETE_TEMP_FILES_> primitive.

=item I<{root}>F<_sdip_model>

Fitted skydip data (if fit was successful).  May be subsequently
removed by the C<_DELETE_TEMP_FILES_> primitive.

=back

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright E<copy>  1998-2000 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# Get list of sub-instruments
my @subs = $Frm->subs;
my @filts = $Frm->filters;

# Get input name
my $in = $Frm->file;

# Check argument list for a hot load temperature
# And modify as required

my $t_hot;         # T_HOT
my $fix_t_hot = 0; # controls whether to modify T_HOT

if (exists $_REDUCE_SKYDIP_{T_HOT} && defined $_REDUCE_SKYDIP_{T_HOT}) {
  $t_hot = $_REDUCE_SKYDIP_{T_HOT};
} else {

  # First we need to check the dates
  # First check for when T_AMB should be used
  if ($Frm->hdr('ORACUT') < 19980204) {
    $t_hot = $Frm->hdr('T_AMB');
    $fix_t_hot = 1;
  } elsif ($Frm->hdr('ORACUT') < $MOD_DATE) {
    # Read from the header
    $t_hot = $Frm->hdr('T_HOT');
    $fix_t_hot = 1;
  }

}

# Print a header for the result printing
orac_print "  Sub    TAUZ   ETA_TEL  B       Residual/K\n",'clear';


# Loop over sub-instruments
for (my $i = 0; $i < $Frm->nsubs; $i++) {

  my $sub = uc($subs[$i]);
  my $filt= $filts[$i];
  
  # Work out if we have 450 850, wide or narrow band
  my $modfilt = undef;
  my $FILTER = uc($Frm->hdr('FILTER'));
  if ($FILTER eq '450N:850N') {
    $modfilt = $filt . 'n';
  } elsif ($FILTER eq '450W:850W') {
    $modfilt = $filt . 'w';
  }

  # Choose names for temporary output files
  # These simply contain the reduced data and are only
  # created so that we can plot the result
  my $out = "skydip_" . $sub . '_' . $Frm->number . '_sdip';
  my $model = $out . '_model';

  # Set the input args if specified
  my $hidden = ' ';

  # T_COLD CORRECTION
  if (exists $_REDUCE_SKYDIP_{"T_COLD_$filt"}) {
    my $tcold = $_REDUCE_SKYDIP_{"T_COLD_$filt"};
    $hidden .= " T_COLD=$tcold ";
  } elsif ($Frm->hdr('ORACUT') < $MOD_DATE) {
    # Modify the TCOLD from default if required
    if (exists $SDIP_PARS{$modfilt}) {
      $hidden .= " T_COLD=". $SDIP_PARS{$modfilt}{T_COLD};
      orac_warn "Changing T_COLD ($filt) to " . $SDIP_PARS{$modfilt}{T_COLD} ."K\n";
    }
  }
  
  # ETA TEL CORRECTION
  if (exists $_REDUCE_SKYDIP_{"ETA_TEL_$filt"}) {
    my $etatel = $_REDUCE_SKYDIP_{"ETA_TEL_$filt"};
    $hidden .= " ETA_TEL=$etatel ";
  } elsif ($Frm->hdr('ORACUT') < $MOD_DATE) {
    # Modify eta tel from default
    if (exists $SDIP_PARS{$modfilt}) {
      $hidden .= " ETA_TEL=". $SDIP_PARS{$modfilt}{ETA_TEL};
      orac_warn "Changing ETA_TEL ($filt) to " . $SDIP_PARS{$modfilt}{ETA_TEL} ."\n";
    }
  }

  # T_HOT CORRECTION
  my $this_t_hot;
  $this_t_hot = $t_hot if defined $t_hot;
  if ($fix_t_hot) {
    # Modify eta tel from default
    if (exists $SDIP_PARS{$modfilt}) {
      $this_t_hot = $t_hot + $SDIP_PARS{$modfilt}{T_HOT};
      orac_warn "Changing T_HOT ($filt) by " . $SDIP_PARS{$modfilt}{T_HOT} ."K\n";
    }
  }

  # Convert to SKYDIP string
  $this_t_hot = ' T_HOT='.$this_t_hot if defined $this_t_hot;

  # Append T_HOT
  $hidden .= $this_t_hot if defined $this_t_hot;

  # Set the input arguments
  my $args = "sub_instrument=$sub $hidden accept";

  # Perform the fit
  # Take default values for all fitting parameters
  # Must reset parameters between invocations - one of the parameters
  # is not cleared so the fit for 850 doesn't quite work - must
  # be some 450ness left over for eta_tel or b.
  my $ORAC_STATUS = $Mon{surf_mon}->resetpars; # Reset some parameters
  $Mon{surf_mon}->obeyw("skydip", "in=$in out=$out model_out=$model $args");

  # Retrieve result from the monolith
  # First check that fit was good
  ($ORAC_STATUS, my $goodfit) = $Mon{surf_mon}->get("skydip","goodfit");

  if ($goodfit eq 'TRUE') {

    ($ORAC_STATUS, my $tauz) = $Mon{surf_mon}->get("skydip","tauz_fit");
    ($ORAC_STATUS, my $tauz_err) = $Mon{surf_mon}->get("skydip","tauz_err");
    ($ORAC_STATUS, my $etatel) = $Mon{surf_mon}->get("skydip","eta_tel_fit");
    ($ORAC_STATUS, my $bfit) = $Mon{surf_mon}->get("skydip","b_fit");

    # residual only appears in v1.5-2 of SURF
    ($ORAC_STATUS, my $residual) = $Mon{surf_mon}->get("skydip","residual");

    # Formatted string
    my $string = sprintf("%6.3f  %5.2f  %5.2f %10.2f", $tauz, $etatel, $bfit, $residual);
  
    orac_print " $sub:\t$string [updating index]\n";

    # Update the model filename in the frame
    # this will immediately be overwritten but allows us to store
    # the filename in the Frm history mechanism for later removal
    # if desired
    $Frm->file($i+1, $model);

    # Update the file name in the Frame
    $Frm->file($i+1, $out);

    # Set the title so that it reflects the sub
    my $title = "Skydip: $sub";
    $Mon{ndfpack_mon}->obeyw("settitle","ndf=$out title='$title'");

    # Update the skydip value stored in the Skydip index
    # This requires that we set a couple of things in the
    # header before updating the index
    my %hdr = %{$Frm->hdr};
    $hdr{TAUZ} = $tauz;
    $hdr{TAUZ_ERR} = $tauz_err;
    $hdr{FILTNAME} = $hdr{FILTER};  # Store true filtername
    $hdr{FILTER} = uc($filts[$i]);
    $hdr{BWF} = $bfit;
    $hdr{RESIDUAL} = $residual;
    $hdr{ETATEL} = $etatel;

    # With very old data the TAU_225 and TAU_RMS fields are missing
    # We should check for that (otherwise the index writing fails)
    $hdr{TAU_225} = '-1' unless exists $hdr{TAU_225};
    $hdr{TAU_RMS} = '0' unless exists $hdr{TAU_RMS};

    # Write the index
    $Cal->skydipindex->add($out, \%hdr);

  } else {
    orac_print "$sub:";
    orac_print "  ***** Fit failed *****\n",'red';

    # Update the file name in the frame to bad
    $Frm->file($i+1, undef);

  }

}



# COPYRIGHT
#
#   Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#   Council. All Rights Reserved.


