=head1 NAME

REMOVE_SKY_NOISE_SCAN

=head1 DESCRIPTION

Calculates and removes sky noise from scan map data.

Must be run after SCAN_RLB and despiking.

=head1 TASKS

SURF: CALCSKY, REMSKY

=head1 OPTIONS

None

=head1 NOTES

This is a group method since the result improves as more data
are included. The group is split into sub-groups based on chop
configuration and each goup is processed in turn.

Note that since this method modifies files that have already been
processed the template() method is used to find out what the
file name was at the current stage of data processing.

Only processes the sub-group that contains the current frame!

Note there are problems with the lastmember() method since this does
not tell me whether I am processing ALL members of a sub-group.
Currently the data are reprocessed every time round.... This is
a bug.

This routine doesnt assume that SCAN map data is the input
(will work with jiggle) - this is probably an incorrect
name.

=cut

# First need to get the group that matches the current frames
# chop configuration

if ($Frm->hdr('SUB_1') eq 'LONG' || $Frm->hdr('SUB_1') eq 'SHORT') {

my $subgrp = $Grp->subgrp(CHOP_THR => $Frm->hdr('CHOP_THR'),
			  CHOP_PA  => $Frm->hdr('CHOP_PA'));


# calculate out_coords - the assumption is that
# That all members of the group were either in a fixed 
# coordinate frmae (RB or RJ) or a moving frame (PL)
my $outcoords = 'RJ';
$outcoords = 'PL' if $Frm->hdr('CENT_CRD') eq 'PLANET';


# We now have a group derived from $Grp but that only includes
# frames that are related.

# Loop over the different sub-instruments
# in the current frame

foreach $sub ($Frm->subs) {

  orac_print("Calculating sky contribution for sub $sub\n");

  
	     

  # Since this is a many-in many-out primitive we need
  # to reset all the filenames of the subgroup so that
  # they match the current frame.
  $subgrp->template($Frm->file($Frm->sub2file($sub)), $sub);
  
  # Now need to find all the input frames for this sub-instrument
  # that are part of this group
 
  my @members = $subgrp->membernamessub($sub);

  # Have to generate an input text file for CALCSKY
  # This is so similar to REBIN that we should use  a shared sub
  # Might even be worth having a group method.
  my $infile = "calcsky_$$.lis";
  open (INPUT, "> $infile") || die "Error opening scratch file $!";
  map { print INPUT "$_ 1 0 0\n"; } @members;
  close INPUT;


  # Okay we now have an input file so calculate sky...
  my $args = "boxsz=2.0 out_coords=$outcoords model=! nosrc=!";
  $Mon{surf_mon}->obeyw("calcsky","ref=$infile noloop $args");

  unlink $infile;
  
}

  # Now we need to go through each member of the group
  # and remove the resulting sky for each sub-instrument
  # This is a standard method

foreach my $member ($subgrp->members) {
  

  for (my $i=1; $i <= $member->num_files; $i++) {

    my ($in, $out) = $member->inout('_sky',$i);

    orac_print("Removing sky noise for $in\n");
	       

    $Mon{surf_mon}->obeyw("remsky","in=$in out=$out");
    
    # Update frame object
    $member->file($i, $out);
		   
  }
  

}
}

