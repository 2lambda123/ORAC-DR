=head1 NAME

_REBIN_GROUP_ - rebin all frames into a group image

=head1 DESCRIPTION

Rebin all the group data.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item REBIN_METHOD

Method to use for regrid. Allowed options are
BESSEL, LINEAR, GAUSSIAN, SPLINE1, SPLINE2, MEDIAN.
See the SURF manual (SUN/216) for more information.

=item PIXEL_SIZE

Pixel size in arcseconds

=item COORDS

Output coords. Default is PL for planets, else RJ

=back

=head1 EXTERNAL TASKS

The following tasks are used:

=over 4

=item SURF

C<REBIN>

=item NDFPACK

C<SETTITLE>

=back

=head1 AUTHOR

Tim Jenness

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research Council.
All Rights Reserved.

=cut


# Check that we are processing the last frame of the group
# and that there are some frames to coadd. Do the rebin even if there
# is only one observation in the group. Disk space is cheap and we are
# no longer CPU bound.
if ($Grp->lastmember($Frm)) {

  # Retrieve the filenames that we need for rebinning via a tag
  $Grp->membertagretrieve( 'PRE_REBIN' );


  # Update the Grp name so that it reflects the obs type
  # This makes it possible for the display system to specify
  # group results based on suffix
  $Grp->file($Grp->file . '_reb') unless $Grp->file =~ /_reb$/;
	

  # Loop over sub instruments that are found in the current frame
  foreach my $sub ($Frm->subs) {

    # Now need to find all the input frames for this sub-instrument
    # that are part of this group

    my @members = $Grp->membernamessub($sub);

    # Create a text file containing lists of all files to be
    # Rebinned. Also add SHIFTS and WEIGHTS although we assume
    # that the weight and shifts are always 1 0 0 respectively

    my $infile = "rebin_$$.lis";
    my $input = new IO::File("> $infile")
      or die "Error opening scratch file $!";
    map { print $input "$_ 1 0 0\n"; } @members;
    close $input;

    # Now construct arguments for rebin
    # Read input arguments
    my $method = ($_REBIN_GROUP_{REBIN_METHOD} || "gaussian");
    my $pixsize = ($_REBIN_GROUP_{PIXEL_SIZE} || "3.0");

    # Output filename
    my $out = $Grp->grpoutsub($sub);

    # Output coords
    # Should use PL for planets
    # First check the supplied COORDS argument
    my $coords;
    if (exists $_REBIN_GROUP_{COORDS}) {
      $coords = $_REBIN_GROUP_{COORDS};
    } else {
      # Else use RJ unless we have a planet or a moving source
      if ( $Frm->hdr('CENT_CRD') eq 'PLANET') {
	$coords = 'PL';
      } else {
	$coords = 'RJ';
      }
    }

    my $args = "REBIN_METHOD=$method OUT_COORDS=$coords PIXSIZE_OUT=$pixsize noloop";

    # Print informative message
    orac_print ("ORAC says: GRP: Rebinning sub-instrument $sub\n",'magenta');

    # Run rebin
    # Need to reset the parameters so that the regridding parameters
    # are not remembered. Also the size parameter is remembered.
    $Mon{surf_mon}->resetpars;
    $Mon{surf_mon}->obeyw("rebin","ref=$infile out=$out $args accept reset");

    # Remove the scratch file
    unlink $infile;

    # Update the title
    my $title = 'GRP ' . $Frm->hdr('OBJECT') . ":$sub"; 
    $Mon{ndfpack_mon}->obeyw("settitle","ndf=$out title='$title'");

    # Propagate the PROJ_ID header from the Frm to the Grp.
    my $projid = $Frm->hdr('PROJ_ID');
    _SET_FILE_FITS_ITEM_ FILE=$out KEY=PROJ_ID VALUE=$projid COMMENT=OMP|Project|ID

  }

  # Display
  $Display->display_data($Grp) if defined $Display;

}


