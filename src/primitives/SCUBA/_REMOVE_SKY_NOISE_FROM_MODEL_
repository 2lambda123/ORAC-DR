=head1 NAME

REMOVE_SKY_NOISE_SCAN

=head1 DESCRIPTION

Calculates and removes sky noise by calculating a source model.
Currently works for jiggle map data only.


=head1 TASKS

SURF: CALCSKY, REMSKY

=head1 OPTIONS

None

=head1 NOTES

This is a group method since the result improves as more data
are included. 

Note that since this method modifies files that have already been
processed the template() method is used to find out what the
file name was at the current stage of data processing.

=cut

# Only works for arrays

if ($Frm->hdr('SUB_1') eq 'LONG' || $Frm->hdr('SUB_1') eq 'SHORT') {


  # Currently does not use the other members of the group
  # since that would require a tweak of the following 
  if ($Grp->lastmember($Frm)) {

    # calculate out_coords - the assumption is that
    # That all members of the group were either in a fixed 
    # coordinate frmae (RB or RJ) or a moving frame (PL)
    my $outcoords = 'RJ';
    $outcoords = 'PL' if $Frm->hdr('CENT_CRD') eq 'PLANET';


    # We now have a group derived from $Grp but that only includes
    # frames that are related.

    # Loop over the different sub-instruments
    # in the current frame

    foreach my $sub ($Frm->subs) {
    
      orac_print("Calculating sky contribution for sub $sub\n");

      # Since this is a many-in many-out primitive we need
      # to reset all the filenames of the subgroup so that
      # they match the current frame.
      $Grp->template($Frm->file($Frm->sub2file($sub)), $sub);
  
      # Now need to find all the input frames for this sub-instrument
      # that are part of this group
 
      my @members = $Grp->membernamessub($sub);

      # Have to generate an input text file for CALCSKY
      # This is so similar to REBIN that we should use  a shared sub
      # Might even be worth having a group method.
      my $infile = "calcsky_$$.lis";
      my $fh = new IO::File("> $infile") || die "Error opening scratch file $!";
      for (@members) { print $fh "$_ 1 0 0\n"; };
      close $fh;
      

      # Okay we now have an input file so calculate sky...
      my $args = "boxsz=2.0 out_coords=$outcoords model=! nosrc=!";
      $Mon{surf_mon}->obeyw("calcsky","ref=$infile noloop $args");
      
      unlink $infile;
  
    }

    # Now we need to go through each member of the group
    # and remove the resulting sky for each sub-instrument
    # This is a standard method

    foreach my $member ($Grp->members) {
  
      for my $i (1..$member->nfiles) {

	my ($in, $out) = $member->inout('_sky',$i);
      
	orac_print("Removing sky noise for $in\n");
	       

	$Mon{surf_mon}->obeyw("remsky","in=$in out=$out");
    
	# Update frame object
	$member->file($i, $out);
		   
      }
  

    }

  }
}

