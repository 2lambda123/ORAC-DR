=head1 NAME

REMOVE_SKY_NOISE_SCAN_USING_MODEL

=head1 DESCRIPTION

Calculates and removes sky noise from scan map data using the
most recent Group image as a sky model.

Must be run after SCAN_RLB and despiking.

=head1 TASKS

SURF: CALCSKY, REMSKY

=head1 OPTIONS

None

=head1 NOTES

This is a group method since the result improves as more data
are included. The group is split into sub-groups based on chop
configuration and each goup is processed in turn.

If a group output file exists for the current sub-instrument
all members of the group are reprocessed to use the new model
even if they are not related to the current observation.

Note that since this method modifies files that have already been
processed the template() method is used to find out what the
file name was at the current stage of data processing.

This routine doesnt assume that SCAN map data is the input
(will work with jiggle) - this is probably an incorrect
name.

=cut

# First need to get the group that matches the current frames
# chop configuration

if ($Frm->hdr('SUB_1') eq 'LONG' || $Frm->hdr('SUB_1') eq 'SHORT') {

  if ($Grp->lastmember($Frm)) {

    # Get all the sub-instruments associated with the current frame
    # These are the only ones we are interested in
    my @allsubs = $Frm->subs;

    # Loop over sub-instruments looking for an equivalent group file
    my @subs = ();
    my @grpfiles = ();
    my @templates = ();  # Some valid templates
    foreach my $nsub (0..$#allsubs) {
      my $sub = $allsubs[$nsub];
      my $grpfile = $Grp->grpoutsub($sub);
      # KLUGE - assume .sdf
      if (-e "$grpfile.sdf") {
	push (@subs, $sub);
	push (@grpfiles, $grpfile);
	push (@templates, $b4sky[$nsub]);  # KLUGE
      } else {
	orac_print "No group file present for sub-instrument $sub - skipping\n";
      }
    }

    # Only bother if we have some sub-instruments associated with a model
    if ($#subs > -1) {

      # Get all the subgrps
      my @subgrps = $Grp->subgrps('CHOP_THR', 'CHOP_PA');

      # Loop over the sub grps
      for my $subgrp (@subgrps) {

	# Read the chop
	my $chop_th = $subgrp->frame(0)->hdr->{CHOP_THR};
	my $chop_pa = $subgrp->frame(0)->hdr->{CHOP_PA};

	for my $nsub ( 0.. $#subs) {

	  # Read the sub name and the group file name
	  my $sub = $subs[$nsub];
	  my $grpfile = $grpfiles[$nsub];

	  orac_print "Calculating sky for chop $chop_th PA $chop_pa sub $sub\n";

	  # Since this is a many-in many-out primitive we need
	  # to reset all the filenames of the subgroup so that
	  # they match the current frame.
#	  $subgrp->template($Frm->file($Frm->sub2file($sub)), $sub);

	  # Since this is an iterative primitive we need to match
	  # the input file names to how they were before we did any
	  # sky noise removal. Currently we cheat by looking in
	  # the @templates array which was derived from an illegal
	  # variable @b4sky
	  $subgrp->template($templates[$nsub], $sub);

 
	  # Now need to find all the input frames for this sub-instrument
	  # that are part of this group
 
	  my @members = $subgrp->membernamessub($sub);

	  # Have to generate an input text file for CALCSKY
	  # This is so similar to REBIN that we should use  a shared sub
	  # Might even be worth having a group method.
	  my $infile = "calcsky_$$.lis";
	  my $fh = new IO::File("> $infile") || die "Error opening scratch file $!";
	  for (@members) { print $fh "$_ 1 0 0\n"; };
	  close $fh;

	  for (@members) { orac_print  "File: $_\n";};
      

	  # Okay we now have an input file so calculate sky using the GRP 
	  # model
	  my $args = "boxsz=2.0 model=$grpfile nosrc=! addchop";
	  $Mon{surf_mon}->obeyw("calcsky","ref=$infile noloop $args accept");
	  
	  unlink $infile;
  
	}

	# Now we need to go through each member of the group
	# and remove the resulting sky for each sub-instrument
	# This is a standard method

	foreach my $member ($subgrp->members) {
  
	  for my $i (1..$member->nfiles) {
	  
	    my ($in, $out) = $member->inout('_sky',$i);
	
	    orac_print("Removing sky noise for $in\n");
	       
	    $Mon{surf_mon}->obeyw("remsky","in=$in out=$out");
    
	    # Update frame object
	    $member->file($i, $out);
		   
	  }
	}
      }
    }
  }
}



# COPYRIGHT
#
#   Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#   Council. All Rights Reserved.


