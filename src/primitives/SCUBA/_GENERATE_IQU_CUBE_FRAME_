=head1 NAME

GENERATE_IQU_CUBE_FRAME - generate 3D cube with I,Q and U Stokes images

=head1 DESCRIPTION

Generates a 3D cube containing the I,Q and U Stokes images from
a set of images taken with different waveplate positions. This
routine is expected to run after the _REBIN_INTEGRATIONS_ 
or the _REBIN_MESUREMENTS_ primitive (which generates a stack of 
images for each waveplate position.)

Automatically loops over all sub-instruments in the frame.

The Q and Us generated are intensities.

=head1 CONFIGURATION PARAMETERS

The following configuration options are supported:

   WEIGHTS - POLPACK system to use for VARIANCE generation
             When weights=1 POLSTACK/POLCAL is used
             else POLCAL is used with weights=3
             Default is weights=1

=head1 TASKS

Uses the POLPACK POLSTACK/POLIMP/POLCAL tasks.

=cut


# Check for POLPACK
if (exists $Mon{polpack_mon}) {

  my $weights = 1;
  if (exists $_GENERATE_IQU_CUBE_FRAME_{WEIGHTS} &&
      defined $_GENERATE_IQU_CUBE_FRAME_{WEIGHTS} &&
      $_GENERATE_IQU_CUBE_FRAME_{WEIGHTS} != 1) {
    $weights = 3;
  }

  # Loop over frames
  for my $i (1..$Frm->nfiles) {

    # Sub-instrument
    my $sub = ($Frm->subs)[$i-1];
 
    orac_print "Processing waveplate images for sub-instrument $sub\n";

    # Generate the output filename
    my ($in, $out) = $Frm->inout("_iqu", $i);

    # Run POLIMP to import the data into POLPACK
    # Table definition stored in SURF_DIR/polimp.scuba
    $Mon{polpack_mon}->obeyw('polimp',"in=$in table=$ENV{SURF_DIR}/polimp.scuba quiet");

    my $label = $in;

    # Now run with POLSTACK on the cubes to generate variances
    # This can cause problems if images are on the bin boundaries
    # only if weights =1
    my $root = "stack$$" . "_";
    my $stack = "'$root" . "*'";
    if ($weights == 1) {
      
      # Do we want to check for left over images
      # from the last time round in case there was an abort
      # and the temp files were not removed on exiting this primitive?

      orac_print "Stacking images to generate variance\n";
      my $args = "in=$in out=$stack minin=2 bin=15 stack=!";
      $Mon{polpack_mon}->obeyw('polstack',"$args");
      $in = $stack;
    }

    # Now run POLCAL to generate the IQU cube
    # Run with supplied weights and niter
    my $args = "weights=$weights ilevel=2";
    $Mon{polpack_mon}->obeyw('polcal',"in=$in out=$out $args");

    orac_print "$label converted to I,Q and U image cube\n";

    # Now need to go through and remove the $stack images from disk
    # KLUGE - worst case of 16 images
    # KLUGE - assume .sdf extension
    # jump out of loop on error
    if ($weights == 1) {
      foreach my $num (1..16) {
	# Exit loop if we failed to delete
	unless (unlink $root . $num . ".sdf" ) {
	  orac_print "Deleted ". ($num - 1) . " stacked images\n";
	  last;
	}
      }
    }

    # Update the frame object
    $Frm->file($i, $out);

  }

} else {

  orac_print "POLPACK is not available -- can not reduce polarimetry observations \n";
  my $ORAC_STATUS = ORAC__ERROR;

}
