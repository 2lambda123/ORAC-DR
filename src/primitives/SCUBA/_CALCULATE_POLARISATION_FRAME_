=head1 NAME

CALCULATE_POLARISATION_FRAME

=head1 DESCRIPTION

Calculates polarisation information for a jiggle map.  It does this by
using an image for each waveplate position [see the
REBIN_INTEGRATION primitive], calculating the I, Q and U frames for
each waveplate set (4 positions per set), averaging I, Q and U and
then calculating the percentage polarisation and angle of each vector.

=head1 TASKS

Uses the following tasks:

  KAPPA: CALPOL, MATHS, SETUNITS, GLITCH

=head1 PREREQUISITES

REMIP must have been run on the data (so that the angles can
be stored in the output from INTREBIN). INTREBIN must have been
run previously (since this primitive assumes the input file
is a HDS container).

=head1 ARGUMENTS

NONE.

=head1 SUFFIX

This primitive generates an output NDF with an _I suffix.
This file contains an ORAC extension containing the Q, U,
P and THETA components.

=head1 DISPLAY

The display system will be asked to display the _I frame.  
A VECTOR display automatically looks for P and
THETA in an ORAC extension if an _I suffix is found 
A _I suffix should be associated with TYPE=VECTOR if
required.  [A VECTOR plot displays P and THETA over an I image]

Additionally, the P and theta components will be sent to the
display system separately (P and THETA suffices) - this is primarily
intended for HISTOGRAM output.

Currently it is not possible to display the Q and U images
automatically.

This behaviour may change if the primitive is converted to
POLPACK.

=head1 AUTHORS

Initial method developed by Antonio Chrysostomou and implemented
in his scupol.pl script.
Converted to ORAC-DR by Tim Jenness.

=cut

use NDF; # Import HDS commands

# Create dummy frame object to store P and THETA output
my $P_frm = $Frm->new;
my $Theta_frm = $Frm->new;

# Loop over files

for my $i (1..$Frm->nfiles) {


  # Sub-instrument
  my $sub = ($Frm->subs)[$i-1];

  orac_print "Processing waveplate images for sub-instrument $sub\n";


  # Need to go through the input file (HDS container) and
  # find out how many images there really were.
  my $status = &NDF::SAI__OK;
  my ($loc,$ncomp);
  hds_open($Frm->file($i), 'READ', $loc, $status);
  dat_ncomp($loc, $ncomp, $status);
  dat_annul($loc, $status);
  my $ORAC_STATUS = ($status == &NDF::SAI__OK ? ORAC__OK : ORAC__ERROR);

  orac_print "$ncomp waveplate positions detected\n";

  # Now need to loop over each set of four waveplates
  # Assume that the waveplate order matches the integration
  # order. Could really make sure by looking in the header
  # (but that is something for POLPACK)

  # Process four at a time. If we don't have a full set of four
  # ignore it

  my $nloops = int($ncomp/4);

  my @null = (0); # For hds_new

  # Retrieve the root file name
  my $root = $Frm->file($i);

  # Loop round each set of four
  for my $loop (1..$nloops) {

    orac_print "Calculating I,Q, and U for set $loop\n";

    # Calculate start and end integrations
    my $start = (($loop-1) * 4) + 1;
    my $end =   $loop * 4;

    # READ ROTATION ANGLE ----------

    # Read the average fits header of the 2nd integration so that
    # we can read in the sky rotation angle
    my $href;
    ($href, $status) = fits_read_header($root.".i".($start+1));
    if ($status != &NDF::SAI__OK) {
      orac_err("Failed to read rotation angle from FITS header!");
      $ORAC_STATUS = ORAC__ERROR;
    }

    # ANGROT is in the header - must subtract 90 degrees for our data
    # (POLPACK puts rotation angle from X rather than Y)

    my $angrot = $href->{ANGROT} - 90.0;


    # DEGLITCHING -------------------

    # In order to keep the number of intermediate files down
    # Create an intermediate HDS container to hold the deglitched
    # images
    my ($junk, $out) = $Frm->inout("_gl",$i);


    # Create if this is the first time round the loop
    if ($loop == 1) {
      hds_new ($out,substr($out,0,9),"SURF_HDS",0,@null,$loc,$status);
      dat_annul($loc, $status);
      if ($status != &NDF::SAI__OK) {
	orac_err("Failed to create HDS container: $out!");
	$ORAC_STATUS = ORAC__ERROR;
      }
    }

    # Loop over this set of four
    foreach my $int ($start..$end) {
      # Glitch arguments depend on the version of Kappa
      my $gl_args;
      if (starversion_lt('kappa','V0.15-0')) {
	$gl_args = "inpic=${root}.i$int outpic=${out}.i$int where=bad";
      } else {
	$gl_args = "in=${root}.i$int out=${out}.i$int mode=bad";
      }

      # Deglitch each image
      $Mon{kappa_mon}->obeyw("glitch", "$gl_args");
    }

    # CALCULATE POLARISATION ----------------------

    # We are using the deglitched file
    my $in = $out;

    # Create a container file to hold the P and Theta and I

    ($junk, $out) = $Frm->inout("_temp$loop",$i);

    hds_new ($out,substr($out,0,9),"SURF_HDS",0,@null,$loc,$status);
    dat_annul($loc, $status);
    if ($status != &NDF::SAI__OK) {
      orac_err("Failed to create HDS container: $out!");
      $ORAC_STATUS = ORAC__ERROR;
    }

    # Just run calpol
    my $input = "";
    my $n = 0;
    for my $int ($start..$end) {
      $n++;
      $input .= "in$n=${in}.i$int ";
    }
    my $args = "i=${out}.i p=${out}.p theta=${out}.theta u=! q=! ip=!";


    $Mon{kappa_mon}->obeyw("calpol","$input $args debias=false variance=false");

    # CORRECT FOR SOURCE ROTATION -----------------

    $in = $out;  # Set input file

    orac_print "Correcting for sky rotation angle: $angrot\n";

    # Create a container file to hold the I, Q and U
    ($junk, $out) = $Frm->inout("_iqu$loop",$i);

    hds_new ($out,substr($out,0,9),"SURF_HDS",0,@null,$loc,$status);
    dat_annul($loc, $status);
    if ($status != &NDF::SAI__OK) {
      orac_err("Failed to create HDS container: $out!");
      $ORAC_STATUS = ORAC__ERROR;
    }

    # Copy the I directly from in to out container
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=${in}.i out=${out}.i title='Intensity'");

    # Calculate the Q component
    # Note that the P returned by Calpol is percentage polarisation
    $Mon{kappa_mon}->obeyw("maths","exp='0.01*ia*cosd(2*(ib+pa))' ia=${in}.p ib=${in}.theta pa=$angrot out=${out}.q");

    # Calculate the U component
    # Note that the P returned by Calpol is percentage polarisation
    $Mon{kappa_mon}->obeyw("maths","exp='0.01*ia*sind(2*(ib+pa))' ia=${in}.p ib=${in}.theta pa=$angrot out=${out}.u");

    # Erase the temporary file
    $Mon{ndfpack_mon}->obeyw("erase","object=$in ok=true");

  }

  # FIND MEAN I, Q and U --------------------------

  # We now have the sum of I's, Q's and U's in $iqu_out
  # in extensions called I,Q and U.

  # Calculate the mean of the I, Q and U vectors
  # Currently all the files are stored in files
  # of name   ....._iqu$loop

  # Retrieve the output file name that will be used to hold the averaged
  # I, Q and U

  # Calculate the name for the final IQU HDS container
  my ($junk, $iqu_out) = $Frm->inout("_iqu",$i);

  # Create the output file
  hds_new ($iqu_out,substr($iqu_out,0,9),"SURF_HDS",0,@null,$loc,$status);
  dat_annul($loc, $status);
  if ($status != &NDF::SAI__OK) {
    orac_err("Failed to create HDS container: $iqu_out!");
    $ORAC_STATUS = ORAC__ERROR;
  }

  # Now need to use Kappa maths to coadd all the frames and average
  # Need to create a maths string

  # Kappa maths can only combine up to 26 input files
  if ($nloops > 26) {
    orac_err("Can only process a maximum of 26 waveplate sets\n");
    $ORAC_STATUS = ORAC__ERROR;
  }

  # Loop over each component
  orac_print "Calculating mean of ";
  for my $stokes (qw/I Q U/) {
    orac_print "$stokes...";
    # Create maths string (not unicode compliant!)
    # generate "ia + ib + ic .... " expression for kappa maths
    my $exp = '('.join ("+",grep {$_ = "i".chr($_+96)} (1..$nloops)) . ")/$nloops";

    # generate "ia=$iqu_out.?  ib=iqu_out.? ic=$iqu_out.? .... " 
    # expression for input to kappa maths
    my $args =  join (" ", grep {
      $_ = "i".chr($_+96)."=${iqu_out}$_".".$stokes";
    } (1..$nloops));

    # Run kappa maths
    $Mon{'kappa_mon'}->obeyw("maths","exp='$exp' out=${iqu_out}.$stokes $args title='$stokes Stokes Parameter'");

  }
  orac_print "\n";

  # CALCULATE AVERAGE POLARISATION ------------------

  # Calculate the State of Polarisation
  # (Store them all in $iqu_out

  orac_print "Calculate polarisation\n";

  $Mon{kappa_mon}->obeyw("maths","exp='100*sqrt(ia*ia+ib*ib)' ia=${iqu_out}.q ib=${iqu_out}.u out=${iqu_out}.p title='Polarisation'");
  $Mon{kappa_mon}->obeyw("maths","exp='0.5*atan2d(ia,ib)' ia=${iqu_out}.u ib=${iqu_out}.q out=${iqu_out}.theta title='Polarisation angle'");

  # Set the units
  $Mon{ndfpack_mon}->obeyw("setunits", "ndf=${iqu_out}.p units=% ");
  $Mon{ndfpack_mon}->obeyw("setunits", "ndf=${iqu_out}.theta units=degrees ");

  # Aim is to have an NDF with the I information and the Q,U,P, theta
  # components in a .MORE extension

  # Determine final output name
  my ($in, $out) = $Frm->inout('_pol',$i);

  # NDFCOPY to this NDF
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=${iqu_out}.i out=$out");

  # Create the ORAC component [SETEXT can not yet generate an extension
  # without looping] Do it by hand
#  $Mon{ndfpack_mon}->obeyw("setext","ndf=$out xname=ORAC xtype='ORAC_EXT' noloop option=select");
  ndf_begin;
  my ($indf,$place,$xloc);
  ndf_open(&NDF::DAT__ROOT(), $out, 'UPDATE', 'OLD', $indf, $place, $status);
  ndf_xnew($indf, 'ORAC', 'ORAC_EXT', 0, @null, $xloc, $status);
  dat_annul($xloc, $status);
  ndf_annul($indf, $status);
  ndf_end($status);
  if ($status != &NDF::SAI__OK) {
    orac_err("Failed to create HDS container: $out!");
    $ORAC_STATUS = ORAC__ERROR;
  }


  # Threshold 
  orac_print "Thresholding for values to be no greater than 10%\n";
  $Mon{kappa_mon}->obeyw("thresh", "in=${iqu_out}.p out=${out}.more.orac.p thrlo=0.0 thrhi=10.0 newlo=BAD newhi=BAD");

  # Copy the remaining components
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=${iqu_out}.theta out=${out}.more.orac.theta");
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=${iqu_out}.q out=${out}.more.orac.q");
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=${iqu_out}.u out=${out}.more.orac.u");

  # Update the Frame object
  $Frm->file($i, $out);

  # In order to display P and THETA independently as histograms
  # I need to populate some dummy frames and copy the images to
  # separate files

  ($junk, my $nout) = $Frm->inout('_theta',$i);
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=${iqu_out}.theta out=${nout}");
  $Theta_frm->file($i, "${nout}");
  ($junk, $nout) = $Frm->inout('_p',$i);
  $Mon{ndfpack_mon}->obeyw("ndfcopy","in=${out}.more.orac.p out=${nout}");
  $P_frm->file($i, "${nout}");

}


# Display P and theta
$Display->display_data($P_frm) if defined $Display;
$Display->display_data($Theta_frm) if defined $Display;


# Tidy up the P and theta arrays since they are superfluous
foreach my $file ($P_frm->files, $Theta_frm->files) {
  $Mon{ndfpack_mon}->obeyw("erase","object=$file ok=true");   
}

# Now undef the temporary frames
$P_frm = undef;
$Theta_frm = undef;

# Display the main image

$Display->display_data($Frm) if defined $Display;


# COPYRIGHT
#
#   Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#   Council. All Rights Reserved.


