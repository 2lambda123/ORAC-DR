=head1 NAME

REBIN_INTEGRATIONS

=head1 DESCRIPTION

Generate a single rebinned image per integration. Similar
to REBIN_FRAME except that INTREBIN is used instead of REBIN.

=head1 TASKS

  SURF: INTREBIN

=head1 INPUT ARGUMENTS

REBIN_METHOD - Method to use for regrid. Allowed options are
               BESSEL, LINEAR, GAUSSIAN, SPLINE1, SPLINE2, MEDIAN
               Default is Gaussian.

PIXEL_SIZE   - Pixel size in arcseconds
               Default is 3.0 arcsec.

SIZE         - Size of output map. Useful if you intend to
               force the size of the output grid. Note that 
               this value is in pixels and will create
               a SQUARE map. Default is undefined (map size
               will be as big as required)

SMOOTH       - Smoothing size of convolution function. Default is undef.
               [For GAUSSIAN this is the HWHM]

GRPCENT      - Flag to determine whether integrations should be 
               regridded relative to the position of the first
               member of the grid. Default is true.

TRIM         - Region around edge to be trimmed off. Should be in arcseconds.
               Default is 0.

=head1 NOTES

The frame object is updated at the end of this primitive. The out
files themselves are HDS containers rather than NDF files.
This means that the primitives used after this routine HAVE to know
what they are dealing with!!!

=cut


# Read input arguments
my $method  = ($_REBIN_INTEGRATIONS_{REBIN_METHOD} || "gaussian");
my $pixsize = ($_REBIN_INTEGRATIONS_{PIXEL_SIZE} || "3.0");
my $size    = ($_REBIN_INTEGRATIONS_{SIZE} || undef);
my $smooth  = ($_REBIN_INTEGRATIONS_{SMOOTH} || undef);
my $trim    = ($_REBIN_INTEGRATIONS_{TRIM}   || 0);

my $grpcent = 1;
if (exists $_REBIN_INTEGRATIONS_{GRPCENT}) {
  $grpcent = $_REBIN_INTEGRATIONS_{GRPCENT};
}

# If necessary, find reference map center from the first group
# member
my $mappos = '';
if ($grpcent) {
  my $first = $Grp->frame(0);
  my $outcoords = $first->hdr('CENT_CRD');
  $outcoords = 'PL' if $first->hdr('CENT_CRD') eq 'PLANET';

  $mappos = " OUT_COORDS=$outcoords ";

  if ($outcoords ne 'PL') {
    # Read centre (ignore centre coords!)
    my $long = $first->hdr('LONG');
    my $lat = $first->hdr('LAT');
    
    # Replace : with space
    $long =~ s/:/ /g;
    $lat =~ s/:/ /g;
  
    $mappos .= " LAT_OUT='$lat' LONG_OUT='$long' ";
  orac_print "Regridding to map centre $long, $lat ($outcoords)\n";

  }


} 


my @subs = $Frm->subs;

# Loop over sub instruments that are found in the current frame
for my $i (1..$Frm->nfiles) {

  my $sub = $subs[$i-1];

  orac_print "Generating integration images for sub-instrument $sub\n";

  # Find the filename
  my ($in, $out) = $Frm->inout("_ireb", $i);

  # Generate an image per integration
  my $args = "noguard noloop rebin_method=$method pixsize_out=$pixsize ";
  $args .= "$mappos trim=$trim";

  $args .= " size=[$size,$size]" if defined $size;
  $args .= " scale=$smooth" if defined $smooth;

  # Run intrebin
  $Mon{surf_mon}->obeyw("intrebin", "ref=$in out=$out $args accept");

  # Update the frame object
  $Frm->file($i, $out);


}


# COPYRIGHT
#
#   Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#   Council. All Rights Reserved.


