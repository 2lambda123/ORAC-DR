=head1 NAME

PRINT_RESULTS_PHOTOM_FRAME

=head1 DESCRIPTION

Print photometry results for an individual observation.
Can have multiple bolometers reported.

=head1 TASKS

KAPPA: STATS

=head1 NOTES

Uses the NDF perl module.

=cut


# Import NDF
use NDF qw/:hds :dat/;
 
# Check that we are a PHOTOM observation
 
if ($Frm->hdr(MODE) eq "PHOTOM") {

  # Print header 
  # Print welcome message
  print "\n\nRESULTS of CURRENT PHOTOMETRY OBSERVATION\n";
  print "-----------------------------------------\n\n";
 
  print "Source name: " . $Frm->hdr(OBJECT) ."\n";
  print "Observation number: " . join(",",$Frm->number) ."\n";
  print "\n";

  # Open a photometry log file if one does not exist already
  # If one does exist - open for append
  my $logfh;
  if (-e 'log.photom') {
    # open  for append
    $logfh = new IO::File('>> log.photom');
  } else {
    # Open for write
    $logfh = new IO::File('> log.photom');

    # Print header
    my $time = gmtime();
    print $logfh "Photometry log file - written on $time\n";
    print $logfh "\n#     Source    Bol Filt  Time          Flux       Error      S/N\n";
    print $logfh "------------------------------------------------------------------\n";

  }


  @subs = $Frm->subs;
  @filters = $Frm->filters;
 
  # loop over sub instruments
  for ($i = 0; $i < $Frm->nsubs; $i++) {

    # Now need to find the NDFs in the output HDS file
    $status = &NDF::SAI__OK;
    hds_open($Frm->file($i+1), 'READ', $loc, $status);
 
    $ORAC_STATUS = ORAC__ERROR unless $status == &NDF::SAI__OK;
 
    dat_ncomp($loc, $ncomp, $status);
 
    @names = ();
    for $comp (1..$ncomp) {
      dat_index($loc, $comp, $nloc, $status);
      dat_name($nloc, $name, $status);
      dat_annul($nloc, $status);
      push(@names, $name) if $name =~ /_PEAK$/;
    }
    
    dat_annul($loc, $status);
    $ORAC_STATUS = ORAC__ERROR unless $status == &NDF::SAI__OK;
 
    # All the NDFs are now in @names
    # Loop over bolometers and run stats
 
    foreach $subndf (@names) {

      my $ndf = $Frm->file($i+1) . ".$subndf";
      $Mon{kappa_mon}->obeyw("stats","ndf=$ndf");
 
      ($ORAC_STATUS, $mean) = $Mon{kappa_mon}->get("stats","mean");
      ($ORAC_STATUS, $sigma) = $Mon{kappa_mon}->get("stats","sigma");
      ($ORAC_STATUS, $ngood) = $Mon{kappa_mon}->get("stats","numgood");
      
      # Print results
      if ($ngood > 0) {
	$errmean = $sigma / sqrt($ngood);
      } else {
	$errmean = 'BAD';
      }

      $subndf =~ s/_peak//i;

      print "Results for bolometer $subndf ($subs[$i] sub-instrument):\n";
      print "\tN integrations = $ngood\n";
      printf "\tSignal         = %10.3f +/- %10.3f\n", $mean, $errmean;
      if ($errmean > 0.0) {
	$signoise = $mean / $errmean;
	printf "\tS/N            = %5.2f\n\n", $signoise;
      } else {
	$signoise = 'BAD';
      }
 
      my $num = $Frm->number;
      my $src = $Frm->hdr('OBJECT');
      my $filt = $filters[$i];
      my $time = $Frm->hdr('ORACTIME');
      my $bolname = $subndf;

      # Make sure that sourcename is 10 character
      my $len = 10;
      if (length($src) > $len) {
	$src = substr($src,0,$len);
      } else {
	$src .= ' ' x ($len - length($src) );
      }

      # Make sure that bolometer name is only 3 characters
      my $len = 3;
      if (length($bolname) > $len) {
	$src = substr($bolname,0,$len);
      } else {
	$bolname .= ' ' x ($len - length($bolname) );
      }


      printf $logfh  "%-4d $src $bolname %4d %11.2f %10.3f %10.3f %6.2f\n",
        $num, $filt, $time, $mean, $errmean, $signoise;

    }
  }

  close $logfh;
  
}
