=head1 NAME

PRINT_RESULTS_PHOTOM_FRAME

=head1 DESCRIPTION

Print photometry results for an individual observation.
Can have multiple bolometers reported.

A log file containing the results is also generated.

=head1 TASKS

KAPPA: STATS

=head1 NOTES

Uses the NDF perl module.

=cut


# Import NDF
use NDF qw/:hds :dat/;
 
# Check that we are a PHOTOM observation
 
if ($Frm->hdr('MODE') eq "PHOTOM") {

  # Print header 
  # Print welcome message
  orac_print "\n\nRESULTS of CURRENT PHOTOMETRY OBSERVATION\n",'clear';
  orac_print "-----------------------------------------\n\n", 'clear';
 
  orac_print "Source name: " . $Frm->hdr('OBJECT') ."\n", 'clear';
  orac_print "Observation number: " . join(",",$Frm->number) ."\n", 'clear';
  orac_print "\n",'clear';

  # Open a photometry logfile object
  my $log = new ORAC::LogFile("log.photom");

  # Write header
  my $time = gmtime();
  $log->header("Photometry log file - written on $time",
       "\n#     Source    Bol Filt  Time          Flux       Error      S/N  Seeing CSOTau",
	 "--------------------------------------------------------------------------------");

  # Retieve sub-inst and filter names
  my @subs = $Frm->subs;
  my @filters = $Frm->filters;
  my $ORAC_STATUS; 

  # loop over sub instruments
  for (my $i = 0; $i < $Frm->nsubs; $i++) {

    # Now need to find the NDFs in the output HDS file
    my $status = &NDF::SAI__OK;
    my ($loc,$ncomp);
    hds_open($Frm->file($i+1), 'READ', $loc, $status);
 
    $ORAC_STATUS = ($status == &NDF::SAI__OK ? ORAC__OK : ORAC__ERROR);
 
    dat_ncomp($loc, $ncomp, $status);
 
    my @names = ();
    for my $comp (1..$ncomp) {
      my ($name, $nloc);
      dat_index($loc, $comp, $nloc, $status);
      dat_name($nloc, $name, $status);
      dat_annul($nloc, $status);
      push(@names, $name) if $name =~ /_PEAK$/;
    }
    
    dat_annul($loc, $status);
    $ORAC_STATUS = ($status == &NDF::SAI__OK ? ORAC__OK : ORAC__ERROR);

    # All the NDFs are now in @names
    # Loop over bolometers and run stats
 
    foreach my $subndf (@names) {

      my $ndf = $Frm->file($i+1) . ".$subndf";
      $Mon{kappa_mon}->obeyw("stats","ndf=$ndf");
 
      $ORAC_STATUS;
      ($ORAC_STATUS, my $mean) = $Mon{kappa_mon}->get("stats","mean");
      ($ORAC_STATUS, my $sigma) = $Mon{kappa_mon}->get("stats","sigma");
      ($ORAC_STATUS, my $ngood) = $Mon{kappa_mon}->get("stats","numgood");
      
      # Print results
      my ($errmean,$signoise);
      if ($ngood > 0) {
	$errmean = $sigma / sqrt($ngood);
      } else {
	$errmean = 'BAD';
      }

      $subndf =~ s/_peak//i;

      orac_print "Results for bolometer $subndf ($subs[$i] sub-instrument):\n",'clear';
      orac_print "\tN integrations = $ngood\n",'clear';
      orac_print sprintf("\tSignal         = %10.3f +/- %10.3f\n", $mean, $errmean),'clear';
      if ($errmean > 0.0) {
	$signoise = $mean / $errmean;
	orac_print sprintf("\tS/N            = %5.2f\n\n", $signoise),'clear';
      } else {
	$signoise = 'BAD';
      }

      # This is the construction for the logfile entry

      # Retrieve the required information 
      my $num = $Frm->number;
      my $src = $Frm->hdr('OBJECT');
      my $filt = $filters[$i];
      my $time = $Frm->hdr('ORACTIME');
      my $bolname = $subndf;
      my $see = $Frm->hdr('SEEING');
      my $cso = $Frm->hdr('TAU_225');

      # Make sure that sourcename is 10 character
      my $len = 10;
      if (length($src) > $len) {
	$src = substr($src,0,$len);
      } else {
	$src .= ' ' x ($len - length($src) );
      }

      # Make sure that bolometer name is only 3 characters
      $len = 3;
      if (length($bolname) > $len) {
	$src = substr($bolname,0,$len);
      } else {
	$bolname .= ' ' x ($len - length($bolname) );
      }

      $log->addentry(sprintf("%-4d $src $bolname %4d %11.2f %10.3f %10.3f %6.2f %5.2f %5.2f",
			     $num, $filt, $time, $mean, $errmean, $signoise, $see, $cso));

    }
  }

}
