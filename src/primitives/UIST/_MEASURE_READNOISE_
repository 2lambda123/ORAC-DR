# -*- perl -*-





    # Get the frame file names from the group
    my @file = $Grp->membernames;

    # Get the BPM
    my $mask = $Cal->mask;

    # Get the Gain
    my $gain = $Frm->uhdr("ORAC_GAIN");

    my $temp1 = new ORAC::TempFile;
    my $t1file = $temp1->file;

    $Mon{'kappa_mon'}->obeyw("sub", "in1=$file[0] in2=$file[1] out=$t1file");

    # Apply a bad pixel mask (Why not indeed)
    my $temp2 = new ORAC::TempFile;
    my $t2file = $temp2->file;
   
    $Mon{'kappa_mon'}->obeyw("add", "in1=$t1file in2=$mask out=$t2file");

    # Call stats on the masked frame
    $Mon{'kappa_mon'}->obeyw("stats", "ndf=$t2file");

    # Value of interest is the sigma
    (my $ORAC_STATUS, my $ndsigma) = $Mon{'kappa_mon'}->get("stats", "sigma");

    # calculate the readnoise
    my $rn = $ndsigma * $gain / sqrt(2);

    # Print the readnoise
    my $rnstring = sprintf ("%4.1f", $rn);
    orac_print ("Double correlated readnoise = $rnstring electrons \n");

    # File the readnoise with the Cal system.

    # We've determined the double correlated (ie 2 reads) readnoise.
    # We should file the single read readnoise with the cal system
    $rn *= sqrt(2);
    
    # Needs to be in a hash
    # We'll use the last frame of the array tests as a reference for this
    # - that's the current frame at this point anyway
    my %hash = (%{$Frm->hdr}, READNOISE=>$rn);
    
    $Cal->readnoiseindex->add($Frm->file, \%hash);
    
    orac_print ("Readnoise Filed with the Calibration system\n");
    
    orac_print "\n";



# Podule
# ======

=head1 NAME

_MEASURE_READNOISE_

=head1 DESCRIPTION

Subtracts two NDSTARE darks to get a readnoise estimate ,and 
files it with the calibration system

=cut 
