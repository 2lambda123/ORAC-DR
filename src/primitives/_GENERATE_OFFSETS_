# _GENERATE_OFFSETS_
#
# Forms a flat-field. 
#
# TASK: CCDPACK - FINDOBJ, FINDOFF, REGISTER
#
# This should only be performed on OBJECT frames.
if ($Header{OBSTYPE} =~ /OBJECT/) {

print "FROSSIE SAYS $orac_dir\n";

# Can generate a mosaic when there are at least three
# object frames.
   if ($#objects + 1 > 2 ) {

# User-accessible mapping and parameters
      $user = "";

# Form a list of input file names for CCDPACK tasks.
      $isuffix = ($_GENERATE_OFFSETS_{SUFFIX_IN} || "_fl");
	@infiles = @objects;
	grep($_.=$isuffix,@infiles);
	$objlist = join(",",@infiles);


# Specify the other parameters for the FINDOBJ stage.
      $header = "in='$objlist' outlist='*.find'";
      $hidden = "minpix=6"; 

# Locate and centroid the objects above a threshold (96 percentile)
# in all the flat-fielded object frames.  Write their co-ordinates and
# peak values into .find text files.
      $Orac{"Mon_ccdpack_reg"}->obeyw("findobj","$header $user $hidden accept");
      print "Command was: findobj $header $user $hidden accept\n";

# Specify the other parameters for the FINDOFF stage.
      $header = "inlist='$objlist' outlist='*.off'";
      $hidden = "error=1"; 

# Pattern match using the co-ordinate lists.  It uses a fast algorithm
# first, but resorts to a slower one, if patterns aren't matched.
# Store the offsets in .off text files.
      $Orac{"Mon_ccdpack_reg"}->obeyw("findoff","$header $user $hidden accept");
      print "Command was: findoff $header $user $hidden accept\n";

# Specify the other parameters for the REGISTER stage.
      $header = "inlist='$objlist'";
      $hidden = "fittype=1"; 

# Register the frames using a shift of origin.  Create the CCDPACK
# TRANSFORM extensions.
      $Orac{"Mon_ccdpack_reg"}->obeyw("register","$header $user $hidden accept");
      print "Command was: register $header $user $hidden accept\n";

      print "Orac says: frames $objlist registered\n";
   };
};
