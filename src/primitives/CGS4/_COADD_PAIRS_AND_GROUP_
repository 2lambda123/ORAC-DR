# _COADD_PAIRS_AND_GROUP_  -*-perl-*-

=head1 NAME

COADD_PAIRS_AND_GROUP - coadd observations taken in OBJECT/SKY pairs into group file

=head1 DESCRIPTION

Coadds observations taken in the standard OBJECT/SKY pairs and adds
the result to a group file.

=head1 PARAMETERS

=over 4

none

=back

=head1 ORAC

=head2 Engines referenced

KAPPA

=head2 Tasks called

=over 4

=item kappa_mon

sub, cmult, add, cdiv

=item ndfpack_mon

erase

=back

=head2 Objects addressed

$Frm, $Grp

=head1 NOTES

This primitive is meant to act on observations taken in the standard
OBJECT/SKY pairing.  It does not assume that the pairings come in any
specific order, only that for each pair of observations, one is OBJECT
and one is SKY (i.e. observations taken in OSSOOSSO are reduced
properly, whereas observations taken in OSOOSO are not).

To determine whether an observation is OBJECT or SKY, this primitives
relies on correct telescope offset information being placed in the
header.  More specifically, OBJECT observations have R.A. and
Dec. offsets of zero, and SKY observations have either R.A., Decl., or
both set as non-zero.  If these offsets are set incorrectly, the
primitive will not work correctly.

This primitive does work with the C<-resume> flag but does not work
with the C<-batch> flag.

Assumes that by the time this primitive is called, there is only 
one file associated with the frame object.

=head2 REVISION

  $Id$

=head1 AUTHOR

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>,
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=cut

# Current observation number

my $obsnum = $Frm->number;

# We're using $Grp->raw so that the primitive will -always- coadd to the base
# group file. If some other steps were done after this (i.e. ratioing by a
# standard), then $Grp->file would be the name of the file after the other
# steps, thus sending the entire primitive into a pit of despair from which
# it would be quite difficult to return

my $groupname = $Grp->raw;

# Now update the groupname with this value so that all the 
# methods will look in the right place

$Grp->file( $groupname );

unless (defined $Frm->uhdr("PAIR_COMPLETE")) {
  orac_err "PAIR_COMPLETE not present, have you run the steering primitive??";
  my $ORAC_STATUS = ORAC__ERROR;
}

unless (defined $Frm->uhdr("ON_SOURCE")) {
  orac_err "ON_SOURCE not present, have you run the steering primitive??";
  my $ORAC_STATUS = ORAC__ERROR;
}


# Check whether we have an even number of observations in the group

if( $Frm->uhdr("PAIR_COMPLETE") ) {

  # Calculate the previous observation number
  # Determine the frame of the previous group member
  # This assumes we are not using -batch mode
  my $prevFrm = ($Grp->members)[-2];
  my $prevobs = $prevFrm->number;

  # Set the object and sky frames - this is set in the steering file
  if( $Frm->hdr("ON_SOURCE") ) {

    # RA and Decl. offsets are zero, so assume that the current
    # frame is the object frame, and the previous is sky.

    $object = $Frm->file;
    $sky = $prevFrm->file;

  } else {

    # RA and/or Decl. offsets are nonzero, so assume that the
    # current frame is sky, and previous is object.

    $object = $prevFrm->file;
    $sky    = $Frm->file;

  }

  if( ! ($Grp->file_exists) ) {

    # The group file doesn't exist, so copy the coadded pair into it.
    # Need the temp file so that the header propogation is correct

    my $tmp = new ORAC::TempFile;
    my $tmpname = $tmp->file;
    $Mon{'kappa_mon'}->obeyw("sub","in1=$sky in2=$object out=$tmpname title=$groupname");
    $Mon{'kappa_mon'}->obeyw("cmult","in=$tmpname scalar=-1 out=$groupname");
    orac_print "Subtracting $sky (SKY) from $object (OBJECT) and creating group $groupname\n";

    # ...and update the group header
    $Grp->readhdr;

    # This is repeated in a later segment as well.
    # Since we have coadded a pair we need to store this information
    # in the group file coadds array
    $Grp->coaddspush($prevobs, $obsnum);

    # Now update the FITS header to reflect the new RUTEND  and AMEND
    # from the current frame
    my $rutend = $Frm->hdr('RUTEND');
    my $amend  = $Frm->hdr('AMEND');
    _SET_GROUP_FITS_ITEM_ KEY=RUTEND VALUE=$rutend
    _SET_GROUP_FITS_ITEM_ KEY=AMEND VALUE=$amend

    # We should also store RUTSTART and AMSTART
    # To make sure that the AMSTART of the previous frame
    # is in the header regardless of the order sky and object were
    # taken. Only need to do this for the first pair
    my $rutstart = $prevFrm->hdr('RUTSTART');
    my $amstart  = $prevFrm->hdr('AMSTART');
    _SET_GROUP_FITS_ITEM_ KEY=RUTSTART VALUE=$rutstart
    _SET_GROUP_FITS_ITEM_ KEY=AMSTART VALUE=$amstart



# HUGE COMMENT -- If you're looking through this code and wondering
# why a sky-object is done, instead of object-sky, here's the reason.
# When extracting the spectrum, the primitive that does that needs to
# calculate where the negative row is.  This calculation is done using
# the RAOFF and DECOFF (RA and Decl. offsets) header values.  These
# two values are zero for object observations, and non-zero for sky
# observations.  If the pair was added as object-sky, instead of
# -(sky-object), then the header for the object would be placed in the
# reduced group file.  Remember how RAOFF and DECOFF are zero for
# object observations?  When the spectrum extraction primitive does
# its calculations, it would calculate that the negative row is zero
# rows away from the positive row, and this is (generally) not the
# case.  Thus, if we copy in the headers from the sky observations, we
# preserve the RAOFF and DECOFF values, and can thus correctly
# calculate the position of the negative row for spectrum extraction.
# PLEASE DO NOT CHANGE THIS!  If you change this, then the spectrum
# extraction will be broken, much to the dismay of astronomers and
# support scientists and others who might like to get accurate spectra
# from their hard-earned observations at UKIRT.

  } elsif ($Grp->coaddspresent($obsnum) && $Grp->coaddspresent($prevobs)) {

    # Already been coadded

    orac_print "This pair ($prevobs, $obsnum) have already been coadded. Skipping.\n";

  } elsif ($Grp->coaddspresent($obsnum) || $Grp->coaddspresent($prevobs)) {

    # This should not happen. The coadds array should not contain
    # one of the pairs

    orac_err "Something has gone wrong. One of the pair [$prevobs,$obsnum], has been coadded without the other!!!!\n";
    my $ORAC_STATUS = ORAC__ERROR;


  } else {

    # The group file exists and this is not the first pair.  First we need to
    # determine how many pairs have been added to the group;
    # The number of observations added previously is from coadds
    my $numobsadded = scalar(@{ scalar($Grp->coadds) } );
    my $numpairadded = $numobsadded / 2;

    # Now we need to "unaverage" the group file. A temporary file is needed for this.

    my $unavg = new ORAC::TempFile;
    my $unavgname = $unavg->file;
    $Mon{'kappa_mon'}->obeyw("cmult","in=$groupname scalar=$numpairadded out=$unavgname");

    # Now subtract SKY from OBJECT to create the pair. A temp file is needed.
    # Need the temp file so that the header propogation is correct

    my $pair = new ORAC::TempFile;
    my $pairname = $pair->file;
    my $tmp = new ORAC::TempFile;
    my $tmpname = $tmp->file;
    $Mon{'kappa_mon'}->obeyw("sub","in1=$sky in2=$object out=$tmpname");
    $Mon{'kappa_mon'}->obeyw("cmult","in=$tmpname scalar=-1 out=$pairname");

    # Now add the pair to the unaveraged group. A temp file is needed.

    my $addgroup = new ORAC::TempFile;
    my $addgroupname = $addgroup->file;
    $Mon{'kappa_mon'}->obeyw("add","in1=$unavgname in2=$pairname out=$addgroupname");

    # Now average the result. Erase the original group file first, because
    # kappa will complain if it tries to overwrite a file (will it?? TIMJ).

    $Mon{'ndfpack_mon'}->obeyw("erase","object=$groupname ok=true");
    my $avgscalar = $numpairadded + 1;
    $Mon{'kappa_mon'}->obeyw("cdiv","in=$addgroupname scalar=$avgscalar out=$groupname title=$groupname");
    orac_print "Subtracting $sky (SKY) from $object (OBJECT) and adding to group $groupname\n";

    # Print an informative message (I dont think it will ever get here
    # with only a single pair since the early if should catch it.
    if ($avgscalar == 1) {
      orac_print "Group file now contains observations from $avgscalar pair\n";
    } else {
      orac_print "Group file now contains observations from $avgscalar pairs\n";
    }

    # Since we have coadded a pair we need to store this information
    # in the group file coadds array
    $Grp->coaddspush($prevobs, $obsnum);

    # Now update the FITS header to reflect the new RUTEND  and AMEND
    # from the current frame
    my $rutend = $Frm->hdr('RUTEND');
    my $amend  = $Frm->hdr('AMEND');
    _SET_GROUP_FITS_ITEM_ KEY=RUTEND VALUE=$rutend
    _SET_GROUP_FITS_ITEM_ KEY=AMEND VALUE=$amend

  }

  $Display->display_data($Grp) if defined $Display;

}

