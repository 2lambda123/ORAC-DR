# _OPTIMALLY_EXTRACT_SPECTRUM_ -*-perl-*-
#
# use optimal extraction to extract positive and negative rows to create a spectrum

=head1 NAME

OPTIMALLY EXTRACT SPECTRUM - uses optimal extraction algorithm to extract positive and negative
spectra from a reduced group file

=head1 DESCRIPTION

This primitive uses the optimal extraction algorithm used in the Figaro task 'optextract' to 
extract five rows centred on the positive and negative spectra in a reduced group file, then
adds the two together to give a final spectrum.

=head1 PARAMETERS

=over 4

=item PROW

Defines the centre row of the positive spectrum.  Defaults to 96.

=item NROW

Defines the centre row of the negative spectrum.  If this parameter is not defined, the primitive
will calculate where the negative spectrum is, using offset information in the reduced group file
headers.

=back

=head1 ORAC

=head2 Engines referenced

KAPPA, FIGARO

=head2 Tasks called

=over 4

=item kappa_mon

sub

=item figaro1

optextract, profile

=back

=head2 Objects addressed

$Grp

=head1 NOTES

If the COADD_PAIRS_AND_GROUP primitive is modified so that the headers from the OBJECT observation
are written to the reduced group file, the negative row calculations will be incorrect.  See the
NOTES and comments for the COADD_PAIRS_AND_GROUP primitive for further clarification.

=head2 REVISION

  $Id$

=head1 AUTHOR

b.cavanagh@jach.hawaii.edu

=cut

sub cosdeg { cos($_[0] * 3.14159265359 / 180); }

my $group = $Grp->file;
my $out = $Grp->raw . "_sp";

my $groupfile = $group . $Grp->filesuffix;
my $outfile = $out . $Grp->filesuffix;

if(((-e $groupfile) && (!(-e $outfile))) || ((-e $outfile) && ((stat($groupfile))[9] > (stat($outfile))[9]))) {

  # obtain the rows to extract

  my $prow = ($_OPTIMALLY_EXTRACT_SPECTRUM_{PROW} || undef);
  my $nrow = ($_OPTIMALLY_EXTRACT_SPECTRUM_{NROW} || undef);

  ($prow) || ($prow = 96);
  
  if(!defined($nrow)) {
    # if the user hasn't stated the negative row as a parameter, we need to calculate it
      my $raoff = $Grp->hdr("RAOFF");
      my $decoff = $Grp->hdr("DECOFF");
      my $basera = $Grp->hdr("RABASE");
      my $basedec = $Grp->hdr("DECBASE");
      my $ra = $Grp->hdr("MEANRA");
      my $dec = $Grp->hdr("MEANDEC");
    
    #my $raoff = $Frm->hdr("RAOFF");
    #my $decoff = $Frm->hdr("DECOFF");
    #my $basera = $Frm->hdr("RABASE");
    #my $basedec = $Frm->hdr("DECBASE");
    #my $ra = $Frm->hdr("MEANRA");
    #my $dec = $Frm->hdr("MEANDEC");
    
    my $radist = 15 * cosdeg($basedec) * ($basera - $ra) * 3600;
    my $decdist = $dec - $basedec;
    my $slide = sqrt($radist * $radist + $decdist * $decdist);
#    print $radist . " " . $decdist . " " . $slide . "\n";
#    $nrow = nint($posrow + ($slide / 0.61));
    $nrow = $prow + ($slide / 0.61);
#    print $nrow . "\n";
  }
  
  my $startpos = $prow - 2;
  my $endpos = $prow + 2;
  my $startneg = $nrow - 2;
  my $endneg = $nrow + 2;

# create the positive and negative profiles

  my $posprof = new ORAC::TempFile;
  my $posproffile = $posprof->file;
  my $negprof = new ORAC::TempFile;
  my $negproffile = $negprof->file;
  my $tmp = new ORAC::TempFile;
  my $tmpfile = $tmp->file;
  my $commonargs = "degree=5 nreject=5 weight=no residual=$tmpfile";
  $Mon{'figaro1'}->obeyw("profile","image=$group profile=$posproffile ystart=$startpos yend=$endpos $commonargs"); 
  $Mon{'figaro1'}->obeyw("profile","image=$group profile=$negproffile ystart=$startneg yend=$endneg $commonargs"); 

# use the positive and negative profiles to optimally extract the positive and negative spectra

  my $posspec = new ORAC::TempFile;
  my $posspecfile = $posspec->file;
  my $negspec = new ORAC::TempFile;
  my $negspecfile = $negspec->file;
  $Mon{'figaro1'}->obeyw("optextract","image=$group profile=$posproffile spectrum=$posspecfile weight=no");
  $Mon{'figaro1'}->obeyw("optextract","image=$group profile=$negproffile spectrum=$negspecfile weight=no");

# subtract the negative spectrum from the positive

  $Mon{'kappa_mon'}->obeyw("sub","in1=$posspecfile in2=$negspecfile out=$tmpfile");

# divide the spectrum by two for proper levels

  $Mon{'kappa_mon'}->obeyw("cdiv","in=$tmpfile out=$out scalar=2");

# print congratulatory message

  my $nnrow = nint($nrow);
  orac_print "Positive (row $prow) and negative (row $nnrow) spectra from $group optimally extracted into $out\n";

# update group object

  $Grp->file($out);

}
