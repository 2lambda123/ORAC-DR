#-*-perl-*-
#

=head1 NAME

_EMISSIVITY_ - calculates emissivity results

=head1 DESCRIPTION

Expects to be run on a SKY frame (taken pointing at the sky) and an
OBJECT frame (taken pointing at the mirror covers ie dome).

File extensions created:

Frames:

_ess: Emissivity Sky Spectrum

_eds: Emissivity Dome Spectrum

Group:

Group file contains ratio of sky and dome spectra

_sm: Smoothed by 5 pixels - used to select region


Spectra are extracted from both files and divided by the exposure time
for that frame.

The "emissivity" spectrum is the ratio of these two spectra.

The emissivity spectrum is smoothed with a box of 5 pixels. The
location of the minimum of the smoothed spectrum is found, and a
5 pixel window centred at this point is extracted from the sky and
dome spectra. The mean values of these two windows are calculated and
printed. The ratio of these 2 mean values is printed as the emissivity.

=head1 PARAMETERS

=item START
The row to start extracting at

=item END
The row to end extracting at

=head1 ORAC

Engines referenced: Kappa, Figaro

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>

=cut

# orac_print("PRIMITIVE: EMISSIVITY\n");

my $in;
my $out;

# the start and end rows for the extraction
# Hard-coded for the minute, but maybe we should be clever about this -
# often there's structure here (stars flying past maybe...)
my $start = ($_EMISSIVITY_{START} || undef);
my $end = ($_EMISSIVITY_{END} || undef);

if (!defined $start) {
  $start = 50;
}
if (!defined $end) {
  $end = 150;
}

# set user headers in the group file

if ($Frm->hdr->{'OBSTYPE'} eq 'SKY') {
  ($in, $out) = $Frm->inout("_ess", $Frm->file);
  $Grp->uhdr('EMIS_SKY', $out);
  $Grp->uhdr('EMIS_SKN', $Frm->number);
} else {
  ($in, $out) = $Frm->inout("_eds", $Frm->file);
  $Grp->uhdr('EMIS_DOME', $out);
  $Grp->uhdr('EMIS_DMN', $Frm->number);
}

# extract the spectrum.
orac_print("Orac says: extracting rows $start to $end\n");
$Mon{'figaro1'}->obeyw("extract","image=$in spectrum=$out ystart=$start yend=$end");

# divide it by the exposure time times the number of rows extracted
my $exptime = ($Frm->hdr("DEXPTIME"))*($end-$start);

$Mon{'figaro1'}->obeyw("icdiv","image=$out factor=$exptime output=$out");

orac_print("Orac says: $in to $out: Spectrum Extracted and divided.\n");

# only do this bit once we've got both frames

if(defined $Grp->uhdr('EMIS_SKY') && defined $Grp->uhdr('EMIS_DOME')) {
  my $emis_sky = $Grp->uhdr('EMIS_SKY');
  my $emis_dome = $Grp->uhdr('EMIS_DOME');
  my $group_file = $Grp->file;

  $Mon{'figaro1'}->obeyw("idiv", "image=$emis_sky image1=$emis_dome output=$group_file");

  orac_print("Orac says: Emissivity spectrum calculated: $group_file\n");

  # now we do a box smooth on the emissivity spectrum, and find the lowest point.
  # we then generate statistics about that point from the unsmoothed spectrum.

  $in = $group_file;
  $out = $in . "_sm";
  my $box = 5; # number of pixels in the box. Better be odd

  $Mon->{'kappa_mon'}->obeyw("block", "in=$in out=$out estimator=mean box=$box");
  $Mon->{'kappa_mon'}->obeyw("stats", "ndf=$out");
  my ($ORAC_STATUS, $wlen) = $Mon{'kappa_mon'}->get("stats", "mincoord");
  my ($ORAC_STATUS, $wlenpix) = $Mon{'kappa_mon'}->get("stats", "minpos");

  # now we know the pixel area to work on. Do the stats.
  # Chop out the area into temp files and use stats I guess

  my $tmp = new ORAC::TempFile;
  my $tmpfile = $tmp->file;

  $Mon->{'ndfpack_mon'}->obeyw("ndfcopy", "in=$emis_sky($wlenpix~$box) out=$tmpfile");
  $Mon->{'kappa_mon'}->obeyw("stats", "ndf=$tmpfile");
  my ($ORAC_STATUS, $sky_val) = $Mon{'kappa_mon'}->get("stats", "mean");

  $Mon->{'ndfpack_mon'}->obeyw("ndfcopy", "in=$emis_dome($wlenpix~$box) out=$tmpfile");
  $Mon->{'kappa_mon'}->obeyw("stats", "ndf=$tmpfile");
  my ($ORAC_STATUS, $dome_val) = $Mon{'kappa_mon'}->get("stats", "mean");  

#  Calculate Emissivity from sky and dome values just obtained

  my $emissivity = 100.0 * $sky_val / $dome_val;
  $emissivity = sprintf "%.2f", $emissivity;

  $wlen = sprintf "%.4f", $wlen;
  $sky_val = sprintf "%.2f", $sky_val;
  $dome_val = sprintf "%.2f", $dome_val;
  orac_print("Orac says: Emissivity measured from $box pixels centered at: $wlen um\n");
  orac_print("Orac says: Sky value: $sky_val; Dome value: $dome_val\n");
  orac_print("Orac says: Emissivity = $emissivity %\n");

# Log the results into a file

  my $log = new ORAC::LogFile("emissivity.log");

# with this header
my @headers = ("UTDATE   Grating  Frames  Sky    Dome     Emissivity",
               "----------------------------------------------------");


$log->header(@headers);

# to screen aswell for now

orac_print(join("\n",@headers). "\n");

# prepare some output

my $utdate = $Frm->hdr("IDATE");
my $grating = $Frm->hdr("GRATING");
my $string = sprintf("%-8s %8.8s %3.3d,%3.3d %6.2f %6.2f %6.2f", $utdate, $grating, $Grp->uhdr('EMIS_SKN'), $Grp->uhdr('EMIS_DMN'), $sky_val, $dome_val, $emissivity);

# send to logfile and screen

$log->addentry($string);
orac_print("$string\n");

} else {
#  orac_print("Orac says: Don't have both SKY and DOME yet.\n");
}

