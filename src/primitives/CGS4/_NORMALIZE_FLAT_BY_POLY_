# _NORMALIZE_FLAT_BY_POLY_			-*-perl-*-

=head1 NAME

NORMALIZE_FLAT_BY_POLY - normalizes a 2-D image by using a fitted polynomial

=head1 DESCRIPTION

Normalizes a 2D image (usually a flat-field) and removes any large-scale changes
with wavelength by applying the following procedure:

1. The 2-D image is collapsed in Y to an average 1-D spectrum.

2. A polynomial is fit to the 1-D spectrum, and a new spectrum is created with this polynomial.

3. The polynomial spectrum is grown in Y to an image with dimensions matching
the original image.

4. The original image is divided by the polynomial image.

=head1 PARAMETERS

=over 4

=item ORDER

Defines the order of the fitted polynomial.  Defaults to 5.

=back

=head1 ORAC

=head2 Engines referenced

KAPPA, FIGARO

=head2 Tasks called

=over 4

=item kappa_mon

div

=item figaro1

growx, sfit

=item figaro4

xtract

=back

=head2 Objects addressed

$Frm

=head2 REVISION

  $Id$

=head1 AUTHOR

b.cavanagh@jach.hawaii.edu

=cut

# get parameters

my $order = ($_NORMALIZE_FLAT_BY_POLY_{ORDER} || undef);

($order) || ($order = 5);

foreach my $i (1..$Frm->nfiles) {

  # Generate the input and output filenames.
  my ($in,$out) = $Frm->inout("_nf",$i);
  
  # Get the dimensions of the input image

  my $ydim = $Frm->hdr("DROWS");            # number of rows in array
  my $xdim = $Frm->hdr("DCOLUMNS");         # number of columns in array

  # Collapse the 2D image to a 1D spectrum

  my $spec = new ORAC::TempFile;
  my $specname = $spec->file;
  $Mon{'figaro4'}->obeyw("xtract","in=$in out=$specname colaps=\[0,1\] info=no varuse=no");
  
  # Fit a polynomial to the 1D spectrum and create another spectrum from that polynomial
  # The polynomial is fit to the log of the values to mimic CGS4DR

  my $polyspec = new ORAC::TempFile;
  my $polyspecname = $polyspec->file;
  $Mon{'figaro1'}->obeyw("sfit","spectrum=$specname output=$polyspecname order=$order logs=false");
  
  # Grow the polynomial spectrum into a 2D image

  my $polyimage = new ORAC::TempFile;
  my $polyimagename = $polyimage->file;
  $Mon{'figaro1'}->obeyw("growx","spectrum=$polyspecname image=$polyimagename ystart=1 yend=$ydim ysize=$ydim new=true");
  
  # Divide the flat field by the polynomial image

  $Mon{'kappa_mon'}->obeyw("div","in1=$in in2=$polyimagename out=$out title=$out");

  # Update Frame object

  $Frm->file($i,$out);

  # Print congratulatory message

  orac_print("Orac says: $in to $out: Flat normalized\n");

  # Have the option to display the normalised flat. 
  # Umm, output from this looks strange (is this the _bp file we're seeing?)

  $Display->display_data($Frm) if (defined $Display);
}



