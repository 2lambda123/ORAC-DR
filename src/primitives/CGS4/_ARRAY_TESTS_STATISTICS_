=head1 NAME

_ARRAY_TESTS_STATISTICS_ - Determines array tests statistics for CGS4.

=head1 DESCRIPTION

This primitive calculates readnoise and dark current statistics for
CGS4.

The DARK frames used must have been reduced with the _REDUCE_DARK_
primitive; this is normally called from the _ARRAY_TESTS_ primitive
during array test reduction.

The basic principle used to determine the readnoise is to subtract 2
dark frames of the same exposure time, on the assumption that the
readnoise is the only difference between them.

The readnoise for the entire detector, as well for the individual
channels, is calculated. On the CGS4 array, the 4th, 8th,
12th... columns are the first channel, 3rd, 7th, 11th... are the
second channel, 2nd, 6th, 10th... are the third channel, and 1st, 5th,
9th... are the fourth.

=head1 AUTHORS

Paul Hirst <p.hirst@jach.hawaii.edu>
Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2006 Particle Physics and Astronomy Research Council.
All Rights Reserved.

=cut

my $steer = $Frm->uhdr("ARRAY_TESTS_STATISTICS");


if ($steer eq "PREBPM" || $steer eq "GO") {

   orac_print "Calculating Array Statistics:\n";

   if ($steer eq "PREBPM") {
      orac_print "Not using dynamic hot pixel mask\n";
   } else {
      orac_print "Using dynamic hot pixel mask\n";
   }
   # Get the frame file names from the group
   my @file = $Grp->membernames;

   # Get the BPM
   my $mask = $Cal->mask;

   # Get the Gain
   my $gain = $Frm->uhdr("ORAC_GAIN");

   # Difference Frames 3 and 4 - the 1 sec NDSTARE Darks
   my $temp1 = new ORAC::TempFile;
   my $t1file = $temp1->file;

   $Mon{'kappa_mon'}->obeyw("sub", "in1=$file[2] in2=$file[3] out=$t1file");

   # Apply a bad pixel mask (Why not indeed)
   my $temp2 = new ORAC::TempFile;
   my $t2file = $temp2->file;

   $Mon{'kappa_mon'}->obeyw("add", "in1=$t1file in2=$mask out=$t2file");

   # Call stats on the masked frame
   $Mon{'kappa_mon'}->obeyw("stats", "ndf=$t2file");

   # Value of interest is the sigma
   (my $ORAC_STATUS, my $ndsigma) = $Mon{'kappa_mon'}->get("stats", "sigma");

   # calculate the readnoise
   my $rn = $ndsigma * $gain / sqrt(2);

   # Print the readnoise
   my $rnstring = sprintf ("%4.1f", $rn);
   orac_print ("Double correlated readnoise = $rnstring electrons ");
   if ($rn < 30.0) {
      orac_print "is low\n";
   } elsif ($rn < 38) {
      orac_print "is most excel;ent\n";
   } elsif ($rn < 42) {
      orac_print "is Nominal\n";
   } elsif ($rn < 50) {
      orac_print "is a little on the high side\n";
   } else {
      orac_print "is HIGH \n";
   }

   for( 1..4 ) {
     my $channel = $_;

     # Get the dimensions of the CGS4 array.
     _GET_DIMENSIONS_ GROUP=0
     my $lbound_ref = $_GET_DIMENSIONS_{LBOUND};
     my $ubound_ref = $_GET_DIMENSIONS_{UBOUND};
     my $lbound = $lbound_ref->[0];
     my $ubound = $ubound_ref->[0];

     # Create an ARD mask.
     my $ardmask = "ardmask$$.txt";
     open(my $ard_fh, ">", "$ardmask")
      or orac_throw "Unable to open $ardmask to create an ARD mask. Error: $!.\n";
     for( $lbound .. $ubound ) {
       my $column = $_;
       next if ( ( 5 - ( $column % 4 ) ) == $channel );
       next if ( ( $column % 4 ) == 0 && $channel == 1 );
       print $ard_fh "COLUMN( $column )\n";
     }
     close $ard_fh;

     # Mask out the requested columns using the ARD mask.
     my $tmp = new ORAC::TempFile;
     my $tmpfile = $tmp->file;
     $Mon{'kappa_mon'}->obeyw( "ardmask", "in=$t2file ardfile=$ardmask out=$tmpfile" );

     # Find the stats.
     $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$tmpfile" );
     ( $ORAC_STATUS, my $chan_sigma ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );

     # Calculate the readnoise.
     my $chan_rn = $chan_sigma * $gain / sqrt(2);

     # And print it.
     my $chan_rnstring = sprintf( "%4.1f", $chan_rn );
     orac_print ("Readnoise in channel $channel of $chan_rnstring electrons ");
     if ($chan_rn < 30.0) {
       orac_print "is low.\n";
     } elsif ($chan_rn < 38) {
       orac_print "is most excellent.\n";
     } elsif ($chan_rn < 42) {
       orac_print "is nominal.\n";
     } elsif ($chan_rn < 50) {
       orac_print "is a little on the high side.\n";
     } else {
       orac_print "is HIGH.\n";
     }

     # Delete the ARD mask.
     unlink $ardmask;

   }

   # Difference the 5th and 6th frames (stare mode darks)
   $Mon{'kappa_mon'}->obeyw("sub", "in1=$file[5] in2=$file[4] out=$t1file");

   # Might aswell do a bad pixel mask
   $Mon{'kappa_mon'}->obeyw("add", "in1=$t1file in2=$mask out=$t2file");

   # Obtain ordered statistics.
   $Mon{'kappa_mon'}->obeyw("stats", "ndf=$t2file order");

   # Get the mode and median.  HISTAT can fail due to sparseness.  Since
   # the distribution is unimodal, usually compact and low skewness, use
   # the Pearson formula.  STATS generates the actual median rather
   # than an approximate value yielded by HISTAT.
   ($ORAC_STATUS, my $mean) = $Mon{'kappa_mon'}->get("stats", "mean");
   ($ORAC_STATUS, my $median) = $Mon{'kappa_mon'}->get("stats", "median");
   my $mode = 3.0 * $median - 2.0 * $mean;

   # Get the difference in times
   my @frames = $Grp->members;

   my $tdiff = ($frames[5]->uhdr("ORAC_EXPOSURE_TIME")) - ($frames[4]->uhdr("ORAC_EXPOSURE_TIME"));

   # Calculate the dark current
   my $dcmedian = $median * $gain / $tdiff;
   my $dcmode = $mode * $gain / $tdiff;

   # Print the Dark currents
   my $dcmedstring = sprintf ("%5.2f", $dcmedian);
   my $dcmodstring = sprintf ("%5.2f", $dcmode);

   orac_print ("Median Dark current = $dcmedstring ");
   if ( $dcmedian < -0.5) {
      orac_print "is low\n";
   } elsif ( $dcmedian > 2.0) {
      orac_print "is high\n";
   } else {
      orac_print "is nominal\n";
   }

   orac_print ("Modal Dark current = $dcmodstring ");
   if ( $dcmode < -0.5) {
      orac_print "is low\n";
   } elsif ( $dcmode > 2.0) {
      orac_print "is high\n";
   } else {
      orac_print "is nominal\n";
   }

   # File the readnoise with the Cal system.

   # We've determined the double correlated (ie 2 reads) readnoise.
   # We should file the single read readnoise with the cal system
   $rn *= sqrt(2);

   # Needs to be in a hash
   # We'll use the last frame of the array tests as a reference for this
   # - that's the current frame at this point anyway
   my %hash = (%{$Frm->hdr}, READNOISE=>$rn);

   $Cal->readnoiseindex->add($Frm->file, \%hash);

   orac_print ("Readnoise Filed with the Calibration system\n");

   # Log the results to a file in ORAC_DATA_OUT. At UKIRT, this is
   # picked up by a morning Cron job and logged into
   # /ukirtdata/raw/telescope_data

   my $log = new ORAC::LogFile("cgs4_array_tests.log");

   my @headers = ("      UTDATE      LastFrame ReadNoise MedianDark ModalDark",
                  "-------------------------------------------------------");

   # Write the headers to the log file
   $log->header(@headers);

   # prepare some output
   my $utdate = $Frm->hdr("ORACTIME");
   my $frame = $Frm->number;

   my $string = sprintf("%17.6f %4.4d      %s     %s       %s", $utdate, $frame, $rnstring, $dcmedstring, $dcmodstring);

   # Log the entry
   $log->addentry($string);

   orac_print "Added values to tonights arraytests log\n";

   orac_print "\n";
}
