# -*-perl-*-

# _INTERLEAVE_DETECTOR_POSITIONS_
#
# interleaves exposures taken at different detector positions into
# one sub-image

=head1 NAME

INTERLEAVE_DETECTOR_POSITIONS - interleaves oversampled exposures into one sub-frame

=head1 DESCRIPTION

This primitive interleaves exposures taken at different detector positions into
one sub-image.  It does no co-adding of exposures taken at the same detector position.

=head1 PARAMETERS

=over 4

none

=back

=head1 ORAC

=head2 Engines referenced

KAPPA, CCDPACK

=head2 Tasks called

=over 4

=item kappa_mon

pixdupe, ardmask

=item ndfpack_mon

setorigin

=item ccdpack_reg

makemos

=back

=head2 Objects addressed

$Frm

=head1 NOTES

This primitive is not to be confused with COADD_MULTIPLE_EXPOSURES, which coadds sub-images
into one.  To get the same functionality of CGS4's "coadd integrations", use this recipe 
followed directly by COADD_MULTIPLE_EXPOSURES.

=head2 REVISION

$Id$

=head1 AUTHOR

b.cavanagh@jach.hawaii.edu

=cut

#'

my $nscanpos = $Frm->hdr("DETNINCR");         # number of scan positions

if($nscanpos != 1) {   

# we don't need to do any interlacing at all if there's only one scan position

  my $nsubs = $Frm->nsubs;                      # number of i-files
  my $pixinc = $Frm->hdr("DETINCR");            # increment (pixels) betw scan positions
  my $expansion = nint(1/$pixinc);              # expansion factor
  my $xdim = $Frm->hdr("DCOLUMNS");             # number of columns in array
  my $ydim = $Frm->hdr("DROWS");                # number of rows in array
  my $oversamp = $nscanpos / $expansion;        # the oversampling
  my $overoversamp = $nsubs / $nscanpos;        # the 'overoversampling'

  my $newxdim = ( $xdim + ($oversamp - 1) ) * $expansion;

# operate on each set of images

  orac_print "Interleaving frames ($nsubs observations in $nscanpos positions)\n";

  my @blank;
  my @blankname;

# create the ARD files, as they'll be used for all files

  my @ard;
  my @ardname;
  
  foreach my $i (1..$expansion) {
    $ard[$i] = new ORAC::TempFile;
    foreach my $j (1..($expansion*$xdim)) {
      if((($j - $i) % $expansion) != 0) {
	my $ardstr = "COLUMN($j)\n";
	print {$ard[$i]->handle} $ardstr;
      }
    }
    $ard[$i]->handle->close;
    $ardname[$i] = $ard[$i]->file;
  }

  # operate on each file separately
  foreach my $i (1..$nsubs) {
    
    # determine the input and output file names
    my ($in, $out) = $Frm->inout("_in",$i);
    
    # expand the image along the x-dimension
    my $exp = new ORAC::TempFile;
    my $expname = $exp->file;
    $Mon{'kappa_mon'}->obeyw("pixdupe","in=$in out=$expname expand=\[$expansion,1\]");

    # blank out columns as defined by the ARD file
    my $ardfile = (($i - 1) % $expansion) + 1;
    $blank[$i] = new ORAC::TempFile;
    $blankname[$i] = $blank[$i]->file;
    $Mon{'kappa_mon'}->obeyw("ardmask","in=$expname out=$blankname[$i] ardfile=$ardname[$ardfile]");

    # set the origin for pasting/mosaicking
    my $position = $Frm->hdr->{$i}->{"DINDEX"};
    my $neworigin = int(($position - 1) / $expansion) * $expansion + 1;
    $Mon{'ndfpack_mon'}->obeyw("setorigin","ndf=$blankname[$i] origin=\[$neworigin,1\]");
  }

  if($overoversamp == 1) {

    # if there's only one subset of observations, they can all be merged together into the output image
    $Frm->files($Frm->file);
    my ($in, $out) = $Frm->inout("_in");
    my $tmp = new ORAC::TempFile;
    foreach my $blanknum (1..$#blankname) {
      print {$tmp->handle} "$blankname[$blanknum]\n";
    }
    $tmp->handle->close;
    my $mosargs = "in=^" . $tmp->file . " noscale nousevar nozero method=mean logto=neither logfile=!";
    $Mon{'ccdpack_reg'}->obeyw("makemos","$mosargs out=$out");
    orac_print "Frames interleaved into $out\n";
    $Frm->files($out);
    $Frm->mergehdr;
  } else {
    
    # otherwise there's more than one subset of observations, and they have to be merged separately
  
    my @files = ();

    foreach my $i (1..$overoversamp) {
      # figure out which observations go with which subset
      my $makemosfiles = new ORAC::TempFile;
      foreach my $j (1..$nscanpos) {
	my $fileno = (( $i - 1 ) * $nscanpos) + $j; 
#	print $fileno . "\n";
#	print $blankname[$fileno] . "\n";
	print {$makemosfiles->handle} $blankname[$fileno] . "\n";
      }
      $makemosfiles->handle->close;
      
      # mosaic the images in subset $i
      my($in, $out) = $Frm->inout("_in",$i);
      my $makemos = $makemosfiles->file;
#      my $tmp = new ORAC::TempFile;
#      my $tmpname = $tmp->file;
      my $mosargs = "in=^" . $makemos . " method=mean genvar noscale nozero nousevar logto=neither logfile=!";
      $Mon{'ccdpack_reg'}->obeyw("makemos","$mosargs out=$out");
#      $Mon{'ndfpack_mon'}->obeyw("ndfcopy","in=$tmpname out=$out title=$out");
      push @files, $out;
    }
    # update the Frm object
    $Frm->files($Frm->file);
    my($in, $out) = $Frm->inout("_in");
    $Frm->files(@files);
    $Frm->mergehdr;
    orac_print "Frames interleaved into $out\n";
  }
}
