# DISPLAY DATA BY CHANNEL -*-cperl-*-


=head1 NAME

DISPLAY DATA BY CHANNEL - displays data by readout channel

=head1 DESCRIPTION

This primitive displays data by readout channel. Channel from one data
is isolated by masking out all other channels. 

Also generates some intelligently scaled histogram NDFs (displayed as "graphs").

Handles multiple integrations in HDS containers neatly - displays each integration in turn.


=head1 ORAC

=head2 Engines referenced

KAPPA

=head2 Tasks called

=over 4

=item kappa_mon

ardmask

=item ndfpack_mon

setbad

=back

=head2 Objects addressed

$Frm

=head2 Other files

$ORAC_DATA_CAL/channelN.ard where 1 <= N <= 4

=head1 NOTES

Currently uses MICHELLE ARD files to define channels for display. As the
MICHELLE array is larger than the CGS4 array, these ARD files define columns
that do not exist on the CGS4 array. This is currently not a problem with
the 'ardmask' task, but if it is changed in the future, these ARD files 
will also need to be changed.

Also generates histograms manually, to allow us to auto-range cleverly
and then set the range the same for all the 4 channels to allow easy
comparison.

=head2 REVISION

$Id$

=head1 AUTHOR

p.hirst@jach.hawaii.edu

Loosely based on the original by frossie@jach.hawaii.edu

=head1 COPYRIGHT

Copyright (C) 1998-2001 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# How about an array of frame objects to store the individual channels.
   my @Frms;
   my $param;

# For each integration $i
    foreach my $i ( 1..$Frm->nfiles ) {

# Display the raw data in GAIA.
# =============================

# $Display->display_data($Frm, { TYPE=>'image', TOOL => 'GAIA', WINDOW=>'0' }) if (defined $Display);

# Attempt to display just that integration frame in a GAIA window.
# This works, but GAIA pops up a (broken) HDS NDF selector window.
       my $TmpFrm = new $Frm;
       $TmpFrm->file( $Frm->file( $i ) );
       $Display->display_data( $TmpFrm, { TYPE=>'image', TOOL => 'GAIA', WINDOW=>'0' } ) if ( defined $Display );

# Obtain the gain and format to two decimal places for reporting.
       my $gain = $Frm->uhdr( "ORAC_GAIN" );
       my $gains = sprintf "%.2f", $gain;

       orac_print "Integration $i Gain is $gains electrons per Data Number\n";
       orac_print "Note - the values in the histogram are in Data Numbers\n" .
                  "       the values in the titles are in electrons\n";

# Generate split into channels and generate statistics
# ====================================================

# For each channel within that integration.
       foreach my $c ( 1..4 ) {

# Generate the input and output filenames
          my ( $in, $out ) = $Frm->inout( "_c$c", $i );

# Split into _cN files, masking the other channels with an ARD file.
          my $ardfile = $Cal->find_file("channel$c.ard");
          $param = "in=$in out=$out ardfile=$ardfile title='Channel $c'";
          $Mon{'kappa_mon'}->obeyw( "ardmask","$param" );

# File into the Frms array
          $Frms[ $c ] = new $Frm;
          $Frms[ $c ]->file( $i, $out );

# Display the channel according to disp.dat.
# ==========================================

# With a hack to only pass one .iN to the display system.
          my $TmpFrm = new $Frm;
          $TmpFrm->file( $Frms[$c]->file( $i ) );
          $Display->display_data( $TmpFrm ) if ( defined $Display );

# Derive channel statistics.
# ==========================

# Calculate the mean and standard deviation for the frame.
          $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$out" );
          my ( $ORAC_STATUS, $mean, $sigma );
          ( $ORAC_STATUS, $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
          ( $ORAC_STATUS, $sigma ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );

# File the statisitcs in the inernal headers of that frame.
          $Frms[ $c ]->uhdr( "CH_MEAN", $mean );
          $Frms[ $c ]->uhdr( "CH_SIGMA", $sigma );
       }

# Now calculate the parameters to use for the histogram generation, i.e
# the average of the means and the largest standard deviation.  The
# reason is to have the same scaling on all four histograms for easy
# comparison.
       my $meanmean = 0;
       my $maxsigma = 0;
       foreach my $c ( 1..4 ) {
          $meanmean += $Frms[ $c ]->uhdr( "CH_MEAN" );
          $maxsigma = $Frms[ $c ]->uhdr( "CH_SIGMA" ) > $maxsigma ? $Frms[ $c ]->uhdr( "CH_SIGMA" ) : $maxsigma;
       }
       $meanmean /= 4;

# Plot from the mean, two sigma out in each direction, quantised to a
# multiple of four (see note below about A/D quantisation).
       my $tsigma = $maxsigma * 2;
       my $pmin = 4 * int ( ( $meanmean - $tsigma ) / 4 );
       my $pmax = 4 * int ( ( $meanmean + $tsigma ) / 4 );
       my $span = $pmax - $pmin;

# Variable ncols is span/4 because the data are quantised in multiples of
# four.  It seems the last 2 bits of the A/D conversion get thrown away at
# some point.
       my $ncols = $span / 4;

# Print the statistics after converting to electrons, and generate and
# display the histogram files.
       foreach my $c ( 1..4 ) {

          my $mean = $Frms[ $c ]->uhdr( "CH_MEAN" ) / $gain;
          my $sigma = $Frms[ $c ]->uhdr( "CH_SIGMA" ) / sqrt( $gain );
  
          my $means = sprintf "%.2f", $mean;
          my $sigmas = sprintf "%.2f", $sigma;
  
          orac_print "Integration $i Channel $c: Mean=$means; Sigma=$sigmas electrons\n";
  
# At this point, a kludge to ensure the $Frms->out points to an HDS
# (multi-NDF) container file, if necessary.
          if ( $i == 1 && $Frm->nfiles > 1 ) {
             $Frms[ $c ]->file( 2, "dummy" );
          }

# Form histogram and set other NDF attributes.
# ============================================

# Set the frame title (for plotting).
          my ( $in, $out ) = $Frms[ $c ]->inout( "_ch$c", $i );
          $param = "title='Channel $c Mean=$means Sigma=$sigmas e-'";
          $Mon{'ndfpack_mon'}->obeyw( "settitle", "ndf=$in $param" );

# Create the histogram and store it.
          $param = "in=$in out=$out device=! numbin=$ncols range='$pmin,$pmax'"; 
          $Mon{'kappa_mon'}->obeyw( "histogram", "$param accept");

# Set the title for the histogram.
          $param = "title='Channel $c Mean=$means Sigma=$sigmas e-'";
          $Mon{'ndfpack_mon'}->obeyw( "settitle", "ndf=$out $param" );

# Set the axis label for the (1-d) histogram.
          $param = "dim=1 label='Data value in $out'";
          $Mon{'ndfpack_mon'}->obeyw( "axlabel", "ndf=$out $param");
 
# Update the Frms[] object to point to the histogram NDF.
          $Frms[ $c ]->file( $i, $out );

# Display the histogram for the current channel
# =============================================

# With a hack to only pass one .iN to the display system.
          my $TmpFrm = new $Frm;
          $TmpFrm->file( $Frms[ $c ]->file( $i ) );
          $Display->display_data( $TmpFrm ) if ( defined $Display );

       };
  
    };
