#+
# Name:
#    _NORMALISE_TO_MODE_
#
# Purpose:
#    Normalises a frame to the mode of a reference frame.
#
# Language:
#    Perl5
#
# Description:
#    This primitive makes a multiplicative normalisation to the current
#    frame so as the mode of the current frame matches that of a
#    reference frame.  It reports a successful normalisation, the
#    frames concerned, and the value of the normalisation factor.
#
#    When the steering header REFERENCE_FRAME is true, the primitive
#    stores the mode into internal header REFERENCE_LEVEL, and reports
#    the frame and mode.
#
# Notes:
#    -  This primitive is suitable for infrared imaging.
#    -  Processing only occurs for object and sky frames.
#    -  Only a warning is given if the reference mode could not be
#    accessed, and a unit normalisation is made.
#    -  The normalised image can be displayed.
#    -  The frame title is propagated.
#
# Output Data:
#    -  A normalised frame inheriting its corresponding input frame's name
#    but with the _nm suffix.
#
# Tasks:
#    KAPPA: CMULT.
#
# Deficiencies:
#    The reference level is accessed through variable
#    $_NORMALISE_TO_MODE_refmode, created in _FLAT_FIELD_QUADRANT_JITTER.
#    This is clunky.  Some means like saving a reference to the
#    reference frame, and accessing the mode stored in the frame's
#    header surely must be cleaner.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Test whether or not this is an object frame.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Find the clipped mean (effectively the mode) for the frame.
       _CLIPPED_STATS_
       my $mode = $_CLIPPED_STATS_{MEAN};

# Format to a sensible number of decimal places for output.
       my $fs_mode = sprintf( "%.3f", $mode );

# Generate the input and output filenames.
       ( my $in, my $out ) = $Frm->inout( "_nm" );

# Determine whether or not this is the first frame, and hence whether or
# not a reference mode is needed.   We need a global variable to store
# this value, and the only one we have available for the first frame
# is the frame header.  There is no group header.
       my $refframe = $Frm->uhdr( "REFERENCE_FRAME" );
       my $norm_factor;
       if ( $refframe ) {
          $Frm->uhdr( "REFERENCE_LEVEL", $mode );
          orac_print "Mode for reference frame $in is $mode\n";
       }

# Define the reference mode for the reference frame.
       if ( $mode > 1.0E-7 ) {
          my $refmode;
          if ( $refframe ) {
             $refmode = $mode;

# Recall the reference level using a value derived from the reference
# frame in the first cycle.  We cannot obtain that from the Frm or
# Grp here because we may be processing a subsequent cycle not containing
# the reference frame.  So a semi-global value should be calculated
# at a level where the full group is accessible.  Here we test whether
# it is defined.

# Check that reference frame has been located.  If not fudge the
# reference level for now so the recipe completes, albeit with a poorer
# mosaic.
          } else {
             if ( defined $_NORMALISE_TO_MODE_refmode ) {
                $refmode = $_NORMALISE_TO_MODE_refmode;

             } else {
                orac_warn "There is no reference frame from which to obtain ".
                          "a reference level.  Assume a constant level.\n";
                $refmode = $mode;

             }
          }
        
# Evaluate the normalisation factor.
          $norm_factor = $refmode / $mode;

# Format to a sensible number of decimal places for output.
          my $fs_norm = sprintf( "%.6f", $norm_factor );
          orac_print "Mode for frame $in is $fs_mode\n";
          orac_print "Normalisation for frame $in is $fs_norm\n";

       } else {
          orac_throw "Unable to normalise frame $in.  Mode ($fs_mode) is too small.\n" .
                     "A possible cause is an aberrant dark.\n";
       }

# Normalise the current frame to the current reference frame.
       my $param1 = "in=$in out=$out scalar=$norm_factor title=\'Normalised to mode\'";
       $Mon{ "kappa_mon" }->obeyw( "cmult", "$param1" );

# Report the processing.
       orac_print "$in to $out: Data normalised\n\n";

# Record the new file name in the frame object.
       $Frm->file( $out );                      # obligatory update step

# Display the image.
       _DISPLAY_FRAME_IMAGE_

    }

# Podule
# ======

=head1 NAME

_NORMALISE_TO_MODE_ -- Normalises a frame to the mode of a reference frame.

=head1 DESCRIPTION

This primitive makes a multiplicative normalisation to the current
frame so as the mode of the current frame matches that of a
reference frame.  It reports a successful normalisation, the
frames concerned, and the value of the normalisation factor.

When the steering header REFERENCE_FRAME is true, the primitive stores
the mode into internal header REFERENCE_LEVEL, and reports the frame
and mode.

=head1 NOTES

=over 4

=item *

This primitive is suitable for infrared imaging.

=item *

Processing only occurs for object and sky frames.

=item *

Only a warning is given if the reference mode could not be
accessed, and a unit normalisation is made.

=item *

The normalised image can be displayed.

=item *

The frame title is propagated.

=back

=head1 OUTPUT DATA

=over 4

=item *

A normalised frame inheriting its corresponding input frame's name
but with the _nm suffix.

=back

=head1 TASKS

KAPPA: CMULT.

=head1 DEFICIENCIES

The reference level is accessed through variable
$_NORMALISE_TO_MODE_refmode, created in
L<_FLAT_FIELD_QUADRANT_JITTER_|_FLAT_FIELD_QUADRANT_JITTER_>.
This is clunky.  Some means, like saving a reference to the
reference frame and accessing the mode stored in the frame's
header, surely must be cleaner.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
