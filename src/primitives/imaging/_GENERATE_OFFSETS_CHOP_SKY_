#+
# Name:
#    _GENERATE_OFFSETS_CHOP_SKY_
#
# Purpose:
#    Finds the offsets between the frames in an CHOP_SKY_JITTER recipe.
#
# Description:
#    This primitive finds the pixel offsets between the target frames in
#    the current $Grp of a CHOP_SKY_JITTER recipe.  The primitive itself
#    forms a new temporary group to be registered.  For the first cycle
#    of the recipe all its target frames are passed.  On subsequent
#    cycles the mosaic is inserted into the group before the target
#    frames in the current cycle, so that there is a common registration
#    and that mosaics can be added.  The primitive then passes the new
#    group to primitive _GENERATE_OFFSETS_ to do the bulk of the work.
#
#    When argument TELEOFF is true, _TELE_OFFSETS_ is invoked and
#    the derived offsets are used to register with a shift of origin;
#    otherwise _GENERATE_OFFSETS_ is the work horse.
#
# Language:
#    Perl5
#
# Arguments:
#    COMPLETE = REAL (Given)
#       Completeness of matched features for registration between two 
#       frames to be accepted.  It must be in the range 0.2 to 1.0. [0.4]
#    MINPIX = INTEGER (Given)
#       Minimum number of contiguous pixels above the PERCENTILE level
#       to be considered a registration feature.  It must be at least 6.
#       The default here is for UFTI and the new IRCAM.  For the
#       original IRCAM3 without the magnifier, 6 proved to be 
#       satisfactory.  [9]
#    PERCENTILE = REAL (Given)
#       Percentile threshold for locating objects to register frames. 
#       It must be in the range 75 to 99.9.  The default here is for
#       UFTI and the new IRCAM.  For the original IRCAM3 without the
#       magnifier, 96 proved to be satisfactory.  [98]
#    TELEOFF = LOGICAL (Given)
#       If true (1), it will just use the telescope offsets to register.
#       If false (0), it will attempt automatic registration.  [0]
#
# Notes:
#    -  This primitive is suitable for UFTI, IRCAM, and Michelle 
#    in imaging mode.
#    -  Processing only occurs for object frames, and when the
#    steering header MAKE_MOSAIC is true.  The selected frames
#    are those in the current cycle whose steering header
#    TARGET_OR_SKY is "target".
#    -  The steering header CYCLE_NUMBER specifies the cycle number.
#    -  The _GENERATE_OFFSETS_ argument CENTRAL_SOURCE is FALSE.
#    Thus matching the centroids of a central source is not attempted
#    if automatic registration fails.
#
# Tasks:
#    CCDPACK: REGISTER; KAPPA: WCSFRAME.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2001 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Arguments
# =========

# Determine whether or not telescope offsets should only be used.
    my $usetele = $_GENERATE_OFFSETS_CHOP_SKY_{TELEOFF};
    $usetele = defined( $usetele ) ? $usetele : 0;

# Obtain the parameters for the detection.
    my ( $complete, $minpix, $percentile );
    if ( ! $usetele ) {
       $percentile = ( $_GENERATE_OFFSETS_CHOP_SKY_{PERCENTILE} || 98 );
       $minpix = ( $_GENERATE_OFFSETS_CHOP_SKY_{MINPIX} || 9 );
       $complete = ( $_GENERATE_OFFSETS_CHOP_SKY_{COMPLETE} || 0.4 );
    }

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY") {

# Test whether or not it is time to make a mosaic.
       my $makemos = $Frm->uhdr( "MAKE_MOSAIC" );
       if ( $makemos ) {

# Obtain the cycle number from the header.
          my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
          $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Select the target frame members in the current cycle.
          my $tarGrp = $Grp->subgrp( CYCLE_NUMBER => $cycleno,
                                     TARGET_OR_SKY => "target" );

# Form the group to process.
# ==========================

# For the first cycle of a single cycle mosaic, make a local $Grp
# containing just the current cycle.  Note the { to start a new context.
          my $tempGrp;
          if ( $cycleno == 0 ) {
             $tempGrp = $tarGrp;

# On later cycles a mosaic file should exist, and we shall to register
# with that as the reference frame.  So place the file into a temporary
# frame pushed onto a temporary $Grp-like group.  Then append the members
# of the subgroup.  
          } else {
             my $tempFrm = new $Frm( $Grp->file );
             $tempGrp = new $Grp;
             $tempGrp->push( $tempFrm );
             $tempGrp->push( $tarGrp->members );
          }

# Telescope offsets
# =================
          if ( $usetele ) {

# Make a local $Grp.
             my $Grp = $tempGrp;

# Form a list of input file names for CCDPACK tasks.
             my @objects = $Grp->membernames;

# Convert list to comma-separated list.
             my $objlist = join( ",", @objects );

# Create text file to hold the list of input files, one per line.  This
# is needed because expanded lists of files may make the command line too
# long for the ADAM message system.
             unlink( "objlist.inlist$$" );
             open( INLIST, ">objlist.inlist$$" );
             print INLIST join( "\n", @objects ), "\n";
             close( INLIST );

# Use telescope offsets from the headers.
             _TELE_OFFSETS_

# Set the co-ordinate system to pixels.
# =====================================

# This is needed because CCDPACK v3.0, which is in the same release
# as KAPPA v0.14-3 uses the WCS.  CCDPACK/REGISTER has a new USEWCS
# parameter which defaults to true, meaning convert the pixel
# co-ordinates in the .off files into the current co-ordinate system
# of each NDF.  We use pixel co-ordinates throughout.  By making the
# change here the REGISTER command line remains unchanged.
             my ( $param1, $param2 );
             if ( starversion_gt( "KAPPA", 'V0.13-6' ) ) {
                $param1 = "ndf='^objlist.inlist$$' frame=pixel";
                $Mon{"ndfpack_mon"}->obeyw("wcsframe", "$param1");
             }

# Register
# ========

# Specify the other parameters for the REGISTER stage.
             $param1 = "inlist='^objlist.inlist$$'";
             $param2 = "fittype=1";

# Register the frames using a shift of origin.  Create the CCDPACK
# TRANSFORM extensions.
             $Mon{"ccdpack_reg"}->obeyw("register","$param1 $param2 accept");
             unlink( "objlist.inlist$$" );

# Report processing status.
             orac_print "Frames $objlist registered\n";

# Attempt automatic registration
# ==============================
          } else {

# Generate the offsets
# ====================

# Make a local $Grp.
             my $Grp = $tempGrp;

# Call the generic primitive which does most of the work.  Do not use central
# source as a backup.  Use the reference mosaic's co-ordinate system so ensure
# that central-source offsets are with respect to that, if the 
# CENTRAL_SOURCE flag is switched.
             _GENERATE_OFFSETS_ PERCENTILE=$percentile MINPIX=$minpix COMPLETE=$complete CENTRAL_SOURCE=FALSE

# End of scope of local $Grp aka $tempGrp.
          }
       }
    }

# Podule
# ======

=head1 NAME

_GENERATE_OFFSETS_CHOP_SKY_ -- Finds the offsets between the frames in a CHOP_SKY_JITTER recipe.

=head1 DESCRIPTION

This primitive finds the pixel offsets between the target frames in
the current $Grp of a CHOP_SKY_JITTER recipe.  The primitive itself
new temporary group to be registered.  For the first cycle of the
recipe all its target frames are passed.  On subsequent cycles the
mosaic is inserted into the group before the target frames in the
current cycle, so that there is a common registration and that mosaics
can be added.  The primitive then passes the new group to primitive
L<_GENERATE_OFFSETS_|_GENERATE_OFFSETS_> to do the bulk of the work.

When argument TELEOFF is true, L<_TELE_OFFSETS_|_TELE_OFFSETS_> is
invoked and the derived offsets are used to register with a shift of
origin; otherwise L<_GENERATE_OFFSETS_|_GENERATE_OFFSETS_> is the work
horse.

=head1 ARGUMENTS

=over 4

=item COMPLETE = REAL (Given)

Completeness of matched features for registration between two 
frames to be accepted.  It must be in the range 0.2 to 1.0. [0.4]

=item MINPIX = INTEGER (Given)

Minimum number of contiguous pixels above the PERCENTILE level
to be considered a registration feature.  It must be at least 6.
The default here is for UFTI and the new IRCAM.  For the
original IRCAM3 without the magnifier, 6 proved to be 
satisfactory.  [9]

=item PERCENTILE = REAL (Given)

Percentile threshold for locating objects to register frames. 
It must be in the range 75 to 99.9.  The default here is for
UFTI and the new IRCAM.  For the original IRCAM3 without the
magnifier, 96 proved to be satisfactory.  [98]

=item TELEOFF = LOGICAL (Given)

If true (1), it will just use the telescope offsets to register.
If false (0), it will attempt automatic registration.  [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UFTI, IRCAM, and Michelle in imaging mode.

=item *

Processing only occurs for object frames, and when the
steering header MAKE_MOSAIC is true.  The selected frames
are those in the current cycle whose steering header
TARGET_OR_SKY is "target".

=item *

The steering header CYCLE_NUMBER specifies the cycle number.

=item *

The _GENERATE_OFFSETS_ argument CENTRAL_SOURCE is FALSE.
Thus matching the centroids of a central source is not attempted
if automatic registration fails.

=back

=head1 TASKS

CCDPACK: REGISTER, KAPPA: WCSFRAME.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2001 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
