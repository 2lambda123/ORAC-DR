# -*-perl-*-

=head1 NAME

_FILE_BAD_PIXELS_

=head1 DESCRIPTION

Files an image as a bad pixel mask.

This primitive uses the CGS4 standard for bad pixel masks - good values
are set as zero, and bad values are set as bad.

=head1 PARAMETERS

=over 4

=item FILE = STRING

The file to file as the bad pixel mask. If this parameter is left blank,
then the current $Frm object will be used. []

=item FRESH_BPM = LOGICAL

Whether or not to create a fresh bad pixel mask. [0]

=head1 AUTHORS 

Paul Hirst <p.hirst@jach.hawaii.edu>
Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# If we get passed a FILE argument, we use it, otherwise we use $Frm.
my ($in, $out) = $Frm->inout("_bad");
my $ndf = ( $_FILE_BAD_PIXELS_{FILE} || undef );
if (!defined $ndf) {
   $ndf = $in;
}

my $fresh = $_FILE_BAD_PIXELS_{FRESH_BPM} || 0;

# Stuff this into a temporary frame object.
my $tFrm = new $Frm;
$tFrm->file($ndf);

# Bring in the default mask from the calibration directory. Note
# that this is not the currently-filed mask.
my $bpm = $Cal->find_file("bpm.sdf");
$bpm =~ s/\.sdf$//;
$Mon{'kappa_mon'}->obeyw("add", "in1=$ndf in2=$bpm out=$out title=$out");
orac_print ("$ndf to $out: Accumulated bad pixels from default mask.\n");
$tFrm->file($out);

# Determine if we're to start the BPM from scratch.
if ( ! $fresh ) {

   ($in, $out) = $tFrm->inout("_bpc");

   # Pull in the bad pixels from the filed mask - so this becomes cumulative.
   my $mask = $Cal->mask;
   $Mon{'kappa_mon'}->obeyw("add", "in1=$in in2=$mask out=$out title=$out");
   orac_print ("$in to $out: Accumulated bad pixels from $mask\n");
   $tFrm->file($out);

} else {

   orac_print ("Starting new bad pixel mask.\n");

}

# Make it into a conventional UIST bpm - 0s everywhere good bad values elewhere.

($in, $out) = $tFrm->inout("_bpm");
$Mon{'kappa_mon'}->obeyw("thresh", "in=$in newlo=0 newhi=0 out=$out title=$out thrhi=0 thrlo=0");
$Mon{'ndfpack_mon'}->obeyw("setbad", "ndf=$out value=true");
orac_print "$in to $out: To UIST bad pixel mask format\n";
$tFrm->file($out);

# Store as the current bad pixel mask.
my $number = $Frm->uhdr("ORAC_OBSERVATION_NUMBER");
my $bpm = "bpm_$number";
$Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$out out=$bpm");
$tFrm->file($bpm);
$tFrm->readhdr;

$Cal->mask($bpm);
orac_print "$out to $bpm: copied and filed as the current bad pixel mask.\n";

# Add to index file
$Cal->maskindex->add($tFrm->file, $tFrm->hdr );
orac_print "$bpm added to mask index file.\n\n";
