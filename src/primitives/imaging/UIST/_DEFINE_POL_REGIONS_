#+
# Name:
#    _DEFINE_POL_REGIONS_
#
# Purpose:
#    Determine the extents of object and sky regions of an UIST polarimetry frame.
#
# Language:
#    Perl5

# Description:
#    A polarimetry frame is divided into four sections: object and sky
#    for the e- and o-beams.  This primitive returns the extents of these
#    regions for subsequent extraction and sky subtraction.  The frames
#    are deemed to be aligned approximately with right ascension and
#    declination and the jittering is along the declination axis.
#    Also the order of the regions from east to west is e target,
#    o target, e sky, and o sky for the full array.  For the sub-array
#    there are only two regions e target and o target in the same
#    direction; for each of these the sky is extracted from a region
#    away from the source.
#
#    At present fixed limits are used, but sigma-clipped profiling is
#    possible to determine where each region starts and ends along the
#    right-ascension axis.
#
#    The current target limits are 30% to 70% of the frame width about
#    the jittered declination centre using the telescope offsets, or
#    10% to 90% if argument EXTENDED is true.  Thus the limits define a
#    section 40% or 80% of the declination width of the frame
#    roughly centred on the source.  The restriction is to make mosaics
#    with few pixels not derived from all contributing jittered frames,
#    since there are usually only three jitter positions, and to allow
#    a reasonable jitter step.  If the jitter size was restricted, the
#    limits could be expanded for extended sources.
#
#    The current sky limits are 1% to 99% of the frame width along the
#    declination axis for the full array.  For the sub-array these are
#    either 5% to 25% or 75% to 95% depending on the offset of the
#    source.
#
# Arguments:
#    ESBOUNDS( 4 ) = INTEGER (Returned)
#       The pixel bounds defining the e-beam sky region in a raw
#       polarisation frame.
#    ETBOUNDS( 4 ) = INTEGER (Returned)
#       The pixel bounds defining the e-beam target region in a raw
#       polarisation frame.
#    EXTENDED = LOGICAL (Given)
#       If true (1), wider declination limits are used for the
#       target regions, 10% to 90%, instead of 30% to 70%. [0]
#    OSBOUNDS( 4 ) = INTEGER (Returned)
#       The pixel bounds defining the o-beam sky region in a raw
#       polarisation frame.
#    OTBOUNDS( 4 ) = INTEGER (Returned)
#       The pixel bounds defining the o-beam target region in a raw
#       polarisation frame.
#
# Notes:
#    -  This primitive is suitable for UIST.
#    -  It only operates on object frames.
#    -  Fractional pixel limits are rounded to the next lower integer.
#    -  The right-ascension pixel limits for the sections when using the
#    full array are as follows.
#    o sky: 682--828; e sky: 528--674; o target: 293--460; e target: 
#    120--287.
#    -  The right-ascension pixel limits for the sections when using the
#    sub-array are as follows.
#    e target, sky: 123--230; o target, sky: 282--399.
#    -  This primitive decides if it is using the sub-array by looking
#    at the size of the array in the x-dimension.  If this value is larger
#    than 1000, then the full array is assumed.  Otherwise, the sub-array
#    is assumed.
#
# Tasks:
#    KAPPA: NDFTRACE.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#    BC: Brad Cavanagh (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ) {

      # Get the date. The polarimetry regions changed on 20070511.
      my $ut = $Frm->uhdr( "ORAC_UTDATE" );
      if( defined( $ut ) ) {
        $ut =~ s/-//g;
      } else {
        orac_warn "UT date not set in header. Polarimetry regions may be incorrect.\n";
        $ut = 0;
      }

# Find the width limits in right ascension of the target regions.
       my $extended = $_DEFINE_POL_REGIONS_{EXTENDED};
       $extended = defined( $extended ) ? $extended: 0;

# Find out if we have the coronographic mask in place.
       my $coronographic = $Frm->uhdr( "CORONOGRAPHIC_MASK" );

       my ( $dec_frac_l, $dec_frac_u );
       if ( $extended ) {
          $dec_frac_l = 0.10; $dec_frac_u = 0.90;
       } elsif( $coronographic ) {
          $dec_frac_l = 0.05; $dec_frac_u = 0.95;
       } else {
          $dec_frac_l = 0.30; $dec_frac_u = 0.70;
       }

# Obtain the rotation angle in degrees.
       my $rotangle = $Frm->uhdr( "ORAC_ROTATION" );
       $rotangle = defined( $rotangle ) ? $rotangle : 0.0;

# Find the offsets in pixels.
       _GET_CARTESIAN_TELESCOPE_OFFSETS_
       my $xoffset = $_GET_CARTESIAN_TELESCOPE_OFFSETS_{XOFF};
       my $yoffset = $_GET_CARTESIAN_TELESCOPE_OFFSETS_{YOFF};

# Obtain the midpoint of a band.
# ==============================

# Obtain the frame dimensions by tracing the NDF.
       my $param1 = "ndf=".$Frm->file;
       my $ORAC_STATUS;
       $Mon{"ndfpack_mon"}->obeyw("ndftrace", "$param1");

# Extract the bounds of the frame.
       ( $ORAC_STATUS, my @lbnd ) = $Mon{"ndfpack_mon"}->get( "ndftrace", "lbound" );
       ( $ORAC_STATUS, my @ubnd ) = $Mon{"ndfpack_mon"}->get( "ndftrace", "ubound" );

# Obtain the dimensions.
       my $xdim = $ubnd[ 0 ] - $lbnd[ 0 ] + 1;
       my $ydim = $ubnd[ 1 ] - $lbnd[ 1 ] + 1;

# Determine if we're using the sub-array.
      my $subarray = 0;
      if ( $xdim < 1000 ) {
        $subarray = 1;
      }

# Find the offset in declination as a fraction of frame width (along
# axis closely aligned to the declination).  Here we assume that 
# rotation is either near 0 or +/-90 degrees.  In practice this
# probably doesn't matter unless a non-square chip is introduced.
       my $dec_off_f;
       if ( abs( $rotangle ) > 45 ) {
          $dec_off_f = $xoffset / $xdim;
       } else {
          $dec_off_f = $yoffset / $ydim;
       }

# Define fractional limits.
# =========================

# Set the limits of the e- and o-beam target and sky as percentages
# of the image, along the axis perpendicular to the bands
# (right-ascension direction).  The offsets are by convention only
# in right ascension.
        my ( @et_lbnd_f, @et_ubnd_f, @ot_lbnd_f, @ot_ubnd_f );
        my ( @es_lbnd_f, @es_ubnd_f, @os_lbnd_f, @os_ubnd_f );
        if ( $subarray ) {
           @et_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.450 );
           @et_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.240 );
           @ot_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.780 );
           @ot_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.570 );

# We need to define different sky regions depending on the offset,
# since we want to be as far from the source as possible.
           if ( $dec_off_f < 0 ) {
              @es_lbnd_f = ( 0.05, 0.450 );
              @es_ubnd_f = ( 0.25, 0.240 );
              @os_lbnd_f = ( 0.05, 0.780 );
              @os_ubnd_f = ( 0.25, 0.570 );
           } else {
              @es_lbnd_f = ( 0.75, 0.450 );
              @es_ubnd_f = ( 0.95, 0.240 );
              @os_lbnd_f = ( 0.75, 0.780 );
              @os_ubnd_f = ( 0.95, 0.570 );
            }
        } else {

# We're using the full array.
          if( $coronographic ) {

            if( $ut > 20080620 ) {
              @ot_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.662 );
              @ot_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.820 );
              @et_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.500 );
              @et_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.658 );
              @os_lbnd_f = ( 0.225, 0.120 );
              @os_ubnd_f = ( 0.380, 0.270 );
              @es_lbnd_f = ( 0.225, 0.280 );
              @es_ubnd_f = ( 0.380, 0.432 );
            } elsif( $ut > 20070511 ) {
              @ot_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.703 );
              @ot_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.859 );
              @et_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.541 );
              @et_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.699 );
              @os_lbnd_f = ( 0.225, 0.683 );
              @os_ubnd_f = ( 0.380, 0.846 );
              @es_lbnd_f = ( 0.225, 0.519 );
              @es_ubnd_f = ( 0.380, 0.683 );
            } else {
              @ot_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.668 );
              @ot_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.824 );
              @et_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.508 );
              @et_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.658 );
              @os_lbnd_f = ( 0.225, 0.298 );
              @os_ubnd_f = ( 0.380, 0.462 );
              @es_lbnd_f = ( 0.225, 0.462 );
              @es_ubnd_f = ( 0.380, 0.627 );
            }
          } else {
            if( $ut > 20070511 ) {
              @et_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.137 );
              @et_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.297 );
              @ot_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.297 );
              @ot_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.459 );
              @es_lbnd_f = ( 0.01, 0.517 );
              @es_ubnd_f = ( 0.99, 0.678 );
              @os_lbnd_f = ( 0.01, 0.678 );
              @os_ubnd_f = ( 0.99, 0.840 );
            } else {
              @et_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.280 );
              @et_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.137 );
              @ot_lbnd_f = ( $dec_frac_l + $dec_off_f, 0.430 );
              @ot_ubnd_f = ( $dec_frac_u + $dec_off_f, 0.287 );
              @es_lbnd_f = ( 0.01, 0.659 );
              @es_ubnd_f = ( 0.99, 0.809 );
              @os_lbnd_f = ( 0.01, 0.516 );
              @os_ubnd_f = ( 0.99, 0.666 );
            }
          }
        }

# Allow for positive right-angle rotation, i.e. where the declination axis
# corresponds to the negative x axis.  To get the same pixel, as we
# round down, add a half pixel more than 1 in addition to normal one
# pixel extra to subtract from.  Switch the bounds so that the upper is
# greater than the lower.
       if ( $rotangle < 45 ) {
          my $flips = 1.0 + 1.5 / $ydim;
          $et_lbnd_f[ 0 ] = $flips - $et_lbnd_f[ 0 ];
          $et_ubnd_f[ 0 ] = $flips - $et_ubnd_f[ 0 ];
          $ot_lbnd_f[ 0 ] = $flips - $ot_lbnd_f[ 0 ];
          $ot_ubnd_f[ 0 ] = $flips - $ot_ubnd_f[ 0 ];
          $es_lbnd_f[ 0 ] = $flips - $es_lbnd_f[ 0 ];
          $es_ubnd_f[ 0 ] = $flips - $es_ubnd_f[ 0 ];
          $os_lbnd_f[ 0 ] = $flips - $os_lbnd_f[ 0 ];
          $os_ubnd_f[ 0 ] = $flips - $os_ubnd_f[ 0 ];
       }

# Finally ensure the lower bound is is indeed lower than the upper.
# e-beam, target
       my ( $et_x_l, $et_x_u, $et_y_l, $et_y_u );
       $et_x_l = int( min( $et_lbnd_f[ 0 ], $et_ubnd_f[ 0 ] ) * $xdim );
       $et_x_u = int( max( $et_lbnd_f[ 0 ], $et_ubnd_f[ 0 ] ) * $xdim );
       $et_y_l = int( min( $et_lbnd_f[ 1 ], $et_ubnd_f[ 1 ] ) * $ydim );
       $et_y_u = int( max( $et_lbnd_f[ 1 ], $et_ubnd_f[ 1 ] ) * $ydim );

# o-beam, target
       my ( $ot_x_l, $ot_x_u, $ot_y_l, $ot_y_u );
       $ot_x_l = int( min( $ot_lbnd_f[ 0 ], $ot_ubnd_f[ 0 ] ) * $xdim );
       $ot_x_u = int( max( $ot_lbnd_f[ 0 ], $ot_ubnd_f[ 0 ] ) * $xdim );
       $ot_y_l = int( min( $ot_lbnd_f[ 1 ], $ot_ubnd_f[ 1 ] ) * $ydim );
       $ot_y_u = int( max( $ot_lbnd_f[ 1 ], $ot_ubnd_f[ 1 ] ) * $ydim );

# e-beam, sky
       my ( $es_x_l, $es_x_u, $es_y_l, $es_y_u );
       $es_x_l = int( min( $es_lbnd_f[ 0 ], $es_ubnd_f[ 0 ] ) * $xdim );
       $es_x_u = int( max( $es_lbnd_f[ 0 ], $es_ubnd_f[ 0 ] ) * $xdim );
       $es_y_l = int( min( $es_lbnd_f[ 1 ], $es_ubnd_f[ 1 ] ) * $ydim );
       $es_y_u = int( max( $es_lbnd_f[ 1 ], $es_ubnd_f[ 1 ] ) * $ydim );

# o-beam, sky
       my ( $os_x_l, $os_x_u, $os_y_l, $os_y_u );
       $os_x_l = int( min( $os_lbnd_f[ 0 ], $os_ubnd_f[ 0 ] ) * $xdim );
       $os_x_u = int( max( $os_lbnd_f[ 0 ], $os_ubnd_f[ 0 ] ) * $xdim );
       $os_y_l = int( min( $os_lbnd_f[ 1 ], $os_ubnd_f[ 1 ] ) * $ydim );
       $os_y_u = int( max( $os_lbnd_f[ 1 ], $os_ubnd_f[ 1 ] ) * $ydim );

# Calculate and store the e-target bounds.
# ========================================
       my ( @etbounds, @otbounds, @esbounds, @osbounds );

       @etbounds = ( $et_x_l, $et_x_u, $et_y_l, $et_y_u );
       $_DEFINE_POL_REGIONS_{ETBOUNDS} = \@etbounds;

       @otbounds = ( $ot_x_l, $ot_x_u, $ot_y_l, $ot_y_u );
       $_DEFINE_POL_REGIONS_{OTBOUNDS} = \@otbounds;

       @esbounds = ( $es_x_l, $es_x_u, $es_y_l, $es_y_u );
       $_DEFINE_POL_REGIONS_{ESBOUNDS} = \@esbounds;

       @osbounds = ( $os_x_l, $os_x_u, $os_y_l, $os_y_u );
       $_DEFINE_POL_REGIONS_{OSBOUNDS} = \@osbounds;

    }

# Podule
# ======

=head1 NAME

_DEFINE_POL_REGIONS_ -- Determine the extents of object and sky regions of an UIST polarimetry frame.

=head1 DESCRIPTION

A polarimetry frame is divided into four sections: object and sky for
the I<e>- and I<o>-beams.  This primitive returns the extents of these
regions for subsequent extraction and sky subtraction.  The frames are
deemed to be aligned approximately with right ascension and
declination and the jittering is along the declination axis. Also the
order of the regions from east to west is I<e> target, I<o> target,
I<e> sky, and I<o> sky for the full array.  For the sub-array there
are only two regions I<e> target and I<o> target in the same
direction; for each of these the sky is extracted from a region away
from the source.

At present fixed limits are used, but sigma-clipped profiling is
possible to determine where each region starts and ends along the
right-ascension axis.

The current target limits are 30% to 70% of the frame width about
the jittered declination centre using the telescope offsets, or
10% to 90% if argument EXTENDED is true.  Thus the limits define a
section 40% or 80% of the declination width of the frame
roughly centred on the source.  The restriction is to make mosaics
with few pixels not derived from all contributing jittered frames,
since there are usually only three jitter positions, and to allow
a reasonable jitter step.  If the jitter size was restricted, the
limits could be expanded for extended sources.

The current sky limits are 1% to 99% of the frame width along the
declination axis for the full array.  For the sub-array these are
either 5% to 25% or 75% to 95% depending on the offset of the
source.

=head1 ARGUMENTS

=over 4

=item ESBOUNDS( 4 ) = INTEGER (Returned)

The pixel bounds defining the e-beam sky region in a raw
polarisation frame.

=item ETBOUNDS( 4 ) = INTEGER (Returned)

The pixel bounds defining the e-beam target region in a raw
polarisation frame.

=item OSBOUNDS( 4 ) = INTEGER (Returned)

The pixel bounds defining the o-beam sky region in a raw
polarisation frame.

=item OTBOUNDS( 4 ) = INTEGER (Returned)

The pixel bounds defining the o-beam target region in a raw
polarisation frame.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UIST.

=item *

It only operates on object frames.

=item *

Fractional pixel limits are rounded to the next lower integer.

=item *

The right-ascension pixel limits for the sections are as follows.
I<o> sky: 682--828; I<e> sky: 528--674; I<o> target: 293--460; I<e> target: 
120--287.

=item *

The right-ascension pixel limits for the sections when using the
sub-array are as follows.
I<e> target, sky: 123--230; I<o> target, sky: 282--399.

=item *

This primitive decides if it is using the sub-array by looking
at the size of the array in the I<x>-dimension.  If this value is larger
than 1000, then the full array is assumed.  Otherwise, the sub-array
is assumed.

=back

=head1 TASKS

KAPPA: NDFTRACE.

=head1 AUTHORS

Malcolm J. Currie (JAC, Starlink) <mjc@star.rl.ac.uk>
Brad Cavanagh (JAC) <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
