#+
# Name:
#    _CREATE_RAW_FRAME_
#
# Purpose:
#    Creates a raw frame in ORAC_DATA_OUT.
#
# Language:
#    Perl5
#
# Description:
#    This primitive copies the raw data frame into ORAC_DATA_OUT where
#    it may be edited.  It copies the raw data integrations; and if
#    there's only one integration, it merges the integration and
#    the headers into a simple NDF. 
#
# Notes:
#    -  This primitive is suitable for UIST in imaging mode.
#    -  Errors are issued if there are not two integrations per chop,
#    or only one integration when not in chopping mode.
#    -  The user header ORAC_DETECTOR_READ_TYPE being "CHOP" or NDCHOP"
#    indicates chopped data.
#    -  There is a temporary kludge for polarimetry to flip the RA scale
#    keyword (CDELT2) in the file and Frame header, and for the Frame
#    ORAC_RA_SCALE internal header.  CRPIX2 is reset to 1024 minus its
#    supplied value.  When POLPACK handles reversed co-ordinates, these
#    fixes can be removed.
#
# Output Data:
#    -  Copied frame inheriting the current frame's name but with 
#    the _raw suffix.
#
# Tasks:
#    KAPPA: NDFCOPY.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Are the data chopped?
    my $chop = $Frm->uhdr( "ORAC_DETECTOR_READ_TYPE" ) eq "CHOP" ||
               $Frm->uhdr( "ORAC_DETECTOR_READ_TYPE" ) eq "NDCHOP";
    my ( $in, $ out );

# Are these polarisation data?
    my $poldata = $Frm->hdr( "POLARISE" );

    my $scale = -$Frm->hdr( "CDELT2" );
    my $ra_refpix = ( $Frm->hdr( "DROWS" ) || 1024.0 ) - $Frm->hdr( "CRPIX2" );

# Single non-chopped integration
# ==============================
    if ( $Frm->nfiles == 1 && ! $chop ) {

# Generate list of input and output filenames.
       ( $in, $out ) = $Frm->inout( "_raw" );

# Flip the second axis so that N is to the left and E is down.  This is
# a temporary kludge until POLPACK can deal with reversed sky
# co-ordinate systems.
       if ( $poldata ) {
          $Mon{ "kappa_mon" }->obeyw( "flip", "in=$in out=$out dim=2" );

# The sign of the WCS along the right-ascension axis must also be
# flipped, as well as the reference pixel.
          $Frm->hdr( "CDELT2", $scale );
          $Frm->uhdr( "ORAC_RA_SCALE", -$Frm->uhdr( "ORAC_RA_SCALE" ) );
          $Frm->hdr( "CRPIX2", $ra_refpix );

# Report the processing status.
          orac_print "$in to $out: Flipped the right-ascension axis.\n";

       } else {

# Copy the single integration to an _raw output frame, which may be
# manipulated.
          $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "in=$in out=$out" );

# Report the processing status.
          orac_print "$in to $out: Copied NDF component.\n";
       }

# Update the output filename in the Frame object.  Merge the headers.
       $Frm->files( $out );
       $Frm->mergehdr;

# The sign of the WCS along the right-ascension axis must also be
# flipped in the actual file.
       if ( $poldata ) {
          my $param = "edit=update keyword=CDELT2 value=$scale mode=interface position=!";
          $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "ndf=$out comment=\\\$C $param" );
          $param = "edit=update keyword=CRPIX2 value=$ra_refpix mode=interface position=!";
          $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "ndf=$out comment=\\\$C $param" );
       }

# Chopped
# =======

# For chopped data there must be two integrations, both of which must
# be copied.
    } elsif ( $chop && $Frm->nfiles == 2 ) {
       foreach my $i ( 1 .. $Frm->nfiles ) {

# Copy the raw data to an _raw output frame, which may be manipulated.
          ( $in, $out ) = $Frm->inout( "_raw", $i );

# Flip the second axis so that N is to the left and E is down.  This is
# a temporary kludge until POLPACK can deal with reversed sky
# co-ordinate systems.
          if ( $poldata ) {
             $Mon{ "kappa_mon" }->obeyw( "flip", "in=$in out=$out dim=2" );

# The sign of the WCS along the right-ascension axis must also be
# flipped, as well as the reference pixel.
             $Frm->hdr( "CDELT2", $scale );
             $Frm->uhdr( "ORAC_RA_SCALE", -$Frm->uhdr( "ORAC_RA_SCALE" ) );
             $Frm->hdr( "CRPIX2", $ra_refpix );
          
# Report the processing status.
             orac_print "$in to $out: Flipped the right-ascension axis.\n";

          } else {

# Copy the single integration to an _raw output frame, which may be
# manipulated.
             $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "in=$in out=$out" );

# Report the processing status.
             orac_print "$in to $out: Copied NDF component.\n";
          }

# Update the Frame object.
          $Frm->file( $i, $out );
       }

# The sign of the WCS along the right-ascension axis must also be
# flipped in the actual file.  At this stage the headers are not merged,
# therefore apply sign change to the keyword in the .HEADER NDF.
       if ( $poldata ) {
          my $header_file = $Frm->raw . ".HEADER";
          my $param = "edit=update keyword=CDELT2 value=$scale mode=interface position=!";
          $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "ndf=$header_file comment=\\\$C $param" );
          $param = "edit=update keyword=CRPIX2 value=$ra_refpix mode=interface position=!";
          $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "ndf=$header_file comment=\\\$C $param" );
       }

# Abort if more integrations are present.
    } elsif ( $chop ){ 
       orac_err "Only two integrations (one in each chopped beam) " .
                "per observation is supported.\n";  
    } else {
       orac_err "Only one integration per observation is supported.\n";
    }

# Podule
# ======

=head1 NAME

_CREATE_RAW_FRAME_ -- Creates a raw frame in ORAC_DATA_OUT.

=head1 DESCRIPTION

This primitive copies the raw data frame into ORAC_DATA_OUT where
it may be edited.  It copies the raw data integrations; and if
there's only one integration, it merges the integration and
the headers into a simple NDF. 

=head1 NOTES

=over 4

=item *

This primitive is suitable for UIST in imaging mode.

=item *

Errors are issued if there are not two integrations per chop,
or only one integration when not in chopping mode.

=item *

The user header ORAC_DETECTOR_READ_TYPE being "CHOP" or NDCHOP"
indicates chopped data.

=item *

There is a temporary kludge for polarimetry to flip the RA scale
keyword (CDELT2) in the file and Frame header, and for the Frame
ORAC_RA_SCALE internal header.  CRPIX2 is reset to 1024 minus its
supplied value.  When POLPACK handles reversed co-ordinates, these
fixes can be removed.

=back

=head1 OUTPUT DATA

=over 4

=item *

Copied frame inheriting the current frame's name but with 
the _raw suffix.

=back

=head1 TASKS

KAPPA: NDFCOPY.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
