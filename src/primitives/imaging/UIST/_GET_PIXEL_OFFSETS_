=head1 NAME

_GET_PIXEL_OFFSETS_

=head1 DESCRIPTION

This primitive returns the offset of a target from the centre of the array.
This offset is returned in two arguments.

=head1 ARGUMENTS

=over 4

=item XOFFSET = REAL (Returned)

The I<x> offset, measured in pixels. A negative value means the target
is located to the left of the centre of the array.

=item YOFFSET = REAL (Returned)

The I<y> offset, measured in pixels. A negative value means the target
is located below the centre of the array.

=head1 NOTES

=over 4

=item *

If the subarray is used, the offsets are (0, 0). If the full array is used,
the offsets are (-32, -32).

=item *

This primitive is only suitable for UIST.

=back

=head1 TASKS

KAPPA: NDFTRACE.

=head1 AUTHORS

Brad Cavanagh (b.cavanagh@jach.hawaii.edu)

=head1 COPYRIGHT

Copyright (C) 2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

my ( $xoffset, $yoffset );

# Find the bounds of the NDF.
my $ORAC_STATUS;
my $ndf = $Frm->file;
$Mon{ "ndfpack_mon" }->obeyw( "ndftrace", "ndf=$ndf" );

# Extract the bounds of the frame.
( $ORAC_STATUS, my @lbnd ) = $Mon{ "ndfpack_mon" }->get( "ndftrace", "lbound" );
( $ORAC_STATUS, my @ubnd ) = $Mon{ "ndfpack_mon" }->get( "ndftrace", "ubound" );

# If we're using the subarray, the offsets are zero. If we're using the full
# array, the offsets are (-32, -32).

if( abs( $ubnd[ 0 ] - $lbnd[ 0 ] ) > 700 ) {

  # We're using the full array.
  $xoffset = -32;
  $yoffset = -32;

} else {

  $xoffset = 0;
  $yoffset = 0;

}

$_GET_PIXEL_OFFSETS_{XOFFSET} = $xoffset;
$_GET_PIXEL_OFFSETS_{YOFFSET} = $yoffset;
