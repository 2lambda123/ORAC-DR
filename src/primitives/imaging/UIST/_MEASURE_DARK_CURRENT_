#-*-perl-*-

=head1 NAME

_MEASURE_DARK_CURRENT_ - measure the dark current for a given frame.

=head1 DESCRIPTION

Measures the dark current for a given frame. The dark current is 
calculated as the unclipped mean of the current frame, and is reported
in ADU.

If this primitive is run at UKIRT, the dark current will be stored
in a logfile at /ukirt_sw/logs/uist_array_tests.log

For data taken after 20040301, dark current will be calculated for four
columns of the array. The dark current is reported as nominal if it is
less than 0.2 e-/sec, questionable if it is between 0.2 and 1.0 e-/sec,
and high if it is higher than 1.0 e-/sec.

=head1 AUTHOR

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2004 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# For OS-independent filename creation.
  use File::Spec;

  my $in = $Frm->file;

# Calculate the mean.
  my ( $mean, $ORAC_STATUS );
  $Mon{ "kappa_mon" }->obeyw( "stats", "ndf=$in" );
  ( $ORAC_STATUS, $mean ) = $Mon{ "kappa_mon" }->get( "stats", "mean" );

# Find the gain.
  _GET_GAIN_
  my $gain = $_GET_GAIN_{GAIN};

# Find the exposure time.
  my $exptime = $Frm->uhdr( "ORAC_EXPOSURE_TIME" );
  if( ! defined( $exptime ) ) {
    orac_warn "Exposure time for " . $Frm->file . " not defined. Using 60.0 seconds.\n";
    $exptime = 60.0;
  }

# Calculate the dark current.
  my $dark = $mean * $gain / $exptime;

# Return the dark current to the user, formatted nicely.
  my $o_dark = sprintf( "%9.3f", $dark );
  orac_print "Full frame dark current is $o_dark e-/sec.\n\n";

  # Create a results file if one does not exist.
  my $results = File::Spec->catfile( $ENV{'ORAC_DATA_OUT'}, "uist_array_tests.log" );

  my $fh_results;
  if( !( -e $results) ) {
    open( $fh_results, ">$results" ) ||
      orac_throw "Unable to open a new array-test $results log file. Error: $!.\n";
    orac_print "Creating a new results file called $results\n";
    print $fh_results " UT  Date         Readnoise     RN Variance   Dark Current\n";
    print $fh_results "----------        ---------     -----------   ------------\n";
  } else {
    open( $fh_results, ">>$results" ) ||
      orac_throw "Unable to append to the array-test $results log file. Error: $!.\n";
  }

  # Write to the log file.
  my $utdate = substr( $Frm->hdr( "DATE-OBS" ), 0, 10 );
  printf $fh_results "%10s                                %16s\n", $utdate, $o_dark;
  close( $fh_results );

my $ut = $Frm->uhdr( "ORAC_UTDATE" );
if( defined( $ut ) ) {
  $ut =~ s/-//g;
} else {
  orac_warn "UT date not set in header. Dark current calculations will probably be incorrect.\n";
  $ut = 0;
}

if( $ut > 20040301 ) {

  my %x_centre = ( 1 => 128,
                   2 => 384,
                   3 => 640,
                   4 => 896 );
  my %y_centre = ( 1 => 512,
                   2 => 512,
                   3 => 512,
                   4 => 512 );

  for( 1..4 ) {
    my $channel = $_;

    my $x_centre = $x_centre{$channel};
    my $y_centre = $y_centre{$channel};

    my $param = "ndf=$in($x_centre~236,$y_centre~1004)";
    $Mon{ "kappa_mon" }->obeyw( "stats", "$param" );
    ( $ORAC_STATUS, $mean ) = $Mon{ "kappa_mon" }->get( "stats", "mean" );

    # Calculate the dark current.
    my $dark = $mean * $gain / $exptime;

    # Return the dark current to the user, formatted nicely.
    my $o_dark = sprintf( "%9.3f", $dark );
    orac_print "Dark current in column $channel is $o_dark e-/sec.\n";

    if( $dark < 1.0 ) {
      orac_print "** Dark current in column $channel is nominal.\n";
    } elsif( $dark > 1.0 && $dark < 1.5 ) {
      orac_warn "** Dark current in column $channel is questionable.\n";
    } else {
      orac_warn "** Dark current in column $channel is high.\n";
    }
  }
}
