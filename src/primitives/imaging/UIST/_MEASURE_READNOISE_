# -*-perl-*-

=head1 NAME

_MEASURE_READNOISE_ - measures readnoise for an array tests sequence
for UIST.

=head1 DESCRIPTION

This primitive measures the readnoise for a group of UIST dark frames,
reports it to the user, and files this readnoise in a log file named
uist_array_tests.log in the $ORAC_DATA_OUT directory.

This primitive assumes the following order for an array tests sequence:

=over 4

=item A number of throwaway frames used to "clean up" the array before
statistics are done on the remaining frames.

=item A group of frames that will be used to determine the readnoise.
These frames should be short-exposure DARKs.

=back

=head1 NOTES

=over 4

=item *

The numbers of frames described in the DESCRIPTION section above are
determined in the _MEASURE_READNOISE_STEER_ primtive.

=item *

The readnoise is calculated as follows:

=over 4

=item * The population variance estimate (PVE) of five dark frames
is calculated on a per-pixel basis.

=item * The square root of the mean of this PVE image is calculated.

=item * If the images were taken before UT 2002-12-02, the readnoise
is calculated as the square root of the mean
of the PVE multiplied by (number of reads - 1) multiplied by the
read interval multiplied by the gain and divided by the number of
multiple reads. Otherwise, the readnoise is calculated as the
square root of the mean multiplied by the gain.

=item * If the images were taken after UT 2004-03-01 but before UT
2005-06-20, the readnoise is calculated for four equally-sized columns
for four quarters of the array.

=item * If the images were taken after UT 2005-06-20, the readnoise
is calculated for the four quadrants of the array.

=back

=item *

The readnoise is nominal if it falls between 38 and 45 e-/seconds, for
data taken prior to 2004-03-01. For data taken after 2004-03-01 the
readnoise is nominal if it is less than 39 e-/second, questionable
between 39 and 45 e-/second, and bad if greater than 45 e-/second. For
data taken after 2005-06-20 the readnoise is nominal if it is less
than 42 e-/second, questionable between 42 and 44 e-/second, and high
if greater than 44 e-/second. For data taken after 2007-04-01 the
readnoise is nominal if it is less than 27 e-/second, questionable
between 27 and 30 e-/second, and high if greater than 30
e-/second. For data taken after 20080121 the readnoise is good if it
is less than 27, nominal between 27 and 30, questionable between 30
and 34, and high if greater than 34 e-/second.

=back

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2002-2005 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# Bring in Starlink::HDSPACK
use Starlink::HDSPACK qw/ copy_hdsobj /;

# For OS-independent filename creation.
use File::Spec;

if ( $Frm->uhdr( "MEASURE_READNOISE" ) ) {

  # Initially flag the file as not being writable.
  my $writable = 0;

  # Create a results file if one does not exist.
  my $results = File::Spec->catfile( $ENV{'ORAC_DATA_OUT'}, "uist_array_tests.log" );

  my $fh_results;
  if( !( -e $results) ) {
    open( $fh_results, ">$results" ) ||
      orac_throw "Unable to open a new array-test $results log file. Error: $!.\n";
    orac_print "Creating a new results file called $results\n";
    print $fh_results "    UT  Date            Readnoise     RN Variance   Dark Current\n";
    print $fh_results "----------------        ---------     -----------   ------------\n";
  } else {
    open( $fh_results, ">>$results" ) ||
      orac_throw "Unable to append to the array-test $results log file. Error: $!.\n";
  }

  orac_print "Calculating NDSTARE readnoise.\n";

  # Create a new output file name.
  my $out = "readnoise_" . $Frm->findgroup;

  # Grab the list of filenames in the current group.
  my @files = $Grp->membernames;

  # Determine the number of DARK frames and total frames in the group.
  my $dark_frames = $Frm->uhdr("DARK_FRAMES");
  my $nfiles = $#files; # This is actually total frames - 1.

  # Create a temporary file to hold the 'mean' image.
  my $tfile1 = new ORAC::TempFile;
  my $tfile1name = $tfile1->file;

  # Form the parameter string.
  my $param1 = "alpha=0 expose=1 keepin=true logfile=! method=mean";
  my $param2 = "out=$tfile1name in='^makecal.inlist$$'";

  # Create a textfile containing the names of the files we'll be
  # averaging together.
  unlink( "makecal.inlist$$" );
  open( INLIST, ">makecal.inlist$$" ) ||
    orac_throw "Unable to open makecal.inlist$$ to create a list of frames to combine. Error: $!.\n";
  print INLIST join( "\n", @files[$nfiles-$dark_frames+1..$nfiles] ), "\n";
  close( INLIST );

  $Mon{'ccdpack_red'}->obeyw( "makecal", "$param1 $param2" );

  # Remove the Variance array in the 'mean' image, just in case
  # one was put in.
  $Mon{'ndfpack_mon'}->obeyw( "setvar", "ndf=$tfile1name Variance=!" );

  # Now we need to calculate the population variance estimate, then 
  # copy that into the the Variance array in the 'mean' image.
  my $tfile2 = new ORAC::TempFile;
  my $tfile2name = $tfile2->file;

  # Form the parameter strings for KAPPA/MATHS.
  my $add = "";
  my $files = "";

  # If there are more than nine DARK frames, we're stuffed.
  my %hash = (1=>"IA", 2=>"IB", 3=>"IC", 4=>"ID", 5=>"IE", 6=>"IF", 7=>"IG", 8=>"IH", 9=>"II");
  my $mfile = $dark_frames + 1;
  foreach my $i ($nfiles-$dark_frames+1..$nfiles) {
    my $file = $files[$i];
    my $hashnumber = $i - $nfiles + $dark_frames;
    $files .= $hash{$hashnumber} . "=" . $file . " ";
    $add .= "((" . $hash{$hashnumber} . "-" . $hash{$mfile} . ")*(" . $hash{$hashnumber} . "-" . $hash{$mfile} . "))";
    $add .= " + " if($i != $nfiles);
  }

  my $exp = "( $add ) / ( $dark_frames - 1 )";
  $files .= $hash{$mfile} . "=" . $tfile1name;
  my $param = sprintf("$files exp='(%s)' out=$tfile2name", $exp);

  $Mon{'kappa_mon'}->obeyw( "maths", "$param" );

  # Create a zeroed-out NDF
  $Mon{'kappa_mon'}->obeyw( "cmult", "in=$tfile2name out=$out scalar=0");
  
  # Copy the variance to the Variance array
  my $ORAC_STATUS = ( copy_hdsobj( "$tfile2name.DATA_ARRAY", "$out.VARIANCE" ) ? ORAC__OK : ORAC__ERROR );

  my $utdate = $Frm->hdr( "ORACTIME" );
  if( defined( $utdate ) ) {
    $utdate =~ s/-//g;
  } else {
    orac_warn "UT date not set in header. Readnoise calculations will probably be incorrect.\n";
    $utdate = 0;
  }

  # Get observation parameters.
  my $nreads = $Frm->uhdr( "ORAC_NUMBER_OF_READS" ) || 2;
  my $readint = $Frm->hdr( "READINT" ) || 1.0;
  _GET_GAIN_
  my $gain = $_GET_GAIN_{GAIN};
  my $multirds = $Frm->hdr( "MULTIRDS" ) || 1;

  # Obtain the mean of the variance frame
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$out comp=Variance clip=3" );

  ( $ORAC_STATUS, my $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

  $mean = sqrt( $mean );

  my $readnoise;
  if( $utdate < 20021202 ) {
    $readnoise = $mean * ( $nreads - 1 ) * $readint * $gain / ( $multirds );
  } else {
    $readnoise = $mean * $gain;
  }

  # Format the output for easier display.
  my $o_readnoise = sprintf( "%9.3f", $readnoise );
  orac_print "Total array NDSTARE readnoise is: $o_readnoise e-/sec.\n";

  # And get an error in the mean as well.
  ( $ORAC_STATUS, my $meanerr ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );

  $meanerr = sqrt( $meanerr );

  # Format the output for easier display.
  my $o_meanerr = sprintf( "%9.3f", $meanerr );
  orac_print "Total array NDSTARE readnoise standard deviation is: $o_meanerr e-/sec.\n\n";

  # Report if low, nominal, or high.
  if( $utdate < 20040301 ) {
    if( $readnoise < 38.0 ) {
      orac_warn "Readout noise is LOW with respect to nominal 38 e-/sec.\n";
    } elsif ( $readnoise > 45.0 ) {
      orac_warn "Readout noise is HIGH with respect to nominal 45 e-/sec.\n";
    } else {
      orac_print "** Readout noise is nominal **\n";
    }
  }

  # Write to the log file.
  printf $fh_results "%16.7f %16s %15s\n", $utdate, $o_readnoise, $o_meanerr;
  close( $fh_results );

  # File the readnoise with the Calibration system.
  # Needs to be in a hash
  my %calhash = (%{$Frm->hdr}, READNOISE=>$readnoise);
  $Cal->readnoiseindex->add($Frm->file, \%calhash);
  orac_print "Readnoise filed with the calibration system.\n\n";

  # Remove temporary text file.
  unlink( "makecal.inlist$$" );

  if( $utdate > 20040301 && $utdate < 20050620 ) {

    my %x_centre = ( 1 => 128,
                     2 => 384,
                     3 => 640,
                     4 => 896 );
    my %y_centre = ( 1 => 512,
                     2 => 512,
                     3 => 512,
                     4 => 512 );
    my %region_names = ( 1 => 'left',
                         2 => 'centre left',
                         3 => 'centre right',
                         4 => 'right' );

    for( 1..4 ) {
      my $channel = $_;

      my $x_centre = $x_centre{$channel};
      my $y_centre = $y_centre{$channel};
      my $region = $region_names{$channel};
      my $param = "ndf=$out($x_centre~236,$y_centre~1004) comp=Variance clip=3";

      $Mon{'kappa_mon'}->obeyw("stats", "$param");
      ( $ORAC_STATUS, my $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

      $mean = sqrt( $mean );

      $readnoise = $mean * $gain;

      # Format the output for easier display.
      my $o_readnoise = sprintf( "%9.3f", $readnoise );
      orac_print "Readnoise in the $region region is $o_readnoise e-/sec.\n";

      if( $readnoise < 38.0 ) {
        orac_print "** Readnoise in the $region region is nominal.\n";
      } elsif ( $readnoise > 38.0 && $readnoise < 45.0 ) {
        orac_warn "** Readnoise in the $region region is questionable.\n";
      } else {
        orac_warn "** Readnoise in the $region region is high.\n";
      }
    }
  } elsif( $utdate >= 20050620 ) {

    my %x_centre = ( 1 => 256,
                     2 => 768,
                     3 => 256,
                     4 => 768 );
    my %y_centre = ( 1 => 768,
                     2 => 768,
                     3 => 256,
                     4 => 256 );
    my %region_names = ( 1 => 'top left',
                         2 => 'top right',
                         3 => 'bottom left',
                         4 => 'bottom right' );
    for( 1..4 ) {
      my $channel = $_;

      my $x_centre = $x_centre{$channel};
      my $y_centre = $y_centre{$channel};
      my $region = $region_names{$channel};
      my $param = "ndf=$out($x_centre~512,$y_centre~512) comp=Variance clip=3";

      $Mon{'kappa_mon'}->obeyw("stats", "$param");
      ( $ORAC_STATUS, my $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

      $mean = sqrt( $mean );

      $readnoise = $mean * $gain;

      # Format the output for easier display.
      my $o_readnoise = sprintf( "%9.3f", $readnoise );
      orac_print "Readnoise in the $region quadrant is $o_readnoise e-/sec.\n";

      if( $utdate >= 20050620 && $utdate < 20070401 ) {

        if( $readnoise <= 42.0 ) {
          orac_print "** Readnoise in the $region quadrant is nominal.\n";
        } elsif( $readnoise > 42.0 && $readnoise <= 44.0 ) {
          orac_warn "** Readnoise in the $region quadrant is questionable.\n";
        } elsif( $readnoise > 44.0 ) {
          orac_warn "** Readnoise in the $region quadrant is high.\n";
        }
      } elsif( $utdate >= 20070401 && $utdate < 20080121 ) {

        if( $readnoise <= 27.0 ) {
          orac_print "** Readnoise in the $region quadrant is nominal.\n";
        } elsif( $readnoise > 27.0 && $readnoise <= 30.0 ) {
          orac_warn "** Readnoise in the $region quadrant is questionable.\n";
        } elsif( $readnoise > 30.0 ) {
          orac_warn "** Readnoise in the $region quadrant is high.\n";
        }
      } else {

        if( $readnoise <= 27.0 ) {
          orac_print "** Readnoise in the $region quadrant is good.\n";
        } elsif( $readnoise > 27.0 && $readnoise <= 30.0 ) {
          orac_print "** Readnoise in the $region quadrant is nominal.\n";
        } elsif( $readnoise > 30.0 && $readnoise <= 34.0 ) {
          orac_warn "** Readnoise in the $region quadrant is questionable.\n";
          orac_warn "Please repeat readnoise observations.\n";
        } elsif( $readnoise > 34.0 ) {
          orac_warn "** Readnoise in the $region quadrant is high.\n";
          orac_warn "Please repeat readnoise observations.\n";
        }
      }
    }
  }
}
