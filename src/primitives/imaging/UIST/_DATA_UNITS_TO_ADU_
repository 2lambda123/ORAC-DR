=head1 NAME _DATA_UNITS_TO_ADU_

=head1 DESCRIPTION

EDICTs data frames taken before UT 2002-12-02 have units of ADU per second
when in and ND mode (ie NDSTARE or NDCHOP).

This primitive multiplies such frames by their exposure times to get them
into total ADU which is what the rest of the downstream pipeline expects.
It then divides by the number of reads to get the total ADU per exposure.

=head1 NOTES

=over 4

=item *

For frames taken before UT 2002-12-02, this primitive multiplies data
frames by their exposure time, then divides by the number of reads to 
get the total ADU per exposure. After this date, EDICT was modified to
write frames in units of ADU per exposure, so frames taken after this
date have no multiplications done.

=back

=head1 AUTHORS

Paul Hirst <p.hirst@jach.hawaii.edu>
Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=cut

my $utdate = $Frm->uhdr( "ORAC_UTDATE" );
if ( defined( $utdate ) ) {
  $utdate =~ s/-//g;
  
  if( $utdate < 20021202 ) {

    foreach my $i ( 1 .. $Frm->nfiles ) {

      my ( $in, $out ) = $Frm->inout( "_adu", $i );

      my $nreads = ( defined( $Frm->hdr( "MULTIRDS" ) ) ? $Frm->hdr( "MULTIRDS" ) : 1 );

# The exposure time correction only applies to NDSTARE and NDCHOP modes.
      if ( substr( $Frm->uhdr( "ORAC_DETECTOR_READ_TYPE" ), 0, 2 ) eq "ND" ) {

# The data are in ADU/s, which is not the UKIRT standard.  So obtain
# the exposure time and multiply the data by this factor.
        my $exp_time = $Frm->uhdr( "ORAC_EXPOSURE_TIME" );

# Scale the data.
        my $norm = $exp_time / $nreads;
        $Mon{ "kappa_mon" }->obeyw( "cmult", "in=$in scalar=$norm out=$out" );

# Report the processing status.
        orac_print "$in to $out: Scaled data by the exposure time ($exp_time)\n" .
                   "    and divided by the number of reads ($nreads) to make " .
                   "the units ADUs per exposure.\n";

      } else {

# Divide by the number of reads.
        $Mon{ "kappa_mon" }->obeyw( "cdiv", "in=$in scalar=$nreads out=$out" );

# Report the processing status.
        orac_print "$in to $out: Divided by number of reads ($nreads) to get\n" .
                   "    ADUs per exposure.\n";

      }

# And update the Frm object.
      $Frm->file( $i, $out );

    }

  }

}

# Keep the output tidy.

orac_print "\n";
