#+
# Name:
#    _GET_PLATE_SCALE_
#
# Purpose:
#    Finds the pixel scales measured in arcseconds per pixel for the
#    current Frame.
#
# Language:
#    Perl5
#
# Description:
#    This primitive obtains the pixel increments from the headers of the
#    current frame, and if necessary, converts them to arcseconds per
#    pixel.  This allows ORAC_RA_SCALE and ORAC_DEC_SCALE internal 
#    headers to be used either in a World Co-ordinate System or be
#    combined to derive the pixel scale.  The scales are returned
#    in three arguments.
#
# Arguments:
#    DECSCALE = REAL (Returned)
#       The increment along the declination axis of the current
#       frame measured in arcseconds per pixel.  This is positive.
#    PLATESCALE = REAL (Returned)
#       The geometric-mean plate scale, i.e. the average of the absolute
#       values of DECSCALE and RASCALE.
#    RASCALE = REAL (Returned)
#       The increment along the right-ascension axis of the current
#       frame measured in arcseconds per pixel.  This may be negative.
#
# Notes:
#    -  This primitive is suitable for UIST in imaging mode.
#    -  Processing only occurs for object and sky frames.
#    -  The platescale internal headers are ORAC_RA_SCALE and
#    ORAC_DEC_SCALE.  Should a header be undefined first the PIXLSIZE
#    header is tried instead, and failing that a default value is
#    substituted; along right ascension and declination respectively
#    these are 0.1205, 0.1205 for the 0.12" lens, and 0.06055, 0.06055
#    for the 0.06IJM lens and 0.06112, 0.06112 for the 0.06HKL lens.
#    The primitive ensures that DECSCALE is always positive, and updates
#    ORAC_DEC_SCALE if the sign is flipped.
#    -  Header CTYPE1 or CTYPE2 set to 'RA---TAN' indicates the
#    presence of the FITS or AIPS-convention WCS, and the values are
#    scaled from degree/pixel.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2002 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Obtain the plate scales for the instrument from the headers.
       my $ra_pixelscale = $Frm->uhdr( "ORAC_RA_SCALE" );
       my $dec_pixelscale = $Frm->uhdr( "ORAC_DEC_SCALE" );

# If not defined, use the PIXLSIZE header.  It's acceptable to do this
# because this primitive is UIST specific.
       $ra_pixelscale = defined( $ra_pixelscale ) ? $ra_pixelscale : $Frm->hdr( "PIXLSIZE" );
       $dec_pixelscale = defined( $dec_pixelscale ) ? $dec_pixelscale : $Frm->hdr( "PIXLSIZE" );

# Find the camera lens, defaulting to the wider field.
       my $camlens = $Frm->hdr( "CAMLENS" );
       if ( ! defined( $camlens ) ) {
          $camlens = "0.12";
       }

# Validate the right ascension scale in case the reserve header is
# also absent.
       if ( defined( $ra_pixelscale ) ) {

# Allow for D notation, which is not recognised by Perl, so that
# supplied strings are valid numbers.
          $ra_pixelscale =~ s/D/E/;

# Supply a default value depending on the lens.  These values are preliminary.
       } elsif ( $camlens eq "0.12" ) {
          $ra_pixelscale = 0.1205;
       } elsif ( $camlens =~ /[Ii][Jj][Mm]/ ) {
          $ra_pixelscale = 0.06112;
       } else {
          $ra_pixelscale = 0.06055;
       }

# Validate the declination scale.
       if ( defined( $dec_pixelscale ) ) {

# Allow for D notation, which is not recognised by Perl, so that
# supplied strings are valid numbers.
          $dec_pixelscale =~ s/D/E/;

# Correct the declination scale.  If the declination scale originates from
# the nagative CDELT for pixel co-ordinates measured in arcseconds,
# reverse the sign to give the correct increment per pixel.  Now this
# may seem odd.  It's because other instruments use an AIPS-like system
# with a rotation angle with x (CDELT1) associated with right ascension and
# y (CDELT2) asociated with declination.  For UIST the rotation is
# incorporated in the PC matrix, and CDELT1 is associated with declination.
# To get to the AIPS arrangement we apply a rotation of 90 degrees
# counterclockwise in ORAC::Frame:UIST, that just leaves a flip of the
# declination axis.
          if ( $dec_pixelscale < 0.0 ) {
             $dec_pixelscale *= -1.0;
             $Frm->uhdr( "ORAC_DEC_SCALE", $dec_pixelscale );
          }

# Supply a default value depending on the lens.  These values are preliminary.
       } elsif ( $camlens eq "0.12" ) {
          $dec_pixelscale = 0.1205;
       } elsif ( $camlens =~ /[Ii][Jj][Mm]/ ) {
          $dec_pixelscale = 0.06112;
       } else {
          $dec_pixelscale = 0.06055;
       }

# The scales should be part of a WCS in expressed in either the
# new FITS standard or the AIPS-convention.  Either way these
# should be converted to arcsec per pixel from degrees per pixel.
# It's important to retain the signs.
       if ( ( $Frm->hdr( "CTYPE1" ) eq "RA---TAN" ||
              $Frm->hdr( "CTYPE2" ) eq "RA---TAN" ) &&
            abs( $ra_pixelscale ) < 1.0E-3 ) {
          $ra_pixelscale = $ra_pixelscale  * 3600.0;
          $dec_pixelscale = $dec_pixelscale  * 3600.0;
       }

# Derive the geometric-mean platescale.
       my $platescale = sqrt( abs( $ra_pixelscale * $dec_pixelscale ) );

# Set the returned arguments.
       $_GET_PLATE_SCALE_{RASCALE} = $ra_pixelscale;
       $_GET_PLATE_SCALE_{DECSCALE} = $dec_pixelscale;
       $_GET_PLATE_SCALE_{PLATESCALE} = $platescale;

    }

# Podule
# ======

=head1 NAME

_GET_PLATE_SCALE_ -- Finds the pixel scales measured in arcseconds per pixel for the current Frame.

=head1 DESCRIPTION

This primitive obtains the pixel increments from the headers of the
current frame, and if necessary, converts them to arcseconds per
pixel.  This allows ORAC_RA_SCALE and ORAC_DEC_SCALE internal 
headers to be used either in a World Co-ordinate System or be
combined to derive the pixel scale.  The scales are returned
in three arguments.

=head1 ARGUMENTS

=over 4

=item DECSCALE = REAL (Returned)

The increment along the declination axis of the current
frame measured in arcseconds per pixel.  This is positive.

=item PLATESCALE = REAL (Returned)

The geometric-mean plate scale, i.e. the average of the absolute values
of DECSCALE and RASCALE.

=item RASCALE = REAL (Returned)

The increment along the right-ascension axis of the current
frame measured in arcseconds per pixel.  This may be negative.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UIST in imaging mode.

=item 4

Processing only occurs for object and sky frames.

=item *

The platescale internal headers are ORAC_RA_SCALE and ORAC_DEC_SCALE.
Should a header be undefined first the PIXLSIZE header is tried
instead, and failing that a default value is substituted; along right
ascension and declination respectively these are 0.1205, -0.1205 for
the 0.12" lens, and 0.06055, -0.06055 for the 0.06IJM lens and
0.06112, -0.06112 for the 0.06HKL lens. The primitive ensures that
DECSCALE is always positive, and updates ORAC_DEC_SCALE if the sign is
flipped.

=item *

Header CTYPE1 or CTYPE2 set to 'RA---TAN' indicates the
presence of the FITS or AIPS-convention WCS, and the values are
scaled from degree/pixel.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
