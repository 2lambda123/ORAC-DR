=head1 NAME

_BIAS_GROUP_ - Reduce a group of bias frames for array tests to determine a
group bias.

=head1 DESCRIPTION

Reduces a group bias frames for array tests to determine a group bias. This
primitive determines the mean and variance for the bias frames, converts
the variance into a population variance estimate, and stores these in the
data and variance arrays of a file called bias_gNNN, where NNN is the group
number. The bias_gNNN file is also filed with the Cal system.

This primitive is used with the UIST array test sequence. It must be called
after _ARRAY_TESTS_STEER_ so that internal headers can be used.

=head1 ARGUMENTS

None.

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu> (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# Bring in Starlink::HDSPACK
use Starlink::HDSPACK qw/ copy_hdsobj /;

# Find out from the internal headers if we're supposed to be doing this.
if ( $Frm->uhdr( "ARRAY_TESTS_BIAS_GROUP" ) ) {

  orac_print "Creating group bias file.\n";

  my $in = $Frm->file;
  my $outfile = new ORAC::TempFile;
  my $out = $outfile->file;

  my @files = $Grp->membernames;
  my $nfiles = $#files;

  # Determine the number of BIAS frames from the internal header that
  # was set up in _ARRAY_TESTS_STEER_.
  my $bias_frames = $Frm->uhdr("ARRAY_TESTS_BIAS_FRAMES");

  # If we are running version 1.0 of KAPPA, we can run MSTATS. Else, we
  # have to run CCDPACK/MAKECAL.
  if ( starversion_lt( "KAPPA", 'V1.0' ) ) {

    # Create a textfile containing the names of the files we'll be getting
    # statistics for.
    unlink( "makecal.inlist$$" );

    open( my $fh_inlist, ">makecal.inlist$$" ) ||
      orac_throw "Unable to open makecal.inlist$$ to create a list of frames to get statistics for. Error: $!.\n";
    print $fh_inlist join( "\n", @files[$nfiles-$bias_frames+1..$nfiles] ), "\n";
    close( $fh_inlist );

    # Form the parameter strings.
    my $param1 = "alpha=0 expose=1 keepin=true logfile=! method=mean";
    my $param2 = "out=$out in='^makecal.inlist$$'";

    $Mon{'ccdpack_red'}->obeyw( "makecal", "$param1 $param2" );

    # Remove the Variance array in the 'mean' image, just in case
    # one was put in.
    $Mon{'ndfpack_mon'}->obeyw( "setvar", "ndf=$out Variance=!" );

    # Now we need to calculate the population variance estimate, then 
    # copy that into the the Variance array in the 'mean' image.
    my $tfile1 = new ORAC::TempFile;
    my $tfile1name = $tfile1->file;

    # Form the parameter strings for KAPPA/MATHS.
    my $add = "";
    my $files = "";

    # If there are more than nine BIAS frames, we're stuffed.
    my %hash = (1=>"IA", 2=>"IB", 3=>"IC", 4=>"ID", 5=>"IE", 6=>"IF", 7=>"IG", 8=>"IH", 9=>"II");
    my $mfile = $nfiles + 1;
    foreach my $i ($nfiles-$bias_frames+1..$nfiles) {
      my $file = $Frm->file($i);
      my $hashnumber = $i - $nfiles + $bias_frames;
      $files .= $hash{$hashnumber} . "=" . $file . " ";
      $add .= "((" . $hash{$hashnumber} . "-" . $hash{$mfile} . ")*(" . $hash{$hashnumber} . "-" . $hash{$mfile} . "))";
      $add .= " + " if($i != $nfiles);
    }

    my $exp = "( $add ) / ( $bias_frames - 1 )";
    $files .= $hash{$mfile} . "=" . $out;
    my $param = sprintf("$files exp='(%s)' out=$tfile1name", $exp);

    $Mon{'kappa_mon'}->obeyw( "maths", "$param" );

    # And copy this result into the Variance array of the 'mean' image.
    my $ORAC_STATUS = ( copy_hdsobj( "$tfile1name.DATA_ARRAY", "$out.VARIANCE") ? ORAC__OK : ORAC__ERROR );

  } else {

    # We need to be looking at the previous four files plus the current one.
    my @files = $Grp->membernames;

    # Create a textfile containing the names of the files we'll be getting
    # statistics for.
    unlink( "mstats.inlist$$" );

    open( $fh_inlist, ">mstats.inlist$$" ) ||
      orac_throw "Unable to open mstats.inlist$$ to create a list of frames to get statistics for. Error: $!.\n";
    print $fh_inlist join( "\n", @files[$nfiles-$bias_frames+1..$nfiles] ), "\n";
    close( $fh_inlist );

    # Form the parameter string for KAPPA/MSTATS.
    my $param1 = "single=false smode=mean trim=false";
    my $param2 = "out=$out in='^mstats.inlist$$'";

    $Mon{'kappa_mon'}->obeyw( "mstats", "$param1 $param2");

  }

  # Form the output bias file.
  my $bias = "bias_g" . $Frm->findgroup;
  $Mon{"ndfpack_mon"}->obeyw("ndfcopy", "in=$out out=$bias");

  # File the bias file with the calibration system.
  $Cal->bias( $bias );
  orac_print $bias . " filed as the current bias.\n";
  $Cal->biasindex->add( $bias, $Frm->hdr );
  orac_print $bias . " added to index file.\n\n";

}
