#+
# Name:
#    _POL_JITTER_STEER_
#
# Purpose:
#    Steers processing for POL_JITTER recipes.
#
# Language:
#    Perl5
#
# Description:
#    This primitive creates the groups needed by POL_JITTER recipes (see
#    the Groups topic).  It also controls processing for POL_JITTER
#    recipes through the steering headers listed below.
#
# Steering Headers:
#    CIRCULAR = LOGICAL
#       Whether or not the the polarimetry type is circular.  This is only
#       set when it is time to make a  mosaic and is decided by the list of
#       unique waveplate angles in the group.  Circular polarisation is
#       assigned when 90 and 135 degrees are present amongst the waveplate angles.
#    CYCLE_NUMBER = INTEGER
#       Number of the cycle, a cycle being a set of frames to complete a
#       pass through the recipe.  The first cycle is 0.
#    DO_APHOT = LOGICAL
#       Whether or not perform aperture photometry.  Photometry is
#       performed once the polarisation maps are made.
#    JITTER_FIRST = LOGICAL
#       The value of argument JITTER_BEFORE_ANGLE.
#    JITTER_NUMBER = INTEGER
#       The number of frames in the jitter.
#    MAKE_MOSAIC = LOGICAL
#       Whether or not register the jittered images by beam and make a
#       mosaic for the current waveplate angle.  Each mosaic is made once
#       all the jittered target frames for a given waveplate angle in a
#       cycle are available.
#    REFERENCE_FRAME = LOGICAL
#       A true value specifies the reference frame for normalisation
#       purposes.  It is true for the first frame and false for all
#       subsequent frames in the observation.  It is currently not used.
#    REGISTER_IMAGES = LOGICAL
#       Whether or not to register and resample the e- and o-beam mosaics.
#    TARGET_OR_SKY = CHARACTER
#       This is "target" for a target frame, and "sky" for a sky calibration
#       frame.  All frames should be target.
#    USE_VARIANCE = LOGICAL
#       Whether or not variance processing is to occur.  This equates to
#       argument USEVAR.
#
# Groups:
#    The following groups of frames are created, each retained by storing
#    a reference in the $Grp user header.  They are listed below by their
#    header names.
#
#       EBEAM_GROUP   The target sections for the e-beam.
#       MOSAIC_GROUP  Mosaics at the four waveplate positions for each beam.
#       OBEAM_GROUP   The target sections for the o-beam.
#
#    They all inherit the main group's headers and user headers.
#    MOSAIC_GROUP's file has the same name as the main group's file.  The
#    filename of EBEAM_GROUP has an additional "_e" suffix.  Likewise
#    the filename of the OBEAM_GROUP has an "_o" suffix.
#
# Arguments:
#    JITTER_BEFORE_ANGLE = LOGICAL (Given)
#       The selects the ordering of the frames.  If true (1), the
#       jittering occurs at all positions before the waveplate is
#       turned.  If false (0), all waveplate angles are observed at
#       a given offset.  [1]
#    NUMBER = INTEGER (Given)
#       The number of frames in the jitter.  If absent, the number of
#       offsets, as given by user header ORAC_NUMBER_OF_OFFSETS, minus
#       one is used.  If neither is available, 3 is used.  An error state
#       arises if the number of jittered frames is fewer than 3.  []
#    USEVAR = LOGICAL (Given)
#       Whether or not to create and propagate variance arrays.  [1]
#
# Notes:
#    -  This primitive is suitable for infra-red imaging instruments.
#    -  Processing only occurs for object and sky frames.
#    - The list of unique waveplate angles in the group, listed in order
#    of first appearance is stored by reference in group user header
#    WAVEPLATE_ANGLE_LIST.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC, Starlink)
#
# Copyright:
#    Copyright (C) 1998-2004 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Start output for steering information.
      orac_print( "\nSteering information:\n", "yellow" );

# Obtain the number of frames in the jitter pattern.
# ==================================================

# First see if a hardwired value has been supplied in the recipe.  This
# deals with old recipes with fixed numbers and cases where a frame or
# more is missing.
       my $number = $_POL_JITTER_STEER_{NUMBER};

# Otherwise use the ORAC_NUMBER_OF_OFFSETS user header.  In full
# ORAC, this stores the total number of offsets used, but ignores repeat
# iterators.  By convention there is always an offset to the origin at
# the end, hence the recipe requires ORAC_NUMBER_OF_OFFSETS-1.
       if ( ! defined ( $number ) ) {
          $number = $Frm->uhdr( "ORAC_NUMBER_OF_OFFSETS" );
          if ( defined( $number ) ) {
             $number--;

# Finally default to the original 3.
          } else {
             $number = 3;
          }
       }

# Report invalid number of frames.
       if ( $number < 3 ) {
          orac_throw "The number of jittered frames ($number) is fewer " .
                     "than 3.\n";
       }

# Obtain the order of the jittering and waveplate angle.
       my $jitter_first = $_POL_JITTER_STEER_{JITTER_BEFORE_ANGLE};
       $jitter_first = defined( $jitter_first ) ? $jitter_first : 1;

# Create beam groups.
# ===================

# We need new groups to store the extracted and processed e-beam and
# o-beam images.  To preserve them between iterations we keep their
# reference count at one by storing references in the main Grp's user
# header.
       my $fn = $Grp->num + 1;
       if ( $fn == 1 ) {

# e-beam
# ------
# Create the group of e-beam frames and inherit the group file name from
# the main group with an appropriate suffix.
          my $eGrp = $Grp->new;
          $eGrp->file( $Grp->file . "_e" );

# Propagate the headers to the new group.
          %{ $eGrp->hdr } = %{ $Grp->hdr };
          %{ $eGrp->uhdr } = %{ $Grp->uhdr };

# Store the pointer to the group in the main Group user header.
          $Grp->uhdr( "EBEAM_GROUP", $eGrp );

# o-beam
# ------
# Create the group of e-beam frames and inherit the group file name from
# the main group with an appropriate suffix.
          my $oGrp = $Grp->new;
          $oGrp->file( $Grp->file . "_o" );

# Propagate the headers to the new group.
          %{ $oGrp->hdr } = %{ $Grp->hdr };
          %{ $oGrp->uhdr } = %{ $Grp->uhdr };

# Store the pointer to the group in the main Group user header.
          $Grp->uhdr( "OBEAM_GROUP", $oGrp );

# Create mosaic group.
# ====================

# This group will store the eight mosaics formed by combining the jittered
# images.  There are eight because of the two beams and four waveplate
# angles.

# Create the mosaic group.
          my $mosGrp = $Grp->new;
          $mosGrp->file( $Grp->file );

# Propagate the headers to the new group.
          %{ $mosGrp->hdr } = %{ $Grp->hdr };
          %{ $mosGrp->uhdr } = %{ $Grp->uhdr };

# Store the pointer to the group in the main Group user header.
          $Grp->uhdr( "MOSAIC_GROUP", $mosGrp );
       }

# Form a list of unique waveplate angles to test for circular polarisation.
# =========================================================================

# Obtain the waveplate angle.
       my $angle = $Frm->uhdr( "ORAC_WAVEPLATE_ANGLE" ) % 180;
       my @anglelist;
       my $anglelist_ref;

# For the first frame of the observation, form an array of the
# waveplate angles and store by refeence in the group header.
       if ( $fn == 1 ) {
          @anglelist = ( $angle );
          $Grp->uhdr( "WAVEPLATE_ANGLE_LIST", \@anglelist );

# For subsequent frames, obtain the array and append the new angle to
# the array.
       } else {
          $anglelist_ref = $Grp->uhdr( "WAVEPLATE_ANGLE_LIST" );
          @anglelist = @$anglelist_ref;
          push ( @anglelist, $angle );

# Form a unique list preserving the order, and store it in the group
# user header.
          my %seen = ();
          my @unique = grep { ! $seen{$_} ++ } @anglelist;
          @anglelist = @unique;
          $Grp->uhdr( "WAVEPLATE_ANGLE_LIST", \@anglelist );
       }

# Print angle information.
      orac_print( sprintf( " Waveplate angle: %.1f degrees.\n", $Frm->uhdr("ORAC_WAVEPLATE_ANGLE") ), "yellow" );

# Determine if circular.  For early frames circular may be false for 0
# then 45-degree angles.
       my $circular = 0;
       foreach $angle ( @anglelist ) {
          $circular = 1 if ( $angle == 90 || $angle == 135 );
       }

# Assign the steering headers.
# ============================

# Set the circular-polarisation flag.
       $Frm->uhdr( "CIRCULAR", $circular );
       if( $circular ) {
         orac_print( " Circular polarimetry.\n", "yellow" );
       }

# Set the coronographic polarimetry flag.
       my $coron = $_POL_JITTER_STEER_{CORONOGRAPH};
       if ( ! defined( $coron ) ) {
         $coron = 0;
       }
       if( $coron ) {
         orac_print( " Coronographic polarimetry.\n", "yellow" );
       }

# Obtain the USEVAR argument.  Default to true.
       my $usevar = $_POL_JITTER_STEER_{USEVAR};
       $usevar = defined( $usevar ) ? $usevar : 1;
       $Frm->uhdr( "USE_VARIANCE", $usevar );

# There are four waveplate angles for linear and circular.  This is
# not the optimal circular polarisation since we can't set or readily
# determine the two waveplate angles such that the fast axis is at
# +/- 45 degrees to the prism dispersion axis.  A workaround is to use
# 0, 45, 90, and 135 degrees.
       my $nangle = 4;
       my $totframe = $nangle * $number;

# Specify the first frame as the frame whose mode will be the
# reference for the normalisation of frames.
       if ( $fn == 1 ) {
          $Frm->uhdr( "REFERENCE_FRAME", 1 );
          orac_print( " This frame will be used as a reference frame for future normalizations.\n", "yellow" );
       } else {
          $Frm->uhdr( "REFERENCE_FRAME", 0 );
       }

# Specify during processing of which frames should the mosaics
# at the different waveplates be registered, and aperture photometry
# performed.
       if ( $fn % $totframe == 0 ) {
          $Frm->uhdr( "DO_APHOT", 1 );
          $Frm->uhdr( "REGISTER_IMAGES", 1 );
       } else {
          $Frm->uhdr( "DO_APHOT", 0 );
          $Frm->uhdr( "REGISTER_IMAGES", 0 );
       }

# Indicate when to combine the jittered data at a given waveplate
# position.  For the jitter first, it's after every set of jitters
# is completed.  When all waveplate angles are observed at each jitter,
# a mosaic for a waveplate angle can be found once the last jitter
# position for it has been observed.
       my $makemos;
       if ( $jitter_first ) {
          $makemos = ( $fn % $number == 0 );
       } else {
          $makemos = ( $Grp->num % $totframe >= ( $totframe - $nangle ) );
       }
       $Frm->uhdr( "MAKE_MOSAIC", $makemos );
       if( $makemos ) {
         orac_print( sprintf( " Images at angle %.1f degrees will be mosaicked after this frame.\n", $Frm->uhdr("ORAC_WAVEPLATE_ANGLE") ),
                     "yellow" );
       }

# Insert the cycle number of the set of frames.
       $Frm->uhdr( "CYCLE_NUMBER", int( $Grp->num / $totframe ) );

# Insert the number of frames in the jitter.
       $Frm->uhdr( "JITTER_NUMBER", $number );

# All frames are target.  Some more-general primitives need to select
# targets from sky frames.
       $Frm->uhdr( "TARGET_OR_SKY", "target" );

# Record the order for the tidying.
       $Frm->uhdr( "JITTER_FIRST", $jitter_first );

# Record whether or not the coronographic mask is in place.
       $Frm->uhdr( "CORONOGRAPHIC_MASK", $coron );

# Tidy up output.
       orac_print "\n";

    }

# Podule
# ======

=head1 NAME

_POL_JITTER_STEER_ -- Steers processing for POL_JITTER recipes.

=head1 DESCRIPTION

This primitive creates the groups needed by POL_JITTER recipes (see
the Groups topic).  It also controls processing for POL_JITTER
recipes through the steering headers listed below.

=head1 STEERING HEADERS

=over 4

=item CIRCULAR = LOGICAL

Whether or not the the polarimetry type is circular.  This is only
set when it is time to make a  mosaic and is decided by the list of
unique waveplate angles in the group.  Circular polarisation is
assigned when 90 and 135 degrees are present amongst the waveplate angles.

=item CYCLE_NUMBER = INTEGER

Number of the cycle, a cycle being a set of frames to complete a
pass through the recipe.  The first cycle is 0.

=item DO_APHOT = LOGICAL

Whether or not perform aperture photometry.
Photometry is performed once the polarisation maps are made.

=item JITTER_FIRST = LOGICAL

The value of argument JITTER_BEFORE_ANGLE.

=item JITTER_NUMBER = INTEGER

The number of frames in the jitter.

=item MAKE_MOSAIC = LOGICAL

Whether or not register the jittered images by beam and make a
mosaic for the current waveplate angle.  Each mosaic is made once
all the jittered target frames for a given waveplate angle in a
cycle are available.

=item REFERENCE_FRAME = LOGICAL

A true value specifies the reference frame for normalisation
purposes.  It is true for the first frame and false for all
subsequent frames in the observation.  It is currently not used.

=item REGISTER_IMAGES = LOGICAL

Whether or not to register and resample the e- and o-beam mosaics.

=item TARGET_OR_SKY = CHARACTER

This is "target" for a target frame, and "sky" for a sky calibration
frame.  All frames should be target.

=item USE_VARIANCE = LOGICAL

Whether or not variance processing is to occur.  This equates to
argument USEVAR.

=back

=head1 GROUPS

The following groups of frames are created, each retained by storing
a reference in the $Grp user header.  They are listed below by their
header names.

   EBEAM_GROUP   The target sections for the e-beam.
   MOSAIC_GROUP  Mosaics at the four waveplate positions for each beam.
   OBEAM_GROUP   The target sections for the o-beam.

They all inherit the main group's headers and user headers.
MOSAIC_GROUP's file has the same name as the main group's file.  The
filename of EBEAM_GROUP has an additional "_e" suffix.  Likewise
the filename of the OBEAM_GROUP has an "_o" suffix.

=head1 ARGUMENTS

=over 4

=item JITTER_BEFORE_ANGLE = LOGICAL (Given)

The selects the ordering of the frames.  If true (1), the
jittering occurs at all positions before the waveplate is
turned.  If false (0), all waveplate angles are observed at
a given offset.  [1]

=item NUMBER = INTEGER (Given)

The number of frames in the jitter.  If absent, the number of offsets,
as given by user header ORAC_NUMBER_OF_OFFSETS, minus one is used.  If
neither is available, 9 is used.  An error state arises if the number
of jittered frames is fewer than 3.  []

=item USEVAR = LOGICAL (Given)

Whether or not to create and propagate variance arrays.  [1]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for infrared imaging instruments.

=item *

Processing only occurs for object and sky frames.

=back

=head1 AUTHORS

Malcolm J. Currie (mjc@star.rl.ac.uk)

=head1 COPYRIGHT

Copyright (C) 1998-2004 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
