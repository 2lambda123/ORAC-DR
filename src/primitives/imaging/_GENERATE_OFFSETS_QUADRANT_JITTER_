#+
# Name:
#    _GENERATE_OFFSETS_QUADRANT_JITTER_
#
# Purpose:
#    Finds the offsets between the frames in a QUADRANT_JITTER recipe,
#    and registers the frames.
#
# Description:
#    This primitive finds the pixel offsets between the target frames
#    in the current $Grp of a QUADRANT_JITTER recipe.  The primitive
#    itself forms a subgroup of the current cycle members to be
#    registered by other primitives.
#
#    When argument TELEOFF is true, _GENERATE_TELE_OFFSETS_ is invoked
#    and the derived offsets are used to register with a shift of origin;
#    otherwise _GENERATE_OFFSETS_ is the work horse.
#
# Language:
#    Perl5
#
# Arguments:
#    CENTRAL_SOURCE = LOGICAL (Given)
#       If true, attempt to register using a central source when
#       automatic registration fails.  It uses a 5-arcsec search box
#       about the centre of the frame, jittered by the telescope
#       offsets.  Otherwise telescope offsets provide the backup
#       registration.  This should normally be set to true, unless
#       a moving target is being used (see argument MOVING_TARGET).
#       [TRUE]
#    COMPLETE = REAL (Given)
#       Completeness of matched features for registration between two
#       frames to be accepted.  It must be in the range 0.2 to 1.0. [0.4]
#    MINPIX = INTEGER (Given)
#       Minimum number of contiguous pixels above the PERCENTILE level
#       to be considered a registration feature.  It must be at least 6.
#       The default here is for UFTI and the new IRCAM.  For the
#       original IRCAM3 without the magnifier, 6 proved to be
#       satisfactory.  [9]
#    MOVING_TARGET = LOGICAL (Read)
#       If true (1), the source is a moving target and frames are to
#       register the moving target not the fixed stars.  [0]
#    PERCENTILE = REAL (Given)
#       Percentile threshold for locating objects to register frames.
#       It must be in the range 75 to 99.9.  The default here is for
#       UFTI and the new IRCAM.  For the original IRCAM3 without the
#       magnifier, 96 proved to be satisfactory.  [98]
#    TELEOFF = LOGICAL (Given)
#       If true (1), it will just use the telescope offsets to register.
#       If false (0), it will attempt automatic registration.  [0]
#
# Notes:
#    -  This primitive is suitable for UFTI, IRCAM, and Michelle
#    in imaging mode.
#    -  Processing only occurs for object and sky frames, and when
#    steering header MAKE_MOSAIC is true.
#    -  The _GENERATE_OFFSETS_ argument CENTRAL_SOURCE is TRUE.
#    Thus matching the centroids of a central source is attempted if
#    automatic registration fails.
#    -  The frames registered using telescope offsets are reported.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2001 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Arguments
# =========

# Determine whether or not telescope offsets should only be used.
    my $usetele = $_GENERATE_OFFSETS_QUADRANT_JITTER_{TELEOFF};
    $usetele = defined( $usetele ) ? $usetele : 0;

# Obtain the parameters for the detection.
    my ( $central_source, $complete, $minpix, $percentile );
    if ( ! $usetele ) {
       $percentile = ( $_GENERATE_OFFSETS_QUADRANT_JITTER_{PERCENTILE} || 98 );
       $minpix = ( $_GENERATE_OFFSETS_QUADRANT_JITTER_{MINPIX} || 9 );
       $complete = ( $_GENERATE_OFFSETS_QUADRANT_JITTER_{COMPLETE} || 0.4 );
       $central_source = ( $_GENERATE_OFFSETS_QUADRANT_JITTER_{CENTRAL_SOURCE} || "TRUE" );
    }

# Is there a moving target?
    my $moving_target = $_GENERATE_OFFSETS_QUADRANT_JITTER_{MOVING_TARGET};
    $moving_target = defined( $moving_target ) ? $moving_target : 0;

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Test whether or not it is time to make a mosaic.
       my $makemos = $Frm->uhdr( "MAKE_MOSAIC" );
       if ( $makemos ) {

# Obtain the cycle number from the header.
          my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );

# Select those members in the current cycle.
          my $cycleGrp = $Grp->subgrp( CYCLE_NUMBER => $cycleno );

# Make a local $Grp containing just the current cycle.  Assumes that
# the offsets are the same for each cycle.  Hence there is no reference
# frame to pass to the registrations tasks.
          {
             my $Grp = $cycleGrp;

# Telescope offsets
# =================
             if ( $usetele ) {

# Use telescope offsets from the headers.  Correct those offsets for a
# moving target, requested to do so.  Register the frames.
                _GENERATE_TELE_OFFSETS_ MOVING_TARGET=$moving_target

             } else {

# Generate the offsets
# ====================

# Call the generic primitive which does most of the work.  Optionally use
# central source as a backup.  Use the reference mosaic's co-ordinate
# system so ensure that central-source offsets are with respect to that,
# if the CENTRAL_SOURCE flag is switched.  Correct for a moving target,
# requested to do so.
                _GENERATE_OFFSETS_ PERCENTILE=$percentile MINPIX=$minpix COMPLETE=$complete CENTRAL_SOURCE=$central_source MOVING_TARGET=$moving_target
             }

# End of scope of local $Grp aka $cycleGrp.
          }
       }
    }

# Podule
# ======

=head1 Name:

_GENERATE_OFFSETS_QUADRANT_JITTER_  -- Finds the offsets between the frames in a QUADRANT_JITTER recipe, and registers the frames.

=head1 DESCRIPTION

This primitive finds the pixel offsets between the target frames
in the current $Grp of a QUADRANT_JITTER recipe.  The primitive
itself forms a subgroup of the current cycle members to be
registered by other primitives.

When argument TELEOFF is true,
L<_GENERATE_TELE_OFFSETS_|_GENERATE_TELE_OFFSETS_> is invoked and the
derived offsets are used to register with a shift of origin; otherwise
L<_GENERATE_OFFSETS_|_GENERATE_OFFSETS_> is the work horse.

=head1 ARGUMENTS

=over 4

=item COMPLETE = REAL (Given)

Completeness of matched features for registration between two
frames to be accepted.  It must be in the range 0.2 to 1.0. [0.4]

=item MINPIX = INTEGER (Given)

Minimum number of contiguous pixels above the PERCENTILE level
to be considered a registration feature.  It must be at least 6.
The default here is for UFTI and the new IRCAM.  For the
original IRCAM3 without the magnifier, 6 proved to be
satisfactory.  [9]

=item PERCENTILE = REAL (Given)

Percentile threshold for locating objects to register frames.
It must be in the range 75 to 99.9.  The default here is for
UFTI and the new IRCAM.  For the original IRCAM3 without the
magnifier, 96 proved to be satisfactory.  [98]

=item TELEOFF = LOGICAL (Given)

If true (1), it will just use the telescope offsets to register.
If false (0), it will attempt automatic registration.  [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UFTI, IRCAM, and Michelle in imaging mode.

=item *

Processing only occurs for object and sky frames, and when
steering header MAKE_MOSAIC is true.

=item *

The _GENERATE_OFFSETS_ argument CENTRAL_SOURCE is TRUE.
Thus matching the centroids of a central source is attempted if
automatic registration fails.

=item *

The frames registered using telescope offsets are reported.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2001 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
