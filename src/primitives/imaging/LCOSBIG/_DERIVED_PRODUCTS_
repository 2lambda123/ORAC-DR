#+
# Name:
#    _CREATE_DERIVED_PRODUCTS_
#
# Purpose:
#    Steers processing for CREATE_DERIVED_PRODUCTS recipe.
#
# Language:
#    Perl5
#
# Description:
#    This primitive control processing for CREATE_DERIVED_PRODUCTS recipe through
#    steering headers listed below.
#
# Steering Headers:
#    ADD_ASTROMETRY = LOGICAL
#       Whether or not automated astrometry is to occur.  This equates to
#       argument DOASTROM.
#
# Arguments:
#    DOASTROM = LOGICAL (Given)
#       Whether or not to perform astrometry.  [1]
#
# Notes:
#    -  This primitive is suitable for imaging cameras.
#    -  Processing only occurs for object frames.
#
# Authors:
#    TAL: Tim Lister (LCOGT)
#    RAS: Rachel Street (LCOGT)
#
# Copyright:
#    Copyright (C) 2011-2012 Las Cumbres Observatory Global Telescope Inc.
#    All Rights Reserved.
#
#-
use File::Copy;
use ORAC::Version;
#$VERSION = ORAC::Version->getVersion();
#my @vers = ORAC::Version->oracversion_global; #getVersion();
#print "Version=$vers[0], $vers[1], $vers[2]\n";

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ) {
#    # Allow syncing
#      my $prevsync = $Frm->allow_header_sync;
#      $Frm->allow_header_sync(1);
#      $Frm->sync_headers(1);
      my $file = $Frm->file(1);

      _ADD_PIPELINE_VERSION_

      my $bias_used = $Cal->bias;
      my $dark_used = $Cal->dark;
      my $flat_used = $Cal->flat;
      my $shut_used = 'N/A'; #$Cal->shut;
      my $mask_used = $Cal->mask;
# Check for too long length (67 is max allowed by SUBPAR)
      if ( length($mask_used) > 50 ) {
      	my @bpm_values = split('oracdr/', $mask_used);
	$mask_used = $bpm_values[1];
#	print "mask=$mask_used\n";
      }
      my $fringe_used = 'N/A'; #$Cal->fringe;
#      print "bias=$bias_used, dark=$dark_used, flat=$flat_used, shut=$shut_used, mask=$mask_used\n";

# Determine processing steps done
      my $ovscan_correct = 0;
      $ovscan_correct = $Frm->uhdr( "OVSCAN_CORRECT")
      	      	      	   if(defined $Frm->uhdr( "OVSCAN_CORRECT"));
      my $bias_removed = 0;
      $bias_removed = $Frm->uhdr( "BIAS_REMOVED")
      	      	      	   if(defined $Frm->uhdr( "BIAS_REMOVED"));
      my $dark_removed = 0;
      $dark_removed = $Frm->uhdr( "DARK_REMOVED")
      	      	      	   if(defined $Frm->uhdr( "DARK_REMOVED"));
      my $ovscan_removed = 0;
      $ovscan_removed = $Frm->uhdr( "OVSCAN_REMOVED")
      	      	      	   if(defined $Frm->uhdr( "OVSCAN_REMOVED"));
      my $flat_removed = 0;
      $flat_removed = $Frm->uhdr( "FLAT_REMOVED")
      	      	      	   if(defined $Frm->uhdr( "FLAT_REMOVED"));
      my $fringe_removed = 0;
      $fringe_removed = $Frm->uhdr( "FRINGE_REMOVED")
      	      	      	   if(defined $Frm->uhdr( "FRINGE_REMOVED"));

      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATOV VALUE=$ovscan_correct, COMMENT=Status|flag|for|overscan|correction
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATBI VALUE=$bias_removed, COMMENT=Status|flag|for|bias|frame|correction
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATDA VALUE=$dark_removed, COMMENT=Status|flag|for|dark|frame|correction
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATTR VALUE=$ovscan_removed, COMMENT=Status|flag|for|overscan|trimming
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATFL VALUE=$flat_removed, COMMENT=Status|flag|for|flat|frame|correction
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATFR VALUE=$fringe_removed, COMMENT=Status|flag|for|fringe|frame|correction

      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDBIAS VALUE=$bias_used, COMMENT=Id.|of|bias|frame|used
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDDARK VALUE=$dark_used, COMMENT=Id.|of|dark|frame|used
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDFLAT VALUE=$flat_used, COMMENT=Id.|of|flat|frame|used
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDSHUT VALUE=$shut_used, COMMENT=Id.|of|shutter|corr.|frame|used
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDMASK VALUE=$mask_used, COMMENT=Id.|of|mask|file|used
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDFRNG VALUE=$fringe_used, COMMENT=Id.|of|fringe|frame|used

#
       _GET_SATURATION_LEVEL_
       my $satlevel = $_GET_SATURATION_LEVEL_{SATURATION};
       _SET_FILE_FITS_ITEM_ FILE=$file KEY=SATURATE VALUE=$satlevel, COMMENT=[ADU[|Saturation|level|used

      my $x1 = $Frm->uhdr( "ORAC_X_LOWER_BOUND" );
      my $x2 = $Frm->uhdr( "ORAC_X_UPPER_BOUND" );
      my $y1 = $Frm->uhdr( "ORAC_Y_LOWER_BOUND" );
      my $y2 = $Frm->uhdr( "ORAC_Y_UPPER_BOUND" );
      my $trimsec = '\'[' . $x1 . ':' . $x2 . ',' . $y1 . ':' . $y2 . ']\'';
#      print "DBG: TRIMSEC=$trimsec\n";
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=TRIMSEC VALUE=$trimsec, STRING=True

# Determine image statistics
      _CLIPPED_STATS_MEDIAN_
      my $skymean = $_CLIPPED_STATS_MEDIAN_{MEAN};
      my $skymedian = $_CLIPPED_STATS_MEDIAN_{MEDIAN};
      my $skysigma = $_CLIPPED_STATS_MEDIAN_{SIGMA};

      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1MEAN VALUE=$skymean COMMENT=[counts]|Mean|of|frame|background
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1MEDIAN VALUE=$skymedian COMMENT=[counts]|Median|of|frame|background
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1SIGMA VALUE=$skysigma COMMENT=[counts]|Std.dev|of|frame|background

#      use Data::Dumper ; print Dumper $Cal->skybrightness;
# Set PSF parameter values from computed statistics
    my $skybrt = -99.0;
    my $extinct = -99.0;
    my $l1zp = -99.0;
    my $l1zperr = -99.0;
    my $l1zpsrc = 'N/A';
    if (defined $Cal->zeropoint ) {
      my $dqc = $Cal->zeropoint;
# Dereference row/hash reference of zeropoint params
      $skybrt = $dqc->{'SKY_VALUE_MAG'};
      $extinct = $dqc->{'EXTINCTION'};
      $l1zp = $dqc->{'ZEROPOINT'};
      $l1zperr = $dqc->{'ZEROPOINT_ERROR'};
      $l1zpsrc = $dqc->{'ZEROPOINT_SRC'};
    }
#      print "FWHM=$fwhm, Elong=$elong, ElongPA=$elongPA\n";
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1SKYBRT VALUE=$skybrt COMMENT=[mag/arcsec^2]|Estimated|sky|brightness
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1PHOTOM VALUE=$extinct COMMENT=[mags]|Estimated|extinction
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1ZP VALUE=$l1zp COMMENT=[mags]|Instrumental|zeropoint
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1ZPERR VALUE=$l1zperr COMMENT=[mags]|Error|on|Instrumental|ZP
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1ZPSRC VALUE=$l1zpsrc STRING=True COMMENT=Source|of|Instrumental|ZP

# Set Data quality params and flags. Now spun-off to seperate primitive.

      _SET_QC_FLAGS_


# Set public/private flag and release date
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1PUBPRV VALUE='private' COMMENT=Public|or|private|data?

      my $frmdate =  $Frm->hdr( "ORACDATETIME");
      my $year = substr($frmdate, 0, 4);
      my $pubdate = $year+1 . substr($frmdate, 4, );
#      orac_print "$frmdate $pubdate\n";
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1PUBDAT VALUE=$pubdate COMMENT=[UTC]|Date|the|frame|becomes|public

      _SET_FILE_FITS_ITEM_ FILE=$file KEY=ENGSTATE VALUE='COMMISSIONING'

# Set recipes used
      my $recipe = $Frm->recipe;
#      orac_print "Recipe=$recipe\n";
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=PCRECIPE VALUE=$recipe COMMENT=Processing|Recipes|required/used
      my $postprocrecipe = 'timecorrect';
      _SET_FILE_FITS_ITEM_ FILE=$file KEY=PPRECIPE VALUE=$postprocrecipe COMMENT=Post-Processing|Recipes|required/used
#      use Data::Dumper ; print Dumper $Frm->hdr;

# Set the ASN_TYPE to prevent warning in _CREATE_GRAPHIC_FROM_FILE_
      $Frm->uhdr( "ASN_TYPE", 'obs');

# A little callback
      my $create_graphic = sub {
      	my $out = shift;
#          _CREATE_GRAPHIC_FROM_FILE_ FILE=$out . "_small" XRES=256 YRES=256 TYPE=PNG
      	  _CREATE_GRAPHIC_FROM_FILE_ FILE=$out XRES=512 YRES=512 TYPE=PNG
      };

# Create graphic file
      $create_graphic->( $file );
      my $pngfile = $file . '.png';
      my $renamefile = $pngfile;
      $renamefile =~ s/00_bp_ff/90/;
      unlink $renamefile;
#      print "New filename=$pngfile $renamefile\n";
      rename $pngfile, $renamefile;

# If we have a final destination environment var. set, move files there.
      if ( defined $ENV{FINAL_DATA_OUT} ) {
      	move($renamefile, $ENV{FINAL_DATA_OUT});
	orac_print "Moving ". $renamefile . " to final data place=" . $ENV{FINAL_DATA_OUT} . "\n";
      }
# Convert FITS file
#      my $wcs = $Frm->read_wcs( $file );
#      $wcs->Set("System=ICRS");
      _CONVERT_TO_FITS_
      my $fitsfile = $_CONVERT_TO_FITS_{FILENAME};
      $renamefile = $fitsfile;
      $renamefile =~ s/00_bp_ff/90/;
      unlink $renamefile;
#      print "New filename=$fitsfile $renamefile\n";
      rename $fitsfile, $renamefile;

# Call timecorrect code
      my $tcorr_path = File::Spec->catfile( $ENV{ORAC_DIR},"bin","timecorrect.py");
      my @tcorr_args = ($tcorr_path, $renamefile);
      system(@tcorr_args);
      if ( $? != 0 ) {
      	printf "child exited with value %d\n", $? >> 8;
      }
# If we have a final destination environment var. set, move files there.
      if ( defined $ENV{FINAL_DATA_OUT} ) {
      	move($renamefile, $ENV{FINAL_DATA_OUT});
	orac_print "Moving ". $renamefile . " to final data place=" . $ENV{FINAL_DATA_OUT} . "\n";
	$renamefile =~ s/90.fits/90_cat.fits/;
	orac_print "Moving ". $renamefile . " to final data place=" . $ENV{FINAL_DATA_OUT} . "\n";
      	move($renamefile, $ENV{FINAL_DATA_OUT});
      }
    }
