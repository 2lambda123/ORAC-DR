# -*-perl-*-

=head1 NAME

_ADD_AUTO_ASTROMETRY_ -- Performs automated astrometric corrections.

=head1 DESCRIPTION

This primitive automatically corrects astrometry for a given
observation.  It does so by downloading a catalogue from a source
(typically 2MASS), detects objects in the observation, correlates
between the two catalogues, and calculates an astrometric solution.

=head1 ARGUMENTS

=over 4

=item GROUP = LOGICAL (Given)

If set to true (1), then the current Group object will have its
astrometry corrected. Otherwise, this primitive operates on the
current Frame object. [1]

=item MAXCOEFF = INTEGER (Given)

The maximum coefficient model to perform. The allowed values are 4, 6,
7, 8, and 9. See SUN/5 for a description of the models. If, for
example, ASTROM can only calculate a 6-coefficient model and a
9-coefficient model was requested, then the 6-coefficient model will
be used. [9]

=item OUTPUT_CATALOGUE = STRING (Given)

If set, then an output catalogue of detected objects will be written
to this value.

=item STATISTICS = LOGICAL (Given)

If set to true (1), then image statistics will be calculated for the
resulting frame. For a full list of statistics, see the
C<_CALCULATE_IMAGE_STATISTICS_> primitive. [0]

=head1 NOTES

=over 4

=item *

This primitive is suitable for infrared imaging instruments.

=item *

Processing only occurs when the steering header ADD_ASTROMETRY is
true.

=item *

Processing occurs on the current Group object.

=item *

Astrometric correction will probably fail if fewer than five objects
are detected in the frame. Should this occur, the original WCS will be
retained.

=item *

Should an astrometric solution be found, the WCS in the current Group
will be overwritten with the solution.

=back

=head1 REQUIRED PERL MODULES

Starlink::Autoastrom.

=head1 AUTHORS

Brad Cavanagh (JAC) <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2005 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Only do this if we're told.
if( $Frm->uhdr( "ADD_ASTROMETRY" ) ) {

  # Deal with parameters.
  my $in;
  my $group;
  my $Obj;
  if( defined( $_ADD_AUTO_ASTROMETRY_{GROUP} ) &&
      $_ADD_AUTO_ASTROMETRY_{GROUP} == 0 ) {
    ( $in, my $out ) = $Frm->inout( "_cat" );
    $group = 0;
    $Obj = $Frm;
  } else {
    $in = $Grp->file;
    $group = 1;
    $Obj = $Grp;
  }
  my $statistics = $_ADD_AUTO_ASTROMETRY_{STATISTICS};
  if( ! defined( $statistics ) ) {
    $statistics = 0;
  }
  my $maxcoeff = $_ADD_AUTO_ASTROMETRY_{MAXCOEFF};
  if( ! defined( $maxcoeff ) ||
      ! ( $maxcoeff == 4 ||
          $maxcoeff == 6 ||
          $maxcoeff == 8 ||
          $maxcoeff == 9 ) ) {
    $maxcoeff = 9;
  }

  orac_print "Adding accurate astrometry to $in.\n";
  $Obj->uhdr( "ASTROMETRY_ADDED", 0 );

  # We need the Starlink::Autoastrom module. Display a warning
  # to the user if it cannot be loaded.
  require Starlink::Autoastrom;
  if( $@ ) {
    orac_warn "Could not load the Starlink::Autoastrom Perl module: $@\n";
    orac_warn "Continuing with data reduction.\n";
  } else {

    # Determine the output catalogue filename.
    _GET_CATALOGUE_NAME_ GROUP=$_ADD_AUTO_ASTROMETRY_{GROUP}
    my $output_catalogue = $_GET_CATALOGUE_NAME_{NAME};

    # Get the RA and Dec of the tracking centre for this frame.
    my $ra = $Frm->uhdr( "ORAC_RA_BASE" );
    my $dec = $Frm->uhdr( "ORAC_DEC_BASE" );

    # Replace decimal points with the letter 'p'.
    $ra =~ s/\./p/g;
    $dec =~ s/\./p/g;

    # The SkyCat cache filename will be ${ra}${dec}.cat.
    my $skycat_cache = "$ra$dec.cat";

    # If one exists and it's older than 24 hours, delete it.
    if( -e $skycat_cache ) {
      my $mtime = (stat $skycat_cache)[9];
      my $age_days = ( time() - $mtime ) / ( 60 * 60 * 24 );
      if( $age_days > 1 ) {
        unlink $skycat_cache or die "Could not unlink $skycat_cache: $!";
      }
    }

    # Use a five arcsecond aperture. Need to convert this to pixels
    # for autoastrom.
    my $aperture_as = 5.0;
    _GET_PLATE_SCALE_
    my $platescale = $_GET_PLATE_SCALE_{PLATESCALE};
    my $aperture_pixel = $aperture_as / $platescale * 2;

    # Create a new Starlink::Autoastrom object.
    my $auto = new Starlink::Autoastrom( ndf => $in,
                                         aperture => $aperture_pixel,
                                         catalogue => '2MASS@CDS',
                                         detected_catalogue => $output_catalogue,
                                         detection_threshold => 5.0,
                                         skycat_catalogue_in => $skycat_cache,
                                         skycat_catalogue_out => $skycat_cache,
                                         maxfit => $maxcoeff,
                                         maxobj_corr => 500,
                                         match => 'RITMatch',
                                         messages => 0,
                                         verbose => 0,
                                         keeptemps => 0,
                                         starlink_output => 0,
                                         maxiter => 10,
                                         iterrms_diff => 0.01,
                                         iterrms_abs => 0.1,
                                         std_output => sub { orac_print @_; },
                                         error_output => sub { orac_err @_; },
                                       );

    # Variable to hold astrom-ized catalogue.
    my $catalogue;
    my $merged_catalogue;

    # Find the solution, wrapping in an eval to trap any errors.
    eval{( $catalogue, $merged_catalogue ) = $auto->solve};
    if( $@ ) {
      orac_warn "Error adding accurate astrometry to $in: $@";
      orac_warn "Continuing with data reduction.\n";
    } else {
      orac_print "Accurate astrometry added to $in.\n";
      orac_print "Catalogue written to $output_catalogue.\n";
      $Obj->uhdr( "ASTROMETRY_ADDED", 1 );

      # Now we might want to do some image statistics.
      if( $statistics ) {
        orac_print "\n";
        _CALCULATE_IMAGE_STATISTICS_ IMAGE_CATALOGUE=$catalogue MATCHED_CATALOGUE=$merged_catalogue GROUP=$group MAGNITUDE_TYPE=MAG_APER1
      }
    }
  }

  # Tidy up output.
  orac_print "\n";

}

