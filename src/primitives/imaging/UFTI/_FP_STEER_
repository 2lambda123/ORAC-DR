#+
# Name:
#    _FP_STEER_
#
# Purpose:
#    Steers processing for FP recipes.
#
# Language:
#    Perl5
#
# Description: 
#    This primitive control processing for FP recipes through
#    steering headers listed below.
#
# Steering Headers:
#    CYCLE_NUMBER = INTEGER
#       Number of the cycle, a cycle being a set of frames to complete a
#       pass through the recipe.  The first cycle is 0.
#    DIFFERENCE_PAIR = LOGICAL
#       Whether or not to subtract pairs.  It is true every second frame.
#    DO_APHOT = LOGICAL
#       Whether or not perform aperture photometry.  Photometry occurs
#       after the mosaic is made.
#    FLAT_DIVIDE = LOGICAL
#       Whether or not to flat field.  Flat-fielding occurs at the
#       completion of each cycle of NUMBER frames.
#    MAKE_FLAT = LOGICAL
#       Whether or not to make the flat.  The flat is made when all
#       the jittered frames in the first cycle are available.
#    MAKE_MOSAIC = LOGICAL
#       Whether or not register the frames and make the wavelength
#       mosaic.  The mosaic is made once all the wavelength-jittered
#       frames in a cycle are available.
#    MAKE_SPATIAL_MOSAIC = LOGICAL
#       Whether or not register the mosaics from different spatial
#       positions and make a master mosaic.  The master mosaic
#       is made once all the spatially jittered frames in a cycle are
#       available, and argument NUMBER is 3 or greater.
#    MASK_OBJECTS = LOGICAL
#       Whether or not to mask the objects.  Masking occurs when all the
#       jittered frames in a cycle are available.
#    ON_OR_OFF = LOGICAL
#       Set to "on" when the frame is on the line, and to "off" whien it
#       is off the line.
#    PAIR_ORDER = LOGICAL
#       Pair subtraction order, true means take second from the first,
#       and false means take the first from the second.  The pattern
#       alternates true-false every fourth frame, except when NPAIRS=2,
#       where it is always true.
#    TARGET_OR_SKY = CHARACTER
#       This is "target" for a target frame, and "sky" for a sky calibration
#       frame.
#    USE_VARIANCE = LOGICAL
#       Whether or not variance processing is to occur.  This equates to
#       argument USEVAR.
#
# Groups:
#    Whenever argument NUMBER is 3 or greater, a group of frames is created,
#    retained by storing a reference in the $Grp user header.  Its header
#    name is SPATIAL_GROUP.  It inherits the main group's headers and user
#    headers.  Its file has the same name as the main group's file.
#
# Arguments:
#    NPAIRS = INTEGER (Given)
#       The number of frame pairs to be differenced.  It must be a multiple
#       of 2 otherwise 4 is assumed.  A value of four or more is assumed to
#       indicate sky subtraction.  [4]
#    NUMBER = INTEGER (Given)
#       The number of spatial jitter positions.  For each spatial position 
#       there are NPAIRS pairs of frames.  A value of 1 also dictates
#       that no jittering has occurred.  To make a master mosaic combining
#       spatial positions NUMBER should be at least 3.  If NUMBER is 
#       absent, the number of offsets, as given by internal header
#       ORAC_NUMBER_OF_OFFSETS, minus one is used.  If neither is
#       available, 1 is used.  An error state arises if the number of
#       jittered frames is fewer than 3.  []
#    USEVAR = LOGICAL (Given)
#       Whether or not to create and propagate variance arrays.  [0]
#
# Notes:
#    -  This primitive is only suitable for UFTI.
#    -  Processing only occurs for object and sky frames.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2001 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Obtain the number of frames in the jitter pattern.
# ==================================================

# Obtain the number of frames in the spectral-line jitter pattern.
       my $nframe = max( 2, ( $_FP_STEER_{NPAIRS} || 4 ) ) * 2;
       if ( $nframe % 4 != 0 ) {
          $nframe = 8; 
       }

# Obtain the number of spatial positions in the jitter pattern.
# See if a hardwired value has been supplied in the recipe.  This
# deals with old recipes with fixed numbers and cases where a frame or
# more is missing.
       my $number = $_FP_STEER_{NUMBER};

# Otherwise use the ORAC_NUMBER_OF_OFFSETS internal header.  In full
# ORAC, this stores the total number of offsets used, but ignores repeat
# iterators.  By convention there is always an offset to the origin at
# the end, hence the recipe requires ORAC_NUMBER_OF_OFFSETS-1.
       if ( ! defined ( $number ) ) {
          $number = $Frm->uhdr( "ORAC_NUMBER_OF_OFFSETS" );
          if ( defined( $number ) ) {
             $number--;

# At present ORAC_NUMBER_OF_OFFSETS gives the total offsets, i.e. the
# number of spatial jitter positions as well as wavelength shifts.  A
# multiple of eight frames means sky subtraction, and hence more offsets.
             if ( $nframe >= 8 ) {
                $number /= $nframe;
             }

# Report invalid number of frames.
             if ( $number < 3 ) {
                orac_err "The number of spatially jittered mosaics ($number) is less " .
                         "than 3.\n";
                $number = 5;
             }

# Finally default to the original 1, i.e. no spatial jittering.
          } else {
             $number = 1;
          }

       } else {

# Report invalid number of frames.
          if ( $number < 3 ) {
             orac_err "The number of spatially jittered mosaics ($number) is less " .
                      "than 3.\n";
             $number = 5;
          }
       }

# Obtain the USEVAR argument.  Default to false.
       my $usevar = $_FP_STEER_{USEVAR};
       $usevar = defined( $usevar ) ? $usevar : 0;
       $Frm->uhdr( "USE_VARIANCE", $usevar ); 

# Specify during processing of which frames should the pairs be subtracted.
       my $totframe = $nframe * $number;
       my $fn = $Grp->num;
       if ( ( $fn + 1 ) % 2 == 0 ) {
          $Frm->uhdr( "DIFFERENCE_PAIR", 1 );

# A difference is to be made, but in what order.  PAIR_ORDER = 1 means
# take the second from the first of the pair.  PAIR_ORDER = 0 is the
# reverse.  Put another way, the order is ABBA as the B is always taken
# from the A for sky-subtracted, but just ABAB for no sky case.
          if ( $nframe == 4 ) {
             $Frm->uhdr( "PAIR_ORDER", 1 );
          } elsif ( ( $fn + 1 ) % 4 == 0 ) {
             $Frm->uhdr( "PAIR_ORDER", 0 );
          } else {
             $Frm->uhdr( "PAIR_ORDER", 1 );
          }
          
       } else {
          $Frm->uhdr( "DIFFERENCE_PAIR", 0 );
       }

# Specify during processing of which frames should the flat be created.
# Just use the first flat for all cycles.  This will save time.
       if ( ( $fn + 1 ) == $nframe ) {
          $Frm->uhdr( "MAKE_FLAT", 1 );
       } else {
          $Frm->uhdr( "MAKE_FLAT", 0 );
       }

# Specify during processing of which frames should the flat be applied
# a mosaic created, and aperture photometry performed.
       if ( ( $fn + 1 ) % $nframe == 0 ) {
          $Frm->uhdr( "FLAT_DIVIDE", 1 );
          $Frm->uhdr( "MAKE_MOSAIC", 1 );
          $Frm->uhdr( "MASK_OBJECTS", 1 );
          $Frm->uhdr( "DO_APHOT", 1 );
       
       } else {
          $Frm->uhdr( "FLAT_DIVIDE", 0 );
          $Frm->uhdr( "MAKE_MOSAIC", 0 );
          $Frm->uhdr( "MASK_OBJECTS", 0 );
          $Frm->uhdr( "DO_APHOT", 0 );
       }

# Insert the cycle number of the set of frames. 
       $Frm->uhdr( "CYCLE_NUMBER", int( $fn / $nframe ) );
       $Frm->uhdr( "SPATIAL_CYCLE_NUMBER", int( $fn / $totframe ) );

# Insert the number of frames in the jitter.
       $Frm->uhdr( "JITTER_NUMBER", $nframe );

# Specify when to make a spatial mosaic.
       if ( $number == 1 || ( $fn + 1 ) < $totframe ) {
          $Frm->uhdr( "MAKE_SPATIAL_MOSAIC", 0 );
       } else {
          $Frm->uhdr( "MAKE_SPATIAL_MOSAIC", 1 );
       }
       
# We need a group to store the wavelength-jittered mosaics for each
# spatial position.  Create the group of spatial mosaics and inherit the
# group file name from the main group with an appropriate suffix.
       if ( $fn == 0 ) {
          my $sGrp = $Grp->new;
          $sGrp->file( $Grp->file );

# Propagate the headers to the new group.
          %{ $sGrp->hdr } = %{ $Grp->hdr };
          %{ $sGrp->uhdr } = %{ $Grp->uhdr };

# Store the pointer to the group in the main Group user header.
          $Grp->uhdr( "SPATIAL_GROUP", $sGrp );
       }

# All frames are `target'.  Some more-general primitives need to select 
# targets from sky frames.
       if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ) {
          $Frm->uhdr( "TARGET_OR_SKY", "target" );
       } else {
          $Frm->uhdr( "TARGET_OR_SKY", "sky" );
       }

# Distinguish between on and off source.  Sequence is on-off-off-on
# repeated.
       if ( int( ( $fn + 1 ) / 2 ) % 2 == 0 ) {
          $Frm->uhdr( "ON_OR_OFF", "on" );
       } else {
          $Frm->uhdr( "ON_OR_OFF", "off" );
       } 
    }

# Podule
# ======

=head1 NAME

_FP_STEER_ -- Steers processing for FP recipes.

=head1 DESCRIPTION

This primitive control processing for FP recipes through
steering headers listed below.

=head1 STEERING HEADERS

=over 4

=item CYCLE_NUMBER = INTEGER

Number of the cycle, a cycle being a set of frames to complete a
pass through the recipe.  The first cycle is 0.

=item DIFFERENCE_PAIR = LOGICAL

Whether or not to subtract pairs.  It is true every second frame.

=item DO_APHOT = LOGICAL

Whether or not perform aperture photometry.  Photometry occurs
after the mosaic is made.

=item FLAT_DIVIDE = LOGICAL

Whether or not to flat field.  Flat-fielding occurs at the
completion of each cycle of NUMBER frames.

=item MAKE_FLAT = LOGICAL

Whether or not to make the flat.  The flat is made when all
the jittered frames in the first cycle are available.

=item MAKE_MOSAIC = LOGICAL

Whether or not register the frames and make the wavelength
mosaic.  The mosaic is made once all the wavelength-jittered
frames in a cycle are available.

=item MAKE_SPATIAL_MOSAIC = LOGICAL

Whether or not register the mosaics from different spatial
positions and make a master mosaic.  The master mosaic
is made once all the spatially jittered frames in a cycle are
available, and argument NUMBER is 3 or greater.

=item MASK_OBJECTS = LOGICAL

Whether or not to mask the objects.  Masking occurs when all the
jittered frames in a cycle are available.

=item ON_OR_OFF = LOGICAL

Set to "on" when the frame is on the line, and to "off" whien it
is off the line.

=item PAIR_ORDER = LOGICAL

Pair subtraction order, true means take second from the first,
and false means take the first from the second.  The pattern
alternates true-false every fourth frame, except when NPAIRS=2,
where it is always true.

=item TARGET_OR_SKY = CHARACTER

This is "target" for a target frame, and "sky" for a sky calibration
frame.

=item USE_VARIANCE = LOGICAL

Whether or not variance processing is to occur.  This equates to
argument USEVAR.

=back

=head1 GROUPS

Whenever argument NUMBER is 3 or greater, a group of frames is created,
retained by storing a reference in the $Grp user header.  Its header
name is SPATIAL_GROUP.  It inherits the main group's headers and user
headers.  Its file has the same name as the main group's file.

=head1 ARGUMENTS

=over 4

=item NPAIRS = INTEGER (Given)

The number of frame pairs to be differenced.  It must be a multiple
of 2 otherwise 4 is assumed.  [4]

=item NUMBER = INTEGER (Given)

The number of spatial jitter positions.  For each spatial position
there are NPAIRS pairs of frames.  A value of 1 also dictates that no
jittering has occurred.  To make a master mosaic combining spatial
positions NUMBER should be at least 3.  If NUMBER is absent, the
number of offsets, as given by internal header ORAC_NUMBER_OF_OFFSETS,
minus one is used.  If neither is available, 1 is used.  An error
state arises if the number of jittered frames is fewer than 3.  []

=item USEVAR = LOGICAL (Given)

Whether or not to create and propagate variance arrays.  [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is only suitable for UFTI.

=item *

Processing only occurs for object frames.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2001 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
