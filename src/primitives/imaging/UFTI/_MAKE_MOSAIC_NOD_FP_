#+
# Name:
#    _MAKE_MOSAIC_NOD_FP_
#
# Purpose:
#    Forms a mosaic for a differenced-pairs group in an FP_JITTER recipe.
#
# Language:
#    Perl5
#
# Description:
#    This primitive makes a wavelength mosaic from the object frames in the
#    differenced-frame group of an FP_JITTER recipe.  It merely calls the
#    standard _MAKE_MOSAIC_ primitive using the difference group
#    instead of the current $Grp.  The mosaic is renamed, appending a
#    suffix "_w<n>" for the nth spatial position, to give unique
#    names; and is stored in the group specified by reference in the
#    group internal header SPATIAL_GROUP.
#
# Arguments:
#    FILLBAD = LOGICAL (Given)
#       If true (1), replace the bad pixels in the current cycle's
#       mosaic with a smooth function derived from its neighbours. 
#       Otherwise, leave the bad pixels unaltered.  [1]
#    INT_METHOD = CHARACTER (Given)
#       The interpolation method.  This is either "linint" for bi-linear
#       interpolation, or "nearest" for nearest neighbour.  The latter
#       takes about half the time.  ["linint"]
#    RESAMPLE = LOGICAL (Given)
#       If true (1), resample the current cycle's frames to the same
#       Cartesian co-ordinate system using the method given by argument
#       INT_METHOD.  If false (0), use integer offsets and changes of
#       origin to register the frames.  The latter is many times
#       faster and is recommended for pipeline operation.
#
# Notes:
#    -  This primitive is suitable for UFTI.
#    -  Processing only occurs when the steering header MAKE_MOSAIC is
#    true.
#    -  The mosaic is untrimmed and has no zero-point shifts applied.
#    -  The arguments are merely passed to _MAKE_MOSAIC_ and the group
#    mosaic name is restored to that of the current $Grp, not that of
#    the difference group.  The updated headers are also propagated
#    back into the current $Grp from the sub-group.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Selection
# =========

# Test whether or not it is time to make a mosaic.
    my $makemos = $Frm->uhdr( "MAKE_MOSAIC" );
    if ( $makemos ) {

# Arguments
# =========

# Obtain the value for the interpolation.
       my $intmethod = ( $_MAKE_MOSAIC_NOD_FP_{INT_METHOD} || "linint" );

# Determine whether or not to fill bad pixels.
       my $fillbad = $_MAKE_MOSAIC_NOD_FP_{FILLBAD};
       $fillbad = defined( $fillbad ) ? $fillbad : 1;

# Determine whether or not to resample.
       my $resample = $_MAKE_MOSAIC_NOD_FP_{RESAMPLE};
       $resample = defined( $resample ) ? $resample : 1;

# Make the mosaic.
# ================

# Obtain the cycle numbers for the wavelength and spatial mosaics.
       my $spatial_cycle = $Frm->uhdr( "SPATIAL_CYCLE_NUMBER" );
       my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" ); 

# Make the group of differenced pairs the local version of $Grp within
# the context delimited by the braces.  The mosaic name is the group
# name.  Define outside the context so that it persists when the
# Grp reverts to the main Grp.
       my ( $mosname, $subGrp );
       {
          my $Grp = $Grp->uhdr( "DIFFERENCE_GROUP" );

# Make a copy of the group identifier which persists outside the current
# context.  It's needed to propagate the headers.
          $subGrp = $Grp;

# Make an untrimmed mosaic using the supplied parameters.  Do not
# apply zero-point shifts or trim.
          _MAKE_MOSAIC_ INT_METHOD=$intmethod FILLBAD=$fillbad RESAMPLE=$resample TRIM=0 ZERO=0

# The group name is changed in _MAKE_MOSAIC_ to the mosaic name. 
# However, that's only for the difference group, not the main Grp.  So 
# save the name outside this group context, and modify the file
# associated with main Grp.
          $mosname = $Grp->file;

       }
       $Grp->file( $mosname );

# Propagate the modified headers back to the original group.
       %{ $Grp->hdr } = %{ $subGrp->hdr };
#       %{ $Grp->uhdr } = %{ $subGrp->uhdr };

# Save the mosaic in the specified group.  Find the number of frames
# already in the group so that each wavelength mosaic has a unique name.
       if ( defined ( $Grp->uhdr( "SPATIAL_GROUP" ) ) ) {
          my $mosGrp = $Grp->uhdr( "SPATIAL_GROUP" );
          my $count = $mosGrp->num;
          if ( !defined( $count ) ) {
             $count = 0;
          } else {
             $count++;
          }

# The first mosaic from _MAKE_MOSAIC_ doesn't copy to a _0, since it
# does not know if there are multiple cycles.  So copy the original mosaic
# in this case.
          my $inname;
          if ( $count == 0 ) {
             $inname = $mosname;
          } else {
             $inname = "${mosname}_${count}";
          }

# Copy the wavelength mosaic and remove the original file.
          my $outname = "${mosname}_w${count}";
          my $param = "in=$inname out=$outname";
          $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "$param" );
          orac_print "Copied current wavelength mosaic to $outname\n";

# Create a new frame object for the wavelength mosaic, and store in
# the spatial-mosaic group.  Also set the cycle number so that
# _GENERATE_OFFSETS_ and _MAKE_MOSAIC_ can be used to register the group
# and make the final mosaic.
          my $wFrm = $Frm->new( $outname );
          $wFrm->uhdr( "SPATIAL_CYCLE_NUMBER", $spatial_cycle );
          $wFrm->uhdr( "CYCLE_NUMBER", $spatial_cycle );
          $mosGrp->push( $wFrm );

# Remove the unwanted frames.  Note that _0 mosaic is only created on
# the second cycle.
          if ( $count > 0 ) {
             _DELETE_A_FRAME_ FRAME=$inname
          }
          if ( $count == 1 ) {
             my $mosnam = "${mosname}_0";
             _DELETE_A_FRAME_ FRAME=$mosnam
          }
       }
    }

# Podule
# ======

=head1 NAME

_MAKE_MOSAIC_NOD_FP_ -- Forms a mosaic for a differenced-pairs group in an FP_JITTER recipe.

=head1 DESCRIPTION

This primitive makes a wavelength mosaic from the object frames in the
differenced-frame group of an FP_JITTER recipe.  It merely calls the
standard _MAKE_MOSAIC_ primitive using the difference group
instead of the current $Grp.  The mosaic is renamed, appending a
suffix "_wE<lt>nE<gt>" for the nth spatial position, to give unique
names; and is stored in the group specified by reference in the
group internal header SPATIAL_GROUP.

=head1 ARGUMENTS

=over 4

=item FILLBAD = LOGICAL (Given)

If true (1), replace the bad pixels in the current cycle's
mosaic with a smooth function derived from its neighbours. 
Otherwise, leave the bad pixels unaltered.  [1]

=item INT_METHOD = CHARACTER (Given)

The interpolation method.  This is either "linint" for bi-linear
interpolation, or "nearest" for nearest neighbour.  The latter
takes about half the time.  ["linint"]

=item RESAMPLE = LOGICAL (Given)

If true (1), resample the current cycle's frames to the same
Cartesian co-ordinate system using the method given by argument
INT_METHOD.  If false (0), use integer offsets and changes of
origin to register the frames.  The latter is many times
faster and is recommended for pipeline operation.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UFTI.

=item *

Processing only occurs when the steering header MAKE_MOSAIC is
true.

=item *

The mosaic is untrimmed and has no zero-point shifts applied.

=item *

The arguments are merely passed to _MAKE_MOSAIC_ and the group mosaic
name is restored to that of the current $Grp, not that of the
difference group.  The updated headers are also propagated back into
the current $Grp from the sub-group.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
