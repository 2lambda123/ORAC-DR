#+
# Name:
#    _DEFINE_POL_REGIONS_
#
# Purpose:
#    Determine the extents of object and sky regions of an UFTI polarimetry frame.
#
# Language:
#    Perl5

# Description:
#    A polarimetry frame is divided into four sections: object and sky
#    for the e- and o-beams.  This primitive returns the extents of these
#    regions for subsequent extraction and sky subtraction.  The frames
#    are deemed to be aligned approximately with right ascension and
#    declination and the jittering is along the right-ascension axis.
#    Also the order of the regions from north to south is e target,
#    o target, e sky, and o sky for the full array.  For the sub-array
#    there are only two regions e target and o target in the same
#    direction; for each of these the sky is extracted from a region
#    away from the source.
#
#    At present fixed limits are used, but sigma-clipped profiling is
#    possible to determine where each region starts and ends along the
#    declination axis.
#    
#    The current target limits are 30% to 70% of the frame width about
#    the jittered right-ascension centre using the telescope offsets, or
#    10% to 90% if argument EXTENDED is true.  Thus the limits define a
#    section 40% or 80% of the right-ascension width of the frame
#    roughly centred on the source.  The restriction is to make mosaics
#    with few pixels not derived from all contributing jittered frames,
#    since there are usually only three jitter positions, and to allow
#    a reasonable jitter step.  If the jitter size was restricted, the
#    limits could be expanded for extended sources.
#
#    The current sky limits are 1% to 99% of the frame width along the
#    right-ascension axis for the full array.  For the sub-array these
#    are either 5% to 40% or 60% to 95% depending on the offset of the
#    source.
#
# Arguments:
#    ESBOUNDS( 4 ) = INTEGER (Returned)
#       The pixel bounds defining the e-beam sky region in a raw
#       polarisation frame.
#    ETBOUNDS( 4 ) = INTEGER (Returned)
#       The pixel bounds defining the e-beam target region in a raw
#       polarisation frame.
#    EXTENDED = LOGICAL (Given)
#       If true (1), wider right ascension limits are used for the
#       target regions, 10% to 90%, instead of 30% to 70%. [0]
#    OSBOUNDS( 4 ) = INTEGER (Returned)
#       The pixel bounds defining the o-beam sky region in a raw
#       polarisation frame.
#    OTBOUNDS( 4 ) = INTEGER (Returned)
#       The pixel bounds defining the o-beam target region in a raw
#       polarisation frame.
#
# Notes:
#    -  This primitive is suitable for UFTI.
#    -  It only operates on object frames.
#    -  Fractional pixel limits are rounded to the next lower integer.
#    -  The declination pixel limits for the sections are as follows.
#    o sky: 69--264; e sky: 320--484; o target: 601--764; e target: 
#    824--988.
#    -  The declination limits for the sections when using the
#    sub-array are as follows.
#    o target, sky: 77--241; e target, sky: 287--451.
#    -  This primitive decides if it is using the sub-array by looking
#    at the size of the array in the x-dimension.  If this value is larger
#    than 1000, then the full array is assumed.  Otherwise, the sub-array
#    is assumed.
#    -  Allowance is made if the chip is rotated such that the
#    declination axis increases or decreases with x.
#
#
# Tasks:
#    KAPPA: NDFTRACE.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#    BC: Brad Cavanagh (JAC)
#
# Copyright:
#    Copyright (C) 1998-2004 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ) {

# Find the width limits in right ascension of the target regions.
       my $extended = $_DEFINE_POL_REGIONS_{EXTENDED};
       $extended = defined( $extended ) ? $extended: 0;

       my ( $ra_frac_l, $ra_frac_u );
       if ( $extended ) {
          $ra_frac_l = 0.10; $ra_frac_u = 0.90;
       } else {
          $ra_frac_l = 0.30; $ra_frac_u = 0.70;
       }

# Obtain the rotation angle in degrees.
       my $rotangle = $Frm->uhdr( "ORAC_ROTATION" );
       $rotangle = defined( $rotangle ) ? $rotangle : 0.0;

# Find the offsets in pixels.
       _GET_CARTESIAN_TELESCOPE_OFFSETS_
       my $xoffset = $_GET_CARTESIAN_TELESCOPE_OFFSETS_{XOFF};
       my $yoffset = $_GET_CARTESIAN_TELESCOPE_OFFSETS_{YOFF};

# Obtain the midpoint of a band.
# ==============================

# Obtain the frame dimensions by tracing the NDF.
       my $param1 = "ndf=".$Frm->file;
       my $ORAC_STATUS;
       $Mon{"ndfpack_mon"}->obeyw("ndftrace", "$param1");

# Extract the bounds of the frame.
       ( $ORAC_STATUS, my @lbnd ) = $Mon{"ndfpack_mon"}->get( "ndftrace", "lbound" );
       ( $ORAC_STATUS, my @ubnd ) = $Mon{"ndfpack_mon"}->get( "ndftrace", "ubound" );

# Obtain the dimensions.
       my $xdim = $ubnd[ 0 ] - $lbnd[ 0 ] + 1;
       my $ydim = $ubnd[ 1 ] - $lbnd[ 1 ] + 1;

# Determine if we're using the sub-array.
      my $subarray = 0;
      if ( $xdim < 1000 ) {
        $subarray = 1;
      }

# Find the offset in right ascension as a fraction of
# frame width (along axis closely aligned to the right ascension).  Here
# we assume that rotation is either near 0 or +/-90 degrees.  In practice
# this probably doesn't matter unless a non-square chip is introduced.
       my $ra_off_f;
       if ( abs( $rotangle ) < 45 ) {
          $ra_off_f = $xoffset / $xdim;
       } else {
          $ra_off_f = $yoffset / $ydim;
       }

# Define fractional limits.
# =========================

# Set the limits of the e- and o-beam target and sky as percentages
# of the image, along the axis perpendicular to the bands (declination
# direction).  The offsets are by convention only in right ascension.
        my ( @et_lbnd_f, @et_ubnd_f, @ot_lbnd_f, @ot_ubnd_f );
        my ( @es_lbnd_f, @es_ubnd_f, @os_lbnd_f, @os_ubnd_f );
        if ( $subarray ) {
           @et_lbnd_f = ( $ra_frac_l + $ra_off_f, 0.470 );
           @et_ubnd_f = ( $ra_frac_u + $ra_off_f, 0.150 );
           @ot_lbnd_f = ( $ra_frac_l + $ra_off_f, 0.880 );
           @ot_ubnd_f = ( $ra_frac_u + $ra_off_f, 0.560 );

# We need to define different sky regions depending on the offset,
# since we want to be as far from the source as possible.
           if ( $ra_off_f > 0 ) {
              @es_lbnd_f = ( 0.05, 0.470 );
              @es_ubnd_f = ( 0.40, 0.150 );
              @os_lbnd_f = ( 0.05, 0.880 );
              @os_ubnd_f = ( 0.40, 0.560 );
           } else {
              @es_lbnd_f = ( 0.60, 0.470 );
              @es_ubnd_f = ( 0.95, 0.150 );
              @os_lbnd_f = ( 0.60, 0.880 );
              @os_ubnd_f = ( 0.95, 0.560 );
           }
 
        } else {

# We're using the full array.
           @et_lbnd_f = ( $ra_frac_l + $ra_off_f, 0.805 );
           @et_ubnd_f = ( $ra_frac_u + $ra_off_f, 0.965 );
           @ot_lbnd_f = ( $ra_frac_l + $ra_off_f, 0.587 );
           @ot_ubnd_f = ( $ra_frac_u + $ra_off_f, 0.747 );
           @es_lbnd_f = ( 0.01, 0.313 );
           @es_ubnd_f = ( 0.99, 0.473 );
           @os_lbnd_f = ( 0.01, 0.068 );
           @os_ubnd_f = ( 0.99, 0.258 );
       }

# Flip the axes if right ascension is aligned with y axis of the frame.
       if ( abs( $rotangle ) > 45 ) {
          @et_lbnd_f = reverse( @et_lbnd_f );
          @et_ubnd_f = reverse( @et_ubnd_f );
          @ot_lbnd_f = reverse( @ot_lbnd_f );
          @ot_ubnd_f = reverse( @ot_ubnd_f );
          @es_lbnd_f = reverse( @es_lbnd_f );
          @es_ubnd_f = reverse( @es_ubnd_f );
          @os_lbnd_f = reverse( @os_lbnd_f );
          @os_ubnd_f = reverse( @os_ubnd_f );
       }

# Allow for positive right-angle rotation, i.e. where the declination axis
# corresponds to the negative x axis.  To get the same pixel, as we
# round down, add a half pixel more than 1 in addition to normal one
# pixel extra to subtract from.  Switch the bounds so that the upper is
# greater than the lower.
       if ( $rotangle > 45 ) {
          my $flips = 1.0 + 1.5 / $ydim;
          $et_lbnd_f[ 0 ] = $flips - $et_lbnd_f[ 0 ];
          $et_ubnd_f[ 0 ] = $flips - $et_ubnd_f[ 0 ];
          $ot_lbnd_f[ 0 ] = $flips - $ot_lbnd_f[ 0 ];
          $ot_ubnd_f[ 0 ] = $flips - $ot_ubnd_f[ 0 ];
          $es_lbnd_f[ 0 ] = $flips - $es_lbnd_f[ 0 ];
          $es_ubnd_f[ 0 ] = $flips - $es_ubnd_f[ 0 ];
          $os_lbnd_f[ 0 ] = $flips - $os_lbnd_f[ 0 ];
          $os_ubnd_f[ 0 ] = $flips - $os_ubnd_f[ 0 ];
       }

# Finally ensure the lower bound is is indeed lower than the upper.
# e-beam, target
       my ( $et_x_l, $et_x_u, $et_y_l, $et_y_u );
       $et_x_l = int( min( $et_lbnd_f[ 0 ], $et_ubnd_f[ 0 ] ) * $xdim ) + $lbnd[ 0 ] - 1;
       $et_x_u = int( max( $et_lbnd_f[ 0 ], $et_ubnd_f[ 0 ] ) * $xdim ) + $lbnd[ 0 ] - 1;
       $et_y_l = int( min( $et_lbnd_f[ 1 ], $et_ubnd_f[ 1 ] ) * $ydim ) + $lbnd[ 1 ] - 1;
       $et_y_u = int( max( $et_lbnd_f[ 1 ], $et_ubnd_f[ 1 ] ) * $ydim ) + $lbnd[ 1 ] - 1;

# o-beam, target
       my ( $ot_x_l, $ot_x_u, $ot_y_l, $ot_y_u );
       $ot_x_l = int( min( $ot_lbnd_f[ 0 ], $ot_ubnd_f[ 0 ] ) * $xdim ) + $lbnd[ 0 ] - 1;
       $ot_x_u = int( max( $ot_lbnd_f[ 0 ], $ot_ubnd_f[ 0 ] ) * $xdim ) + $lbnd[ 0 ] - 1;
       $ot_y_l = int( min( $ot_lbnd_f[ 1 ], $ot_ubnd_f[ 1 ] ) * $ydim ) + $lbnd[ 1 ] - 1;
       $ot_y_u = int( max( $ot_lbnd_f[ 1 ], $ot_ubnd_f[ 1 ] ) * $ydim ) + $lbnd[ 1 ] - 1;

# e-beam, sky
       my ( $es_x_l, $es_x_u, $es_y_l, $es_y_u );
       $es_x_l = int( min( $es_lbnd_f[ 0 ], $es_ubnd_f[ 0 ] ) * $xdim ) + $lbnd[ 0 ] - 1;
       $es_x_u = int( max( $es_lbnd_f[ 0 ], $es_ubnd_f[ 0 ] ) * $xdim ) + $lbnd[ 0 ] - 1;
       $es_y_l = int( min( $es_lbnd_f[ 1 ], $es_ubnd_f[ 1 ] ) * $ydim ) + $lbnd[ 1 ] - 1;
       $es_y_u = int( max( $es_lbnd_f[ 1 ], $es_ubnd_f[ 1 ] ) * $ydim ) + $lbnd[ 1 ] - 1;

# o-beam, sky
       my ( $os_x_l, $os_x_u, $os_y_l, $os_y_u );
       $os_x_l = int( min( $os_lbnd_f[ 0 ], $os_ubnd_f[ 0 ] ) * $xdim ) + $lbnd[ 0 ] - 1;
       $os_x_u = int( max( $os_lbnd_f[ 0 ], $os_ubnd_f[ 0 ] ) * $xdim ) + $lbnd[ 0 ] - 1;
       $os_y_l = int( min( $os_lbnd_f[ 1 ], $os_ubnd_f[ 1 ] ) * $ydim ) + $lbnd[ 1 ] - 1;
       $os_y_u = int( max( $os_lbnd_f[ 1 ], $os_ubnd_f[ 1 ] ) * $ydim ) + $lbnd[ 1 ] - 1;

# Calculate and store the e-target bounds.
# ========================================
       my ( @etbounds, @otbounds, @esbounds, @osbounds );

       @etbounds = ( $et_x_l, $et_x_u, $et_y_l, $et_y_u );
       $_DEFINE_POL_REGIONS_{ETBOUNDS} = \@etbounds;

       @otbounds = ( $ot_x_l, $ot_x_u, $ot_y_l, $ot_y_u );
       $_DEFINE_POL_REGIONS_{OTBOUNDS} = \@otbounds;

       @esbounds = ( $es_x_l, $es_x_u, $es_y_l, $es_y_u );
       $_DEFINE_POL_REGIONS_{ESBOUNDS} = \@esbounds;

       @osbounds = ( $os_x_l, $os_x_u, $os_y_l, $os_y_u );
       $_DEFINE_POL_REGIONS_{OSBOUNDS} = \@osbounds;
    }

# Podule
# ======

=head1 NAME

_DEFINE_POL_REGIONS_ -- Determine the extents of object and sky regions of an UFTI polarimetry frame.

=head1 DESCRIPTION

A polarimetry frame is divided into four sections: object and sky
for the e- and o-beams.  This primitive returns the extents of these
regions for subsequent extraction and sky subtraction.  The frames
are deemed to be aligned approximately with right ascension and
declination and the jittering is along the right-ascension axis.
Also the order of the regions from north to south is I<e> target,
I<o> target, I<e> sky, and I<o> sky.  For the sub-array there
are only two regions I<e> target and I<o> target in the same
direction; for each of these the sky is extracted from a region away
from the source.

At present fixed limits are used, but sigma-clipped profiling is
possible to determine where each region starts and ends along the
declination axis.

The current target limits are 30% to 70% of the frame width about
the jittered right-ascension centre using the telescope offsets.
Thus the limits define a section 40% or 80% of the right-ascension width
of the frame roughly centred on the source.  The restriction is to
make mosaics with few pixels not derived from all contributing
jittered frames, since there are usually only three jitter positions,
and to allow a reasonable jitter step.  If the jitter size was
restricted, the limits could be expanded for extended sources.

The current sky limits are 1% to 99% of the frame width along the
right-ascension axis for the full array.  For the sub-array these are
either 5% to 40% or 60% to 95% depending on the offset of the
source.

=head1 ARGUMENTS

=over 4

=item ESBOUNDS( 4 ) = INTEGER (Returned)

The pixel bounds defining the e-beam sky region in a raw
polarisation frame.

=item ETBOUNDS( 4 ) = INTEGER (Returned)

The pixel bounds defining the e-beam target region in a raw
polarisation frame.

=item OSBOUNDS( 4 ) = INTEGER (Returned)

The pixel bounds defining the o-beam sky region in a raw
polarisation frame.

=item OTBOUNDS( 4 ) = INTEGER (Returned)

The pixel bounds defining the o-beam target region in a raw
polarisation frame.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UFTI.

=item *

It only operates on object frames.

=item *

Fractional pixel limits are rounded to the next lower integer.

=item *

The declination pixel limits for UFTI sections are as follows.
I<o> sky: 69--264; I<e> sky: 320--484; I<o> target: 601--764;
I<e> target: 824--988.

=item *

The right-ascension pixel limits for the sections when using the
sub-array are as follows.
I<o> target, sky: 77--241; I<e> target, sky: 287--451.

=item *

This primitive decides if it is using the sub-array by looking
at the size of the array in the I<x>-dimension.  If this value is larger
than 1000, then the full array is assumed.  Otherwise, the sub-array
is assumed.

=item *

Allowance is made if the chip is rotated such that the
declination axis increases or decreases with x.

=back

=head1 TASKS

KAPPA: NDFTRACE.

=head1 AUTHORS

Malcolm J. Currie (JAC, Starlink) <mjc@star.rl.ac.uk>
Brad Cavanagh (JAC) <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2004 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
