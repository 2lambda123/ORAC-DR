#+
# Name:
#    _FIXED_APERTURE_PHOTOMETRY_
#
# Purpose:
#    Performs aperture photometry on a point source.
#
# Language:
#    Perl5
#
# Description:
#    This primitive performs aperture photometry of a point source
#    for the group frame, and target-frame members of the current $Grp
#    within the current cycle.  The results are reported and stored in
#    a text file---a Starlink STL table (see SUN/190).
#
#    The photometry is in circular aperture located at the centroid of
#    the source with the sky measured from a concentric annulus outside
#    the aperture.  The photometry engine accounts for fractional pixels
#    at the aperture edge but without allowance for the local gradient.
#    The photometry also yields an internal error determined from the 
#    sky variance, or the data variance if available.  The magnitudes are
#    given by the expression 
#          -2.5 * log10( abs( counts ) per second exposure time ). 
#    Therefore negative sources can be measured too.
#
#    The source must lie within the specified aperture.  See arguments
#    RAOFF and DECOFF for the location of the aperture.
#
#    A case- and space-insensitive comparison of the object name 
#    with the entries in a table provides a catalogue magnitude in I,
#    Z, J, H, K, L, or M for a standard star.  Also a mean extinction is 
#    applied for the mean of the start and end airmasses.  Thus the
#    primitive calculates an approximate zero point.
#
#    The primitive also finds the best-fitting two-dimensional Gaussian
#    as an indicator of the seeing.
#
# Arguments:
#    APERTURE = REAL (Given)
#       The aperture in arcseconds for the photometry.  [6.0]
#    DECOFF = REAL (Given)
#       The approximate Declination offset of the centroid of the point
#       source to be measured with respect to the nominal position.  The
#       nominal position is the Declination centre of the array plus
#       the Declination telescope offset.  [0.0]
#    INNER = REAL (Given)
#       The ratio of the diameters of inner ring of the sky annulus to
#       that of the object aperture (APERTURE).  It is constrained
#       to be in the range 1.1 to 3.0.  The mode of the pixel values in 
#       the annulus is used to subtract the sky for statistics 3) and
#       4) listed above.  [1.5]
#    OUTER = REAL (Given)
#       The ratio of the diameters of outer ring of the sky annulus to
#       that of the object aperture (APERTURE).  It is constrained to
#       be in the range 1.4 to 5.0 and be at least 0.3 greater than the
#       inner scale factor of the annulus.  [2.5]
#    POSITIVE = LOGICAL (Given)
#       If 1 (true), the point source is positive, i.e. has values
#       above the sky level.  If 0 (false), the point source is
#       negative.  [1]
#    RAOFF = REAL (Given)
#       The approximate R.A. offset of the centroid of the point source
#       to be measured with respect to the nominal position.  The
#       nominal position is the R.A. centre of the array plus the R.A.
#       telescope offset.  (It's plus because R.A. increases with
#       negative Cartesian co-ordinate.)  [0.0]
#    SKY_EST = INTEGER (Given)
#       Sky estimations method as per AUTOPHOTOM parameter SKYEST.  The
#       default is the mode, so as to exclude contaminating sources.
#       1 is the mean; 2 is the average of values within two standard
#       deviations of the mean; 3 is the mode from PHOTOM, 4 is a 
#       multiply clipped mean emulating the mode but without involving
#       the median.  It is supplied as a constant to AUTOPHOTOM (hence
#       option 4).  The final option is to cope with self-flat frames
#       with a spike artifact in the histogram thus giving the wrong
#       median, and hence biased mode.  The default is used should 
#       the supplied value not be one of the allowed options. [3]
#    SUFFIX = CHARACTER (Given)
#       Suffix to be applied to the name of the frame in the log of
#       the results.  It is usually not set.  The NOD recipes need it
#       to discriminate between the positive and negative images.
#       [""]
#
# Notes:
#    -  This primitive is suitable for UFTI, IRCAM, and Michelle 
#    in imaging mode.
#    -  Processing only occurs when it is time to perform photometry,
#    i.e. when the steering header DO_APHOT is true; and on target
#    object frames when the steering header TARGET_OR_SKY is "target".
#    -  The photometry text file is aphot_results.txt.  The format of
#    this file is described in primitive _MAKE_PHOTOMETRY_TABLE_.
#    -  Items reported in order are the frame and object names;
#    UT start time; filter; mean airmass; raw and extinction-corrected
#    instrumental magnitude and their error (if available); error
#    flag, notably B indicating that bad pixels were inside the
#    aperture; aperture diameter and the radii of the sky annulus in
#    arcseconds; the sky level in counts/s; the catalogue magnitude;
#    calculated raw and extinction-corrected zeropoint (if the
#    catalogue magnitude is known); and the FWHM of the best-fitting
#    two-dimensional Gaussian to the source.
#    -  The instrument saturation level is supplied to the photometry
#    task, using the value provided by _GET_SATURATION_LEVEL_.  The
#    plate scale comes from primitive _GET_PLATE_SCALE_, and the gain
#    from _GET_GAIN_.  The script uses the exposure time, object name,
#    and start UT stored in user headers ORAC_EXPOSURE_TIME,
#    ORAC_OBJECT, and ORAC_UTSTART respectively.
#    -  The mean extinction coefficients are defined in the version of
#    primitive _GET_FILTER_PARAMETERS_ specific to the instrument
#    (location), the generic version applying to UKIRT.
#    -  A warning appears should the object not be found in the
#    standards file.
#    -  Where a value is unknown or cannot be computed, its entry in the
#    table is "<null>".
#    -  The standard-star catalogue used is $ORAC_DATA_CAL/fs_izjhklm.dat.
#    However, if this file is unavailable, the script accesses the old
#    $ORAC_DATA_CAL/fs2000.dat, but only for JHK data.  An error
#    results a catalogue cannot be opened.
#    -  The ADU factor and exposure time stored in frame header are
#    validated.  Non-positive values cause a warning message to appear,
#    but the primitive continues defaulting the header value to 1.
#    -  The data variance provides the magnitude error estimate whenever
#    user header USE_VARIANCE is true (1).
#
# Tasks:
#    KAPPA: ARDMASK, NDFCOPY, NDFTRACE, PSF, WCSFRAME; PHOTOM: AUTOPHOTOM.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Determine whether it is time to do aperture photometry.
# We have to specify this since we have to decide whether we
# are using $Frm or $Grp and in general this routine is run
# on reduced images.
    my $do_aphot = $Frm->uhdr( "DO_APHOT" );
    if ( $do_aphot ) {

# Arguments
# =========

# Obtain the suffix value for the file name in the log.  Used
# for NOD positive and negative images, but normally set to null
       my $suffix = ( $_FIXED_APERTURE_PHOTOMETRY_{SUFFIX} || "" );

# Process as positive or negative source.
       my $positive = $_FIXED_APERTURE_PHOTOMETRY_{POSITIVE};
       $positive = defined( $positive ) ? $positive : 1;

# Obtain the offsets of the point-source images.
       my $raoff = $_FIXED_APERTURE_PHOTOMETRY_{RAOFF};
       $raoff = defined( $raoff ) ? $raoff : 0.0;
       my $decoff = $_FIXED_APERTURE_PHOTOMETRY_{DECOFF};
       $decoff = defined( $decoff ) ? $decoff : 0.0;

# Obtain the aperture diameter in arcseconds.
       my $as_aperture = ( $_FIXED_APERTURE_PHOTOMETRY_{APERTURE} || 6 );
 
# Calculate the radius of the inner and outer extent of the aperture.
       my $inner = ( $_FIXED_APERTURE_PHOTOMETRY_{INNER} || 1.5 );
       my $outer = ( $_FIXED_APERTURE_PHOTOMETRY_{OUTER} || 2.5 );
       $inner = min( 3.0, max( $inner, 1.1 ) );
       $outer = min( 5.0, max( $inner + 0.3, $outer, 1.4 ) );

# Obtain the sky-estimation-method index.
       my $skyest = ( $_FIXED_APERTURE_PHOTOMETRY_{SKY_EST} || 3 );
       if ( $skyest !~ /^[+]?\d$/ || $skyest < 1 || $skyest > 4 ) {
          orac_warn "Invalid sky estimation ($skyest).  Should be 1, 2, 3, or 4.  Using the PHOTOM mode.\n";
          $skyest = 3;
       }

# Selection
# =========

# This should only be performed on OBJECT frames.
       if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ) {
          my $incflag = "T";

# Define a useful variable for a null catalogue magnitude.
          my $nullmag = 99.999;

# Obtain the cycle number from the header.
          my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
          $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Form new group
# ==============
#
# Create a temporary frame object.  Use the new method rather than
# new ORAC::Frame for generality (otherwise we would have to do
# new ORAC::Frame::UFTI for UFTI primitives and so on) to inherit
# from the current Frame.

# Set the file method for this frame.  $Grp->file is name of the main
# mosaic.  There's a bug/feature that requires a header to have been read
# in before it is accessed.  So cannot use file method to associate
# the group frame; do it with the new method.
          my $tmpFrm = $Frm->new( $Grp->file );

# Propagate the USE_VARIANCE header.  This is just saving a call to
# NDFTRACE.  This is a temporary fix.
          $tmpFrm->uhdr( "USE_VARIANCE", $Frm->uhdr( "USE_VARIANCE" ) );

# Create a temporary group object as used by _FAO_.  Use the new method
# rather than new ORAC::Group for generality to inherit from the current
# group.
          my $phoGrp = $Grp->new;

# Push the current cycle's target members of the existing group into the
# temporary group.  Exclude any sky frames.
          my $tarGrp = $Grp->subgrp( TARGET_OR_SKY => "target",
                                     CYCLE_NUMBER => $cycleno );
          $phoGrp->push( $tarGrp->members );

# Push the temporary frame into the temporary group.  Note that the
# Orac::Group class can contain anything.  However in ORAC-DR we want
# to stick with Frame objects for generality.  So now $reggrp is a
# group consisting of the current group members and group file.
          $phoGrp->push( $tmpFrm );

# Perform photometry for all the individual jitter frames and the final
# mosaic.
          my ( $catmag, $fs_magdif_ext, $magdif, $magdif_ext, $fh_logfile );
          foreach $Frm ( $phoGrp->members ) {

# Open the results file
# =====================

# Create log file if necessary.
             my $logfile = "aphot_results.txt";
             if ( ! -e $logfile ) {
                _MAKE_PHOTOMETRY_TABLE_ FILE=$logfile
             }

# Open the file for appending results.
             open ( $fh_logfile, ">>$logfile" ) ||
               orac_throw "Unable to append to photometry log file $logfile.  Error: $!.\n";

# Get information from the headers
# ================================

# Obtain the filter from the FITS headers.
             my $filter = $Frm->uhdr( "ORAC_FILTER" );

# Obtain the mean extinction coefficient.  Specify the corresponding catalogue
# column number for the filter.
             _GET_FILTER_PARAMETERS_
             my $catcol = $_GET_FILTER_PARAMETERS_{CATCOL};
             my $extinction = $_GET_FILTER_PARAMETERS_{EXTINCTION};

# Obtain the airmass from the FITS headers.  Find the approximate
# mean airmass from the start and end values.  This should be
# adequate unless it is a long integration with the source crossing
# the meridian.
             my $amstart = $Frm->uhdr( "ORAC_AIRMASS_START" );
             my $amend   = $Frm->uhdr( "ORAC_AIRMASS_END" );
             my $airmass = 0.5 * ( $amstart + $amend );

# Derive the extinction-correction using the IR standard of one airmass.
             my $extcor = ( $airmass - 1.0 ) * $extinction;

# Obtain the object name, exposure time, time of observation, and
# the number of electrons per data number.
             my $exptime = $Frm->uhdr( "ORAC_EXPOSURE_TIME" );
             my $objname = $Frm->uhdr( "ORAC_OBJECT" );
             my $ut = $Frm->uhdr( "ORAC_UTSTART" );
             _GET_GAIN_
             my $padu = $_GET_GAIN_{GAIN};

# Obtain the pixel scale.
             _GET_PLATE_SCALE_
             my $platescale = $_GET_PLATE_SCALE_{PLATESCALE};         

# Get the saturation level.
             _GET_SATURATION_LEVEL_
             my $sature = $_GET_SATURATION_LEVEL_{SATURATION};

# Validate some headers.
# ======================

# Constrain PADU as we'll need to divide by it later.
             if ( $padu < 0.0001 ) {
                orac_warn "Data number per ADU $padu is not positive.  It is set to 1.\n";
                $padu = 1.0;
             }

# Constrain exposure time as it is used multiplicatively in a logarithm
# below.
             if ( $exptime < 0.0001 ) {
                orac_warn "Exposure time $exptime is not positive.  It is set to 1.\n";
                $exptime = 1.0;
             }

# Obtain the catalogue magnitude.
# ===============================

# Remove spaces from the name, and convert to uppercase for later
# comparison.
             ( my $starname = uc( $objname ) ) =~ s/ //g;

# Read the appropriate catalogue and return the magnitude in the
# current waveband, if available.  Use the catalogue name in case the
# object name contains superfluous characters after the name.
             _STANDARD_MAGNITUDE_ CATCOL=$catcol NULLMAG=$nullmag NAME=$starname
             $catmag = $_STANDARD_MAGNITUDE_{CATMAG};
             $starname = $_STANDARD_MAGNITUDE_{CATNAME};
             $starname = $objname if ( $starname eq " " );

# Find location and dimensions of the aperture and annulus
# ========================================================

# Locate the image centre within the aperture sized box.  The
# current SKY Frame becomes PIXEL for KAPPA versions from 0.14.
             _FIND_SOURCE_CENTROID_ RAOFF=$raoff DECOFF=$decoff POSITIVE=$positive BOXSIZE=$as_aperture

# It is possible that no centroid was found.  Get a reference to the flag,
# test the status, and report an error where centroiding failed.
             my $found = $_FIND_SOURCE_CENTROID_{FOUND};
             if ( ( ! defined( $found ) ) || ( ! $$found ) ) {
                orac_err "Unable to locate source for aperture photometry.\n";

# Skip to the next frame.
                next;
             }

# Get the reference to the centroid's pixel co-ordinates.
             my $centre = $_FIND_SOURCE_CENTROID_{CENTRE};

# Gaussian FWHM
# =============

# We must set the WCS to pixels.
             my ( $frameno, $param1, $ORAC_STATUS );
             my $ndf = $Frm->file;
             my $badpix = 0;
             if ( starversion_gt( "KAPPA", 'V0.13-6' ) ) {

# Record the current WCS domain number.
                $Mon{ "ndfpack_mon" }->obeyw( "ndftrace", "ndf=$ndf" );
                ( $ORAC_STATUS, $frameno ) = $Mon{ "ndfpack_mon" }->get( "ndftrace", "current" );

# Switch to pixel co-ordinates for PSF.
                $param1 = "ndf=$ndf frame=pixel";
                $Mon{ "ndfpack_mon" }->obeyw( "wcsframe", "$param1" );
             }

# Store the located centroid within a text file of the format PSF expects.
             unlink ( "centre$$.dat" );
             open ( my $fh_psfin, ">centre$$.dat" ) ||
               orac_warn "Unable to create the centroid file centre$$.dat for PSF.  Error: $!.\n";
             print $fh_psfin "@$centre\n";
             close ( $fh_psfin );

# Specify the other parameters for the PSF stage.  Read from an old-style
# file not a table.  Increase the box size to include several arcseconds.
             $param1 = "in=$ndf gauss device=! incat=! cofile=centre$$.dat isize=101";

# Calculate the best-fitting Gaussian psf, using the star alone.  
             my $psf_status = $Mon{ "kappa_mon" }->obeyw( "psf", "$param1" );

# Use null values if PSF fails to converge.
             my ( $axisratio, $gfwhm ); 
             if ( $psf_status != ORAC__OK ) {
                $gfwhm = "<null>";

             } else {

# Obtain the fit parameters of the point-spread function.
                ( $ORAC_STATUS, $gfwhm ) = $Mon{ "kappa_mon" }->get( "psf", "fwhm" );
                ( $ORAC_STATUS, $axisratio ) = $Mon{ "kappa_mon" }->get( "psf","axisr" );

# Derive desired values from the results, namely the average FWHM
# Protect against nonsense axis ratios.  Convert to arcseconds.
                $gfwhm = $gfwhm * sqrt( min( 10, $axisratio ) ) * $platescale;
             }
             unlink "centre$$.dat";

# Restore the former WCS domain.
             if ( starversion_gt( "KAPPA", 'V0.13-6' ) ) {
                $param1 = "ndf=$ndf frame=$frameno";
                $Mon{ "ndfpack_mon" }->obeyw( "wcsframe", "$param1" );
             }

# Determine sky level by clipping.
# ================================

# This is a workaround the fact that there is no multiple clipping in
# PHOTOM's sky estimators.  This assumes a circular aperture.
             my ( $skymode, $skysigma );
             if ( $skyest == 4 ) {

# First find the radii of the sky annulus radii in pixels, then the
# diameter of the annulus in pixels.  The latter assumes that we know the
# centroid's position.
                my $innerrad = 0.5 * $inner * $as_aperture / $platescale;
                my $outerrad = 0.5 * $outer * $as_aperture / $platescale;
                my $pannulus = int( 2.0 * $outerrad ) + 1;

# Copy the annulus section to a temporary frame. 
                my $annbox = "annulus_box$$";
                my $param = "in=$ndf" . "(" . "$$centre[ 0 ]~$pannulus," .
                            "$$centre[ 1 ]~$pannulus" . ")";
                $Mon{ "ndfpack_mon"  }->obeyw( "ndfcopy", "$param out=$annbox" );

# Create an ARD file to define the annulus whose statistics we want.
# Remove any existing annulus ARD definition file.
                unlink( "annulus.ard" );

# Defines pixels which are not in the annulus.  Work in pixel co-ordinates,
# not pixel indices.
                open( my $fh_ardfile, ">annulus.ard" ) ||
                  orac_throw "Unable to create ARD file annulus.ard defining the sky region.  Error: $!\n";
                print $fh_ardfile ".NOT. ( CIRCLE( $$centre[ 0 ], $$centre[ 1 ], $outerrad ) .AND. .NOT. CIRCLE( $$centre[ 0 ], $$centre[ 1 ], $innerrad ) )\n";
                close( $fh_ardfile );

# Mask all the pixels except those within the annulus.  ARDMASK from
# V0.18 no longer supports the COSYS parameter, previously set to W.
# However, the ARDMASK defaults to pixels, which is what we require.
                my $annout = "annulus$$";
                $param = "in=$annbox out=$annout ardfile=annulus.ard";
                if ( starversion_lt( "KAPPA", 'V0.18-0' ) ) {
                   $param = $param . " cosys=w";
                }
                $Mon{ "kappa_mon" }->obeyw( "ardmask", "$param" );
                unlink( "annulus.ard" );

# Create a temporary frame just enclosing the sky annulus.
                my $Frm = $Frm->new( $annout );

# Find the clipped mean (effectively the mode) for the annulus.
                _CLIPPED_STATS_ CLIP=2,2,2.5,3
                $skymode = $_CLIPPED_STATS_{MEAN};
                $skysigma = $_CLIPPED_STATS_{SIGMA};

# Remove temporary frames.
                _DELETE_A_FRAME_ FRAME=$annbox
                _DELETE_A_FRAME_ FRAME=$annout
             }

# Replace bad pixels
# ==================

# Create temporary files to store the cleaned frames.
            my $tmp1 = new ORAC::TempFile;
            my $tmpfile1 = $tmp1->file;
            my $tmp = new ORAC::TempFile;
            my $tmpfile = $tmp->file;

# We could invoke STATS to find out if there are any bad pixels, but 
# GLITCH will be faster even if there are no replacements to make.
# Only mosaics may be devoid of bad pixels anyway.

# This first pass gets rid of most bad pixels beyond the frame
# periphery, where blocks of bad pixels exist, but should not affect
# the photometry.
            if ( starversion_lt( "KAPPA", 'V0.15-0' ) ) {
               $param1 = "inpic=$ndf outpic=$tmpfile1 where=bad";
            } else {
               $param1 = "in=$ndf out=$tmpfile1 mode=bad";
            }
            $Mon{ "kappa_mon" }->obeyw( "glitch", "$param1" );

# A second pass should remove virtually all the bad pixels in the
# aperture.
            if ( starversion_lt( "KAPPA", 'V0.15-0' ) ) {
               $param1 = "inpic=$tmpfile1 outpic=$tmpfile where=bad";
            } else {
               $param1 = "in=$tmpfile1 out=$tmpfile mode=bad";
            }
            $Mon{ "kappa_mon" }->obeyw( "glitch", "$param1" );


# The outside world will not see the above as the output still refers
# to the original frame.  Just issue an inoformational message.
            orac_print "Most bad pixels replaced in $ndf by median of eight neighbours\n";
            orac_print "   for aperture photometry.\n";

# Automatic photometry
# ====================
#
# The automatic photometry task needs a text file to control the
# type and location of the photometry, and the size and shape of the
# aperture.  In this primitive these are fixed except the size, but
# we could use parameters for these in a hierarchy of scripts.  We have a
# circular aperture obtaining the sky from an annulus between the INNER
# and OUTER times the diameter of the main aperture.
             my $rapture = 0.5 * $as_aperture / $platescale;
             open ( my $fh_photom, ">photom$$.dat" ) ||
               orac_throw "Unable to create the photometry steering file photom$$.dat.  Error: $!.\n";
             print $fh_photom "#ANN 1 $inner $outer\n";
             print $fh_photom "1 @$centre 0.0 0.0 0.0 0.0 OK $rapture 0.0 0.0 annulus circle\n";
             close ( $fh_photom );

# Specify the user parameters.
             my $zp = 0.0;
             my $user;
             if ( $skyest == 4 ) {
                $user = "skyest=$skyest skymag=$zp sky=$skymode skysig=$skysigma";
             } else {
                $user = "skyest=$skyest skymag=$zp ";
             }
 
# Specify the other parameters for AUTOPHOTOM.  Strictly we should check the
# headers for the readout mode, and double-check that data variance is
# present when USE_VARIANCE is true.  PHOTON=2 uses sky variance to
# estimate the photometric error, whereas PHOTON=3 uses the data
# variance.
             $param1 = "in=$tmpfile infile=photom$$.dat outfile=photom$$.res";
             my $photon = 2;
             if ( $Frm->uhdr( "USE_VARIANCE" ) ) {
                orac_warn "$ndf using variance\n";
                $photon = 3;
             }
             my $param2;
             if ( $positive ) {
                $param2 = "nocentro padu=$padu biasle=0 photon=$photon positive sature=$sature nousemask";
             } else {
                $param2 = "nocentro padu=$padu biasle=0 photon=$photon nousemags nopositive sature=$sature nousemask";
             }

# Perform the photometry, however, for this case compute a centroid
# about which to integrate.
# Use different modes of AUTOPHOTOM if the source is negative.
             $Mon{ "photom_mon" }->obeyw( "autophotom", "$param1 $user $param2" );
             unlink( "photom$$.dat" );

# Extract and present the results.
# ================================
#
# The magnitude and error are the fourth and fifth fields in the output
# file.  The sky estimate is the sixth.  The error code is the eighth.
             open ( my $fh_photomres, "photom$$.res" ) ||
               orac_throw "Unable to read the photometry results file photom$$.res.  Error: $!.\n";
             my @results = map { (split)[3..7] } <$fh_photomres>;
             close ( $fh_photomres );

# Use more lucid variable names for the results.  Normalise by the
# exposure time.  The magnitude returned by AUTOPHOTOM is calculated
# using the expression -2.5log10( photons/s ).  However, the UKIRT
# standard is to use -2.5log10( counts/s ), so correct the instrumental
# magnitude by the ADU factor.
             my ( $errcode, $magerr, $magnorm, $sky_level );
             $errcode = $results[4];
             if ( $positive ) {
                $magnorm = $results[0] + 2.5 * log10( $exptime * $padu );
                $magerr = $results[1];

# Convert from counts to magnitudes for negative sources.  Add in zero
# point which is ignored when parameter usemags is false.
             } else {
                $magnorm = -2.5 * ( log10( abs( $results[3] ) ) -
                                    log10( $exptime * $padu ) ) + $zp;
                if ( abs( $results[ 0 ] ) > 1E-6 ) {
                   $magerr = 1 - 10 ** ( -0.4 * abs( $results[1] / $results[0] ) );
                } else {
                   $magerr = "<null>"
                }
             }

# Convert the sky level to counts per second.
             $sky_level = $results[2] / $padu / $exptime;

# Correct for the mean extinction.
             my $magext = $magnorm - $extcor;

# Convert annulus radii into arcseconds.
             my $as_inner = $inner * $as_aperture;
             my $as_outer = $outer * $as_aperture;

# Format the results to give a sensible number of significant figures.
             my ( $fs_mag, $fs_err, $fs_sky, $fs_airmass, $fs_apdiam );
             my ( $fs_catmag, $fs_inner, $fs_outer, $fs_gfwhm );
             $fs_mag = sprintf( "%.3f", $magnorm );
             if ( $magerr ne "<null>" ) {
                $fs_err = sprintf( "%.3f", $magerr );
             } else {
                $fs_err = $magerr;
             }
             $fs_sky = sprintf( "%.3f", $sky_level );
             $fs_airmass = sprintf( "%6.4f", $extcor );
             $fs_apdiam = sprintf( "%.2f", $as_aperture );
             $fs_inner =  sprintf( "%.2f", $as_inner );
             $fs_outer =  sprintf( "%.2f", $as_outer );

             $magdif = "<null>";
             $magdif_ext = "<null>";
             if ( $catmag < $nullmag ) {
                $magdif = $catmag - $magnorm;
                $magdif_ext = $catmag - $magext;

# IZLM only have two decimal places.
                if ( $filter =~ /^[LMIZ]/ ) {
                   $fs_catmag = sprintf( "%.2f", $catmag );
                   $fs_magdif_ext =  sprintf( "%.2f", $magdif_ext );
                } else {
                   $fs_catmag = sprintf( "%.3f", $catmag );
                   $fs_magdif_ext =  sprintf( "%.3f", $magdif_ext );
                }
             }

             if ( $gfwhm ne "<null>" ) {
                $fs_gfwhm = sprintf( "%.3f", $gfwhm );
             }

# Print the results.
             orac_print "\n";
             orac_print "Frame:                  $ndf$suffix\n";
             orac_print "Filter:                 $filter\n";

             if ( $magerr ne "<null>" ) {
                if ( $errcode ne "OK" ) {
                   orac_print "Instrumental Magnitude: $fs_mag +/- $fs_err (error $errcode)\n";
                } else {
                   orac_print "Instrumental Magnitude: $fs_mag +/- $fs_err\n";
                }

             } else {
                if ( $errcode ne "OK" ) {
                   orac_print "Instrumental Magnitude: $fs_mag (error $errcode)\n";
                } else {
                   orac_print "Instrumental Magnitude: $fs_mag\n";
                }
             }

             orac_print "Airmass correction:     $fs_airmass\n";
             if ( $catmag < $nullmag ) {
                orac_print "Catalogue Magnitude:    $fs_catmag ($starname)\n";
                orac_print "Calculated zeropoint:   $fs_magdif_ext\n"
             }

             if ( $gfwhm ne "<null>" ) {
                orac_print "2-D Gaussian FWHM:      $fs_gfwhm arcsec\n";
             }

             orac_print "Sky:                    $fs_sky counts/s/pixel\n";
             orac_print "Aperture diameter:      $fs_apdiam arcsec\n";
             orac_print "Annulus radii:          $fs_inner to $fs_outer arcsec\n";
             orac_print "\n";

# Remove the photometry text file.
             unlink( "photom$$.res" );

# Write results to text logfile.
# ==============================

# Specify formats for the CURSA table.
             my @formats = qw( %22s %12s %8.5f %7s %5.3f %7.3f %7.3f %6.3f %2s %5.1f
                               %5.1f %5.1f %8.3f %1s %6.3f %6.3f %6.3f %6.3f %6.2f );

# Allow for null strings instead of numerical values when something has
# gone awry.
             if ( $magerr eq "<null>" ) {
                $formats[7] = "%6s";
             }
             if ( $gfwhm eq "<null>" ) {
                $formats[17] = "%6s";
             }
             if ( $catmag >= $nullmag ) {
                $formats[15] = "%6s";
                $formats[16] = "%6s";
             }

# Convert array to a space-separated list.
             my $formatlist = join( " ", @formats );

# Write the results for the current observation to the logfile.  Use sprintf
# to format the statistics in the specified formats for the columns of
# the table.  Append the formatted row to the logging file.  Note in case
# some of the header information is null, output the results as strings
# rather than integer or real; and assume a fixed format in the FITS headers
# matching the STL format when the keywords are present.
             printf $fh_logfile ( "$formatlist \n",
               $ndf.$suffix, $objname, $ut, $filter, $airmass, $magnorm,
               $magext, $magerr, $errcode, $as_aperture, $as_inner, $as_outer,
               $sky_level, $incflag, $catmag, $magdif, $magdif_ext, $gfwhm,
               $exptime );

          }

# Close the results file.
          close ( $fh_logfile );
       }
    }

# Podule
# ======

=head1 NAME

_FIXED_APERTURE_PHOTOMETRY_ -- Performs aperture photometry on a point source.

=head1 DESCRIPTION

This primitive performs aperture photometry of a point source
for the group frame, and target-frame members of the current $Grp
within the current cycle.  The results are reported and stored in
a text file---a Starlink STL table (see SUN/190).

The photometry is in circular aperture located at the centroid of the
source with the sky measured from a concentric annulus outside the
aperture.  The photometry engine accounts for fractional pixels at the
aperture edge but without allowance for the local gradient. The
photometry also yields an internal error determined from the sky
variance, or the data variance if available.  The magnitudes are given
by the expression 

   -2.5 * log10( abs( counts ) per second exposure time ).  
   
Therefore negative sources can be measured too.

The source must lie within the specified aperture.  See arguments
RAOFF and DECOFF for the location of the aperture.

A case- and space-insensitive comparison of the object name with the
entries in a table provides a catalogue magnitude in I<I>, I<Z>, I<J>,
I<H>, I<K>, I<L>, or I<M> for a standard star.  Also a mean extinction
is applied for the mean of the start and end airmasses.  Thus the
primitive calculates an approximate zero point.

=head1 ARGUMENTS

=over 4

=item APERTURE = REAL (Given)

The aperture in arcseconds for the photometry.  [6.0]

=item DECOFF = REAL (Given)

The approximate Declination offset of the centroid of the point source
to be measured with respect to the nominal position.  The nominal
position is the Declination centre of the array plus the Declination
telescope offset.  [0.0]

=item INNER = REAL (Given)

The ratio of the diameters of inner ring of the sky annulus to
that of the object aperture (APERTURE).  It is constrained
to be in the range 1.1 to 3.0.  The mode of the pixel values in 
the annulus is used to subtract the sky for statistics 3) and
4) listed above.  [1.5]

=item OUTER = REAL (Given)

The ratio of the diameters of outer ring of the sky annulus to
that of the object aperture (APERTURE).  It is constrained to
be in the range 1.4 to 5.0 and be at least 0.3 greater than the
inner scale factor of the annulus.  [2.5]

=item POSITIVE = LOGICAL (Given)

If 1 (true), the point source is positive, i.e. has values
above the sky level.  If 0 (false), the point source is
negative.  [1]

=item RAOFF = REAL (Given)

The approximate R.A. offset of the centroid of the point source to be
measured with respect to the nominal position. The nominal position is
the R.A. centre of the array plus the R.A. telescope offset.  [0.0]

=item SKY_EST = INTEGER (Given)

Sky estimations method as per AUTOPHOTOM parameter SKYEST.  The
default is the mode, so as to exclude contaminating sources.
1 is the mean; 2 is the average of values within two standard
deviations of the mean; 3 is the mode from PHOTOM, 4 is a 
multiply clipped mean emulating the mode but without involving
the median.  It is supplied as a constant to AUTOPHOTOM (hence
option 4).  The final option is to cope with self-flat frames
with a spike artifact in the histogram thus giving the wrong
median, and hence biased mode.   The default is used should 
the supplied value not be one of the allowed options. [3]

=item SUFFIX = CHARACTER (Given)

Suffix to be applied to the name of the frame in the log of
the results.  It is usually not set.  The NOD recipes need it
to discriminate between the positive and negative images.
[""]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UFTI, IRCAM, and Michelle in imaging mode.

=item *

Processing only occurs when it is time to perform photometry,
i.e. when the steering header DO_APHOT is true; and on target
object frames when the steering header TARGET_OR_SKY is "target".

=item *

The photometry text file is aphot_results.txt.  The format of
this file is described in primitive
L<_MAKE_PHOTOMETRY_TABLE_|_MAKE_PHOTOMETRY_TABLE_>.

=item *

Items reported in order are the frame and object names; UT start time;
filter; mean airmass; raw and extinction-corrected instrumental
magnitude and their error (if available); error flag, notably B
indicating that bad pixels were inside the aperture; aperture diameter
and the radii of the sky annulus in arcseconds; the sky level in
counts/s; the catalogue magnitude; calculated raw and
extinction-corrected zeropoint (if the catalogue magnitude is known);
and the FWHM of the best-fitting two-dimensional Gaussian to the
source.

=item *

The instrument saturation level is supplied to the photometry task,
using the value provided by L<_GET_SATURATION_LEVEL_|_GET_SATURATION_LEVEL_>.
The plate scale comes from primitive L<_GET_PLATE_SCALE_|_GET_PLATE_SCALE_>,
and the gain from L<_GET_GAIN_|_GET_GAIN_>.  The script uses the
exposure time, object name, and start UT stored in user headers
ORAC_EXPOSURE_TIME, ORAC_OBJECT, and ORAC_UTSTART respectively.

=item *

The mean extinction coefficients are defined in the version of
primitive L<_GET_FILTER_PARAMETERS_|_GET_FILTER_PARAMETERS_> specific
to the instrument (location), the generic version applying to UKIRT.

=item *

A warning appears should the object not be found in the
standards file.

=item *

Where a value is unknown or cannot be computed, its entry in the
table is "E<lt>nullE<lt>".

=item *

The standard-star catalogue used is F<$ORAC_DATA_CAL/fs_izjhklm.dat>.
However, if this file is unavailable, the script accesses the old
F<$ORAC_DATA_CAL/fs2000.dat>, but only for JHK data.  An error
results a catalogue cannot be opened.

=item *

The ADU factor and exposure time stored in frame header are
validated.  Non-positive values cause a warning message to appear,
but the primitive continues defaulting the header value to 1.

=item *

The data variance provides the magnitude error estimate whenever
user header USE_VARIANCE is true (1).

=back

=head1 TASKS

KAPPA: ARDMASK, NDFCOPY, NDFTRACE, PSF, WCSFRAME; PHOTOM: AUTOPHOTOM.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
