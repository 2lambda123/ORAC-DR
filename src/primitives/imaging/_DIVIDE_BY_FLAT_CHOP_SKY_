#+
# Name:
#    _DIVIDE_BY_FLAT_CHOP_SKY_
#
# Purpose:
#    Flat-fields the frames for a CHOP_SKY_JITTER recipe.
#
# Language:
#    Perl5
#
# Description:
#    This primitive divides the target frames, and optionally the
#    sky frames, of a CHOP_SKY_JITTER recipe by the most-recent and
#    matching flat-field frame from the $Cal->flat method.  The input
#    frames are stored in the current $Grp.  Upon completion the
#    target group members are the flat-fielded frames; as are the
#    sky group members if argument FLATSKY is true.
#
# Arguments:
#    FLATSKY = LOGICAL (Given)
#       If true (1), flat field the sky frames as well as the target
#       frames.  [1]
#
# Notes:
#    -  This primitive is suitable for infra-red imaging instruments.
#    -  Processing only occurs for frames in the current cycle, and when
#    the steering header TARGET_OR_SKY is "target" (and "sky" for
#    FLATSKY=1), and steering header MAKE_FLAT is true.
#    -  The steering header CYCLE_NUMBER specifies the cycle number.
#    -  For a target frame the file name is stored in the frame's
#    internal header TARGET_TEMPLATE.  For a sky frame the previous
#    target's frame name is read that frame's TARGET_TEMPLATE header.
#    Thus TARGET_TEMPLATE stored the name of the last target frame to
#    be used to make the list of target frames to flat field.
#    -  The frames' titles are each propagated.
#
# Output Data:
#    -  Flat-fielded target frames each inheriting its corresponding
#    input frame's name but with the _ff suffix.
#
# Tasks:
#    CCDPACK: FLATCOR.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" || 
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY") {

# Test whether or not this is an object frame or a sky frame. 
       my $class = $Frm->uhdr( "TARGET_OR_SKY" );

# Need to record the last target frame, so we can use as a template, as
# flatfielding occurs only when the current frame is of blank sky.  The
# suffix will not be the correct if we used the blank-sky frame, as it
# has undergone additional processing steps.
       if ( $class eq "target" ) {
          $Frm->uhdr( "TARGET_TEMPLATE", $Frm->file );
       }

# Here we want to apply the flat field when a new flat has been calculated,
# so determine whether that is the case.  The steering primitive should
# ensure that there are at least three blank-sky frames.
       my $makeflat = $Frm->uhdr( "MAKE_FLAT" );
       if ( $makeflat ) {

# At this point the current frame should always be of blank sky.
          if ( $class eq "target" ) { 
             orac_throw "There is something wrong with the MAKE_FLAT assignments in the CHOP_SKY_JITTER_STEER primitive\n";
          }

# Arguments
# =========

# Determine whether or not to flatten the sky frames.
          my $flatsky = $_DIVIDE_BY_FLAT_CHOP_SKY_{FLATSKY};
          $flatsky = defined( $flatsky ) ? $flatsky : 1;
        
# Obtain the template name
# ========================

# Restore the template name from the previous target frame within the 
# group.  We know that the current frame is not a target frame so start 
# searching from the previous frame.
          my $template;
          {
             my $refFrm;
             my $numframe = $Grp->num + 1;
             my $refframe = 0;
             until ( $refframe || $numframe == 0 ) {
                $numframe--;
                $refFrm = $Grp->frame( $numframe );
                $refframe = $refFrm->uhdr( "TARGET_OR_SKY" ) eq "target";
             }

# Check that a previous target frame has been located.
             if ( ! $refframe ) {
                orac_throw "There is no previous target frame to define " .
                           "the template for the frames to flat field.\n";

             } else {
                $template = $refFrm->uhdr( "TARGET_TEMPLATE" );
             }
          }

# Obtain the cycle number from the header.
          my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
          $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Flat-field target frames
# ========================

# Form a subgroup comprising all the target frames in the current cycle.
          my $tarGrp = $Grp->subgrp( TARGET_OR_SKY => "target",
                                     CYCLE_NUMBER => $cycleno );

# Form a list of input file names for MAKECAL from the other members
# of the group.  This is not as obvious as it sounds since we are
# trying to do this by looking at the current file values for each
# Frame object in the loop.  First time around everything is fine.
# Second time around we realise that the previous frames now have the
# wrong names since they have been flat-fielded etc.  We now have to
# construct the input names from the template.  The template is the
# current frame name.
          $tarGrp->template( $template );

# Form a list of the input and ouptut target file names for CCDPACK tasks.
          ( my $inref, my $outref ) = $tarGrp->inout( "_ff" );

# Convert arrays to comma-separated lists.
          my $inlist = join( ",", @$inref );
          my $outlist= join( ",", @$outref );

# Create text files to hold the list of input and output files, one per
# line.  This is needed because expanded lists of files may make the
# command line too long for the ADAM message system.
          unlink( "flatcor.inlist$$", "flatcor.outlist$$" );
          open( my $fh_inlist, ">flatcor.inlist$$" ) ||
            orac_throw "Unable to open flatcor.inlist$$ to create a list of frames to flat-field.  Error: $!.\n";
          print $fh_inlist join( "\n", @$inref ), "\n";
          close( $fh_inlist );

          open( my $fh_outlist, ">flatcor.outlist$$" ) ||
            orac_throw "Unable to open flatcor.outlist$$ to create a list of flat-field frames.  Error: $!.\n";
          print $fh_outlist join( "\n", @$outref ), "\n";
          close( $fh_outlist );

# Set the parameters for the task.
          my $flat = $Cal->flat;
          my $param1 = "in=\'^flatcor.inlist$$\' flat=$flat out=\'^flatcor.outlist$$\'";
          my $param2 = "title=!";

# Flatfield all the object frames.  Generate output names from the
# input list, switching filename suffices.
          $Mon{ "ccdpack_red" }->obeyw( "flatcor", "$param1 $param2" );
          unlink( "flatcor.inlist$$", "flatcor.outlist$$" );

# Report the processing status.
          my $type = "target" unless ( ! $flatsky );
          orac_print "Frames $inlist have been flat-fielded with $flat\n";
          orac_print "The flat-fielded $type frames are $outlist\n\n";

# Now update the output filenames for each member of the group.  This
# is fine until we come round again and find that we are trying to
# flat-field files that were flatfielded last time.  It is up to the
# _MAKE_FLAT_FROM_NORMALISED_EXTENDED_ primitive to work out which
# files are meant to be used for input here.
          $tarGrp->membernames( @$outref );

# Flat-field sky frames
# =====================
          if ( $flatsky ) {

# Form a subgroup comprising all the sky frames in the current cycle.
             my $skyGrp = $Grp->subgrp( TARGET_OR_SKY => "sky",
                                        CYCLE_NUMBER => $cycleno );

# Form a list of the input and ouptut target file names for CCDPACK tasks.
             ( my $inref, my $outref ) = $skyGrp->inout( "_ff" );

# Convert arrays to comma-separated lists.
             my $inlist = join( ",", @$inref );
             my $outlist= join( ",", @$outref );

# Create text files to hold the list of input and output files, one per
# line.  This is needed because expanded lists of files may make the
# command line too long for the ADAM message system.
             unlink( "flatcor.inlist$$", "flatcor.outlist$$" );
             open( my $fh_inlist, ">flatcor.inlist$$" ) ||
                orac_throw "Unable to open flatcor.inlist$$ to create a list of frames to flat-field.  Error: $!.\n";
             print $fh_inlist join( "\n", @$inref ), "\n";
             close( $fh_inlist );

             open( my $fh_outlist, ">flatcor.outlist$$" ) ||
               orac_throw "Unable to open flatcor.outlist$$ to create a list of flat-field frames.  Error: $!.\n";
             print $fh_outlist join( "\n", @$outref ), "\n";
             close( $fh_outlist );

# Set the parameters for the task.
             my $flat = $Cal->flat;
             my $param1 = "in=\'^flatcor.inlist$$\' flat=$flat out=\'^flatcor.outlist$$\'";
             my $param2 = "title=!";

# Flatfield all the object frames.  Generate output names from the
# input list, switching filename suffices.
             $Mon{ "ccdpack_red" }->obeyw( "flatcor", "$param1 $param2" );
             unlink( "flatcor.inlist$$", "flatcor.outlist$$" );

# Report the processing status.
             orac_print "Frames $inlist have been flat-fielded with $flat\n";
             orac_print "The flat-fielded sky frames are $outlist\n\n";

# Now update the output filenames for each member of the group.
             $skyGrp->membernames( @$outref );
          }
       }
    }

# Podule
# ======

=head1 NAME

_DIVIDE_BY_FLAT_CHOP_SKY_ -- Flat-fields the frames for a CHOP_SKY_JITTER recipe.

=head1 DESCRIPTION

This primitive divides the target frames , and optionally the frames,
of a CHOP_SKY_JITTER recipe by the most-recent and matching flat-field
frame from the $Cal-E<gt>flat method.  The input frames are stored in
the current $Grp.  Upon completion the target group members are the
flat-fielded frames; as are the sky group members if argument FLATSKY
is true.

=head1 ARGUMENTS

=over 4

=item FLATSKY = LOGICAL (Given)

If true (1), flat field the sky frames as well as the target
frames.  [1]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for infra-red imaging instruments.

=item *

Processing only occurs for frames in the current cycle, and when
the steering header TARGET_OR_SKY is "target" (and "sky" for
FLATSKY=1), and steering header MAKE_FLAT is true.

=item *

The steering header CYCLE_NUMBER specifies the cycle number.

=item *

For a target frame the file name is stored in the frame's header
TARGET_TEMPLATE.  For a sky frame the previous target's frame name is
read that frame's TARGET_TEMPLATE internal header.  Thus
TARGET_TEMPLATE stored the name of the last target frame to be used to
make the list of target frames to flat field.

=item *

The frames' titles are each propagated.

=back

=head1 OUTPUT DATA

=over 4

=item *

Flat-fielded target frames each inheriting its corresponding input
frame's name but with the _ff suffix.

=back

=head1 TASKS

CCDPACK: FLATCOR.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
