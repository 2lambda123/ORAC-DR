#+
# Name:
#    _GET_CARTESIAN_TELESCOPE_OFFSETS_
#
# Purpose:
#    Finds the telescope offsets for the current frame measured in pixels.
#
# Language:
#    Perl5
#
# Description:
#    This primitive obtains the telescope offsets from the headers of the
#    current frame, and converts them to Cartesian pixel offsets.  It
#    applies x and y scaling and the rotation matrix.  The offsets are
#    returned in two arguments.
#
# Arguments:
#    ANGLE = REAL (Given)
#       Rotation angle of the Declination axis with respect to the
#       frame's y axis measured counter clockwise.  [Value of
#       ORAC_ROTATION header or 0.0 if the header does not exist]
#    XOFF = REAL (Returned)
#       The telescope offset along the x axis of the current frame
#       measured in pixels.
#    YOFF = REAL (Returned)
#       The telescope offset along the y axis of the current frame
#       measured in pixels.
#
# Notes:
#    -  This primitive is suitable for infrared imagers.
#    -  Processing only occurs for object, sky, or lamp frames.
#    -  Internal header ORAC_ROTATION---the angle of the chip's y axis
#    with respect to North (positive is anti-clockwise)---is used to
#    convert sky co-ordinate displacements into pixels using a simple
#    rotation matrix.  If this header is absent, no rotation is assumed.
#    This formulation is satisfactory for the UKIRT's instrument scales
#    and sizes, and its declination range.  A more-sophisticated
#    transformation would be needed near the poles or for wide fields.
#    -  The telescope-offset internal headers are ORAC_RA_TELESCOPE_OFFSET
#    and ORAC_DEC_TELESCOPE_OFFSET.  The platescale headers come from
#    primitive _GET_PLATE_SCALE_.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "LAMP" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKYFLAT" ) {

# Obtain the rotation angle in degrees.  The numeric default is UFTI
# and time specific.  For (T)UFTI it should read the rotation angle from
# the CROTA2 header.
       my $defrot = $Frm->uhdr( "ORAC_ROTATION" );
       $defrot = defined( $defrot ) ? $defrot : 0.0;
       my $rotangle = ( $_GET_CARTESIAN_TELESCOPE_OFFSETS_{ANGLE} || $defrot );

# Define some useful variables to apply the rotation matrix.
       my $pi = atan2( 1, 1 ) * 4;
       my $dtor = $pi / 180.0;
       my $cosrot = cos( $rotangle * $dtor );
       my $sinrot = sin( $rotangle * $dtor );

# Obtain the plate scales for the instrument.
       _GET_PLATE_SCALE_
       my $ra_pixelscale = $_GET_PLATE_SCALE_{RASCALE};
       my $dec_pixelscale = $_GET_PLATE_SCALE_{DECSCALE};

# Obtain the telescope offsets in arcseconds using the internal
# headers.
       my $ra_off_as = $Frm->uhdr( "ORAC_RA_TELESCOPE_OFFSET" );
       my $dec_off_as = $Frm->uhdr( "ORAC_DEC_TELESCOPE_OFFSET" );

# Convert header offsets in arcseconds to pixel offsets of the object
# in the Cartesian sense.
       my $ra_off_p = -1.0 * $ra_off_as / $ra_pixelscale;
       my $dec_off_p = -1.0 * $dec_off_as / $dec_pixelscale;

# Apply the rotation matrix to obtain Cartesian pixel offsets.
       my $xoffset = $ra_off_p * $cosrot - $dec_off_p * $sinrot;
       my $yoffset = $ra_off_p * $sinrot + $dec_off_p * $cosrot;

# Set the returned arguments.
       $_GET_CARTESIAN_TELESCOPE_OFFSETS_{XOFF} = $xoffset;
       $_GET_CARTESIAN_TELESCOPE_OFFSETS_{YOFF} = $yoffset;
    }

# Podule
# ======

=head1 NAME

_GET_CARTESIAN_TELESCOPE_OFFSETS_ -- Finds the telescope offsets for the current frame measured in pixels.

=head1 DESCRIPTION

This primitive obtains the telescope offsets from the headers of the
current frame, and converts them to Cartesian pixel offsets.  It
applies x and y scaling and the rotation matrix.  The offsets are
returned in two arguments.

=head1 ARGUMENTS

=over 4

=item ANGLE = REAL (Given)

Rotation angle of the Declination axis with respect to the
frame's y axis measured counter clockwise.  [Value of
ORAC_ROTATION internal header or 0.0 if the header does not exist]

=item XOFF = REAL (Returned)

The telescope offset along the x axis of the current frame
measured in pixels.

=item YOFF = REAL (Returned)

The telescope offset along the y axis of the current frame
measured in pixels.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for infrared imagers.

=item 4

Processing only occurs for object, sky, or lamp frames.

=item *

Internal header ORAC_ROTATION---the angle of the chip's y axis with
respect to North (positive is anti-clockwise)---is used to convert sky
co-ordinate displacements into pixels using a simple rotation matrix.
If this header is absent, no rotation is assumed. This formulation is
satisfactory for the UKIRT's instrument scales and sizes, and its
declination range.  A more-sophisticated transformation would be
needed near the poles or for wide fields.

=item *

The telescope-offset internal headers are ORAC_RA_TELESCOPE_OFFSET and
ORAC_DEC_TELESCOPE_OFFSET. The platescale headers come from
_GET_PLATE_SCALE_.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

