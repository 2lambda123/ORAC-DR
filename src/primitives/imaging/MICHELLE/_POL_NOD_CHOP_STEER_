#+
# Name:
#    _POL_NOD_CHOP_STEER_
#
# Purpose:
#    Steers processing for POL_NOD_CHOP recipes.
#
# Language:
#    Perl5
#
# Description:
#    This primitive creates the groups needed by POL_NOD_CHOP recipes (see
#    the Groups topic).  It also controls processing for POL_NOD_CHOP
#    recipes through the steering headers listed below.
#
#    It is for single-beam polarimetry, i.e. it's not suitable with IRPOL.
#
# Steering Headers:
#    CYCLE_NUMBER = INTEGER
#       Number of the cycle, a cycle being a set of frames to complete a
#       pass through the recipe.  The first cycle is 0.
#    DIFFERENCE_PAIR = LOGICAL
#       Whether or not to subtract pairs.  The pattern of values depends
#       on argument JITTER_BEFORE_ANGLE.  In the simplest case when
#       JITTER_BEFORE_ANGLE=1, DIFFERENCE_PAIR is true every second frame.
#    DO_APHOT = LOGICAL
#       Whether or not perform aperture photometry.  Photometry is
#       performed once the polarisation maps are made.
#    JITTER_FIRST = LOGICAL
#       The value of argument JITTER_BEFORE_ANGLE.
#    JITTER_NUMBER = INTEGER
#       The number of frames in the jitter.
#    MAKE_MOSAIC = LOGICAL
#       Whether or not register the jittered images by beam and make a
#       mosaic for the current waveplate angle.  Each mosaic is made once
#       all the jittered target frames for a given waveplate angle in a
#       cycle are available.
#    PAIR_ORDER = LOGICAL
#       Pair subtraction order, true means take second from the first,
#       and false means take the first from the second.  The pattern
#       alternates true-false every fourth frame.
#    REFERENCE_FRAME = LOGICAL
#       A true value specifies the reference frame for normalisation
#       purposes.  It is true for the first frame and false for all
#       subsequent frames in the observation.  It is currently not used.
#    REGISTER_IMAGES = LOGICAL
#       Whether or not to register and resample the e- and o-beam mosaics.
#    TARGET_OR_SKY = CHARACTER
#       This is "target" for a target frame, and "sky" for a sky calibration
#       frame.  All frames should be target.
#    USE_VARIANCE = LOGICAL
#       Whether or not variance processing is to occur.  This equates to
#       argument USEVAR.
#
# Groups:
#    The following group of frames is created, retained by storing
#    a reference in the $Grp user header.  It is listed below by its
#    header name.
#
#       MOSAIC_GROUP  Mosaics at the four waveplate positions.
#
#    It inherits the main group's headers and user headers.
#    MOSAIC_GROUP's file has the same name as the main group's file.
#
# Arguments:
#    JITTER_BEFORE_ANGLE = LOGICAL (Given)
#       The selects the ordering of the frames.  If true (1), the
#       jittering occurs at all positions before the waveplate is
#       turned.  If false (0), all waveplate angles are observed at
#       a given offset.  If set to 2, then the waveplate is turned in
#       pairs before dithering, so as to determine Stokes Q and U
#       parameters as quickly as possible. [1]
#    NUMBER = INTEGER (Given)
#       The number of frames in the jitter.  If absent, the number of
#       offsets, as given by internal header ORAC_NUMBER_OF_OFFSETS, minus
#       one is used.  If neither is available, 4 is used.  An error state
#       arises if the number of jittered frames is fewer than 4 and not a
#       multiple of 4.  []
#    USEVAR = LOGICAL (Given)
#       Whether or not to create and propagate variance arrays.  [1]
#
# Notes:
#    -  This primitive is suitable for Michelle in imaging mode.
#    -  Processing only occurs for object and sky frames.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC, Starlink)
#
# Copyright:
#    Copyright (C) 2001--2004 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Obtain the number of frames in the chop & jitter pattern.
# =========================================================

# First see if a hardwired value has been supplied in the recipe.  This
# deals with old recipes with fixed numbers and cases where a frame or
# more is missing.
       my $number = $_POL_NOD_CHOP_STEER_{NUMBER};

# Otherwise use the ORAC_NUMBER_OF_OFFSETS internal header.  In full
# ORAC, this stores the total number of offsets used, but ignores repeat
# iterators.  By convention there is always an offset to the origin at
# the end, hence the recipe requires ORAC_NUMBER_OF_OFFSETS-1.
       if ( ! defined ( $number ) ) {
          $number = $Frm->uhdr( "ORAC_NUMBER_OF_OFFSETS" );
          if ( defined( $number ) ) {
             $number--;

# Finally default to the original 4.
          } else {
             $number = 4;
          }
       }

# Report invalid number of frames.
# Obtain the number of frames in the jitter pattern.
       if ( $number % 4 != 0 || $number < 4 ) {
          orac_throw "The number of jittered frames ($number) is not a " .
                     "positive multiple of 4.\n";
       }

# Other arguments
# ===============

# Obtain the order of the jittering and waveplate angle.
       my $jitter_first = $_POL_NOD_CHOP_STEER_{JITTER_BEFORE_ANGLE};
       $jitter_first = defined( $jitter_first ) ? $jitter_first : 1;

# Obtain the USEVAR argument.  Default to true.
       my $usevar = $_POL_NOD_CHOP_STEER_{USEVAR};
       $usevar = defined( $usevar ) ? $usevar : 1;

# Create mosaic group.
# ====================

# The group is only created for the first frame.
       my $fn = $Grp->num + 1;
       if ( $fn == 1 ) {

# This group will store the four mosaics, one at each waveplate angle, formed by
# combining the chopped and jittered images.

# Create the mosaic group.
          my $mosGrp = $Grp->new;
          $mosGrp->file( $Grp->file );

# Propagate the headers to the new group.
          %{ $mosGrp->hdr } = %{ $Grp->hdr };
          %{ $mosGrp->uhdr } = %{ $Grp->uhdr };

# Store the pointer to the group in the main Group user header.
          $Grp->uhdr( "MOSAIC_GROUP", $mosGrp );
       }

# Create useful variables
# =======================

# There are four waveplate angles.  $totframe is the total number of
# frames in a recipe cycle.
       my $nangle = 4;
       my $totframe = $nangle * $number;

# Temporary fudge for the nod iterator.  It effectively gives all the
# offsets.   This should be changed once it's clear what the historic
# conventions have been for the number of offsets without nod iterator.
       if ( $number > 15 ) {
          $totframe = $number;

# Using an old ORAC-OT version suggests 8 was used, hence vectors would
# only be created every other recipe cycle.  This fudge corrects for that.
# It may be simpler to merely assume 16 frames per cycle, and NUMBER
# argument only a positive multiple of 16.  This requires a little more
# thought.
       } elsif ( $number == 8 ) {
          $totframe = 16;
       }

# A pair is a pair.
       my $pair = 2;
       my $pair_angle = $pair * $nangle;

# Assign the steering headers.
# ============================

# Jitter before rotating waveplate
# --------------------------------
# Specify during processing of which frames should the pairs be subtracted.
# Deal with the easier case first.  That's when the jitter comes first, so
# the data can be processed sequentially, and differenced every other frame
# in the normal fashion.
       if ( $jitter_first && $jitter_first != 2 ) {
          if ( $fn % $pair == 0 ) {
             $Frm->uhdr( "DIFFERENCE_PAIR", 1 );

# A difference is to be made, but in what order.  PAIR_ORDER = 1 means
# take the second from the first of the pair.  PAIR_ORDER = 0 is the
# reverse.  Put another way, the order is ABBA as the B is always taken
# from the A.
             if ( $fn % $nangle == 0 ) {
                $Frm->uhdr( "PAIR_ORDER", 0 );
             } else {
                $Frm->uhdr( "PAIR_ORDER", 1 );
             }

          } else {
             $Frm->uhdr( "DIFFERENCE_PAIR", 0 );
          }

# Rotate waveplate before jittering
# ---------------------------------
# Where the waveplate angle varies first, adjacent frames can't be
# differenced.  Instead it is frame numbers separated by four, e.g.
# first and fifth, second and sixth.
       } elsif ( ! $jitter_first ) {
          if ( int( ( $fn - 1 ) / $nangle ) % $pair ) {
             $Frm->uhdr( "DIFFERENCE_PAIR", 1 );

# A difference is to be made, but in what order.  PAIR_ORDER = 1 means
# take the second from the first of the pair.  PAIR_ORDER = 0 is the
# reverse.  Put another way, the order is ABBA as the B is always taken
# from the A.  However, there is the gap for each waveplate angle
# iteration.  We need PAIR_ORDER = 1 for 5th to 8th and PAIR_ORDER = 0
# for 13th to 16th frames in each cycle.
             if ( int( ( $fn - 1 ) / $pair_angle ) % $pair == 0 ) {
                $Frm->uhdr( "PAIR_ORDER", 1 );
             } else {
                $Frm->uhdr( "PAIR_ORDER", 0 );
             }

          } else {
             $Frm->uhdr( "DIFFERENCE_PAIR", 0 );
          }

# Rotate waveplate in pairs before jittering
# ------------------------------------------
# Where the waveplate angle varies first even only in pairs, adjacent
# frames can't be differenced.  Instead it is frame numbers separated
# by two, e.g. first and third, second and fourth.
       } else {
          if ( int( ( $fn - 1 ) / $pair ) % $pair ) {
             $Frm->uhdr( "DIFFERENCE_PAIR", 1 );

# A difference is to be made, but in what order.  PAIR_ORDER = 1 means
# take the second from the first of the pair.  PAIR_ORDER = 0 is the
# reverse.  Put another way, the order is ABBA as the B is always taken
# from the A.  However, there is the gap for each paired waveplate angle
# iteration.  We need PAIR_ORDER = 0 for 3rd, 4th, 11th, and 12th; and
# PAIR_ORDER = 1 for 7th, 8th, 15th, and  16th frames in each cycle.
             if ( int( ( ( $fn - 1 ) % $pair_angle ) / $pair ) % ( $nangle - 1 ) == 0 ) {
                $Frm->uhdr( "PAIR_ORDER", 0 );
             } else {
                $Frm->uhdr( "PAIR_ORDER", 1 );
             }

          } else {
             $Frm->uhdr( "DIFFERENCE_PAIR", 0 );
          }
       }

# Using data variance or not applies to all frames.
       $Frm->uhdr( "USE_VARIANCE", $usevar );

# Specify the first frame as the frame whose mode will be the
# reference for the normalisation of frames.
       if ( $fn == 1 ) {
          $Frm->uhdr( "REFERENCE_FRAME", 1 );
       } else {
          $Frm->uhdr( "REFERENCE_FRAME", 0 );
       }

# Specify during processing of which frames should the mosaics
# at the different waveplates be registered, and aperture photometry
# performed.
       if ( $fn % $totframe == 0 ) {
          $Frm->uhdr( "DO_APHOT", 1 );
          $Frm->uhdr( "REGISTER_IMAGES", 1 );

       } else {
          $Frm->uhdr( "DO_APHOT", 0 );
          $Frm->uhdr( "REGISTER_IMAGES", 0 );
       }

# Indicate when to combine the jittered data at a given waveplate
# position.  For the jitter first, it's after every set of jitters
# is completed.  When all waveplate angles are observed at each jitter,
# a mosaic for a waveplate angle can be found once the last jitter
# position for it has been observed.
       if ( $jitter_first && $jitter_first != 2 ) {
          if ( $fn % $number == 0 ) {
             $Frm->uhdr( "MAKE_MOSAIC", 1 );
          } else {
             $Frm->uhdr( "MAKE_MOSAIC", 0 );
          }

       } elsif ( ! $jitter_first ) {
          if ( $Grp->num % $totframe >= ( $totframe - $nangle ) ) {
             $Frm->uhdr( "MAKE_MOSAIC", 1 );
          } else {
             $Frm->uhdr( "MAKE_MOSAIC", 0 );
          }

       } else {
          if ( $Grp->num % ( $totframe / 2 ) >= ( $totframe - $nangle ) / 2 ) {
             $Frm->uhdr( "MAKE_MOSAIC", 1 );
          } else {
             $Frm->uhdr( "MAKE_MOSAIC", 0 );
          }
       }

# Insert the cycle number of the set of frames.
       $Frm->uhdr( "CYCLE_NUMBER", int( $Grp->num / $totframe ) );

# Insert the number of frames in the jitter.
       $Frm->uhdr( "JITTER_NUMBER", $number );

# All frames are target.  Some more-general primitives need to select
# targets from sky frames.
       $Frm->uhdr( "TARGET_OR_SKY", "target" );

# Record the order for the tidying.
       $Frm->uhdr( "JITTER_FIRST", $jitter_first );

    }

# Podule
# ======

=head1 NAME

_POL_NOD_CHOP_STEER_ -- Steers processing for POL_NOD_CHOP recipes.

=head1 DESCRIPTION

This primitive creates the groups needed by POL_NOD_CHOP recipes (see
the Groups topic).  It also controls processing for POL_NOD_CHOP
recipes through the steering headers listed below.

It is for single-beam polarimetry, i.e. it's not suitable with IRPOL.

=head1 STEERING HEADERS

=over 4

=item CYCLE_NUMBER = INTEGER

Number of the cycle, a cycle being a set of frames to complete a
pass through the recipe.  The first cycle is 0.

=item DIFFERENCE_PAIR = LOGICAL

Whether or not to subtract pairs.  The pattern of values depends
on argument JITTER_BEFORE_ANGLE.  In the simplest case when
JITTER_BEFORE_ANGLE=1, DIFFERENCE_PAIR is true every second frame.

=item DO_APHOT = LOGICAL

Whether or not perform aperture photometry.
Photometry is performed once the polarisation maps are made.

=item JITTER_FIRST = LOGICAL

The value of argument JITTER_BEFORE_ANGLE.

=item JITTER_NUMBER = INTEGER

The number of frames in the jitter.

=item MAKE_MOSAIC = LOGICAL

Whether or not register the jittered images by beam and make a
mosaic for the current waveplate angle.  Each mosaic is made once
all the jittered target frames for a given waveplate angle in a
cycle are available.

=item PAIR_ORDER = LOGICAL

Pair subtraction order, true means take second from the first,
and false means take the first from the second.  The pattern
alternates true-false every fourth frame.

=item REFERENCE_FRAME = LOGICAL

A true value specifies the reference frame for normalisation
purposes.  It is true for the first frame and false for all
subsequent frames in the observation.  It is currently not used.

=item REGISTER_IMAGES = LOGICAL

Whether or not to register and resample the e- and o-beam mosaics.

=item TARGET_OR_SKY = CHARACTER

This is "target" for a target frame, and "sky" for a sky calibration
frame.  All frames should be target.

=item USE_VARIANCE = LOGICAL

Whether or not variance processing is to occur.  This equates to
argument USEVAR.

=back

=head1 GROUPS

The following group of frames is created, retained by storing
a reference in the $Grp user header.  It is listed below by its
header name.

   MOSAIC_GROUP  Mosaics at the four waveplate positions.

It inherits the main group's headers and user headers.
MOSAIC_GROUP's file has the same name as the main group's file.

=head1 ARGUMENTS

=over 4

=item JITTER_BEFORE_ANGLE = LOGICAL (Given)

The selects the ordering of the frames.  If true (1), the
jittering occurs at all positions before the waveplate is
turned.  If false (0), all waveplate angles are observed at
a given offset.  If set to 2, then the waveplate is turned in
pairs before dithering, so as to determine Stokes Q and U
parameters as quickly as possible. [1]

=item NUMBER = INTEGER (Given)

The number of frames in the jitter.  If absent, the number of offsets,
as given by user header ORAC_NUMBER_OF_OFFSETS, minus one is used.  If
neither is available, 9 is used.  An error state arises if the number
of jittered frames is fewer than 3.  []

=item USEVAR = LOGICAL (Given)

Whether or not to create and propagate variance arrays.  [1]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for Michelle in imaging mode.

=item *

Processing only occurs for object and sky frames.

=back

=head1 AUTHORS

Malcolm J. Currie <mjc@star.rl.ac.uk>

=head1 COPYRIGHT

Copyright (C) 2001--2004 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
