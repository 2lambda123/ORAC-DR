#+
# Name:
#    _CORRECT_WAVEPLATE_ANGLE_HEADER_
#
# Purpose:
#    Corrects and standardises values of the polarimetry waveplate angle.
#
# Language:
#    Perl5
#
# Description:
#    This primitive corrects values of the polarimetry waveplate angle
#    for an observation.  In particular, it sets a default value of
#    0 degrees when ORAC_WAVEPLATE_ANGLE internal header is undefined;
#    or corrects all values to be modulo 180, rounded to one decimal
#    place to form a consistent value for sub-grouping comparisons using
#    strings.  The new value is stored in the user header and replaces
#    the value in the FITS header.
#
# Notes:
#    -  This primitive is suitable for Michelle and UIST in imaging
#    mode.
#    -  Accessing the FITS airlock in a multi-NDF observation is
#    not possible in an OO fashion.  So the structure names are
#    hardwired.
#    -  The formatting of the Michelle orientation values by dhspool
#    has changed from the original 0.0, 45, 22.5, 67.5, 180, 202.5,
#    225, 247.5 to the corresponding values all with four decimal
#    places at some unknown time.
#
# Tasks:
#    KAPPA: FITSMOD.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2002 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Specify the NDF.
    my $in = $Frm->file;
    my ( %keywords, $param1, @wplakey );

# ***** Kludge Alert ******
#
# There is currently no means of accessing the FITS airlock in the
# multi-NDF container file generically, forced to assumed the
# the data structure for now.  So hardwire the name.
    ( my $inheader = $in ) =~ s/I1BEAMA/HEADER/;
    
# See if WPLANGLE has a value.
    if ( !defined( $Frm->uhdr( "ORAC_WAVEPLATE_ANGLE" ) ) ) {

# Set the internal hash for WPLANGLE to value 0.  This will allow the
# flat-field rules to work even if WPLANGLE had no value in the raw
# frame.
       $Frm->uhdr( "ORAC_WAVEPLATE_ANGLE", 0 );

# The data also need to be changed so that the flat can be filed.
# Thus correct the FITS airlock value too.  This assumes that there
# is a keyword corresponding to the ORAC_WAVEPLATE_ANGLE.  Note that
# the input file name remains the same.  The implied wildcarding of
# the multi-NDF file by KAPPA would deal with this at one time.
# However, now due to changes in the DR conversion from raw frames, 
# there is only one set of user and external headers per Frm.   Hence
# there is no looping over the integrations.  The current frame is the
# first integration, so we have to access the header NDF.  
       %keywords =  $Frm->translate_hdr( "ORAC_WAVEPLATE_ANGLE" );
       @wplakey = keys( %keywords );
       $param1 = "edit=update keyword=$wplakey[ 0 ] value=0.0 comment=\\\$C position=!"; 
       $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "ndf=$inheader $param1" );

# Correct the waveplate angle to modulo 180 degrees.
# ==================================================

# Apply to all angles to give a consistent string for each angle.
     } else {

# For the polarimetry reductions the waveplate angles are 0, 45, 22.5,
# and 67.5.  Values 180, 225, 202.5, and 247.5 are equivalent.  Convert
# to modulo 180 as floating point to one decimal place.
       my $wplangle = $Frm->uhdr( "ORAC_WAVEPLATE_ANGLE" );
       my $newangle = 0.1 * int( 10.0 * ( $wplangle -
                      int( $wplangle / 180 ) * 180.0 ) + 0.1 );

# Store the revised value.
       $Frm->uhdr( "ORAC_WAVEPLATE_ANGLE", $newangle );

# The data also need to be changed so that the mosaic will inherit it.
# Thus correct the FITS airlock value too.  This assumes that
# there is a keyword corresponding to the ORAC_WAVEPLATE_ANGLE.  Note
# that the input file name remains the same.  Again we are forced to
# the header-NDF kludge for now.  See the earlier FITSMOD comments for
# more details.
       %keywords =  $Frm->translate_hdr( "ORAC_WAVEPLATE_ANGLE" );
       @wplakey = keys( %keywords );
       $param1 = "edit=update keyword=$wplakey[ 0 ] value=$newangle comment=\\\$C position=!"; 
       $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "ndf=$inheader $param1" );

# Report the processing status.
       orac_print "Frame $in has waveplate angle changed from " .
                  "$wplangle to $newangle (modulo 180).\n";
    }

# Podule
# ======

=head1 NAME

_CORRECT_WAVEPLATE_ANGLE_HEADER_ -- Corrects and standardises values of the polarimetry waveplate angle.

=head1 DESCRIPTION

This primitive corrects values of the polarimetry waveplate angle
for an observation.  In particular, it sets a default value of
0 degrees when ORAC_WAVEPLATE_ANGLE internal header is undefined;
or corrects all values to be modulo 180, rounded to one decimal
place to form a consistent value for sub-grouping comparisons using
strings.  The new value is stored in the user header and replaces
the value in the FITS header.

=head1 NOTES

=over 4

=item *

This primitive is suitable for Michelle and UIST in imaging mode.

=item *

Accessing the FITS airlock in a multi-NDF observation is
not possible in an OO fashion.  So the structure names are
hardwired.

=item *

The formatting of the Michelle orientation values by dhspool
has changed from the original 0.0, 45, 22.5, 67.5, 180, 202.5,
225, 247.5 to the corresponding values all with four decimal
places at some unknown time.

=back

=head1 TASKS

KAPPA: FITSMOD.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
