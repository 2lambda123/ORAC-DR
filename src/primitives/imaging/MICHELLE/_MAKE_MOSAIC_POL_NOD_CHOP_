#+
# Name:
#    _MAKE_MOSAIC_POL_NOD_CHOP_
#
# Purpose:
#    Forms a mosaic for nodded and chopped polarimetry at the current
#    waveplate angle.
#
# Language:
#    Perl5
#
# Description:
#    This primitive makes a mosaic from the object frames of the
#    differenced-frame group of a POL_NOD_CHOP recipe.  It calls the
#    standard _MAKE_MOSAIC_ primitive using the difference group
#    selected for the current waveplate angle and recipe cycle number,
#    instead of the current $Grp.  The resultant mosaic is appended
#    to the MOSAIC_GROUP group on the first cycle, and updated
#    thereafter.
#
# Arguments:
#    FILLBAD = LOGICAL (Given)
#       If true (1), replace the bad pixels in the current cycle's
#       mosaic with a smooth function derived from its neighbours. 
#       Otherwise, leave the bad pixels unaltered.  [1]
#    INT_METHOD = CHARACTER (Given)
#       The interpolation method.  This is either "linint" for bi-linear
#       interpolation, or "nearest" for nearest neighbour.  The latter
#       takes about half the time.  ["linint"]
#    RESAMPLE = LOGICAL (Given)
#       If true (1), resample the current cycle's frames to the same
#       Cartesian co-ordinate system using the method given by argument
#       INT_METHOD.  If false (0), use integer offsets and changes of
#       origin to register the frames.  The latter is many times
#       faster and is recommended for pipeline operation.
#
# Notes:
#    -  This primitive is suitable for Michelle in imaging mode.
#    -  Processing only occurs when the steering header MAKE_MOSAIC
#    is true.
#    -  The recipe cycle number comes from steering header CYCLE_NUMBER.
#    -  The waveplate angle is obtained from internal header
#    ORAC_WAVEPLATE_ANGLE.
#    -  DIFFERENCE_GROUP is a $Grp group internal header storing a reference
#    to the group of differenced pairs of frames.
#    -  MOSAIC_GROUP is a $Grp group internal header storing a reference to
#    the group of mosaics.
#    -  The arguments are merely passed to _MAKE_MOSAIC_ and
#    the group mosaic name is restored to that of the current $Grp,
#    not that of the differenced-pair groups.  User header ROOT_NAME is set
#    prior to calling _MAKE_MOSAIC_, thereby overriding it's default naming
#    of the mosaic.
#    -  There is no trimming of the mosaics.
#    -  After the first cycle, the group file---the master mosaic---comes
#    from the MOSAIC_GROUP selected by waveplate angle.  The mosaic from
#    the current cycle is co-added to it.
#    -  MOSAIC_GROUP has additional internal headers assigned.  The recipe
#    cycle number is written to steering header CYCLE_NUMBER.  Also stored
#    is the waveplate angle to the nearest lower integer in the internal
#    header WAVEPLATE_ANGLE.
#    -  The updated headers of the mosaic are copied back into the
#    MOSAIC_GROUP frame.
#
# Output Data:
#    The grand mosaics the current frame's waveplate angle called
#    "<groupname>_p<waveplate_angle>_mos", where <groupname> is the group's
#    name and <waveplate_angle> is the waveplate angle rounded down to the
#    nearest degree.   Mosaics for an individual cycle have a further
#    "_<cycle_number>" suffix.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2001 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Arguments
# =========

# Obtain the value for the interpolation.
    my $intmethod = ( $_MAKE_MOSAIC_POL_NOD_CHOP_{INT_METHOD} || "linint" );

# Determine whether or not to fill bad pixels.
    my $fillbad = $_MAKE_MOSAIC_POL_NOD_CHOP_{FILLBAD};
    $fillbad = defined( $fillbad ) ? $fillbad : 1;

# Determine whether or not to resample.
    my $resample = $_MAKE_MOSAIC_POL_NOD_CHOP_{RESAMPLE};
    $resample = defined( $resample ) ? $resample : 1;

# Selection
# =========

# Test whether or not it is time to make a mosaic.
    my $combine = $Frm->uhdr( "MAKE_MOSAIC" );
    if ( $combine ) {

# Obtain the current frame's polarisation angle and cycle number.
       my $wplangle = $Frm->uhdr( "ORAC_WAVEPLATE_ANGLE" );
       my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );

# Obtain the mosaic group by reference.
       my $mosGrp = $Grp->uhdr( "MOSAIC_GROUP" );

# Make the group of differenced pairs the local version of $Grp within
# the context delimited by the braces.  The mosaic name is the group
# name.  Define outside the context so that it persists when the
# Grp reverts to the main Grp.
       my ( $mosFrm, $mosname, $subGrp );
       {
          my $diffGrp = $Grp->uhdr( "DIFFERENCE_GROUP" );

# Make a copy of the group identifier which persists outside the current
# context.  It's needed to propagate the headers.
          $subGrp = $diffGrp;

# Select those members with the same waveplate angle, and cycle number.
          my $angleGrp = $diffGrp->subgrp( ORAC_WAVEPLATE_ANGLE => $wplangle,
                                           CYCLE_NUMBER => $cycleno );

# Set the group name.  Here we mimic what happens for most uses of
# _MAKE_MOSAIC_ where there is a single group.  The group name changes
# having the "_mos" appended once the first mosaic is made.  There is a
# mosaic for each waveplate angle, so this should appear in the mosaic's
# name.  Add a small increment to allow for rounding, but not the normal
# 0.5 as this would change 22.5 to 23 and 67.5 to 68.  Specification was
# for 22 and 67 in the names.
          my $int_wplangle = int( $wplangle + 0.1 );
          my $rootname = $Grp->file . "_p" . $int_wplangle;
          if ( $cycleno == 0 ) {
             $angleGrp->file( $rootname );
          } else {

# Is this line needed?
             $angleGrp->file( $rootname . "_mos" );
          }

# On the second and later cycles, we want to update the headers of the
# integrating mosaic for the current waveplate angle.  So besides
# setting the group file, the headers of the existing mosaic stored in
# the MOSAIC_GROUP must be copied to waveplate-angle subgroup.
          if ( $cycleno > 0 ) {

# First access the mosaic for the current waveplate angle first.
             my $moswpaGrp = $mosGrp->subgrp( ORAC_WAVEPLATE_ANGLE => $wplangle );
             $mosFrm = $moswpaGrp->frame( 0 );

# Propagate the headers to the subgroup for the waveplate and cycle.
             %{ $angleGrp->hdr } = %{ $mosFrm->hdr };
             %{ $angleGrp->uhdr } = %{ $mosFrm->uhdr };
          }

# _MAKE_MOSAIC_ uses the group header ROOT_NAME for cycles after the first
# to create the name of the mosaic.  Here we know what ROOT_NAME has to be
# in all cases, so it's just set.  This avoids recording both values in
# the main group's header to enable the value to persist between cycles.
          $angleGrp->uhdr( "ROOT_NAME", $rootname );

# Copy the headers from the MOSAIC_GROUP file to the for the current
#  waveplate angle to the group file.

# Start a new context so that the sub-group becomes the current $Grp
# within the context delimited by the braces.  The mosaic name is the
# group name.  Define outside the context so that it persists when the
# Grp reverts to the main Grp.
          my $mosname;
          {
             my $Grp = $angleGrp;
             _MAKE_MOSAIC_ INT_METHOD=$intmethod FILLBAD=$fillbad RESAMPLE=$resample TRIM=0

# Need to create the frame to add to the MOSAIC_GROUP on the first
# cycle.
             if ( $cycleno == 0 ) {

# The group name is changed in _MAKE_MOSAIC_ to the mosaic name.
# We wish to place the newly created mosaic in the MOSAIC_GROUP group.
                $mosname = $Grp->file;

# Create a new frame.  Note that for Michelle we cannot use
# $Frm->new( $mosname ), because it will think the file is a multi-NDF.
                $mosFrm = $Frm->new;
                $mosFrm->file( $mosname );
             }

# Propagate the modified headers back to the frame.
             %{ $mosFrm->hdr } = %{ $Grp->hdr };
             %{ $mosFrm->uhdr } = %{ $Grp->uhdr };

# Remove the group references from the mosaic frame's headers.
             delete $mosFrm->uhdr->{ "MOSAIC_GROUP" };
             delete $mosFrm->uhdr->{ "DIFFERENCE_GROUP" };

# Add the frame to the group.
             if ( $cycleno == 0 ) {
                $mosGrp->push( $mosFrm );
             } else {
                $mosFrm->file( $Grp->file );
             }

# Inherit the cycle number.  The mosaic frames are not part of the
# pipeline $Frm; they are in another group, however, the cycle number is
# needed for subsequent processing.
             $mosFrm->uhdr( "CYCLE_NUMBER", $cycleno );

# Set a header needed later for computing the Stokes parameters,
# sub-grouping on the integer waveplate angle.
             $mosFrm->uhdr( "WAVEPLATE_ANGLE", $int_wplangle );
          }
       }
    }

# Podule
# ======

=head1 NAME

_MAKE_MOSAIC_POL_NOD_CHOP_ -- Forms a mosaic for nodded and chopped polarimetry at the current waveplate angle.

=head1 DESCRIPTION

This primitive makes a mosaic from the object frames of the
differenced-frame group of a L<POL_NOD_CHOP|POL_NOD_CHOP> recipe.  It
calls the standard l<_MAKE_MOSAIC_|_MAKE_MOSAIC_> primitive using the
difference group selected for the current waveplate angle and recipe
cycle number, instead of the current $Grp.  The resultant mosaic is
appended to the MOSAIC_GROUP group on the first cycle, and updated
thereafter.

=head1 ARGUMENTS

=over 4

=item FILLBAD = LOGICAL (Given)

If true (1), replace the bad pixels in the current cycle's
mosaic with a smooth function derived from its neighbours. 
Otherwise, leave the bad pixels unaltered.  [1]

=item INT_METHOD = CHARACTER (Given)

The interpolation method.  This is either "linint" for bi-linear
interpolation, or "nearest" for nearest neighbour.  The latter
takes about half the time.  ["linint"]

=item RESAMPLE = LOGICAL (Given)

If true (1), resample the current cycle's frames to the same
Cartesian co-ordinate system using the method given by argument
INT_METHOD.  If false (0), use integer offsets and changes of
origin to register the frames.  The latter is many times
faster and is recommended for pipeline operation.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for Michelle in imaging mode.

=item *

Processing only occurs when the steering header MAKE_MOSAIC is
true.

=item *

The recipe cycle number comes from steering header CYCLE_NUMBER.

=item *

The waveplate angle is obtained from internal header ORAC_WAVEPLATE_ANGLE.

=item *

DIFFERENCE_GROUP is a $Grp group internal header storing a reference
to the group of differenced pairs of frames.

=item *

MOSAIC_GROUP is a $Grp group internal header storing a reference to the
group of mosaics.

=item *

The e- and o-beam groups are specified by references stored in
the internal group headers EBEAM_GROUP and OBEAM_GROUP respectively.

=item *

The arguments are merely passed to L<_MAKE_MOSAIC_|_MAKE_MOSAIC_> and
the group mosaic name is restored to that of the current $Grp, not
that of the differeced-pair group.  User header ROOT_NAME is set prior
to calling _MAKE_MOSAIC_, thereby overriding it's default naming of
the mosaic.

=item *

There is no trimming of the mosaics.

=item *

After the first cycle, the group file---the master mosaic---comes
from the MOSAIC_GROUP selected by waveplate angle.  The mosaic from
the current cycle is co-added to it.

=item *

MOSAIC_GROUP has additional internal headers assigned.  The recipe
cycle number is written to steering header CYCLE_NUMBER.  Also stored
is the waveplate angle to the nearest lower integer in the internal
header WAVEPLATE_ANGLE.

=item *

The updated headers of the mosaic are copied back into the
MOSAIC_GROUP frame.

=back

=head1 OUTPUT DATA

The grand mosaics for the e- and o-beam groups at the current frame's
waveplate angle called "E<lt>groupnameE<gt>_pE<lt>waveplate_angleE<gt>_mos",
where E<lt>groupnameE<gt> is the group's name which includes the beam
name, and E<lt>waveplate_angleE<gt> is the waveplate angle rounded
down to the nearest degree.  Mosaics for an individual cycle have a
further "_E<lt>cycle_numberE<gt>" suffix.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2001 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
