#+
# Name:
#    _CALC_STOKES_NOD_CHOP_
#
# Purpose:
#    Calculates Stokes parameters for single-beam polarisation chopped
#    and nodded data.
#
# Language:
#    Perl5
#
# Description:
#    This primitive combines the two positive and negative source images
#    in each of the four registered and resampled mosaics--one for each
#    each waveplate angle.  From the combined files it derives images of
#    the summed  intensity; polarisation percentage, intensity, and angle;
#    and the Stokes parameters.  The last are Q and U if linear polarisation
#    is chosen and V for circular polarisation.  Variance information for
#    the parameters is also derived if the supplied frames contain
#    variance.
#
#    The polarisation data are extracted into a catalogue in the FITS
#    binary-table format, where they are binned, and those meeting 
#    the following criteria are available to display in a vector plot.
#    The criteria are percentage polarisation positive below 50%; and
#    if variance information is available, the signal-to-noise is at
#    least argument S2N, and the standard deviation is less than
#    argument SIGMA.
#
# Arguments:
#    BIN = INTEGER (Given)
#       The bin size in pixels for both x and y axes by which the
#       polarisation parameters are averaged to improve their signal to
#       noise and generate a clearer vector plot.  The averaging applies
#       to the catalogue, not the polarisation images.  The default gives
#       no losss of resolution in typical seeing.  The value must be at
#       least 1.  [3]
#    CENTROID = LOGICAL (Given)
#       If true (1), centroid on the source in each sub-frame before
#       combining.  If successful, the resultant combined file has the
#       source centred.  Centroiding is not suitable for objects near
#       the detection limit or amorphous extended source.  Setting
#       CENTROID to false (0), means the combined file is centred about
#       the expected position of the source.  [1] 
#    DISPLAY_IMAGE = CHARACTER (Given)
#       The derived polarisation image to be displayed below the vectors
#       in a composite plot.  Allowed values are "I", "P", and "Q", "U"
#       when argument POL_MODE is "linear" or "V" when POL_MODE is
#       "circular".  The chosen image will also need to be selected
#       in the display control file.  ["I"]
#    POL_MODE = CHARACTER (Given) 
#       The polarisation type to calculate.  It must be either "linear"
#       or "circular", the former being used if any other value is
#       supplied.  ["linear"]
#    S2N = REAL (Given)
#       Minimum signal to noise of the polarisation percentage for a
#       point to be included in the final catalogue and plot.  It is
#       constrained to be at least one (i.e. no threshold).  It is
#       only used if the supplied e- and o-beam frames contain data
#       variance. [3]
#    SIGMA = REAL (Given)
#       Maximum error of the polarisation percentage for a point to be
#       included in the final catalogue and plot.  It is constrained
#       to be less than 100% (i.e. no threshold).  It is only used if
#       the supplied e- and o-beam frames contain data variance.  [5]
#
# Notes:
#    -  This primitive is suitable for Michelle in imaging mode.
#    -  Processing only occurs for object and sky frames, and when the
#    steering header REGISTER_IMAGES is true.
#    -  The registered frames are found in the group stored by reference
#    in the $Grp user header MOSAIC_GROUP.  From this subgroups are
#    formed comprising one member selected in turn by matching
#    their waveplate angles with header ORAC_WAVEPLATE_ANGLE.  Each
#    subgroup is passed to _COMBINE_CHOPPED_SOURCE_ to form the
#    combined-image file.  The resultant combined-image file is stored
#    in a new group.  The individual combined frames for each integer
#    waveplate angle are selected with the user header WAVEPLATE_ANGLE.
#    -  The files associated with the MOSAIC_GROUP members are
#    restored to their input values, so that each of these mosaics can
#    be co-added with another cycle's mosaic.
#    -  The polarised intensity is corrected for the statistical bias
#    of the noise by subtracting the variance of Q or U.
#    -  An offset of 0.0 degrees clockwise is applied to the rotation
#    angle for the orientation of the analyser with respect to north.
#    A non-null value will be applied once it is determined.
#    -  The origins of the generated polarisation frames are set to
#   [1,1].  The WCS current frame is unchanged.
#    -  The units are set for the frames with suffices (see
#    "Output Data") P to "%", and TH to "degrees".
#    -  The appropriate frame titles are set for the generated frames.
#    These are as follows.  I: "Intensity";  P: "Polarisation";
#    PI: "Polarised Intensity"; Q: "Stokes Q"; TH: "Polarisation Angle";
#    U: "Stokes U"; V: "Stokes V".
#    -  All the created frames may be displayed.  Only the frame chosen
#    by argument DISPLAY_IMAGE can appear as the base image with vectors
#    overlaid.
#
# Tasks:
#    CURSA: CATSELECT; KAPPA: NDFTRACE, SETORIGIN, SETTITLE, SETUNITS;
#    POLPACK: POLBIN, POLCAL, POLEXT, POLIMP, POLVEC.
#
# Output Data:
#    -  The combined source image and neighbourhoods at each waveplate
#    angle inheriting the group file name, but with the "_mos" suffix
#    replaced by "_cab".
#    -  Polarisation frames each inheriting the name of its input frame
#    but each with a different suffix for the various parameters.
#    These are:
#        I   intensity
#        P   percentage polarisation
#        PI  polarisation intensity
#        Q   Stokes Q (if POL_MODE is "linear")
#        TH  polarisation angle
#        U   Stokes U (if POL_MODE is "linear")
#        V   Stokes V (if POL_MODE is "circular")
#    -  A FITS binary-table catalogue of the binned and culled
#    polarisation data, called <groupname>_<image>.FIT, where
#    <groupname> is the prefix used for group frames, and <image>
#    is the value of argument DISPLAY_IMAGE or "I" if the value
#    is not valid.  For each point it tabulates the x-y
#    co-ordinates, the total intensity, the Stokes parameters, the
#    percentage polarisation, the polarisation angle and intensity.
#    There are additional columns giving the standard deviation on
#    each of the tabulated values (excluding the co-ordinates).
#    Likewise <groupname>_all.FIT and <groupname>_bin.FIT
#    store the full and binned catalogues respectively.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# References:
#    A.Chryststomou, 1997, "Imaging Polarimetry with IRCAM3", IRPOL/2.2.
#    D.S.Berry & T.M.Gledhill, 1999, "POLPACK Users Manual Version 2.0",
#       SUN/223.3.
#
# Copyright:
#    Copyright (C) 1998-2001 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Arguments
# =========

# Obtain the binning factor.
    my $binsize = max( 1, ( $_CALC_STOKES_NOD_CHOP_{BIN} || 3 ) );

# Obtain the value for the polarimetry mode.
    my $polmode = ( $_CALC_STOKES_NOD_CHOP_{POL_MODE} || "linear" );
    if ( $polmode ne "linear" && $polmode ne "circular" ) {
       $polmode = "linear";
    }
    my $upolmode = "\u\L$polmode";

# Obtain the method by which polarisation is derived.
    my $di = ( $_CALC_STOKES_NOD_CHOP_{DISPLAY_IMAGE} || "I" );

# Validate ther display images, defaulting to the intensity
# if the supplied value is unknown or inappropriate for the
# polarisation mode.
    my $invalid = $di ne "I" && $di ne "PI" && $di ne "P";
    if ( $polmode eq "linear" ) {
       if ( $invalid && $di ne "Q" && $di ne "V" ) {
          $di = "I";
       }

    } elsif ( $polmode eq "circular" ) {
       if ( $invalid && $di ne "V" ) {
          $di = "I";
       }
    }

# Obtain the signal-to-noise and standard-deviation thresholds.
    my $s2n = max( 1, ( $_CALC_STOKES_NOD_CHOP_{S2N} || 3 ) );
    my $sigma = min( 100, ( $_CALC_STOKES_NOD_CHOP_{SIGMA} || 5 ) );

# Determine whether or not to centroid.
    my $centroid = $_CALC_STOKES_NOD_CHOP_{CENTROID};
    $centroid = defined( $centroid ) ? $centroid : 1;

# Selection
# =========

# This should only be performed on OBJECT or SKY frames when it is time
# to combine the registered mosaic images.
    if ( ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
           $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) && 
           $Frm->uhdr( "REGISTER_IMAGES" ) ) {

# Make a local $Grp containing just the mosaic images.
       my $mosGrp = $Grp->uhdr( "MOSAIC_GROUP" );

# Also form a new group for the compact images.
       my $comGrp = new $Grp;
       
# Combine the images.
# ===================

# Record the mosaic names, as we probably want to continue to co-add to
# it on later recipe cycles, and _COMBINE_CHOPPED_SOURCE_ sets the file
# to the combined mosaic, and is needed to calculate the polarisation
# parameters.
       my @mosnames = $mosGrp->membernames;

# The aim is to populate the combined-image group.  The MOSAIC_GROUP
# should have four members, one for each waveplate angle. * Should be
# validated.
       my $comFrm;
       foreach my $mosFrm ( $mosGrp->members ) {

# Obtain the mosaic frame's polarisation angle.  The value from the
# current frame is likely not the same.
          my $wplangle = $mosFrm->uhdr( "ORAC_WAVEPLATE_ANGLE" );

# Select those full-group members with the same waveplate angle as the
# that of the current mosaic.
          my $angleGrp = $Grp->subgrp( ORAC_WAVEPLATE_ANGLE => $wplangle );

# Start a new context such that the group passed to _COMBINE_CHOPPED_SOURCE_
# is not the main Grp, but the subgroup on the current cycle and with
# the current frame's waveplate angle.
          {
             my $Grp = $angleGrp;

# See the following primitive for details.  At present this assumes
# an ABBA pattern with two positive and two negative images.  An option
# could be provided to cope with chopping and nodding in the same
# orientation such that there is a double strength positive image and
# two negatives.   Since the $Grp->file is not the mosaic to be
# processed, pass the one that is by the user header MOSAIC_FRAME.
             $Grp->uhdr( "MOSAIC_FRAME", $mosFrm );
             _COMBINE_CHOPPED_SOURCE_ CENTROID=$centroid

# Access the name of the combined image.
             $comFrm = $Grp->uhdr( "COMBINED_SOURCE_FRAME" );

# Push this into the combined-image group.
             $comGrp->push( $comFrm );

          }

       }

# Select the various frames.
# ==========================

# Obtain the 0-degree polariser angle.
       my $tempGrp = $comGrp->subgrp( WAVEPLATE_ANGLE => 0 );
       my $w0 = $tempGrp->frame( 0 )->file;

# Obtain the 22.5-degree polariser angle.
       $tempGrp = $comGrp->subgrp( WAVEPLATE_ANGLE => 22 );
       my $w22 = $tempGrp->frame( 0 )->file;

# Obtain the e-beam 45-degree polariser angle.
       $tempGrp = $comGrp->subgrp( WAVEPLATE_ANGLE => 45 );
       my $w45 = $tempGrp->frame( 0 )->file;

# Obtain the e-beam 67.5-degree polariser angle.
       $tempGrp = $comGrp->subgrp( WAVEPLATE_ANGLE => 67 );
       my $w67 = $tempGrp->frame( 0 )->file;

# Restore the mosaic names, changed within _COMBINE_CHOPPED_SOURCE_.
       foreach my $mosFrm ( $mosGrp->members ) {

# Reset the file for the current frame to be the mosaic.
          $mosFrm->file( shift( @mosnames ) );
       }


# Import the mosaics into POLPACK.
# ================================
       my ( $par1, $par2, $title, $w_mosaics );

# Make convenient lists of the mosaics.
       $w_mosaics = "$w0,$w22,$w45,$w67";

# Create text files to hold the list of input files.  This is needed
# because expanded lists of files may make the command line too long
# for the ADAM message system.
       unlink ( "wmosaics.list$$" );

       open( my $fh_wlist, ">wmosaics.list$$" ) ||
         orac_throw "Unable to open wmosaics.inlist$$ to create a list of mosaics at each waveplate angle to process.  Error: $!.\n";
       print $fh_wlist $w_mosaics, "\n";
       close( $fh_wlist );

# Use a table in the instrument calibration directory to import
# headers into a POLPACK extension into all of the mosaics.
       my $table = $Cal->find_file("polimp.dat");
       $par1 = "in='^wmosaics.list$$'";
       $par2 = "table=$table quiet";
       $Mon{ "polpack_mon" }->obeyw( "polimp", "$par1 $par2" );

# Obtain the rootname for created frames.  
       my $root = $Grp->file;

# There is no FITS header for the beam, so tell POLPACK explicitly.
# Set the rotation of the analyser with respect to north.  Also
# need to group e- and o-beams at each angle through common identifiers.
# Note that the order of the identifiers must match that of the frames.
       my $rotation = $Frm->uhdr( "ORAC_ROTATION" ) - 0.0;
       $par1 = "angrot=$rotation imgid='${root}_0,${root}_22,${root}_45,${root}_67'";
       $Mon{ "polpack_mon" }->obeyw( "polext", "in='^wmosaics.list$$' $par1" );

# Report progress to avoid a long wait.
       orac_print "Ancilliary polarisation data imported into $w_mosaics.\n";

# Determine whether the NDFs support variance.
# ============================================

# Any of the NDFs should do.
       $Mon{ "ndfpack_mon" }->obeyw( "ndftrace", "ndf=$w0" );
       ( my $ORAC_STATUS, my $variance ) = $Mon{ "ndfpack_mon" }->get( "ndftrace", "variance" );

# Form Stokes data cube.
# ======================

# Set the parameters for POLCAL
       my $cube = $root . "_sp";
       $par1 = "in='^wmosaics.list$$'";
       if ( $variance eq "TRUE" ) {
          $par2 = "out=$cube pmode=$polmode dualbeam=f variance";
       } else {
          $par2 = "out=$cube pmode=$polmode dualbeam=f";
       }

# TRIMBAD keyword for removing girdle of bad pixels was added at
# POLPACK version 2.1-5.
       if ( starversion_lt( 'POLPACK', 'V2.1-5' ) ) {
          $Mon{ "polpack_mon" }->obeyw( "polcal", "$par1 $par2" );
       } else {
          $Mon{ "polpack_mon" }->obeyw( "polcal", "$par1 $par2 trimbad" );
       }

# Report the new frame.
       orac_print "${upolmode}-polarisation cube formed.\n";

# Remove the GRP indirection files.
       unlink ( "wmosaics.list$$" );

# Extract the various images.
# ===========================

# Extract images of the Stokes parameters from the cube.  There is no binning
# and no catalogue is formed.  Variance is used to correct for bias.  The
# variance flag is ignored by POLVEC if there is no variance array in the
# supplied Stokes cube, so no conditional parameter lists are required.
       if ( $polmode eq "linear" ) {
          $par1 = "Q=${root}_Q U=${root}_U P=${root}_P";
       } elsif ( $polmode eq "circular" ) {
          $par1 = "V=${root}_V P=${root}_P";
       }
       $par2 = "I=${root}_I IP=${root}_PI ANG=${root}_TH variance debias";
       $Mon{ "polpack_mon" }->obeyw( "polvec", "in=$cube cat=! $par1 $par2" );

# Assign a sensible title for the intensity frame.  Reset its origin
# to the default, for convenience.
       $Mon{ "ndfpack_mon" }->obeyw( "settitle", "ndf=${root}_I title=Intensity" );
       $Mon{ "ndfpack_mon" }->obeyw( "setorigin", "ndf=${root}_I origin=[1,1]" );

# Report the new frame.
       orac_print "${upolmode}-polarisation intensity frame ${root}_I formed.\n";

# Create a new frame for displaying the polarisation data.
       my $tempFrm = $Frm->new;

# Display the frame.  Composite plots must wait until the table
# is created.
       if ( $di ne "I" ) {
          $tempFrm->file( "${root}_I" );
          $Display->display_data( $tempFrm ) if ( defined $Display );
       }

# Set NDF attributes and display the images.
# ==========================================

# Polarisation percentage
# -----------------------

# Set the title, units and origin for the polarisation percentage.
       $title = "title=Polarisation";
       $Mon{ "ndfpack_mon" }->obeyw( "settitle", "ndf=${root}_P $title" );
       $Mon{ "ndfpack_mon" }->obeyw( "setunits", "ndf=${root}_P units='%'" );
       $Mon{ "ndfpack_mon" }->obeyw( "setorigin", "ndf=${root}_P origin=[1,1]" );

# Report the creation of the frame.
       orac_print "${upolmode}-polarisation percentage frame " .
                  "${root}_P formed.\n";

# Display the frame.
       if ( $di ne "P" ) {
          $tempFrm->file( "${root}_P" );
          $Display->display_data( $tempFrm ) if ( defined $Display );
       }

# Polarisation angle
# ------------------

# Set the title, units and origin for the polarisation angle.
       $title = "title='Polarisation Angle'";
       $Mon{ "ndfpack_mon" }->obeyw( "settitle", "ndf=${root}_TH $title" );
       $Mon{ "ndfpack_mon" }->obeyw( "setunits", "ndf=${root}_TH units=degrees" );
       $Mon{ "ndfpack_mon" }->obeyw( "setorigin", "ndf=${root}_TH origin=[1,1]" );

# Report the creation of the frame.
       orac_print "${upolmode}-polarisation angle frame " .
                  "${root}_TH formed.\n";

# Display the frame.
       $tempFrm->file( "${root}_TH" );
       $Display->display_data( $tempFrm ) if ( defined $Display );

# Polarisation intensity
# ----------------------

# Set the title and origin for the polarisation intensity.
       $title = "title='Polarised Intensity'";
       $Mon{ "ndfpack_mon" }->obeyw( "settitle", "ndf=${root}_PI $title" );
       $Mon{ "ndfpack_mon" }->obeyw( "setorigin", "ndf=${root}_PI origin=[1,1]" );

# Report the creation of the frame.
       orac_print "${upolmode}-polarisation intensity frame " .
                  "${root}_PI formed.\n";
  
# Display the frame.
       if ( $di ne "PI" ) {
          $tempFrm->file( "${root}_PI" );
          $Display->display_data( $tempFrm ) if ( defined $Display );
       }

# Stokes Q
# --------
       if ( $polmode eq "linear" ) {

# Assign a sensible title for the Q Stokes-parameter frame.  Reset its origin
# to the default, for convenience.
          $title = "title='Stokes Q'";
          $Mon{ "ndfpack_mon" }->obeyw( "settitle", "ndf=${root}_Q $title" );
          $Mon{ "ndfpack_mon" }->obeyw( "setorigin", "ndf=${root}_Q origin=[1,1]" );

# Report the creation of the frame.
          orac_print "${upolmode}-polarisation Q frame " .
                     "${root}_Q formed.\n";

# Display the frame.
          if ( $di ne "Q" ) {
             $tempFrm->file( "${root}_Q" );
             $Display->display_data( $tempFrm ) if ( defined $Display );
          }

# Stokes U
# --------

# Assign a sensible title for the U Stokes-parameter frame.  Reset its origin
# to the default, for convenience.
          $title = "title='Stokes U'";
          $Mon{ "ndfpack_mon" }->obeyw( "settitle", "ndf=${root}_U $title" );
          $Mon{ "ndfpack_mon" }->obeyw( "setorigin", "ndf=${root}_U origin=[1,1]" );

# Report the creation of the frame.
          orac_print "${upolmode}-polarisation U frame " .
                     "${root}_U formed.\n";

# Display the frame.
          if ( $di ne "U" ) {
             $tempFrm->file( "${root}_U" );
             $Display->display_data( $tempFrm ) if ( defined $Display );
          }

# Stokes V (circular polarisation)
# --------------------------------
       } elsif ( $polmode eq "circular" ) {

# Assign a sensible title for the V Stokes-parameter frame.  Reset its origin
# to the default, for convenience.
          $title = "title='Stokes V'";
          $Mon{ "ndfpack_mon" }->obeyw( "settitle", "ndf=${root}_V $title" );
          $Mon{ "ndfpack_mon" }->obeyw( "setorigin", "ndf=${root}_V origin=[1,1]" );

# Report the creation of the frame.
          orac_print "${upolmode}-polarisation Stokes V frame " .
                     "${root}_V formed.\n";

# Display the frame.
          if ( $di ne "V" ) {
             $tempFrm->file( "${root}_V" );
             $Display->display_data( $tempFrm ) if ( defined $Display );
          }

       }
       orac_print "\n";

# Form a catalogue in binary-table FITS format.  Variance is used to
# correct for bias.  Need to remove existing FITS files as CFITSIO
# does not clobber.
       my $fullcat = "${root}_all.FIT";
       unlink ( $fullcat );
       $par1 = "in=$cube cat=$fullcat variance debias";
       $Mon{ "polpack_mon" }->obeyw( "polvec", "$par1" );

       orac_print "FITS binary table of polarisation data " .
                  "created in $fullcat.\n";

# Finished with the cube, so delete it.  Retain the full catalogue
# so that offline binning and selection tuned to the data or user's
# requirements can be performed.
       _DELETE_A_FRAME_ FRAME=$cube

# Bin the vectors at the chosen scaling forming a new catalogue.
       my $bincat = "${root}_bin.FIT";
       unlink ( $bincat );
       $par1 = "in=$fullcat out=$bincat";
       $par2 = "box=$binsize method=median";
       $Mon{ "polpack_mon" }->obeyw( "polbin", "$par1 $par2" );

       orac_print "Tabular polarisation data binned in " .
                  "$bincat.\n";

# Apply criteria to reject noisy vectors forming a new catalogue.
# Criteria involving the noisy will only be available if variance
# data are present.
       my $selcat = "${root}_${di}.FIT";
       unlink ( $selcat );
       $par1 = "catin=$bincat catout=$selcat";
       if ( $variance eq "TRUE" ) {
          $par2 = "norejcat seltyp=e expr='p<50 & p>0 & dp<$sigma & p/dp>=$s2n'";
       } else {
          $par2 = "norejcat seltyp=e expr='p<50 & p>0'";
       }
       my $selection_status = $Mon{cursa}->obeyw( "catselect", "$par1 $par2" );

       if ( $selection_status != ORAC__OK ) {
          orac_warn "Data are too poor to pass criteria.  Integrate for " .
                    "longer or make the thresholds less stringent.\n";
       } else {

# Report the threshold criteria.
          orac_print "Thresholds applied applied to tabular " .
                     "polarisation data in $selcat.\n";
          orac_print "Criteria were 0 < polarisation < 50%\n";
          if ( $variance eq "TRUE" ) {
             orac_print "              S/N >= $s2n\n";
             orac_print "              standard deviation < $sigma%\n";
          }
          orac_print "\n";

# Display the composite plot.
          $tempFrm->file( "${root}_${di}" );
          $Display->display_data( $tempFrm ) if ( defined $Display );
       }
    }

# Podule
# ======

=head1 NAME 

_CALC_STOKES_NOD_CHOP_ -- Calculates Stokes parameters for single-beam polarisation chopped and nodded data.

=head1 DESCRIPTION

This primitive combines the two positive and negative source images
in each of the four registered and resampled mosaics--one for each
each waveplate angle.  From the combined files it derives images of
the summed  intensity; polarisation percentage, intensity, and angle;
and the Stokes parameters.  The last are Q and U if linear polarisation
is chosen and V for circular polarisation.  Variance information for
the parameters is also derived if the supplied frames contain
variance.

The polarisation data are extracted into a catalogue in the FITS
binary-table format, where they are binned, and those meeting 
the following criteria are available to display in a vector plot.
The criteria are percentage polarisation positive below 50%; and
if variance information is available, the signal-to-noise is at
least argument S2N, and the standard deviation is less than
argument SIGMA.

=head1 ARGUMENTS

=over 4

=item BIN = INTEGER (Given)

The bin size in pixels for both x and y axes by which the
polarisation parameters are averaged to improve their signal to
noise and generate a clearer vector plot.  The averaging applies
to the catalogue, not the polarisation images.  The default gives
no losss of resolution in typical seeing.  The value must be at
least 1.  [3]

=item CENTROID = LOGICAL (Given)

If true (1), centroid on the source in each sub-frame before
combining.  If successful, the resultant combined file has the
source centred.  Centroiding is not suitable for objects near
the detection limit or amorphous extended source.  Setting
CENTROID to false (0), means the combined file is centred about
the expected position of the source.  [1] 

=item DISPLAY_IMAGE = CHARACTER (Given)

The derived polarisation image to be displayed below the vectors
in a composite plot.  Allowed values are "I", "P", and "Q", "U"
when argument POL_MODE is "linear" or "V" when POL_MODE is
"circular".  The chosen image will also need to be selected
in the display control file.  ["I"]

=item POL_MODE = CHARACTER (Given) 

The polarisation type to calculate.  It must be either "linear"
or "circular", the former being used if any other value is
supplied.  ["linear"]

=item S2N = REAL (Given)

Minimum signal to noise of the polarisation percentage for a
point to be included in the final catalogue and plot.  It is
constrained to be at least one (i.e. no threshold).  It is
only used if the supplied e- and o-beam frames contain data
variance. [3]

=item SIGMA = REAL (Given)

Maximum error of the polarisation percentage for a point to be
included in the final catalogue and plot.  It is constrained
to be less than 100% (i.e. no threshold).  It is only used if
the supplied e- and o-beam frames contain data variance.  [5]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for Michelle in imaging mode.

=item *

Processing only occurs for object and sky frames, and when the
steering header REGISTER_IMAGES is true.

=item *

The registered frames are found in the group stored by reference
in the $Grp user header MOSAIC_GROUP.  From this subgroups are
formed comprising one member selected in turn by matching
their waveplate angles with header ORAC_WAVEPLATE_ANGLE.  Each
subgroup is passed to _COMBINE_CHOPPED_SOURCE_ to form the
combined-image file.  The resultant combined-image file is stored
in a new group.  The individual combined frames for each integer
waveplate angle are selected with the user header WAVEPLATE_ANGLE.

=item *

The files associated with the MOSAIC_GROUP members are restored to
their input values, so that each of these mosaics can be co-added with
another cycle's mosaic.

=item *

The polarised intensity is corrected for the statistical bias
of the noise by subtracting the variance of Q or U.

=item *

An offset of 0.0 degrees clockwise is applied to the rotation
angle for the orientation of the analyser with respect to north.
A non-null value will be applied once it is determined.

=item *

The origins of the generated polarisation frames are set to [1,1].
The WCS current frame is unchanged.

=item *

The units are set for the frames with suffices (see 
L<"OUTPUT DATA">) P to "%", and TH to "degrees".

=item *

The appropriate frame titles are set for the generated frames.
These are as follows.  I: "Intensity";  P: "Polarisation";
PI: "Polarised Intensity"; Q: "Stokes Q"; TH: "Polarisation Angle";
U: "Stokes U"; V: "Stokes V".

=item *

All the created frames may be displayed.  Only the frame chosen
by argument DISPLAY_IMAGE can appear as the base image with vectors
overlaid.

=back

=head1 TASKS

CURSA: CATSELECT; KAPPA: NDFTRACE, SETORIGIN, SETTITLE, SETUNITS;
POLPACK: POLCAL, POLEXT, POLIMP, POLVEC.

=head1 OUTPUT DATA

=over 4

=item *

The combined source image and neighbourhoods at each waveplate
angle inheriting the group file name, but with the "_mos" suffix
replaced by "_cab".

=item *

Polarisation frames each inheriting the name of its input frame
but each with a different suffix for the various parameters.
These are:

    I   intensity
    P   percentage polarisation
    PI  polarisation intensity
    Q   Stokes Q (if POL_MODE is "linear")
    TH  polarisation angle
    U   Stokes U (if POL_MODE is "linear")
    V   Stokes V (if POL_MODE is "circular")

=item *

A FITS binary-table catalogue of the binned and culled
polarisation data, called E<lt>groupnameE<gt>_E<lt>imageE<gt>.FIT, where
E<lt>groupnameE<gt> is the prefix used for group frames, and E<lt>imageE<gt>
is the value of argument DISPLAY_IMAGE or "I" if the value
is not valid.  For each point it tabulates the x-y
co-ordinates, the total intensity, the Stokes parameters, the
percentage polarisation, the polarisation angle and intensity.
There are additional columns giving the standard deviation on
each of the tabulated values (exlcuding the co-ordinates).
Likewise E<lt>groupnameE<gt>_all.FIT and 
E<lt>groupnameE<gt>_bin.FIT stored the full and binned catalogues
respectively.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 REFERENCES

A.Chryststomou, 1997, "Imaging Polarimetry with IRCAM3", IRPOL/2.2.

D.S.Berry & T.M.Gledhill, 1999, "I<POLPACK Users Manual Version 2.0>",
SUN/223.3.

=head1 COPYRIGHT

Copyright (C) 1998-2001 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
