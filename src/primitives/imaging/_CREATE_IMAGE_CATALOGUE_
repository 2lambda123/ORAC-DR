# -*-perl-*-

=head1 NAME

_CREATE_IMAGE_CATALOGUE__ - source extraction and photometry on all sources

=head1 DESCRIPTION

For the group file, find all the sources and calculate the flux
of each detected source. Write the results to a catalogue file.

=head1 BUGS

 - Catalogue is currently given a fixed name rather than a name
   that changes with the group file (or possibly eSTAR Agent ID)

=head1 NOTES

Currently uses SEXTRACTOR for source extraction and for photometry.

=head1 AUTHOR

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2003 Particle Physics and Astronomy Research Council.
All Rights Reserved.

=cut

# Do only if it's time to create a catalogue.
if( $Frm->uhdr("CREATE_CATALOGUE") ) {

# Get the input NDF.
  my $in = $Grp->file;

# Delay loading so that ORAC-DR does not require these.
  use lib qw[ /home/bradc/development/perl-install/lib/site_perl/5.8.3/ ];
  require Starlink::Extractor;
  require Astro::WaveBand;

# Obtain the detection sigma level.
  my $detect = ( $_CREATE_IMAGE_CATALOGUE_{DETECT_SIGMA} || 3 );

# Obtain the minimum number of pixels in the objects.
  my $minpix = ( $_CREATE_IMAGE_CATALOGUE_{MINPIX} || 12 );

# Obtain the filter.
  my $filter = $Grp->uhdr("ORAC_FILTER");

# Report the processing status.
  orac_print "Detecting objects in $in with at least $minpix connected pixels\n";
  orac_print "   at $detect times sky noise above sky.\n";

# Perform inventory on the field
  my $extractor = new Starlink::Extractor( config => $Cal->find_file("extractor_catalogue.sex" ) );
  $extractor->detect_thresh( $detect );
  $extractor->analysis_thresh( 3.0 );
  my $extracted_catalog = $extractor->extract( frame => $in,
                                       filter => new Astro::WaveBand( Filter => $filter ) );

# Weed out objects that have a size less than $minpix pixels.
  my $filtered_catalog = new Astro::Catalog;
  while ( $extracted_catalog->sizeof > 0 ) {
    my $star = $extracted_catalog->popstar;
    next if ( $star->morphology->area < $minpix );
    $filtered_catalog->pushstar( $star );
  }

  orac_print $filtered_catalog->sizeof() . " objects detected in $in.\n";

# Dump the catalog to disk.
  _GET_CATALOGUE_NAME_
  my $catalogue_name = $_GET_CATALOGUE_NAME_{NAME};
  my $cat_file = File::Spec->catfile($ENV{'ORAC_DATA_OUT'}, $catalogue_name);
  my $status = $filtered_catalog->write_catalog( file => $cat_file,
                                                 format => 'Cluster',
                                               );

  orac_print "Wrote catalogue to $cat_file.\n\n";

}
