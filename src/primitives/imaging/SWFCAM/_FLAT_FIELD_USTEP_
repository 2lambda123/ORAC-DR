# -*-perl-*-

=head1 NAME

_FLAT_FIELD_USTEP_ -- Self-flat fields a group of frames taken at the
same jitter position, but microstepped.

=head1 DESCRIPTION

This primitive creates and applies a self-flat field for the
sub-group of frames that are made up of microsteps taken at the
same jitter position in a given cycle. It is part of a
USTEP_JITTER_SELF_FLAT recipe.

It merely calls the standard _FLAT_FIELD_MASKED_GROUP_ primitive
using the sub-group instead of the current $Grp.

=head1 NOTES

=over 4

=item *

This primitive is suitable for WFCAM.

=item *

Processing only occurs for object and sky frames, and when the
steering header MAKE_FLAT is true.

=back

=head1 ARGUMENTS

=over 4

=item MASK = LOGICAL (Given)

Perform object masking only if it is true. [1]

=back

=head1 OUTPUT DATA

None. However, the invoked primitive (_FLAT_FIELD_MASKED_GROUP_)
and other primitives it calls (_MAKE_FLAT_FROM_GROUP_,
_DIVIDE_BY_FLAT_FROM_GROUP_, _MAKE_OBJECTS_MASK_, and
_MASK_OBJECTS_) do create new frames.  The bottom line is that
a flat field frame is filed and indexed, and there are
flat-fielded frames each inheriting the corresponding input
frame's name but with an _ff suffix.  Various intermediate
frames are normally removed by a tidy primitive.

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu> (JAC)

=head1 COPYRIGHT

Copyright (C) 2004 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

if( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) =~ /OBJECT|SKY/ ) {

# Check to see if it's time to do flat-fielding yet.
  if( $Frm->uhdr( "MAKE_FLAT" ) == 1 ) {

# Determine whether or not to mask objects when creating the
# flat-field image.
    my $mask_obj = $_FLAT_FIELD_USTEP_{MASK};
    $mask_obj = defined( $mask_obj ) ? $mask_obj : 1;

# Create the group from the previous N frames.
    my $n_usteps = $Frm->uhdr( "ORAC_NUMBER_OF_MICROSTEP_POSITIONS" );
    if( ! defined( $n_usteps ) ) {
# Should fall back to doing "regular" flat-fielding at this point.
      $n_usteps = 1;
    }

    my @ff_frames = ($Grp->members)[(-$n_usteps)..-1];
    my $ffGrp = new ORAC::Group;
    $ffGrp->push( @ff_frames );

    {
      my $Grp = $ffGrp;

# Make a flat-field image from the group.
      _FLAT_FIELD_MASKED_GROUP_ MASK=$mask_obj

    }

  }

}
