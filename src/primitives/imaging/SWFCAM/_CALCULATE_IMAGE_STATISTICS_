# -*-perl-*-

=head1 NAME

_CALCULATE_IMAGE_STATISTICS_ - Calculate various image quality
statistics based on an input catalogue.

=head1 DESCRIPTION

This primitive calculates image quality statistics based on an input
catalogue. This catalogue is typically the output from either
C<Starlink::Extractor> or C<Starlink::Autoastrom>, so that object
morphology information is available for calculations.

This primitive calculates the mean axial ratio of bright sources, the
average object diameter converted to K-band equivalent, the sky
brightness, the limiting magnitude, and the instrumental zero point.

=head1 ARGUMENTS

=over 4

=item GROUP = LOGICAL (Given)

If true, use the current Group file for sky brightness
calculations. Otherwise, use the current Frame. [0]

=item IMAGE_CATALOGUE = C<Astro::Catalog> object (Given)

=item MAGNITUDE_TYPE = CHARACTER (Given)

The magnitude type to use when  calculating zeropoint. This can be any
of the MAG_* output parameters from SExtractor. [MAG_ISO]

=back

=head1 NOTES

=over 4

=item *

Files results with the Calibration system. FWHM is obtained with the
fwhm() method, axial ratio is obtained with the axial_ratio() method,
sky brightness is obtained with the sky_brightness() method, limiting
magnitude is obtained with the limiting_mag() method, and the zero
point is obtained with the zeropoint() method.

=back

=head1 OUTPUT DATA

=over 4

None.

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

Astro::Catalog.

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2005 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Find out if we want to do statistics on the current Group or Frame
# object.
my $group = $_CALCULATE_IMAGE_STATISTICS_{GROUP};
my $Obj;
$group = defined( $group ) ? $group : 0;
if( $group ) {
  $Obj = $Grp;
} else {
  $Obj = $Frm;
}

# Get the magnitude type, defaulting to MAG_ISO.
my $magnitude_type = $_CALCULATE_IMAGE_STATISTICS_{MAGNITUDE_TYPE} || 'MAG_ISO';

# Get the catalogue containing all of the objects detected in the image.
my $image_catalogue = $_CALCULATE_IMAGE_STATISTICS_{IMAGE_CATALOGUE};

# And get the catalogue containing only those objects that matched
# between the standard star catalogue and the catalogue of all objects
# detected in the image.
my $matched_catalogue = $_CALCULATE_IMAGE_STATISTICS_{MATCHED_CATALOGUE};

# Only run if we actually have an image catalogue and a matched catalogue.
if( defined( $image_catalogue ) && defined( $matched_catalogue ) ) {

  # Strip out any Astro::Catalog::Item objects that don't have a
  # quality of 0 (which means good), or a radius of 2.5 arcseconds or
  # an ellipticity greater than 0.25. This will eliminate any
  # galaxies, saturated stars, blended objects, etc. from the image
  # quality calculations.
  my @gooditems;
  my @catmatchitems;

  _GET_EXPANSION_RATIO_
  my $maxarea = 3.14159 * 6.25 * 6.25 * ( $_GET_EXPANSION_RATIO_{X_EXPANSION} ) ** 2;

  foreach my $item ( $matched_catalogue->stars ) {

    next if $item->quality;
    next if ( defined( $item->morphology->area ) &&
              $item->morphology->area->value > $maxarea );
    push @gooditems, $item;

    my $fluxes = $item->fluxes;
    my @allfluxes = $fluxes->allfluxes;
    my $cat_match = 0;
    my $waveband = new Astro::WaveBand( Filter => $Frm->uhdr( "ORAC_FILTER" ) );
    my %standard_filters;

    foreach my $flux ( @allfluxes ) {
      if( uc( $flux->type ) eq 'MAG_CATALOG' ) {
        $standard_filters{uc($flux->waveband)}++;
      }
    }
    if( $standard_filters{'J'} &&
        $standard_filters{'K'} &&
        $standard_filters{'H'} ) {
      push @catmatchitems, $item;
    }
  }

  my $newcat = new Astro::Catalog;
  $newcat->pushstar( @gooditems );
  $matched_catalogue = $newcat;

  # Create a temporary file to hold the input catalogue to PSF.
  my $psf_input_temp = new ORAC::TempFile( SUFFIX => '.txt' );

  # Write the catalogue to disk.
  $matched_catalogue->write_catalog( File => $psf_input_temp->file,
                                     Format => 'STL' );

  # Set up the parameters for PSF.
  my $params = "incat=" . $psf_input_temp->file . " "
             . "device=! gauss=false logfile=! ";

  if( $group ) {
    $params .= "in=" . $Grp->file;
  } else {
    $params .= "in=" . $Frm->file;
  }

  # Run PSF.
  $Mon{'kappa_mon'}->obeyw( "psf", "$params" );

  # Obtain statistics.
  ( my $ORAC_STATUS, my $axialratio ) = $Mon{'kappa_mon'}->get( "psf", "axisr" );
  ( $ORAC_STATUS, my $fwhm ) = $Mon{'kappa_mon'}->get( "psf", "fwhm" );
  ( $ORAC_STATUS, my $gamma ) = $Mon{'kappa_mon'}->get( "psf", "gamma" );
  ( $ORAC_STATUS, my $orient ) = $Mon{'kappa_mon'}->get( "psf", "orient" );

  my $ellipticity = 1 - ( 1 / $axialratio );

  # Obtain the airmass from the FITS headers. Find the
  # approximate mean airmass from the start and end values. This
  # should be adequate unless it is a long integration with the
  # source crossing the meridian.
  my $amstart = $Obj->uhdr( "ORAC_AIRMASS_START" );
  my $amend   = $Obj->uhdr( "ORAC_AIRMASS_END" );
  my $airmass = 0.5 * ( $amstart + $amend );

  # Calculate the K-band equivalent seeing. It goes as
  # (wavelength^(-0.2)), so we need to get the current wavelength and
  # the K wavelength, do the division and the power, and scale the
  # measured FWHM.
  _GET_FILTER_PARAMETERS_
  my $wavelength = $_GET_FILTER_PARAMETERS_{WAVELENGTH};
  my $k_wavelength = 2.25;
  my $scale = ( $wavelength / $k_wavelength ) ** ( 0.2 );
  my $k_fwhm = $scale * $fwhm;
  my $k_fwhm_zen = $k_fwhm * ( 1 / $airmass ) ** ( 0.6 );

  # Obtain the mean extinction coefficient.
  my $waveband = $_GET_FILTER_PARAMETERS_{WAVEBAND};
  my $extinction = $_GET_FILTER_PARAMETERS_{EXTINCTION};
  my $filter = $Frm->uhdr( "ORAC_FILTER" );

  # Derive the extinction correction using the IR standard of
  # one airmass.
  my $extcor = ( $airmass - 1.0 ) * $extinction;

  # Obtain the exposure time.
  my $exptime = $Frm->uhdr( "ORAC_EXPOSURE_TIME" );

  my @image_mags;
  my @standard_mags;
  my @diffs;
  my @ellipticities;
  my %ell_hist;
  my %diff_hist;
  my %stdmag_hist;
  my %imgmag_hist;
  my $zp_stepsize = 0.01;
  my $lm_stepsize = 0.1;

  my $phot = 1;
  if( $filter !~ /[ZYJHK]/ ) {
    $phot = 0;
  }

  # Now, go through the list of objects that had catalogue magnitudes
  # and calculate the zeropoint.
  foreach my $catmatchitem ( @catmatchitems ) {

    if( $phot ) {
      my $jmag = $catmatchitem->get_flux_quantity( waveband => 'J',
                                                   type => 'MAG_CATALOG' );
      my $hmag = $catmatchitem->get_flux_quantity( waveband => 'H',
                                                   type => 'MAG_CATALOG' );
      my $kmag = $catmatchitem->get_flux_quantity( waveband => 'K',
                                                   type => 'MAG_CATALOG' );

      # Calculate the Z, Y, J, H, and K magnitudes in the MK system.
      my $mk_zmag = $jmag + 0.95  * ( $jmag - $hmag );
      my $mk_ymag = $jmag + 0.5   * ( $jmag - $hmag );
      my $mk_jmag = $jmag - 0.075 * ( $jmag - $hmag );
      my $mk_hmag = $hmag + 0.075 * ( $jmag - $hmag );
      my $mk_kmag = $kmag - 0.015 * ( $jmag - $kmag );

      # Get the magnitude in the current waveband.
      my $im_mag = $catmatchitem->get_flux_quantity( waveband => $filter,
                                                     type => $magnitude_type );

      # Skip if the magnitude is fainter than 10 (which denotes
      # something bad).
      next if $im_mag > 10;

      my $st_mag;
      if( $filter eq 'Z' ) {
        $st_mag = $mk_zmag;
      } elsif( $filter eq 'Y' ) {
        $st_mag = $mk_ymag;
      } elsif( $filter eq 'J' ) {
        $st_mag = $mk_jmag;
      } elsif( $filter eq 'H' ) {
        $st_mag = $mk_hmag;
      } elsif( $filter eq 'K' ) {
        $st_mag = $mk_kmag;
      }

      # Correct the measured magnitude for exposure time.
      $im_mag += 2.5 * log10( $exptime );

      # Correct the measured magnitude for extinction.
      $im_mag -= $extcor;

      # Push the magnitudes onto the arrays, correcting the
      # magnitude from the EXTRACTOR-based catalogue.
      push( @image_mags, $im_mag );
      push( @standard_mags, $st_mag );
      push( @diffs, $st_mag - $im_mag );
      $diff_hist{ int( ( $st_mag - $im_mag ) / $zp_stepsize ) * $zp_stepsize }++;
    }

    $ell_hist{ int( $catmatchitem->morphology->ellipticity->value / $zp_stepsize ) * $zp_stepsize }++;
    push( @ellipticities, $catmatchitem->morphology->ellipticity->value );

  }

  my $zeropoint = 0;
  my $zeropoint_variance = 0;
  if( $phot ) {
    # Calculate the mean difference and the variance in the
    # difference between the standard magnitudes and the measured
    # magnitudes.
    my $sum = 0;
    foreach my $diff ( @diffs ) {
      $sum += $diff;
    }
    $zeropoint = $sum / ( $#diffs + 1 );
    my $sumsqu = 0;
    foreach my $diff( @diffs ) {
      $sumsqu += ( $diff - $zeropoint ) * ( $diff - $zeropoint );
    }
    $zeropoint_variance = sqrt( $sumsqu / ( $#diffs + 1 ) );

    # Calculate magnitudes for all detected objects.
    foreach my $item ( $image_catalogue->stars ) {

      my $im_mag = $item->get_flux_quantity( waveband => $filter,
                                             type => $magnitude_type );
      next if $im_mag > 50;

      # Correct for exposure time, extinction, and zeropoint.
      $im_mag += 2.5 * log10( $exptime );
      $im_mag -= $extcor;
      $im_mag += $zeropoint;

      $imgmag_hist{ int( $im_mag / $lm_stepsize ) * $lm_stepsize }++;
    }
  }

  my $ext_ell_sum = 0;
  foreach my $ext_ell ( @ellipticities ) {
    $ext_ell_sum += $ext_ell;
  }
  my $ext_ell_mean = $ext_ell_sum / ( $#ellipticities + 1 );

  my $maxell = 0;
  my $maxellbin = 0;
  foreach my $ell_bin ( sort keys %ell_hist ) {
    if( $ell_hist{$ell_bin} > $maxell ) {
      $maxell = $ell_hist{$ell_bin};
      $maxellbin = $ell_bin;
    }
  }

  my $maxdiff = 0;
  my $maxdiffbin = 0;
  my $maximgmag = 0;
  my $maximgmagbin = 0;
  if( $phot ) {
    foreach my $diff_bin ( sort keys %diff_hist ) {
      if( $diff_hist{$diff_bin} > $maxdiff ) {
        $maxdiff = $diff_hist{$diff_bin};
        $maxdiffbin = $diff_bin;
      }
    }

    foreach my $imgmag_bin ( sort keys %imgmag_hist ) {
      if( $imgmag_hist{$imgmag_bin} > $maximgmag ) {
        $maximgmag = $imgmag_hist{$imgmag_bin};
        $maximgmagbin = $imgmag_bin;
      }
    }
  }

  # We have ellipticity bin that has the most counts in it, so take
  # two on either side and calculate the average of those.
  my $ell_hist_avg = 0;
  if( $maxellbin eq '0' ) {
    # Take 0, 0.01 and 0.02.
    my $sum_counts = $ell_hist{0} + $ell_hist{'0.01'} + $ell_hist{'0.02'};
    my $sum_ell = $ell_hist{'0.01'} * 0.01 + $ell_hist{'0.02'} * 0.02;
    $ell_hist_avg = $sum_ell / $sum_counts;
  } elsif( $maxellbin eq '0.01' ) {
    # Take 0, 0.01, 0.02, and 0.03.
    my $sum_counts = $ell_hist{0} + $ell_hist{'0.01'} + $ell_hist{'0.02'} + $ell_hist{'0.03'};
    my $sum_ell = $ell_hist{'0.01'} * 0.01 + $ell_hist{'0.02'} * 0.02 + $ell_hist{'0.03'} * 0.03;
    $ell_hist_avg = $sum_ell / $sum_counts;
  } else {

    my $first = $maxellbin - 0.02;
    my $second = $maxellbin - 0.01;
    my $third = $maxellbin + 0.01;
    my $fourth = $maxellbin + 0.02;
    if( ! defined( $ell_hist{"$first"} ) ) {
      $ell_hist{"$first"} = 0;
    }
    if( ! defined( $ell_hist{"$second"} ) ) {
      $ell_hist{"$second"} = 0;
    }
    if( ! defined( $ell_hist{"$third"} ) ) {
      $ell_hist{"$third"} = 0;
    }
    if( ! defined( $ell_hist{"$fourth"} ) ) {
      $ell_hist{"$fourth"} = 0;
    }
    my $sum_counts = $ell_hist{"$first"} + $ell_hist{"$second"} + $ell_hist{"$maxellbin"} + $ell_hist{"$third"} + $ell_hist{"$fourth"};
    my $sum_ell = $ell_hist{"$first"}  * $first
                + $ell_hist{"$second"} * $second
                + $ell_hist{"$maxellbin"} * $maxellbin
                + $ell_hist{"$third"}  * $third
                + $ell_hist{"$fourth"} * $fourth
                ;
    $ell_hist_avg = $sum_ell / $sum_counts;
  }

  my $diff_hist_avg = 0;
  my $imgmag_hist_avg = 0;
  if( $phot ) {
    my $first = $maxdiffbin - 0.02;
    my $second = $maxdiffbin - 0.01;
    my $third = $maxdiffbin + 0.01;
    my $fourth = $maxdiffbin + 0.02;
    if( ! defined( $diff_hist{"$first"} ) ) {
      $diff_hist{"$first"} = 0;
    }
    if( ! defined( $diff_hist{"$second"} ) ) {
      $diff_hist{"$second"} = 0;
    }
    if( ! defined( $diff_hist{"$third"} ) ) {
      $diff_hist{"$third"} = 0;
    }
    if( ! defined( $diff_hist{"$fourth"} ) ) {
      $diff_hist{"$fourth"} = 0;
    }
    my $sum_diffs = $diff_hist{"$first"} + $diff_hist{"$second"} + $diff_hist{"$maxdiffbin"} + $diff_hist{"$third"} + $diff_hist{"$fourth"};
    my $sum_diff = $diff_hist{"$first"}  * $first
                + $diff_hist{"$second"} * $second
                + $diff_hist{"$maxdiffbin"} * $maxdiffbin
                + $diff_hist{"$third"}  * $third
                + $diff_hist{"$fourth"} * $fourth
                ;
    $diff_hist_avg = $sum_diff / $sum_diffs;

    $first = $maximgmagbin - 0.02;
    $second = $maximgmagbin - 0.01;
    $third = $maximgmagbin + 0.01;
    $fourth = $maximgmagbin + 0.02;
    if( ! defined( $imgmag_hist{"$first"} ) ) {
      $imgmag_hist{"$first"} = 0;
    }
    if( ! defined( $imgmag_hist{"$second"} ) ) {
      $imgmag_hist{"$second"} = 0;
    }
    if( ! defined( $imgmag_hist{"$third"} ) ) {
      $imgmag_hist{"$third"} = 0;
    }
    if( ! defined( $imgmag_hist{"$fourth"} ) ) {
      $imgmag_hist{"$fourth"} = 0;
    }
    my $sum_imgmags = $imgmag_hist{"$first"} + $imgmag_hist{"$second"} + $imgmag_hist{"$maximgmagbin"} + $imgmag_hist{"$third"} + $imgmag_hist{"$fourth"};
    my $sum_imgmag = $imgmag_hist{"$first"}  * $first
                + $imgmag_hist{"$second"} * $second
                + $imgmag_hist{"$maximgmagbin"} * $maximgmagbin
                + $imgmag_hist{"$third"}  * $third
                + $imgmag_hist{"$fourth"} * $fourth
                ;
    $imgmag_hist_avg = $sum_imgmag / $sum_imgmags;

  }

  # Now that we have the zeropoint, we can calculate the sky
  # brightness statistics.

  # Run clipped mean stats on the Object.
  $params = "ndf=" . $Obj->file . " clip=[2,3,3]";
  $Mon{'kappa_mon'}->obeyw( "stats", "$params" );
  ( $ORAC_STATUS, my $sky_mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
  ( $ORAC_STATUS, my $sky_stddev ) = $Mon{'kappa_mon'}->get( "stats",  "sigma" );

  # Now to calculate the sky level in magnitudes/arcsec^2.
  my $mag_per_square_arcsecond = 0;
  if( $phot ) {
    _GET_PLATE_SCALE_
    my $plate_scale = $_GET_PLATE_SCALE_{PLATESCALE};
    my $counts_per_square_arcsecond = $sky_mean
                                      / ( $plate_scale * $plate_scale );
    $mag_per_square_arcsecond = $zeropoint
                                 - 2.5
                                 * log10( $counts_per_square_arcsecond /
                                          $exptime );
  }

  # Create printable versions.
  my $p_axial = sprintf( "%.3f", $axialratio );
  my $p_ell = sprintf( "%.3f", $ell_hist_avg );
  my $p_fwhm = sprintf( "%.3f", $fwhm );
  my $p_k_fwhm = sprintf( "%.3f", $k_fwhm );
  my $p_orient = sprintf( "%.3f", $orient );
  my $p_gamma = sprintf( "%.3f", $gamma );
  my $p_num_obj = sprintf( "%d", $#diffs + 1 );
  my $p_zp = sprintf( "%.3f", $zeropoint );
  my $p_zp_hist = sprintf( "%.3f", $diff_hist_avg );
  my $p_zpvar = sprintf( "%.3f", $zeropoint_variance );
  my $p_limmag_img = sprintf( "%.3f", $imgmag_hist_avg );
  my $p_ext = sprintf( "%.3f", $extcor );
  my $p_sky_mean = sprintf( "%.2f", $sky_mean );
  my $p_sky_stddev = sprintf( "%.2f", $sky_stddev );
  my $p_mag = sprintf( "%.2f", $mag_per_square_arcsecond );

  my $p_filter = $Frm->uhdr( "ORAC_FILTER" );
  my $p_exptime = sprintf( "%.1f", $Frm->uhdr( "ORAC_EXPOSURE_TIME" ) );
  my $p_object = $Frm->uhdr( "ORAC_OBJECT" );

  # Output statistics to the user.
  orac_print( "Image information for " .
              ( $group ? $Grp->file : $Frm->file ) .
              ":\n", "blue" );
  orac_print( " Filter:        $p_filter\n", "blue" );
#  orac_print( " Exposure time: $p_exptime seconds\n", "blue" );
  orac_print( " Object name:   $p_object\n", "blue" );
  orac_print( "\n" );
  orac_print( "Image quality statistics on " .
              ( $group ? $Grp->file : $Frm->file ) .
              ":\n", "blue" );
  orac_print( " Axial ratio:  $p_axial\n", "blue" );
  orac_print( " Ellipticity:  $p_ell\n", "blue" );
  orac_print( " FWHM:         $p_fwhm arcseconds\n", "blue" );
  orac_print( " K-band equiv: $p_k_fwhm arcseconds\n", "blue" );
  orac_print( " Orientation:  $p_orient degrees east of north\n", "blue" );
  orac_print( " Gamma:        $p_gamma (2 = gaussian)\n", "blue" );
  orac_print( "\n" );
  orac_print( "Photometric statistics on " .
              ( $group ? $Grp->file : $Frm->file ) .
              ":\n", "blue" );
  orac_print( " Instrumental zero-point: $p_zp_hist\n", "blue" );
  orac_print( " Limiting magnitude:      $p_limmag_img\n", "blue" );
  orac_print( " Background sky level:    $p_sky_mean +/- $p_sky_stddev counts.\n",
              "blue" );
  orac_print( " Sky brightness:          $p_mag magnitudes/arcsec^2.\n",
              "blue" );
  orac_print( "  Extinction coefficient of $p_ext was used.\n", "blue" );

  # File the whole shebang with the calibration system.
  my %calhash = ( %{$Obj->hdr},
                  AIRMASS => $airmass,
                  AXIALRATIO => $axialratio,
                  ELLIPTICITY => $ell_hist_avg,
                  FWHM => $fwhm,
                  FWHM_K => $k_fwhm,
                  FWHM_K_ZEN => $k_fwhm_zen,
                  GAMMA => $gamma,
                  MAG_LIMIT => $imgmag_hist_avg,
                  ORIENT => $orient,
                  SKY_VALUE => $sky_mean,
                  SKY_VALUE_ERROR => $sky_stddev,
                  SKY_VALUE_MAG => $mag_per_square_arcsecond,
                  ZEROPOINT => $diff_hist_avg,
                  ZEROPOINT_ERROR => $zeropoint_variance,
                );
  $Cal->dqcindex->add( $Obj->file, \%calhash );
}
