# -*-perl-*-

#+
# Name:
#    _FLAT_FIELD_MASKED_GROUP_
#
# Purpose:
#    Self-flat fields a group of frames.
#
# Language:
#    Perl5
#
# Description:
#    This primitive creates and applies self-flat field(s) for the current
#    group of frames.  For each observation filter present within the
#    group it makes a flat from the group and then divides the group
#    members by that flat field.  There is also optional object masking
#    to make an improved flat; objects in the flattened frames are detected
#    above brightness and size thresholds, and the frames combined to make
#    a new flat field.  The improved flat is then applied to the original
#    input group.  Four other primitives do most of the work.
#
# Notes:
#    -  This primitive is suitable for imaging infrared cameras.
#    -  Processing only occurs for object, sky, or lamp frames, and when
#    the steering header MAKE_FLAT is true, and only for frames in the
#    current recipe cycle, as given by steering header CYCLE_NUMBER.
#    Also the flat must not be specified already; if it is, the 
#    primitive merely divides the group members by that flat.
#    -  The list of filters present in the group is listed in an array
#    stored by reference in the group user header FILTER_LIST.  If this
#    is undefined, only a single flat is made for filter stored in the
#    current Frame's user header ORAC_FILTER.
#    -  The steering header JITTER_NUMBER defines the number of
#    frames in a cycle.
#    -  Frame normalisation is with respect to a reference level of the
#    first frame, stored in the first frame's internal header 
#    REFERENCE_LEVEL.  If this is not defined, as would be the case on
#    the first cycle, the mode of the reference is calculated.  The
#    reference mode is then stored in variable $_NORMALISE_TO_MODE_refmode
#    for the normalising routine to access for subsequent frames.
#
# Arguments:
#    CLEAN = LOGICAL (Given)
#       If true (1), the frames are cleaned using a box filter to remove
#       any small blemishes.  Pixels deviating by more than 3 standard
#       deviations from its 15x15 pixel neighbourhood are rejected.  This
#       is done iteratively, three times.  If false (0), no cleaning is
#       performed.  [1]
#    MASK = LOGICAL (Given)
#       Perform object masking only if it is true.
#
# Output Data:
#    -  The invoked primitives _MAKE_FLAT_FROM_GROUP_,
#    _DIVIDE_BY_FLAT_FROM_GROUP_, _MAKE_OBJECTS_MASK_, and
#    _MASK_OBJECTS_ do create new frames.  The bottom line is that
#    a flat field frame is filed and indexed, and there are
#    flat-fielded frames each inheriting the corresponding input
#    frame's name but with an _ff suffix.  Various intermediate
#    frames are normally removed by a tidy primitive.
#    -  A map of the original bad pixels in the flat, and a flat with
#    original bad pixels and objects masked, having the name of the flat
#    with _bpm and _fm suffices respectively.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC, Starlink)
#
# Copyright:
#    Copyright (C) 1998-2004 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Selection
# =========
#
# This should only be performed on OBJECT frames.
    if ( ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
           $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ||
           $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "LAMP" ) &&
           $Frm->uhdr( "MAKE_FLAT" ) ) {

# Determine whether or not to mask objects.
# =========================================

# Use the MASK argument.
       my $mask_obj = $_FLAT_FIELD_MASKED_GROUP_{MASK};
       $mask_obj = defined( $mask_obj ) ? $mask_obj : 1;

# Determine whether or not to clean the data before combination.
       my $clean = $_FLAT_FIELD_MASKED_GROUP_{CLEAN};
       $clean = defined( $clean ) ? $clean : 1;

# Group manipulations.
# ====================

# Create a group based upon the current frame name.
       $Grp->template( $Frm->file );

# Specify the cycle number.
       my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );

# Obtain the list of filters present within the group.  It defaults
# the current frame's filter in case the list of filters is not
# yet supported in private code, to give compatibility with former
# standard behaviour.
       my @filters = ( $Frm->uhdr( "ORAC_FILTER" ) );
       if ( defined $Grp->uhdr( "FILTER_LIST" ) ) {
          my $filterref = $Grp->uhdr( "FILTER_LIST" );
          @filters = @$filterref;
       }

# Determine whether or not there is a predefined flat frame specified.
       my $create_flat = !( $Cal->flatnoupdate() );

# Make a flat for each filter within the group.
       foreach my $filter ( @filters ) {

          if ( $create_flat ) {
             orac_print "Making flat for filter $filter\n" unless $#filters == 0;

# Extract from the main group those frames belonging to this group, and
# only the first from each microstep pattern.
             my $cycleGrp = $Grp->subgrp( CYCLE_NUMBER => $cycleno,
                                          ORAC_FILTER => $filter,
                                          USE_FOR_FLAT => 1 );

# Make this the main group for this context.
             {
                my $Grp = $cycleGrp;

# Record the group members at this point.
                my @sky_names = $Grp->membernames;

# Set a new current file with the same filter.
                my $Frm = $Grp->frame( 0 );

# Need to tell invoked primitives that it's time to make the flat,
# although the now current frame is no longer the original.  Record
# the original value to reset at the end.  Repeat for the object
# masking flag.
                my $mf_flag = $Frm->uhdr( "MAKE_FLAT" );
                $Frm->uhdr( "MAKE_FLAT", 1 );
                my $mo_flag = $Frm->uhdr( "MASK_OBJECTS" );
                $Frm->uhdr( "MASK_OBJECTS", 1 );

# Need to match calibrations against the filter/cycle group's
# representative frame.
                $Cal->thingone( $Frm->hdr );
                $Cal->thingtwo( $Frm->uhdr );

# Obtain the reference level.
# ===========================

# The aim is to make a flat field, first (and perhaps only) by combining
# the jittered frames.  This is straightforward.  In contrast, if object
# masking is applied, biases can be introduced as the objects move to
# different locations on the detector each with a different response
# in the flat field.  Merely taking a median at each pixel will
# preferentially select values from certain frames.  Thus there has to 
# be an allowance for these systematic differences before the data are
# combined to give representative relative intensities.  We nominate
# one frame, the first in the group, to be the reference frame against
# which we scale the modal values of the other frames.

# As the routine which evaluates the mode (_NORMALISE_TO_MODE_)
# operates on a sub-group of a cycle of the jitter/recipe, after the
# first cycle it cannot access a reference mode from the reference frame.
# Therefore, the reference mode must be obtained before the sub-group is
# created.  If we are processing the reference frame, there will not be
# a reference mode in its user header yet.  _NORMALISE_TO_MODE_ detects
# this; it then determines the reference mode and writes it to the user
# header of the reference frame.  The group header only exists at this
# point once a first cycle mosaic has been generated, hence the $Grp->uhdr
# method cannot be used to propagate the reference level.

# Determine whether or not this is the first frame, and hence whether or
# not a reference mode is needed.  Notice the scope of the variable
# _NORMALISE_TO_MODE_refmode includes the _NORMALISE_TO_MODE_ primitive,
# and so we don't have to pass parameters down two levels.  The name
# is therefore chosen to avoid potential clashes.
                my $_NORMALISE_TO_MODE_refmode;
                if ( $mask_obj ) {   
                   if ( $Grp->num > 0 ) {

# Recall the reference level from the reference frame within the group.
                      my $refFrm = $Grp->frame( 0 );
                      $_NORMALISE_TO_MODE_refmode = $refFrm->uhdr( "REFERENCE_LEVEL" );

# Find the clipped mean (effectively the mode) for the reference
# frame if it's not already determined.  Make the reference frame the
# current frame temporarily.  Store the value for later frames.
                      if ( ! ( defined $_NORMALISE_TO_MODE_refmode ) ) {
                         my $Frm = $refFrm;
                         _CLIPPED_STATS_
                         $_NORMALISE_TO_MODE_refmode = $_CLIPPED_STATS_{MEAN};
                      }
                   }
                }

# Make and apply the unmasked flat field.
# =======================================

# Make a first pass at a flat using the jittered frames of the group.
                _MAKE_FLAT_FROM_GROUP_ CLEAN=$clean FILTER=$filter

# Reset the group names to be the ones to flat field.
                $Grp->membernames( @sky_names );

# Apply the flat field.
                _DIVIDE_BY_FLAT_FROM_GROUP_

# Make and apply the object mask.
# ===============================

# Test whether or not it is time to mask objects.  Use global
# argument first, then frame by frame.
                if ( $mask_obj ) {

# Obtain the bad pixels in the flat.
                   my $inflat = $Cal->flat;
                   my $flatmask = $inflat . "_bpm";
                   my $param = "in=$inflat out=$flatmask scalar=0 title=!";
                   $Mon{ "kappa_mon" }->obeyw( "cmult", "$param" );

# Report the processing status.
                   orac_print "Made a mask of bad pixels in the original flat.\n";

                   my $maskobjects = $Frm->uhdr( "MASK_OBJECTS" );
                   my ( @maskfiles, @masked_names, $maskfile, $file );
                   if ( $maskobjects ) {

# Create an array to store the names of the mask files. 
                      @maskfiles = ();

# Compute a mask of the objects for each member of the flat-field
# group, using a local $Frm.
                      foreach $Frm ( $Grp->members ) {
                         _MAKE_OBJECTS_MASK_

# Record the mask filename into an array.
                         push ( @maskfiles, $_MAKE_OBJECTS_MASK_{MASKFILE} );
                      }

# Create an array to store the names of the masked datasets. 
                      @masked_names = ();

# Mask the objects in each frame.  Make a copy of the @sky_names
# so we can shift its elements.  Again use a local $Frm.
                      my @local_sky_names = @sky_names;
                      foreach $Frm ( $Grp->members ) {
                         $file = shift( @local_sky_names );
                         $maskfile = shift( @maskfiles );
                         $Frm->file( $file );

# Normalise the frames to each other.
                         _NORMALISE_TO_MODE_

# Mask the objects.  Use a 110% enlargement factor.
                         _MASK_OBJECTS_ MASKFILE=$maskfile ENLARGE=1.1

# Add the mask which comprises bad pixels and zero elsewhere.
# Apply bad-pixel mask of the first flat field.
                         ( my $in, my $out ) = $Frm->inout( "_fm" );
                         my $param = "in1=$in out=$out in2=$flatmask title=!";
                         $Mon{ "kappa_mon" }->obeyw( "add", "$param" );

# Report the processing status.
                         orac_print "Applied the bad pixels in the original flat to make $out.\n\n";

# Record the new file name in the frame object.
                         $Frm->file( $out );

# Record the masked (or unmasked file if the masking has failed)
# filename into an array.
                         push ( @masked_names, $Frm->file );
                      }

# Remove the flat-field bad-pixel mask.
                      _DELETE_A_FRAME_ FRAME=$flatmask

# Set the group names to be the masked ones to form improved flat field.
                      $Grp->membernames( @masked_names );

# Make and apply the improved flat field.
# =======================================

# Generate the new flat field using the jittered masked frames.
                      _MAKE_FLAT_FROM_NORMALISED_GROUP_ 

# Reset the group names to be the ones to flat field.
                      $Grp->membernames( @sky_names );

# Apply the better flat field.
                      _DIVIDE_BY_FLAT_FROM_GROUP_
                   }
                }

# Restore the original MAKE_FLAT flag.
                $Frm->uhdr( "MAKE_FLAT", $mf_flag );
                $Frm->uhdr( "MASK_OBJECTS", $mo_flag );

# End the context to restore the original group.
             }

          } else {

# When the flat has been supplied, such as on the command line, 
# we only need to apply it and not make another flat
             _DIVIDE_BY_FLAT_FROM_GROUP_
          }

# End of filter loop.
       }

# Restore the input current frame.
       $Grp->template( $Frm->file );

# Restore the calibration.
       $Cal->thingone( $Frm->hdr );
       $Cal->thingtwo( $Frm->uhdr );

    }

# Podule
# ======

=head1 NAME

_FLAT_FIELD_MASKED_GROUP_ -- Self-flat fields a group of frames.

=head1 DESCRIPTION

This primitive creates and applies self-flat field(s) for the current
group of frames.  For each observation filter present within the
group it makes a flat from the group and then divides the group
members by that flat field.  There is also optional object masking
to make an improved flat; objects in the flattened frames are detected
above brightness and size thresholds, and the frames combined to make
a new flat field.  The improved flat is then applied to the original
input group.  Four other primitives do most of the work.

=head1 NOTES

=over 4

=item *

This primitive is suitable for imaging infrared cameras.

=item *

Processing only occurs for object, sky, or lamp frames, and when the
steering header MAKE_FLAT is true, and only for frames in the current
recipe cycle, as given by steering header CYCLE_NUMBER.
Also the flat must not be specified already; if it is, the 
primitive merely divides the group members by that flat.

=item *

The list of filters present in the group is listed in an array
stored by reference in the group user header FILTER_LIST.  If this
is undefined, only a single flat is made for filter stored in the
current Frame's user header ORAC_FILTER.

=item *

The steering header JITTER_NUMBER defines the number of
frames in a cycle.

=item *

Frame normalisation is with respect to a reference level of the first
frame, stored in the first frame's internal header REFERENCE_LEVEL.
If this is not defined, as would be the case on the first cycle, the
mode of the reference is calculated.  The reference mode is then
stored in variable $_NORMALISE_TO_MODE_refmode for the normalising
routine to access for subsequent frames.

=back

=head1 ARGUMENTS

=over 4

=item MASK = LOGICAL (Given)

Perform object masking only if it is true.

=item CLEAN = LOGICAL (Given)

If true (1), the frames are cleaned using a box filter to remove any
small blemishes.  Pixels deviating by more than 3 standard deviations
from its 15x15 pixel neighbourhood are rejected.  This is done
iteratively, three times.  If false (0), no cleaning is performed. [1]

=back

=head1 OUTPUT DATA

=over 4

=item *

The invoked primitives
L<_MAKE_FLAT_FROM_GROUP_|_MAKE_FLAT_FROM_GROUP_>,
L<_DIVIDE_BY_FLAT_FROM_GROUP_|_DIVIDE_BY_FLAT_FROM_GROUP_>,
L<_MAKE_OBJECTS_MASK_|_MAKE_OBJECTS_MASK_>, and
L<_MASK_OBJECTS_|_MASK_OBJECTS_> do create new frames.  The bottom
line is that a flat field frame is filed and indexed, and there are
flat-fielded frames each inheriting the corresponding input frame's
name but with an _ff suffix.  Various intermediate frames are normally
removed by a tidy primitive.

=item *

A map of the original bad pixels in the flat, and a flat with
original bad pixels and objects masked, having the name of the flat
with _bpm and _fm suffices respectively.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC, Starlink) <mjc@star.rl.ac.uk>

=head1 COPYRIGHT

Copyright (C) 1998-2004 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
