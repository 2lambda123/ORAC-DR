# -*-perl-*-

# For OS-independent filename creation.
use File::Spec;

# Fudge missing or erroneous headers.
_FIX_HEADERS_

# Obtain the frame number and UT date.
my $obsnum = $Frm->uhdr( "ORAC_OBSERVATION_NUMBER" );
my $obsdate = $Frm->uhdr( "ORAC_UTDATE" );
chomp( $obsdate );

# Were we given the LONG option?
my $long = $_NIGHT_LOG_{LONG};
my $longsuff = "";
$longsuff = "-long" if ($long);

# Obtain the name portion of the file.  Multi-mode instruments have an
# _im appended to denote that it's an imaging log.
my $fileroot = $obsdate;
if ( uc( $Frm->uhdr( "ORAC_INSTRUMENT" ) ) eq "UIST" ||
     uc( $Frm->uhdr( "ORAC_INSTRUMENT" ) ) eq "MICHELLE" ||
     uc( $Frm->uhdr( "ORAC_INSTRUMENT" ) ) eq "ISAAC" ||
     uc( $Frm->uhdr( "ORAC_INSTRUMENT" ) ) eq "IRIS2" ) {
  $fileroot .= "_im";
}

# Specify the location of the nightly log file. [depends on the arguments]
my $nightlog;
if ( defined $_NIGHT_LOG_{OUT} ) {

# ORAC_DATA_OUT is the current directory and the default location for
# log files.
  $nightlog = "${fileroot}.nightlog";

# If we're working in ORAC_DATA_OUT, always append to the file, creating
# the logfile if it doesn't exist.
} else {

# A non-standard location so full path is required.
  $nightlog = File::Spec->catfile( $ENV{ "ORAC_DATA_IN" }, "${fileroot}.nightlog" );

# If we're working in ORAC_DATA_IN, start fresh if this is frame 1
# We don't care about the return value from unlink.
  unlink $nightlog if $obsnum == 1;
}

if($long) {
  $nightlog .= $longsuff;
}

# Flag to indicate whether or not the log is there already.
my $is_there;
$is_there = ( -e $nightlog ? 1 : 0 );

# Create a new log object.
my $log = new ORAC::LogFile( $nightlog );

# Only proceed if we have a valid object
if ( defined $log ) {

  if ( $is_there ) {
    orac_print "Appending to Log: $nightlog\n";
  } else {
    orac_print "Log created as $nightlog\n";
  }

# Create the empty strings.
  my $heading1 = "";
  my $heading2 = "";
  my $entry = "";

# Observation number.
  $heading1 .= " Obs |";
  $heading2 .= "-----|";
  #             12345
  $entry .= sprintf("%5d ", $obsnum);

# Group number.
  $heading1 .= " Grp |";
  $heading2 .= "-----|";
  #             12345
  $entry .= sprintf("%5d ", $Frm->findgroup);

# Object name.
  $heading1 .= "     Object |";
  $heading2 .= "------------|";
  #             123456789012
  $entry .= sprintf("%12.12s ", $Frm->uhdr("ORAC_OBJECT"));

# Observation type.
  $heading1 .= " Obstype |";
  $heading2 .= "---------|";
  #             123456789
  $entry .= sprintf("%9.9s ", $Frm->uhdr("ORAC_OBSERVATION_TYPE"));

# Jitters
  $heading1 .= "Jitter|";
  $heading2 .= "------|";
  #             123456
  #               4/ 9
  $entry .= sprintf(" %2d/%2d ", $Frm->hdr("JITTER_I"), $Frm->hdr("NJITTER"));

# Microsteps
  $heading1 .= "Ustep|";
  $heading2 .= "-----|";
  #             12345
  #              4/9
  $entry .= sprintf(" %1d/%1d  ", $Frm->hdr("USTEP_I"), $Frm->hdr("NUSTEP"));

# UT start.
  $heading1 .= "UT Start|";
  $heading2 .= "--------|";
  #             12345678
  $entry .= sprintf("%8.5f ", $Frm->uhdr("ORAC_UTSTART"));

# Exposure time.
  $heading1 .= " ExpT |";
  $heading2 .= "------|";
  #             123456
  $entry .= sprintf("%6.3f ", $Frm->uhdr("ORAC_EXPOSURE_TIME"));

# Filter.
  $heading1 .= " Filter |";
  $heading2 .= "--------|";
  #             12345678
  $entry .= sprintf("%8.8s ", $Frm->uhdr("ORAC_FILTER"));

# Airmass.
  $heading1 .= "Airmass|";
  $heading2 .= "-------|";
  #             1234567
  $entry .= sprintf("%7.3f ", $Frm->uhdr("ORAC_AIRMASS_START"));

# RA & Dec.
  $heading1 .= "    R.A.     Decl.|";
  $heading2 .= "------------------|";
  #             123456789012345678
  #             12.12345 +12.12345
  $entry .= sprintf("%8.5f %+9.5f ",
                    $Frm->uhdr("ORAC_RA_BASE"),
                    $Frm->uhdr("ORAC_DEC_BASE"),
                   );

# RA & Dec offsets.
  $heading1 .= " RA Off. Dec Off.|";
  $heading2 .= "-----------------|";
  #             12345678901234567
  #             +123.123 +123.123
  $entry .= sprintf("%+8.3f %+8.3f ",
                    $Frm->uhdr("ORAC_RA_TELESCOPE_OFFSET"),
                    $Frm->uhdr("ORAC_DEC_TELESCOPE_OFFSET"),
                   );

# DR Recipe.
  $heading1 .= " DR Recipe";
  $heading2 .= "-----------------------------";
  #             12345678901234567890123456789
  #             USTEP_JITTER_SELFFLAT
  $entry .= sprintf("%-30s",
                    $Frm->uhdr("ORAC_RECIPE"),
                   );

# Write the log.
  $log->header( $heading1, $heading2 );
  $log->addentry( $entry );

} else {

  orac_warn "Could not create nightlog $nightlog.\n";

}
