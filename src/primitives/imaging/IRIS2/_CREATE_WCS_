=head1 NAME

_CREATE_WCS_ -- Corrects the headers of IRIS2 imaging data to create an
AIPS-convention World Co-ordinate System.

=head1 DESCRIPTION

This primitive adds two headers in an IRIS2 frame to fully create an
AIPS-convention World Co-ordinate System. This is achieved by adding
the headers in the FITS airlock.

The changes are listed below.

a) Convert CDI<n>_I<n> to CDELTI<n>.

b) Add CUNITI<n>.

=head1 ARGUMENTS

=over 4

None.

=back

=head1 NOTES

=over 4

=item *

Editing only occurs for OBJECT and SKY frames.

=item *

Following a successful introduction of a WCS, the current AST frame
is SKY. Any existing WCS frames besides the default three -- PIXEL,
GRID, and AXIS -- are lost.

=back

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu> (JAC)

=head1 COPYRIGHT

Copyright (C) 2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# We don't need to edit a frame that has already been edited.
#my $needs_editing = ( !defined( $Frm->hdr( "CDELT1" ) ) &&
#                      length( $Frm->hdr( "CDELT1" ) . "" ) == 0 );
my $needs_editing = 1;
# Modify the headers should only be performed on OBJECT or SKY
# frames, which have not already been converted.
my $correct_obstype = $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
                      $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY";

if ( $correct_obstype && $needs_editing ) {

  my $ndf = $Frm->file;

  # The CDELTn values have already been calculated -- they're in the
  # ORAC_RA_SCALE and ORAC_DEC_SCALE internal headers, calculated
  # in the header translations in Frame/IRIS2.pm
  my $cdelt1 = $Frm->uhdr( "ORAC_RA_SCALE" );
  my $cdelt2 = $Frm->uhdr( "ORAC_DEC_SCALE" );

  # The units are degrees.
  my $cunit1 = "'deg'";
  my $cunit2 = "'deg'";

  # Add these values to the FITS header. We're not concerned with
  # header positioning at the moment. We'll add these headers by
  # putting them in a "steering" file, then using that to add the
  # headers.

  my $file = "fitsmod$$.lis";
  unlink( $file );

  open( my $fh_steering, ">$file" ) ||
    orac_throw "Unable to open $file of WCS editing instructions. Error: $!.\n";
  my $cmd = "W";

  print $fh_steering "$cmd CDELT1 $cdelt1 [deg] Increment per pixel at reference point\n";
  print $fh_steering "$cmd CDELT2 $cdelt2 [deg] Increment per pixel at reference point\n";
  print $fh_steering "$cmd CUNIT1 $cunit1 Physical units of axis 1\n";
  print $fh_steering "$cmd CUNIT2 $cunit2 Physical units of axis 2\n";

  close( $fh_steering );

  # Edit the headers.
  $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "ndf=$ndf mode=file table=$file" );

  # Delete the "steering" file.
  unlink( $file );

  # Report to the user.
  orac_print "AIPS-convention world co-ordinate system added.\n";

  #
  # These were necessary when _DEFINE_DISTORTION_TRANSFORMATION did not work.
  # But now it does, so these aren't necessary.
  #
  # Remove an existing WCS component, so that later when a new WCS is made,
  # it will include a SKY co-ordinate frame.  As there may not already be a
  # WCS component, make one with wcsframe.
  #$Mon{ "ndfpack_mon" }->obeyw( "wcsframe", "ndf=$ndf frame=pixel" );
  #$Mon{ "ndfpack_mon" }->obeyw( "erase", "object=${ndf}.WCS ok" );
  #
  # Create the SKY frame in the WCS component.
  #$Mon{ "ndfpack_mon" }->obeyw( "wcsframe", "ndf=$ndf frame=sky" );
  #
  # Report to the user.
  #orac_print "Astrometry SKY co-ordinate frame created in $ndf.\n";

  orac_print "\n";
}

