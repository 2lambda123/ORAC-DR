#+
# Name:
#    _MAKE_OBJECTS_MASK_
#
# Purpose:
#    Makes an ARD mask of objects within the current frame.
#
# Language:
#    Perl5
#
# Description:
#    This primitive performs an inventory of the the shapes and
#    orientations of the sources in the current frame.  It creates
#    an ARD (ASCII Region Definition cf. SUN/183) file containing
#    elliptical regions corresponding to the measured extents of the
#    sources.  A circular central occulting mask is also written to
#    the ARD file; this is because the object detection around bright
#    sources (as might be expected near frame centre) is uneven and
#    can leave many small blobs.  `Central' refers to offset 0,0,
#    therefore on jittered frames, the bright target is still masked
#    as it appears in different pixel locations in the frame.
#
#    The primitive reports the successful creation of the ARD file
#    and the various intermiediate frames made during processing.
#
# Arguments:
#    MASKFILE = CHARACTER (Returned)
#       The name of the ARD (ASCII Region Definition cf. SUN/183)
#       text file to contain the regions spanning the objects in the
#       frame.  It is set to "<frame>_objects.ard", where <frame> is
#       the name of the current frame when the primitive is invoked.  []
#    MINPIX = INTEGER (Given)
#       The minimum number of connected pixels needed before a set
#       of pixels can be considered as an object in the inventory.
#       [12]
#    OCCULT = REAL (Given)
#       The diameter of the central occulting mask in arcseconds. [7]
#
# Notes:
#    -  This primitive is suitable for both UFTI, IRCAM, and Michelle
#    in imaging mode.
#    -  Processing only occurs for object and sky frames.
#    -  $Frm->file is updated during an pre-processing for the
#    inventory.  It is not reset to its value on entry.
#    -  The statistics of the input frame are found to derive the
#    mean, extreme values, and the number of bad pixels present.
#    -  Bad pixels are removed by first substituting the median of
#    each bad pixel's eight neighbours.  If any bad pixels remain, they
#    are replaced by the average pixel value of the frame.  That's
#    not a problem because residual bad pixels are usually areas
#    at the frames edge where the data  quality is known to be poor.
#    -  The SEXTRACTOR parameters are set in text file
#    $ORAC_DATA_CAL/extractor_mask.sex.  This includes the minimum
#    number of pixels above the threshold, currently 12 pixels at 1.5
#    times the rms sky noise above the sky.
#    -  The data are smoothed with a 3-by-3 pixel Hanning filter
#    prior to making the inventory in order to reduce artifacts
#    being masked and noise breaking up the outer parts of bright
#    objects into small, and hence undetected, blobs. 
#    -  An isophotal analysis is used for the inventory.
#    -  The primitive parses the inventory file and derives the
#    major and minor axis lengths and orientation to make the ARD file.
#    -  EXTRACTOR outputs coordinates in the ARD file as grid
#    coordinates. These are transformed into pixel coordinates.
#    -  The intermediate frames cannot be displayed.
#    -  The title of the current frame when the task is invoked is
#    propagated to any intermediate frames.
#
# Output Data:
#    -  Various intermediate files depending on the supplied data.  They
#    all inherit the current frame's name but with different suffices.
#    The suffices and meanings are as follows: _dg for the frames
#    with bad pixels replaced by the local median (deglitched); _sbp
#    for frames with residual bad pixels bad pixels: _sc for scaled
#    or offset data.
#
# Tasks:
#    KAPPA: CSUB, GLITCH, HISTAT, MATHS, STATS; EXTRACTOR
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2001 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Arguments
# =========

# Obtain the diameter of the occulting circle in arcseconds.
       my $occultangle = ( $_MAKE_OBJECTS_MASK_{OCCULT} || 7 );

# Obtain the minimum number of pixels in the objects.
       my $minpix = ( $_MAKE_OBJECTS_MASK_{MINPIX} || 12 );

# Define rotation matrix
# ======================

# Obtain the rotation angle in degrees.
       my $rotangle = $Frm->uhdr( "ORAC_ROTATION" );
       $rotangle = defined( $rotangle ) ? $rotangle : 0.0;

# Define some useful variables to apply the rotation matrix.
       my $pi = atan2( 1, 1 ) * 4;
       my $dtor = $pi / 180.0;

# Locate the "central" circle
# ===========================

# We want to find where a bright point source or compact galaxy is usually
# placed so the source can be fully masked.

# Find the Cartesian offsets in pixels.
       _GET_CARTESIAN_TELESCOPE_OFFSETS_
       my $xoff = $_GET_CARTESIAN_TELESCOPE_OFFSETS_{XOFF};
       my $yoff = $_GET_CARTESIAN_TELESCOPE_OFFSETS_{YOFF};

# Obtain the plate scales for the instrument from the headers.
       _GET_PLATE_SCALE_
       my $platescale = $_GET_PLATE_SCALE_{PLATESCALE};

# Find the occulting circle radius in pixels.
       my $occultpix = 0.5 * $occultangle / $platescale;

# Locate the centre of the frame by inquiring the frame's attributes.
# Obtain the frame file name.
       my ( $param1, $ORAC_STATUS );
       my $in = $Frm->file;
       $Mon{ "ndfpack_mon" }->obeyw( "ndftrace", "ndf=$in" );
       ( $ORAC_STATUS, my @lbnd ) = $Mon{ "ndfpack_mon" }->get( "ndftrace", "lbound" ); 
       ( $ORAC_STATUS, my @ubnd ) = $Mon{ "ndfpack_mon" }->get( "ndftrace", "ubound" );

# Find the mid points.
       my $xmid = ( ( $lbnd[ 0 ] + $ubnd[ 0 ] ) / 2.0 );
       my $ymid = ( ( $lbnd[ 1 ] + $ubnd[ 1 ] ) / 2.0 );

# Derive the centre co-ordinates of the occulting mask.
       my $xcentre = $xmid + $xoff;
       my $ycentre = $ymid + $yoff;

# Perform inventory on the field
# ==============================

# Specify the EXTRACTOR parameters.  Can't change the default minimum area
# in pixels without editing the sex file...  Other parameters like the
# saturation level and plate scale should be edited in the sex file.  Also
# the name and format of the results catalogue is fixed (to match PISA) and is
# in the ASCII file ${ORAC_DATA_CAL}/extractor_mask.param.
       my $resfile = "object_mask.cat";
       $param1 = "image=$in config=$ENV{ORAC_DATA_CAL}/extractor_mask.sex";

# Report the processing status.
       orac_print "Detecting objects in $in with at least $minpix connected pixels\n";
       orac_print "   at 1.1 times sky noise above sky.\n";

# Derive an inventory of the images in $resfile.
       my $extractor_status = $Mon{ "extractor" }->obeyw( "extract", "$param1" );

# We can handle a failure here by making a null ARD file.  So we test a
# local status rather than let ORAC go on to the next file.
       if ( $extractor_status == ORAC__OK ) {

# Read the results file into an array.  Obtain the number of objects.
# Remove the results file.
          open( my $fh_resfile, "< $resfile" ) ||
             orac_throw "Unable to open $resfile to read the source inventory.  Error: $!.\n";
          my @lines = <$fh_resfile>;
          my $numobject = $#lines + 1;
          close( $fh_resfile );
          unlink ( $resfile );

# Form the ARD file
# =================

# Generate the ARD file name using the raw frame name.  Export the file
# for use by masking primitive.
          my $ardfile = $in . "_objects.ard";
          $_MAKE_OBJECTS_MASK_{MASKFILE} = $ardfile;

# Remove any existing ARD object file.
          unlink( $ardfile );

# Create an ARD file.
          open( my $fh_ardfile, "> $ardfile" ) ||
            orac_throw "Unable to open $ardfile to create a mask of the sources.  Error: $!.\n";

# Create a circle mask around the central region to ensure that a bright
# and possibly extended source is fully masked.  The faint outer parts
# were occasionally ignored by PISA.  Leave in for now with EXTRACTOR.
          printf $fh_ardfile "CIRCLE( %10.3f, %10.3f, %5.1f )\n",
                $xcentre, $ycentre, $occultpix;

# Read each line of the EXTRACTOR catalogue, and split the fields.
          for ( my $ifd = 0; $ifd < $numobject; $ifd++ ) {
             my @fields = split( /\s+/, $lines[$ifd] );

# Relevant fields are:
# 2  x co-ordinate of centre
# 3  y co-ordinate of centre
# 5  number of pixels above the threshold
# 7  ellipticity
# 8  orientation measured in degrees anti-clockwise from x axis
#
# The first two are in grid coordinates and need to be transformed to
# pixel coordinates, and the other three are used to generate the 
# semi-major axes, and the ARD ELLIPSE orientation.
             my $xpixel = $fields[ 2 ] + $lbnd[ 0 ] - 1;
             my $ypixel = $fields[ 3 ] + $lbnd[ 1 ] - 1;
             my $ea = sqrt( $fields[ 5 ] / $pi /
                      max( ( 1.0 - $fields[ 7 ] ), 0.99999 ) );
             $ea = min( $ea, 0.5 * $fields[ 5 ] );
             my $eb = $ea * ( 1.0 - $fields[ 7 ] );
             my $orient = $fields[ 8 ] % 360.0;

# Test for objects too small.  This is important, as EXTRACTOR can throw
# out objects of zero size.
             if ( ( sqrt( max( 1.0E-7, $ea * $eb ) ) * $pi ) >= $minpix ) {

#  Write the ARD description.
                printf $fh_ardfile "ELLIPSE( %10.3f, %10.3f, %8.3f, %8.3f, %5.1f )\n",
                   $xpixel, $ypixel, $ea, $eb, $orient;
             }
          }
          close( $fh_ardfile );

# Report the processing status.
          orac_print "Mask for $in stored in ARD file $ardfile\n\n";
       }

    }

# Podule
# ======

=head1 NAME

_MAKE_OBJECTS_MASK_ -- Makes an ARD mask of objects within the current frame.

=head1 DESCRIPTION

This primitive performs an inventory of the the shapes and
orientations of the sources in the current frame.  It creates
an ARD (ASCII Region Definition cf. SUN/183) file containing
elliptical regions corresponding to the measured extents of the
sources.  A circular central occulting mask is also written to
the ARD file; this is because the object detection around bright
sources (as might be expected near frame centre) is uneven and
can leave many small blobs.  `Central' refers to offset 0,0,
therefore on jittered frames, the bright target is still masked
as it appears in different pixel locations in the frame.

The primitive reports the successful creation of the ARD file
and the various intermiediate frames made during processing.

=head1 ARGUMENTS

=over 4

=item MASKFILE = CHARACTER (Returned)

The name of the ARD (ASCII Region Definition cf. SUN/183)
text file to contain the regions spanning the objects in the
frame.  It is set to "E<lt>frameE<gt>_objects.ard", where E<lt>frameE<gt> is
the name of the current frame when the primitive is invoked.  []

=item MINPIX = INTEGER (Given)

The minimum number of connected pixels needed before a set
of pixels can be considered as an object in the inventory. [12]

=item OCCULT = REAL (Given)

The diameter of the central occulting mask in arcseconds. [7]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for both UFTI, IRCAM, and Michelle
in imaging mode.

=item *

Processing only occurs for object and sky frames.

=item *

$Frm-E<gt>file is updated during an pre-processing for the
inventory.  It is not reset to its value on entry.

=item *

The statistics of the input frame are found to derive the
mean, extreme values, and the number of bad pixels present.

=item *

Bad pixels are removed by first substituting the median of
each bad pixel's eight neighbours.  If any bad pixels remain, they
are replaced by the average pixel value of the frame.  That's
not a problem because residual bad pixels are usually areas
at the frames edge where the data quality is known to be poor.

=item *

The SEXTRACTOR parameters are set in text file
F<$ORAC_DATA_CAL/extractor_mask.sex>.  This includes the minimum
number of pixels above the threshold, currently 12 pixels at 1.5
times the rms sky noise above the sky.

=item *

The data are smoothed with a 3-by-3 pixel Hanning filter
prior to making the inventory in order to reduce artifacts
being masked and noise breaking up the outer parts of bright
objects into small, and hence undetected, blobs. 

=item *

An isophotal analysis is used for the inventory.

=item *

The primitive parses the inventory file and derives the
major and minor axis lengths and orientation to make the ARD file.

=item *

EXTRACTOR outputs coordinates in the ARD file as grid coordinates. 
These are transformed into pixel coordinates.

=item *

The intermediate frames cannot be displayed.

=item *

The title of the current frame when the task is invoked is propagated
to any intermediate frames.

=back

=head1 OUTPUT DATA

=over 4

=item *

Various intermediate files depending on the supplied data.  They
all inherit the current frame's name but with different suffices.
The suffices and meanings are as follows: _dg for the frames
with bad pixels replaced by the local median (deglitched); _sbp
for frames with residual bad pixels bad pixels: _sc for scaled
or offset data.

=back

=head1 TASKS

KAPPA: CSUB, GLITCH, HISTAT, MATHS, STATS; EXTRACTOR.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2001 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
