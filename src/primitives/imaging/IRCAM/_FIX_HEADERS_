#+
# Name:
#    _FIX_HEADERS_
#
# Purpose:
#    Corrects for missing headers in the imaging recipes.
#
# Language:
#    Perl5
#
# Description:
#    This primitive corrects the ORAC_ user headers for imaging data
#    reduction, especially for the generic NIGHT_LOG output.  If any of
#    the  selected headers are undefined, the primitive replaces it with
#    an abnormal nominal value, but which doesn't cause the pipeline
#    to abort.  The recipe reports each change and the total number of
#    modified headers.
#
#  Notes:
#    -  This primitive is suitable for IRCAM.
#    -  The headers checked and replacement values are as follows (the
#    ORAC_ prefix is omitted form the names).
#
#       X_LOWER_BOUND                     1
#       X_UPPER_BOUND                   256
#       Y_LOWER_BOUND                     1
#       Y_UPPER_BOUND                   256
#
#       RA_BASE                         0.0
#       DEC_BASE                        0.0
#       RA_TELESCOPE_OFFSET             0.0
#       DEC_TELESCOPE_OFFSET            0.0
#       EQUINOX                      2000.0
#       UTDATE                   '19700101'
#       UTSTART                         0.0
#       AIRMASS_START                   0.0
#
#       STANDARD                          0
#       OBJECT                    'unknown'
#       OBSERVATION_TYPE          'unknown'
#
#       GAIN              <uses _GET_GAIN_>
#       NUMBER_OF_EXPOSURES               1
#       OBSERVATION_MODE          'unknown'
#       DETECTOR_READ_TYPE        'unknown'
#       EXPOSURE_TIME                1000.0
#       FILTER                    'unknown'
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#    PH: Paul Hirst (JAC)
#
# Copyright:
#    Copyright (C) 1998-2002 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Initialise counter for the number of corrected user headers.
    my $fudged = 0;

# Test the headers, replacing with sensible defaults.
# ===================================================

# Dimensions and bounds
# ---------------------
    if ( ! defined( $Frm->uhdr( "ORAC_X_LOWER_BOUND" ) ) ) {
       $Frm->uhdr( "ORAC_X_LOWER_BOUND", 1 );
       orac_print "Fudging user header ORAC_X_LOWER_BOUND to 1.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_X_UPPER_BOUND" ) ) ) {
       $Frm->uhdr( "ORAC_X_UPPER_BOUND", 256 );
       orac_print "Fudging user header ORAC_X_UPPER_BOUND to 256.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_Y_LOWER_BOUND" ) ) ) {
       $Frm->uhdr( "ORAC_Y_LOWER_BOUND", 1 );
       orac_print "Fudging user header ORAC_Y_LOWER_BOUND to 1.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_Y_UPPER_BOUND" ) ) ) {
       $Frm->uhdr( "ORAC_Y_UPPER_BOUND", 256 );
       orac_print "Fudging user header ORAC_Y_UPPER_BOUND to 256.\n";
       $fudged++;
    }

# Co-ordinates and Time
# ---------------------
    if ( ! defined( $Frm->uhdr( "ORAC_RA_BASE" ) ) ) {
       $Frm->uhdr( "ORAC_RA_BASE", 0.0 );
       orac_print "Fudging user header ORAC_RA_BASE to 0.0.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_DEC_BASE" ) ) ) {
       $Frm->uhdr( "ORAC_DEC_BASE", 0.0 );
       orac_print "Fudging user header ORAC_DEC_BASE to 0.0.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_RA_TELESCOPE_OFFSET" ) ) ) {
       $Frm->uhdr( "ORAC_RA_TELESCOPE_OFFSET", 0 );
       orac_print "Fudging ORAC_RA_TELESCOPE_OFFSET to zero.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_DEC_TELESCOPE_OFFSET" ) ) ) {
       $Frm->uhdr( "ORAC_DEC_TELESCOPE_OFFSET", 0 );
       orac_print "Fudging ORAC_DEC_TELESCOPE_OFFSET to zero.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_EQUINOX" ) ) ) {
       $Frm->uhdr( "ORAC_EQUINOX", 2000.0 );
       orac_print "Fudging user header ORAC_EQUINOX to 2000.0.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_UTDATE" ) ) ) {
       $Frm->uhdr( "ORAC_UTDATE", '19700101' );
       orac_print "Fudging ORAC_UTDATE to 19700101.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_UTSTART" ) ) ) {
       $Frm->uhdr( "ORAC_UTDATE", '0.0' );
       orac_print "Fudging ORAC_UTSTART to 0.0.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_AIRMASS_START" ) ) ) {
       $Frm->uhdr( "ORAC_AIRMASS_START", 0.0 );
       orac_print "Fudging ORAC_AIRMASS_START to 0.0.\n";
       $fudged++;
    }

# Source
# ------
    if ( ! defined( $Frm->uhdr( "ORAC_STANDARD" ) ) ) {
       $Frm->uhdr( "ORAC_STANDARD", 0 );
       orac_print "Fudging ORAC_STANDARD to 0 (false).\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_OBJECT" ) ) ) {
       $Frm->uhdr( "ORAC_OBJECT", 'unknown' );
       orac_print "Fudging ORAC_OBJECT to 'unknown'.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) ) ) {
       $Frm->uhdr( "ORAC_OBSERVATION_TYPE", 'unknown' );
       orac_print "Fudging ORAC_OBSERVATION_TYPE to 'unknown'.\n";
       $fudged++;
    }

# Instrument attributes
# ---------------------
    if ( ! defined( $Frm->uhdr( "ORAC_GAIN" ) ) ) {
       _GET_GAIN_
       my $gain = $_GET_GAIN_{GAIN};
       $Frm->uhdr( "ORAC_GAIN", $gain );
       orac_print "Fudging user header ORAC_GAIN to $gain.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_SPEED_GAIN" ) ) ) {
       $Frm->uhdr( "ORAC_SPEED_GAIN", "Normal" );
       orac_print "Fudging user header ORAC_SPEED_GAIN to 'Normal'.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_NUMBER_OF_EXPOSURES" ) ) ) {
       $Frm->uhdr( "ORAC_NUMBER_OF_EXPOSURES", 1 );
       orac_print "Fudging user header ORAC_NUMBER_OF_EXPOSURES to 1.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_DETECTOR_READ_TYPE" ) ) ) {
       $Frm->uhdr( "ORAC_DETECTOR_READ_TYPE", 'unknown' );
       orac_print "Fudging ORAC_DETECTOR_READ_TYPE to 'unknown'.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_EXPOSURE_TIME" ) ) ) {
       $Frm->uhdr( "ORAC_EXPOSURE_TIME", 1000.0 );
       orac_print "Fudging ORAC_EXPOSURE_TIME to 1000.0s.\n";
       $fudged++;
    }

    if ( ! defined( $Frm->uhdr( "ORAC_FILTER" ) ) ) {
       $Frm->uhdr( "ORAC_FILTER", 'unknown' );
       orac_print "Fudging ORAC_FILTER to 'unknown'.\n";
       $fudged++;
    }

# Report the total and keep the output tidy.
    if ( $fudged ) {
       orac_print( "Changed $fudged user headers.\n\n" );
    }

# Podule
# ======

=head1 NAME

_FIX_HEADERS_ -- Corrects for missing headers in the imaging recipes.

=head1 DESCRIPTION

This primitive corrects the headers for imaging data reduction,
especially for the generic L<NIGHT_LOG|NIGHT_LOG> output.  If any of
the selected headers are undefined, the primitive replaces it with an
abnormal nominal value,but which doesn't cause the pipeline to abort.
The recipe reports each change and the totla number of modified
headers.

=head1 NOTES

=over 4

=item *

This primitive is suitable for IRCAM.

=item *

The headers checked and replacement values are as follows (the
ORAC_ prefix is omitted form the names).

   X_LOWER_BOUND                     1
   X_UPPER_BOUND                   256
   Y_LOWER_BOUND                     1
   Y_UPPER_BOUND                   256

   RA_BASE                         0.0
   DEC_BASE                        0.0
   RA_TELESCOPE_OFFSET             0.0
   DEC_TELESCOPE_OFFSET            0.0
   EQUINOX                      2000.0
   UTDATE                   '19700101'
   UTSTART                         0.0
   AIRMASS_START                   0.0

   STANDARD                          0
   OBJECT                    'unknown'
   OBSERVATION_TYPE          'unknown'

   GAIN             E<uses _GET_GAIN_>
   NUMBER_OF_EXPOSURES               1
   OBSERVATION_MODE          'unknown'
   DETECTOR_READ_TYPE        'unknown'
   EXPOSURE_TIME                1000.0
   FILTER                    'unknown'

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
