#+
# Name:
#    _IRCAM_HELLO_
#
# Purpose:
#    Performs global data-reduction tasks for IRCAM.
#
# Language:
#    Perl5
#
# Description:
#    This primitive does the preparatory work for recipes used by IRCAM.
#    It permits display of the raw data.  It sets the pixel origin, and
#    switches on history recording in a copy of the raw data.  A copy
#    is necessary because the raw frame is write protected.  It finally
#    corrects for non-linearity.
#
# Notes:
#    -  The readout lower bounds in the frame user headers
#    ORAC_X_LOWER_BOUND and ORAC_Y_LOWER_BOUND define the pixel origin.
#    -  The non-linearity test is only applied when detector bias
#    user header ORAC_DETECTOR_BIAS is 0.62.  When user header
#    ORAC_READMODE is "STARE" a bias of 24400 is subtracted before
#    applying the non-linearity correction.  This approximation gives
#    rise to at worse a 0.5% error in the correction and in most
#    circumstances will be much less.  The correction is 3.3E-06 times
#    the square of the bias-subtracted signal.  The logical header LINEAR
#    is set to T to record that the linearity correction has been applied.
#
# Output Data:
#    -  Copied frame inheriting the current frame's name but with
#    the _cl suffix.
#    -  Linearity-corrected frame inheriting the current frame's name
#    but with the _nl suffix.
#
# Tasks:
#    KAPPA: FITSMOD, HISSET, MATHS, NDFCOPY, SETORIGIN.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2001 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Set the internal headers (temporary until in the system code).
    _SET_INTERNAL_HEADERS_

# Every IRCAM recipe must display the raw data.
    _DISPLAY_FRAME_IMAGE_

# Copy the original data.
# =======================

# IRCAM raw data are in the same directory as the reduced data, and are
# protected against all but read access.  Thus to switch on history
# recording and set the origin we have to work on an output copy of the
# array.

# Generate list of input and output filenames.
    ( my $in, my $out ) = $Frm->inout( "_cl" );

# Copy the data.
    $Mon{"ndfpack_mon"}->obeyw("ndfcopy","in=$in out=$out");

# Report the processing status.
    orac_print "Frame $in copied to $out\n";

# Now update the output filename in the Frame object.
    $Frm->file( $out );

# Set the bounds of the NDF.
# ==========================

# Read readout bounds from the headers.
    my $x1 = $Frm->hdr( "ORAC_X_LOWER_BOUND" );
    my $y1 = $Frm->hdr( "ORAC_Y_LOWER_BOUND" );

# Set the parameters for the task.
    $in = $Frm->file;
    my $param1 = "ndf=$in origin=[$x1,$y1]";

# Set the frame origin.
    $Mon{"ndfpack_mon"}->obeyw("setorigin","$param1");

# Report the processing status.
    orac_print "Frame $in has bounds set\n";

# Initiate history recording.
# ===========================
    $Mon{"ndfpack_mon"}->obeyw("hisset","ndf=$in");

# Report the processing status.
    orac_print "Frame $in has history recording enabled\n";

# Apply non-linearity correction.
# ===============================

# Non-linearity correction should only be applied a defined DET_BIAS value.
    my $det_bias = $Frm->hdr( "DET_BIAS" );
    my $mode = $Frm->hdr( "MODE" );
    if ( $det_bias > 0.61 && $det_bias < 0.63 ) {

# Generate list of input and output filenames.
       ( $in, $out ) = $Frm->inout( "_nl" );

# If observation was taken in STARE mode, a bias has to be subtracted.
# A good approximation is to take off a constant bias level.  Even at high
# fluxes this should at worst give a 0.5% error, and in most circumstances
# will be much less.
       if ( $mode eq "ND_STARE" ) {

# Evaluate the expression with the bias already subtracted.
          $Mon{"kappa_mon"}->obeyw("maths","out=$out ia=$in exp='IA+3.3E-06*IA*IA'");

# Evaluate the expression without the bias already subtracted (STARE mode).
       } elsif ( $mode eq "STARE" ) {
          $Mon{"kappa_mon"}->obeyw("maths","out=$out ia=$in exp='IA+3.3E-06*(IA-24460)*(IA-24460)'");

       }

# Correct the FITS header indicating that a linearity correction has been applied.
       $param1 = "ndf=$out edit=update";
       my $param2 = "keyword=LINEAR value=T comment='Linearisation enabled' position=LINEAR";
       $Mon{"ndfpack_mon"}->obeyw("fitsmod","$param1 $param2");

# Report the processing status.
       orac_print "Frame $in has non-linearity correction applied in $out\n";

# Now update the output filename in the Frame object.
       $Frm->file( $out );

    }

# Report processing status.
    orac_print "Global IRCAM tasks performed\n";

# Podule
# ======

=head1 NAME

_IRCAM_HELLO_ -- Performs global data-reduction tasks for IRCAM.

=head1 DESCRIPTION

This primitive does the preparatory work for recipes used by IRCAM.
It permits display of the raw data.  It sets the pixel origin, and
switches on history recording in a copy of the raw data.  A copy
is necessary because the raw frame is write protected.  It finally
corrects for non-linearity.

=head1 NOTES

=over 4

=item *

The readout lower bounds in the frame headers RDOUT_X1 and
RDOUT_Y1 define the pixel origin.

=item *

The non-linearity test is only applied when detector bias user header
ORAC_DETECTOR_BIAS is 0.62.  When header ORAC_READMODE is "STARE" a bias of
24400 is subtracted before applying the non-linearity correction. This
approximation gives rise to at worse a 0.5% error in the correction
and in most circumstances will be much less.  The correction is
3.3E-06 times the square of the bias-subtracted signal.  The logical
header LINEAR is set to T to record that the linearity correction has
been applied.

=back

=head1 OUTPUT DATA

=over 4

=item *

Copied frame inheriting the current frame's name but with
the _cl suffix.

=item *

Linearity-corrected frame inheriting the current frame's name
but with the _nl suffix.

=back

=head1 TASKS

KAPPA: FITSMOD, HISSET, MATHS, NDFCOPY, SETORIGIN.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2001 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
