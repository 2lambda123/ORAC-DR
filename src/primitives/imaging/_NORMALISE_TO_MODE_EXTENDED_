# Name:
#    _NORMALISE_TO_MODE_EXTENDED_
#
# Purpose:
#    Normalises a sky frame's mode to that of a reference frame.
#
# Language:
#    Perl5
#
# Description:
#    The primitive is for EXTENDED_nxm and CHOP_SKY_JITTER recipes.  It
#    makes an additive normalisation to the current sky frame so as the
#    mode of the current frame matches that of a reference sky frame.  It
#    reports a successful normalisation and the frames concerned.
#
#    When the steering header REFERENCE_FRAME is true, the primitive
#    stores the mode into internal header REFERENCE_SKY.  Otherwise the
#    reference frame is accessed and its REFERENCE_SKY read to obtain the
#    fiducial sky level.

# Notes:
#    -  This primitive is suitable for infrared imaging.
#    -  Processing only occurs for frames where the steering header
#    TARGET_OR_SKY equals "sky".
#    -  Only a warning is given if the reference mode could not be
#    accessed, and a zero offset is adopted.
#    -  Clips at 2, 2.5, 3, and 3 sigma to derive the mode.
#    -  The normalised image can be displayed.
#    -  The frame title is "Normalised to mode".
#
# Output Data:
#    -  A normalised frame inheriting its corresponding input frame's name
#    but with the _nm suffix.
#
# Tasks:
#    KAPPA: CADD.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Imports:
#    _CLIPPED_STATS_                      : RESULT
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Test whether or not this is an object frame.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Test whether or not this is an object frame or a sky frame.
       my $class = $Frm->uhdr( "TARGET_OR_SKY" );

# Test whether or not this is a target frame or a sky frame.
       if ( $class eq "sky" ) {

# Find the clipped mean (effectively the mode) for the frame.
          _CLIPPED_STATS_ CLIP=2,2.5,3,3
          my $mode = $_CLIPPED_STATS_{MEAN};

# Format to a sensible number of decimal places for output.
          my $fs_mode = sprintf( "%.4f", $mode );

# Generate the input and output filenames.
          ( my $in, my $out ) = $Frm->inout( "_nm" );

# Determine whether or not this is the first sky frame, and hence whether or
# not a reference mode is needed.  We need a global variable to store
# this value, and the only one we have available for the first frame
# is the frame header.  There is no group header.
          my $refframe = $Frm->uhdr( "REFERENCE_FRAME" );
          if ( $refframe ) {
             $Frm->uhdr( "REFERENCE_SKY", $mode );
             orac_print "Mode for reference frame $in is $mode\n";
          }
          my $sky_offset;

# of the reference frame.
          if ( $mode > 1.0E-7 ) {
             my $refmode;
             if ( $refframe ) {
                $refmode = $mode;

# Recall the reference level from the most-recent reference frame within
# the group.  We know that the current frame is not a reference frame so
# start searching from the previous frame.
             } else {
                my $refFrm;
                my $numframe = $Grp->num + 1;
                $refframe = 0;
                until ( $refframe || $numframe == 0 ) {
                   $numframe--;
                   $refFrm = $Grp->frame( $numframe );
                   $refframe = $refFrm->uhdr( "REFERENCE_FRAME" );
                }

# Check that reference frame has been located.  If not fudge the
# sky level for now so the recipe completes, albeit with a poorer
# mosaic.
                if ( ! $refframe ) {
                   orac_warn "There is no reference frame from which to obtain ".
                             "a reference sky level.  Assume a constant level.\n";
                   $refmode = $mode;

                } else {
                   $refmode = $refFrm->uhdr( "REFERENCE_SKY" );
                }
             }

# Evaluate the normalisation offset.
             $sky_offset = $refmode - $mode;

          } else {
             orac_throw "Unable to normalise frame $in.  Mode ($fs_mode) is too small.\n" .
                        "A possible cause is an aberrant dark.\n";
          }

# Normalise the current frame to the current reference frame.
          my $param1 = "in=$in out=$out scalar=$sky_offset title=\'Normalised to mode\'";
          $Mon{ "kappa_mon" }->obeyw( "cadd", "$param1" );

# Report the processing.
          orac_print "$in to $out: sky frame normalised to reference sky\n\n";

# Record the new file name in the frame object.
          $Frm->file( $out );                       # obligatory update step

# Display the image.
          _DISPLAY_FRAME_IMAGE_

       }
    }

# Podule
# ======

=head1 NAME

_NORMALISE_TO_MODE_EXTENDED_ -- Normalises a sky frame's mode to that of a reference frame.

=head1 DESCRIPTION

The primitive is for EXTENDED_I<n>xI<m> and CHOP_SKY_JITTER recipes.
It makes an additive normalisation to the current sky frame so as the
mode of the current frame matches that of a reference sky frame.  It
reports a successful normalisation and the frames concerned.

When the steering header REFERENCE_FRAME is true, the primitive
stores the mode into internal header REFERENCE_SKY.  Otherwise the
reference frame is accessed and its REFERENCE_SKY read to obtain the
fiducial sky level.

=head1 NOTES

=over 4

=item *

This primitive is suitable for infrared imaging.

=item *

Processing only occurs for frames where the steering header
TARGET_OR_SKY equals "sky".

=item *

Only a warning is given if the reference mode could not be
accessed, and a zero offset is adopted.

=item *

Clips at 2, 2.5, 3, and 3 sigma to derive the mode.

=item *

The normalised image can be displayed.

=item *

The frame title is "Normalised to mode".

=back

=head1 OUTPUT DATA

=over 4

=item *

A normalised frame inheriting its corresponding input frame's name
but with the _nm suffix.

=back

=head1 TASKS

KAPPA: CADD.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
