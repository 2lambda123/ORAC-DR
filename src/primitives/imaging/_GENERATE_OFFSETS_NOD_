#+
# Name:
#    _GENERATE_OFFSETS_NOD
#
# Purpose:
#    Finds the offsets between the frames in a NOD recipe.
#
# Description:
#    This primitive finds the pixel offsets between the target frames
#    in the current $Grp of a NOD recipe.  The primitive itself
#    forms new groups to be registered by other primitives.  For the
#    first cycle of the recipe, the primitive forms a group of the
#    current recipe cycle's difference-pair frames, accessed
#    by the internal group header DIFFERENCE_GROUP.  On subsequent
#    cycles a new group is formed, comprising the integrated mosaic
#    followed by the difference pairs in the current cycle, so that
#    there is a common registration and that mosaics can be co-added.
#    For a moving target, the first frame of the whole observation is
#    the first member of the group after the first cycle.
#
#    In the case of a series of mosaics in a scan, the test is for the
#    first recipe cycle at a given scan position.  On the second and
#    subsequent cycles, the new group commences with the mosaic
#    for the current scan position.  Similarly, for a (fast) moving
#    target the reference frame of the new group is the first frame
#    at the current scan position, thus each mosaic is treated
#    separately.
#
#    When argument TELEOFF is true, _GENERATE_TELE_OFFSETS_ is invoked
#    and the derived offsets are used to register with a shift of origin;
#    otherwise _GENERATE_OFFSETS_ is the work horse.
#
# Language:
#    Perl5
#
# Arguments:
#    COMPLETE = REAL (Given)
#       Completeness of matched features for registration between two
#       frames to be accepted.  It must be in the range 0.2 to 1.0. [0.4]
#    MINPIX = INTEGER (Given)
#       Minimum number of contiguous pixels above the PERCENTILE level
#       to be considered a registration feature.  It must be at least 6.
#       [9]
#    MOVING_TARGET = LOGICAL (Read)
#       If true (1), the source is a moving target and frames are to
#       register the moving target not the fixed stars.  [0]
#    PERCENTILE = REAL (Given)
#       Percentile threshold for locating objects to register frames.
#       It must be in the range 75 to 99.9.  [98]
#    TELEOFF = LOGICAL (Given)
#       If true (1), it will just use the telescope offsets to register.
#       If false (0), it will attempt automatic registration.  [0]
#
# Notes:
#    -  This primitive is suitable for UFTI, IRCAM, and Michelle
#    in imaging mode.
#    -  Processing only occurs for object and sky frames, and when
#    steering header MAKE_MOSAIC is true.
#    -  The steering header CYCLE_NUMBER specifies the recipe-cycle
#    number.
#    -  Steering header SCAN_INDEX specifies whether or not there is
#    a scan; if defined, this provides the index of the scan position.
#    This in turn is used to obtain the scan cycle number from
#    the array accessed by reference in the user header SCAN_CYCLES.
#    -  The group of mosaics is accessed through user header
#    MOSAIC_GROUP.
#    -  The _GENERATE_OFFSETS_ argument CENTRAL_SOURCE is TRUE.
#    Thus matching the centroids of a central source is attempted if
#    automatic registration fails.
#    -  For a moving target, the reference frame (the first "_dp" frame)
#    must exist on the second and subsequent cycles, or an error occurs.
#    -  The frames registered using telescope offsets are reported.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2002 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Arguments
# =========

# Determine whether or not telescope offsets should only be used.
    my $usetele = $_GENERATE_OFFSETS_NOD_{TELEOFF};
    $usetele = defined( $usetele ) ? $usetele : 0;

# Obtain the parameters for the detection.
    my ( $complete, $minpix, $percentile );
    if ( ! $usetele ) {
       $percentile = ( $_GENERATE_OFFSETS_NOD_{PERCENTILE} || 98 );
       $minpix = ( $_GENERATE_OFFSETS_NOD_{MINPIX} || 9 );
       $complete = ( $_GENERATE_OFFSETS_NOD_{COMPLETE} || 0.4 );
    }

# Is there a moving target?
    my $moving_target = $_GENERATE_OFFSETS_NOD_{MOVING_TARGET};
    $moving_target = defined( $moving_target ) ? $moving_target : 0;

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Test whether or not it is time to make a mosaic.
       my $makemos = $Frm->uhdr( "MAKE_MOSAIC" );
       if ( $makemos ) {

# Obtain the cycle number.  Default to zero if undefined, so that recipes
# which do not support this feature will continue to work.
          my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
          $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Determine whether this is part of a scan.
          my $scanindex = $Frm->uhdr( "SCAN_INDEX" );

# Obtain the scan cycle number.  This is the number of cycles of
# the recipe at the current scan position.
          my ( $scan_cycleno, $mosGrp );
          if ( defined( $scanindex ) ) {
             my $scan_cycleref = $Grp->uhdr( "SCAN_CYCLES" );
             $scan_cycleno = @$scan_cycleref[ $scanindex ];

# Obtain the group of mosaics.
             $mosGrp = $Grp->uhdr( "MOSAIC_GROUP" );

# The main test below is now for scan index.  Thus for non-scanned
# data, we substitute the original recipe-cycle number.
          } else {
             $scan_cycleno = $cycleno;
          }

# Make a local $Grp containing just the differenced pairs.
          {
             my $Grp = $Grp->uhdr( "DIFFERENCE_GROUP" );

# Select those members in the current recipe cycle.
             my $cycleGrp = $Grp->subgrp( CYCLE_NUMBER => $cycleno );

# Form the group to process.
# ==========================

# First cycle
# -----------
# For the first cycle of a single cycle mosaic, make a local $Grp
# containing just the current cycle.  Note the { to start a new context.
             my ( $tempGrp, $tempFrm, $scanGrp );
             if ( $scan_cycleno == 0 ) {
                $tempGrp = $cycleGrp;

# Moving target, later cycles
# ---------------------------
# For a moving target we want to register to the first frame, because
# it is the reference frame for the moving target.  The motions are
# calculated with respect to its time of observation.  We do not
# register to the co-added mosaic (as happens for stationary sources)
# or even the first cycle mosaic, because the fiducial stars are
# extended and thus shifts the centroid of the sources.  There is no
# guarantee that telescope offsets will be used.  The mosaic stellar
# images are also possibly multiple, which can confuse the registration.
# It's a two step process...
             } elsif ( $moving_target ) {

# First step is to create a frame, which is first differenced pair,
# along with its associated headers.  N.B. this suffix should not be
# tidied in _NOD_..._TIDY_ scripts.  This is something of a kludge, but
# with all the various groups, some temporary, it's hard know what
# frames are available.  It needs a method which finds the first
# created frame which exists for a given frame number.  Any will do.
# It's the header information which is needed.  An alternative might be
# to create differently named user headers in the master group to record
# the times.  For a scan map, obtain the appropriate frame using the
# scan index.
                $tempFrm = new $Frm;
                if ( defined( $scanindex ) ) {
                   $scanGrp = $Grp->subgrp( "SCAN_INDEX" => $scanindex );
                   $tempFrm->file( $scanGrp->frame( 0 )->file );
                } else {
                   $tempFrm->file( $Grp->frame( 0 )->file );
                }

# Here's the aforementioned kludge, testing for a suitable reference
# frame's existence.
                my ( $tin, $tout ) = $tempFrm->inout( "_dp" );
                $tempFrm->file( $tout );
                if ( ! $tempFrm->file_exists() ) {
                   orac_throw "Reference frame $tout for moving target does not exist.\n";
                }

# Copy the headers once the reference frame is known.
                if ( defined( $scanindex ) ) {
                   %{ $tempFrm->hdr } = %{ $scanGrp->frame( 0 )->hdr };
                   %{ $tempFrm->uhdr } = %{ $scanGrp->frame( 0 )->uhdr };
                } else {
                   %{ $tempFrm->hdr } = %{ $Grp->frame( 0 )->hdr };
                   %{ $tempFrm->uhdr } = %{ $Grp->frame( 0 )->uhdr };
                }

# The second step is to create the temporary group and insert the
# reference frame and the current recipe cycle's members.
                $tempGrp = new $Grp;
                $tempGrp->push( $tempFrm );
                $tempGrp->push( $cycleGrp->members );

# Later cycles
# ------------
# On later cycles a mosaic file should exist, and we shall register
# with that as the reference frame.  So place the file into a temporary
# frame pushed onto a temporary $Grp-like group.  Copy its headers
# across to the temporary frame too.  Then append the members of the
# subgroup.  For a scan map, obtain the appropriate mosaic using the
# scan index.
             } else {
                $tempFrm = new $Frm;
                if ( defined( $scanindex ) ) {
                    $scanGrp = $mosGrp->subgrp( "SCAN_INDEX" => $scanindex );
                    $tempFrm->file( $scanGrp->frame( 0 )->file );
                    %{ $tempFrm->hdr } = %{ $scanGrp->frame( 0 )->hdr };
                    %{ $tempFrm->uhdr } = %{ $scanGrp->frame( 0 )->uhdr };
                } else {
                    $tempFrm->file( $Grp->file );
                    %{ $tempFrm->hdr } = %{ $Grp->hdr };
                    %{ $tempFrm->uhdr } = %{ $Grp->uhdr };
                }

# Create the temporary group and insert the reference frame and the current
# recipe cycle's members.
                $tempGrp = new $Grp;
                $tempGrp->push( $tempFrm );
                $tempGrp->push( $cycleGrp->members );
             }

# Telescope offsets
# =================
             if ( $usetele ) {

# Make a local $Grp.
                my $Grp = $tempGrp;

# Use telescope offsets from the headers to register the frames.
                _GENERATE_TELE_OFFSETS_ MOVING_TARGET=$moving_target

             } else {

# Generate the offsets
# ====================

# Make a local $Grp.
                my $Grp = $tempGrp;

# Call the generic primitive which does most of the work.  Use central
# source as a backup.
                _GENERATE_OFFSETS_ PERCENTILE=$percentile MINPIX=$minpix COMPLETE=$complete CENTRAL_SOURCE=TRUE  MOVING_TARGET=$moving_target
             }

# End of scope of local $Grp aka $diffGrp.
          }
       }
    }

# Podule
# ======

=head1 NAME

_GENERATE_OFFSETS_NOD_ -- Finds the offsets between the frames in a NOD recipe.

=head1 DESCRIPTION

This primitive finds the pixel offsets between the target frames in
the current $Grp of a NOD recipe.  The primitive itself forms new
groups to be registered by other primitives.  For the first cycle of
the recipe, the primitive forms a group of the current recipe cycle's
difference-pair frames, accessed by the internal group header
DIFFERENCE_GROUP.  On subsequent cycles a new group is formed,
comprising the integrated mosaic followed by the difference pairs in
the current cycle, so that there is a common registration and that
mosaics can be co-added.  For a moving target, the first frame of the
whole observation is the first member of the group after the first
cycle.

In the case of a series of mosaics in a scan, the test is for the
first recipe cycle at a given scan position.  On the second and
subsequent cycles, the new group commences with the mosaic for the
current scan position.  Similarly, for a (fast) moving target the
reference frame of the new group is the first frame at the current
scan position, thus each mosaic is treated separately.

When argument TELEOFF is true,
L<_GENERATE_TELE_OFFSETS_|_GENERATE_TELE_OFFSETS_> is invoked and the
derived offsets are used to register with a shift of origin; otherwise
L<_GENERATE_OFFSETS_|_GENERATE_OFFSETS_> is the work horse.

=head1 ARGUMENTS

=over 4

=item COMPLETE = REAL (Given)

Completeness of matched features for registration between two
frames to be accepted.  It must be in the range 0.2 to 1.0. [0.4]

=item MINPIX = INTEGER (Given)

Minimum number of contiguous pixels above the PERCENTILE level
to be considered a registration feature.  It must be at least 6.
[9]

=item MOVING_TARGET = LOGICAL (Read)

If true (1), the source is a moving target and frames are to
register the moving target not the fixed stars.  [0]

=item PERCENTILE = REAL (Given)

Percentile threshold for locating objects to register frames.
It must be in the range 75 to 99.9.  [98]

=item TELEOFF = LOGICAL (Given)

If true (1), it will just use the telescope offsets to register.
If false (0), it will attempt automatic registration.  [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UFTI, IRCAM, and Michelle in imaging mode.

=item *

Processing only occurs for object and sky frames, and when
steering header MAKE_MOSAIC is true.

=item *

The steering header CYCLE_NUMBER specifies the recipe-cycle number.

=item *

Steering header SCAN_INDEX specifies whether or not there is
a scan; if defined, this provides the index of the scan position.
This in turn is used to obtain the scan cycle number from
the array accessed by reference in the user header SCAN_CYCLES.

=item *

The group of mosaics is accessed through user header MOSAIC_GROUP.

=item *

The _GENERATE_OFFSETS_ argument CENTRAL_SOURCE is TRUE.
Thus matching the centroids of a central source is attempted if
automatic registration fails.

=item *

For a moving target, the reference frame (the first "_dp" frame)
must exist on the second and subsequent cycles, or an error occurs.

=item *

The frames registered using telescope offsets are reported.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
