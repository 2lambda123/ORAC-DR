#+
# Name:
#    _MAKE_FLAT_FROM_NORMALISED_GROUP_
#
# Purpose:
#    Makes a flat from the current group of masked frames.
#
# Language:
#    Perl5
#
# Description:
#    This primitive makes a self flat from the current group and files
#    it in the flat index.  Each member of the group is expected to
#    have a significant fraction (>~5%) of pixels masked, say a quadrant
#    containing the major source or many large sources; and be
#    normalised to one of the frames.  The primitive uses a median to
#    combine pre-normalised frames pixel by pixel, and then divides
#    the resultant image by its mean to form the flat field.  The 
#    primitive files the resultant flat in its calibration index. 
#
# Arguments:
#    METHOD = CHARACTER (Given)
#       The method used to combine frames to form the flat.  See
#       parameter METHOD of CCDPACK/MAKEFLAT (SUN/139) for the options.
#       The main two in practice will be "fastmed" or "broadened".  The
#       former is an unweighted median but is unsuitable for a
#       self-flat recipe, as it creates a biassed histogram in the
#       flat-fielded frames, from those pixels divided by themselves.
#       The "broadened" option averages the central few contributing 
#       pixels and thus avoids the artefact in the histogram, and
#       therefore should be used for self-flat creation.  This option
#       is more robust too.  ["broadened"]
#
# Notes:
#    -  This primitive is suitable for infrared imaging instruments.
#    -  Processing only occurs for object and sky frames, and when the
#    steering header MAKE_FLAT is true.
#    -  There is special behaviour for a combined polarimetry flat
#    (see "Output Data").  The string "pol" in the filter name is used
#    to indicate polarimetry data.
#    -  The flat is displayed.
#
# Tasks:
#    CCDPACK: MAKECAL; KAPPA: CDIV, FITSMOD, NDFCOPY, STATS.
#
# Output Data:
#    The flat field.  It is called is "flat_<filter>_<groupnumber>" for 
#    the first cycle, and "flat_<filter>_<groupnumber>_c<cyclenumber>"
#    for subsequent cycles, where <groupnumber> is the frame number of
#    the group, <filter> is the filter name, and <cyclenumber> is the
#    cycle number derived from steering header CYCLE_NUMBER. 
#
#    An exception is for polarimetric data, where the name becomes
#    flat_<filter>_pol<waveplate_angle>_<groupnumber>.  The
#    <waveplate_angle> is the integer part of the angle, e.g. 22, 67,
#    from internal header ORAC_WAVEPLATE_ANGLE.  Subsequent cycles for
#    polarimetry also have the "_c<cyclenumber>" suffix, but the cycle
#    comes from steering header POL_CYCLE_NUMBER.  When steering header
#    WAVEPLATE_FLAT is false (0), copies of the flat are made, one
#    for each angle, using the above nomenclature.  Each has its
#    waveplate angle set to its nominal angle.  This allows a single
#    ORAC_WAVEPLATE_ANGLE rule entry irrespective of whether all waveplate 
#    angles were combined to make a flat or not.

# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2004 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT" ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Test whether or not it is time to make a flat.
       my $makeflat = $Frm->uhdr( "MAKE_FLAT" );
       if ( $makeflat ) {

# Form a list of input file names for MAKECAL from the other members
# of the group.  This is not as obvious as it sounds since we are
# trying to do this by looking at the current file values for each
# Frame object in the loop.  First time around everything is fine.
# Second time around we realise that the previous frames now have the
# wrong names since they have been flat-fielded etc.  We now have to
# construct the input names from the template.  The template is the
# current frame name.
          $Grp->template( $Frm->file );

# Arguments
# =========

# Obtain the value for the combination method.
          my $method = ( $_MAKE_FLAT_FROM_NORMALISED_GROUP_{METHOD} || "broadened" );

# Make lists of files to process
# ==============================

# Form a list of input file names for CCDPACK tasks.  Set up the object
# list assuming that everything in the Group members list contains the
# file pointer to pre-flatfielded data.
          my @objects = $Grp->membernames;
          my $objlist = join( ",", @objects );

# Create text file to hold the list of input files, one per line.  This
# is needed because expanded lists of files may make the command line too
# long for the ADAM message system.
          unlink( "objlist.inlist$$" );
          open ( my $fh_inlist, ">objlist.inlist$$" ) ||
            orac_throw "Unable to open objlist.inlist$$ to create a list of frames to process.  Error: $!.\n";
          print $fh_inlist join( "\n", @objects ), "\n";
          close ( $fh_inlist );

# Make a flat which is not normalised
# ===================================

# Assign the other parameters.  Note that output flat is hardwired for
# the moment.
          my $uflat = "uflat_" . $Grp->groupid;
          my $param1 = "in='^objlist.inlist$$' out=$uflat";
          my $param2 = "sigmas=2.0 expose=1 logfile=! reset accept"; 
          my $user = "method=$method";

# Median filter the intra-normalised and masked frames to produce an
# un-normalised flatfield.
          $Mon{ "ccdpack_red" }->obeyw( "makecal", "$param1 $user $param2" );
          unlink( "objlist.inlist$$" );

# Generate the flat's name.
# =========================

# Obtain the filter name.  Remove []() or replace characters which would
# confuse HDS.
          my $filter = $Frm->uhdr( "ORAC_FILTER" );
          $filter =~ s/\./p/g;
          $filter =~ tr/\(\)\[\]/d/;

# Is this a polarimetric frame?
          my $poldata = $Frm->uhdr( "ORAC_POLARIMETRY" );

# See if this is polarimetry data requiring separate flats for each waveplate
# angle, from the steering header.  May also need eventually to put in a filter
# name.
          my $waveplate_flat = $Frm->uhdr( "WAVEPLATE_FLAT" );
          $waveplate_flat = defined( $waveplate_flat ) ? $waveplate_flat: 0;

# Get the cycle number.  Supply a default for recipes not supporting
# this yet.  Can't use ( || ) syntax because 0 is the default.
          my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
          $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Get the polarimetry cycle number.  Supply a default for recipes not
# supporting this yet.  Can't use ( || ) syntax because 0 could be the
# default, inherited from the oridnary cycle number.
          if ( $poldata ) {
             my $pol_cycleno = $Frm->uhdr( "POL_CYCLE_NUMBER" );
             $cycleno = defined( $pol_cycleno ) ? $pol_cycleno : $cycleno;
          }

# Obtain the flat number.  This may have an _subgrp suffix.  Since we take care
# of different cycles in the naming, we remove the ugly _subgrp strings.
          my $flatno = $Grp->groupid;
          $flatno =~ s/_subgrp//g;

# Specify the file cycle suffix.
          my $cyclesuffix = "";
          if ( $cycleno > 0 ) {
             $cyclesuffix = "_c" . $cycleno;
          }
 
# There is a different naming rule for polarimetry data.
          my $out;
          if ( $poldata ) {

# Obtain the integer part of the waveplate angle for the current group.
# No need to had pol in the name twice, so remove it from the filter name.
             my $wplangle =  $Frm->uhdr( "ORAC_WAVEPLATE_ANGLE" );
             my $int_wplangle = int( $wplangle + 0.1 );
             $filter =~ s/\+pol//;

# Generate the polarimetry flat's name.  Here the flats are grouped by
# waveplate angle.
             if ( $waveplate_flat ) {
                $out = "flat_${filter}_pol${int_wplangle}_$flatno$cyclesuffix";

# Since all angles are combined just set the first to a nominal 0 degrees.
# Copies for other angles are made later.  They rely on the pol0 being
# present to change the name for each flat.
             } else {
                $out = "flat_${filter}_pol0_$flatno$cyclesuffix";
             }

          } else {

# Generate the flat's name.
             $out = "flat_${filter}_" . $flatno . $cyclesuffix;
          }

# Normalise the flat
# ==================

# Obtain the mean of the combined frame.
          $Mon{ "kappa_mon" }->obeyw( "stats", "ndf=$uflat" );

# Extract the mean of the frame.
          ( my $ORAC_STATUS, my $mean ) = $Mon{ "kappa_mon" }->get( "stats", "mean" );

# Assign the parameters.
          $param1 = "in=$uflat out=$out scalar=$mean title=\'Flat field\'";

# Normalise the flat field to have a mean of one.
          $Mon{ "kappa_mon" }->obeyw( "cdiv", "$param1" );

# Delete the non-normalised flat.
          _DELETE_A_FRAME_ FRAME=$uflat

# Record and display the flat
# ===========================

# Set the current flat in the calibration object.
          _FILE_FLAT_ NAME=$out
     
# Report the status of the processing.
          orac_print "Frames $objlist used for flat\n";

# Polarimetry special case
# ========================

# WAVEPLATE_FLAT is true means that the calling primitives will
# already invoke this script for each waveplate angle.  To retain
# a common rules file for flats, there must be flats at each angle
# independent of the value of the WAVEPLATE_FLAT switch.  So when
# WAVEPLATE_FLAT is false, we have to make and store frames for
# the other three polarimetry angles.  This is achieved by file
# copying and editing the waveplate-angle header.
          if ( $poldata && ! $waveplate_flat ) {
             orac_print "Copying flats for the other waveplate angles.\n";

# First correct the waveplate angle header of the saved flat, in
# case it was not 0 matching the assigned name.
             my %keywords =  $Frm->translate_hdr( "ORAC_WAVEPLATE_ANGLE" );
             my @wplakey = keys( %keywords );
             $param1 = "ndf=$out keyword=$wplakey[ 0 ] edit=update value=0 position=!";
             $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "$param1 comment=\\\$C" );

# 45 degrees
# ----------
# Generate a new name and copy the frame.
             my $in = $out;
             $out =~ s/pol0/pol45/;
             $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "in=$in out=$out" );

# Correct its waveplate-angle header.
             $param1 = "ndf=$out keyword=$wplakey[ 0 ] edit=update value=45 position=!";
             $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "$param1 comment=\\\$C" );

# Set the current flat in the calibration object.
             _FILE_FLAT_ NAME=$out

# 22.5 degrees
# ------------
# Generate a new name and copy the frame.
             $out =~ s/pol45/pol22/;
             $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "in=$in out=$out" );

# Correct its waveplate-angle header.
             $param1 = "ndf=$out keyword=$wplakey[ 0 ] edit=update value=22.5 position=!";
             $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "$param1 comment=\\\$C" );

# Set the current flat in the calibration object.
             _FILE_FLAT_ NAME=$out

# 67.5 degrees
# ------------
# Generate a new name and copy the frame.
             $out =~ s/pol22/pol67/;
             $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "in=$in out=$out" );

# Correct its waveplate-angle header.
             $param1 = "ndf=$out keyword=$wplakey[ 0 ] edit=update value=67.5 position=!";
             $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "$param1 comment=\\\$C" );

# Set the current flat in the calibration object.
             _FILE_FLAT_ NAME=$out

# 90 degrees
# ----------
# Generate a new name and copy the frame.
                $out =~ s/pol67/pol90/;
                $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "in=$in out=$out" );

# Correct its waveplate-angle header.
                $param1 = "ndf=$out keyword=$wplakey[ 0 ] edit=update value=90 position=!";
                $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "$param1 comment=\\\$C" );

# Set the current flat in the calibration object.
                _FILE_FLAT_ NAME=$out

# 135 degrees
# -----------
# Generate a new name and copy the frame.
                $out =~ s/pol90/pol135/;
                $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "in=$in out=$out" );

# Correct its waveplate-angle header.
                $param1 = "ndf=$out keyword=$wplakey[ 0 ] edit=update value=135 position=!";
                $Mon{ "ndfpack_mon" }->obeyw( "fitsmod", "$param1 comment=\\\$C" );

# Set the current flat in the calibration object.
                _FILE_FLAT_ NAME=$out

          }

# Display the image.
          _DISPLAY_FLAT_IMAGE_

          orac_print "\n";
       }
    }

# Podule
# ======

=head1 NAME

_MAKE_FLAT_FROM_NORMALISED_GROUP_ -- Makes a flat from the current group of masked frames.

=head1 DESCRIPTION

This primitive makes a self flat from the current group and files
it in the flat index.  Each member of the group is expected to
have a significant fraction (E<gt>~5%) of pixels masked, say a quadrant
containing the major source or many large sources; and be
normalised to one of the frames.  The primitive uses a median to
combine pre-normalised frames pixel by pixel, and then divides
the resultant image by its mean to form the flat field.  The 
primitive files the resultant flat in its calibration index. 

=head1 ARGUMENTS

=over 4

=item METHOD = CHARACTER (Given)

The method used to combine frames to form the flat.  See
parameter METHOD of CCDPACK/MAKEFLAT (SUN/139) for the options.
The main two in practice will be "fastmed" or "broadened".  The
former is an unweighted median but is unsuitable for a
self-flat recipe, as it creates a biassed histogram in the
flat-fielded frames, from those pixels divided by themselves.
The "broadened" option averages the central few contributing 
pixels and thus avoids the artefact in the histogram, and
therefore should be used for self-flat creation.  This option
is more robust too.  ["broadened"]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for infrared imaging instruments.

=item *

Processing only occurs for object and sky frames, and when the
steering header MAKE_FLAT is true.

=item *

There is special behaviour for a combined polarimetry flat
(see L<"OUTPUT DATA">).  The string "pol" in the filter name is used
to indicate polarimetry data.

=item *

The flat is displayed.

=back

=head1 TASKS

CCDPACK: MAKECAL; KAPPA: CDIV, FITSMOD, NDFCOPY, STATS.

=head1 OUTPUT DATA

The flat field.  It is called is
"flat_E<lt>filterE<gt>_E<lt>groupnumberE<gt>" for the first cycle, and
"flat_E<lt>filterE<gt>_E<lt>groupnumberE<gt>_cE<lt>cyclenumberE<gt>"
for subsequent cycles, where E<lt>groupnumberE<gt> is the frame number
of the group, E<lt>filterE<gt> is the filter name, and
E<lt>cyclenumberE<gt> is the cycle number derived from steering header
CYCLE_NUMBER.

An exception is for polarimetric data, where the name becomes
flat_E<lt>filterE<gt>_polE<lt>waveplate_angleE<gt>_E<lt>groupnumberE<gt>.
The E<lt>waveplate_angleE<gt> is the integer part of the angle, e.g.
22, 67, from internal header ORAC_WAVEPLATE_ANGLE.  Subsequent cycles for
polarimetry also have the "_cE<lt>cyclenumberE<gt>" suffix, but the
cycle comes from steering header POL_CYCLE_NUMBER.  When steering
header WAVEPLATE_FLAT is false (0), copies of the flat are made, one
for each angle, using the above nomenclature.  Each has its
waveplate-angle set to its nominal angle.  This allows a single
ORAC_WAVEPLATE_ANGLE rule entry irrespective of whether all waveplate angles
were combined to make a flat or not.

=head1 AUTHORS

Malcolm J. Currie (mjc@star.rl.ac.uk)

=head1 COPYRIGHT

Copyright (C) 1998-2004 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
