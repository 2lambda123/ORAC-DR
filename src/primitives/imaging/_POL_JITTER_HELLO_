#+
# Name:
#    _POL_JITTER_HELLO_
#
# Purpose:
#    Sets up data-reduction tasks for POL_JITTER recipes.
#
# Language:
#    Perl5
#
# Description:
#    Sets up CCDPACK-related global parameters for POL_JITTER
#    recipes.  The settings are as follows.
#
#    -  The readout bounds in the internal headers ORAC_X_LOWER_BOUND,
#    ORAC_Y_LOWER_BOUND, ORAC_X_UPPER_BOUND, ORAC_Y_UPPER_BOUND define
#    the pixel limits for processing, i.e. there are no bias strips and
#    interpolation direction.  
#    -  Error processing is enabled.  The analogue-to-digital conversion
#    is obtained from the internal header ORAC_GAIN.  The readout noise
#    is taken from the tabulated values given on the instrument Web
#    sites, depending on the readout mode given by internal header
#    ORAC_READMODE, and by the speed given by internal header
#    ORAC_SPEED_GAIN for UFTI.
#    -  There is no deferred charge.
#    -  Position list processing tasks expect to find the names of lists
#    stored within NDFs.
#    -  Logging is to the terminal.
#    -  The data type of NDF arrays is preserved.
#    -  Does not detect saturated pixels.
#    -  Parameters are neither saved from or to a `restoration' file.
#
# Notes:
#    -  This primitive is suitable for UFTI, IRCAM, and Michelle in
#    imaging mode.
#
# Tasks:
#    CCDPACK: CCDSETUP.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2001 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Read readout bounds from the headers.
    my $x1 = $Frm->uhdr( "ORAC_X_LOWER_BOUND" );
    my $x2 = $Frm->uhdr( "ORAC_X_UPPER_BOUND" );
    my $y1 = $Frm->uhdr( "ORAC_Y_LOWER_BOUND" );
    my $y2 = $Frm->uhdr( "ORAC_Y_UPPER_BOUND" );
    my $param1 = "extent=[$x1,$x2,$y1,$y2]";

# Obtain the instrument, read mode and gain header values.
    my $instrument = $Frm->uhdr( "ORAC_INSTRUMENT" );
    my $mode = $Frm->uhdr( "ORAC_READMODE" );
    my $padu = $Frm->uhdr( "ORAC_GAIN" );
    my ( $enoise, $rnoise, $speed );

    if ( $instrument =~ /^UFTI/ ) {

# Obtain the number of electrons per data number, and the readout
# speed.
       $padu = $Frm->uhdr( "ORAC_GAIN" );
       $speed = $Frm->uhdr( "ORAC_SPEED_GAIN" );

# Set the electron noise using typical values documented in the
# IRCAM Web pages.
       $enoise = 56;
       if ( $speed =~ /^Normal/ ) {
          if ( $mode =~ /^NDSTARE/ ) {
             $enoise = 26;
          } elsif ( $mode =~ /^10_NDSTARE/ ) {  
             $enoise = 12;
          }

       } elsif ( $speed =~ /^Fast/ ) {
         $enoise = 24;

       } elsif ( $speed =~ /^Higain/ ) {
          $enoise = 20;
          if ( $mode =~ /^10_NDSTARE/ ) {
             $enoise = 10;
          }
       }

# Likewise from IRCAM equivalent headers.
    } elsif ( $instrument =~ /IRCAM/ ) {

# Set the electron noise using typical values documented in the
# IRCAM Web pages.
       $enoise = 56;
       if ( $mode =~ /^NDSTARE/ ) {
          $enoise = 47;
       }

    } elsif ( $instrument =~ /Michelle/ ) {

# Set the electron noise using typical values documented in the
# IRCAM Web pages.  This value has to be determined.  Use a
# guesstimate for now.
       $enoise = 50;
    }

# Derive the read noise in ADU.
    $rnoise = $enoise / $padu;

# Define the hidden variables for CCDPACK setup.
    my $param2 = "saturate=no preserve=yes genvar=yes restore=no logto=terminal adc=$padu rnoise=$rnoise bounds=! direction=! deferred=! ndfnames=yes save=no";

# Execute commands.
    my $ORAC_STATUS = $Mon{'ccdpack_res'}->control('par_reset');
    $Mon{'ccdpack_res'}->obeyw('ccdsetup',"$param1 $param2 accept");

# Podule
# ======

=head1 NAME

_POL_JITTER_HELLO_ -- Sets up data-reduction tasks for POL_JITTER recipes.

=head1 DESCRIPTION

Sets up CCDPACK-related global parameters for POL_JITTER
recipes.  The settings are as follows.

=over 4

=item *

The readout bounds in the internal headers ORAC_X_LOWER_BOUND,
ORAC_Y_LOWER_BOUND, ORAC_X_UPPER_BOUND, ORAC_Y_UPPER_BOUND define the
pixel limits for processing, i.e. there are no bias strips and
interpolation direction.

=item *

Error processing is enabled.  The analogue-to-digital conversion is
obtained from the internal header ORAC_GAIN.  The readout noise is
taken from the tabulated values given on the instrument Web sites,
depending on the readout mode given by internal header ORAC_READMODE,
and by the speed given by internal header ORAC_SPEED_GAIN for UFTI.

=item *

There is no deferred charge.

=item *

Position list processing tasks expect to find the names of lists
stored within NDFs. 

=item *

Logging is to the terminal.

=item *

The data type of NDF arrays is preserved.

=item *

Does not detect saturated pixels.

=item *

Parameters are neither saved from or to a `restoration' file.

=back

=head1 NOTES

=over 4

This primitive is suitable for UFTI, IRCAM, and Michelle in imaging mode.

=back

=head1 TASKS

CCDPACK: CCDSETUP.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2001 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
