#+
# Name:
#    _CREATE_WCS_

# Purpose:
#    Corrects the headers of UKIRT imaging data to create an
#    AIPS-convention World Co-ordinate System.

# Language:
#    Perl5

# Description:
#    This primitive converts astrometric information in a UKIRT
#    pre-ORAC frame into an AIPS-convention World Co-ordinate System.
#    This is achieved by editing the headers in the FITS airlock.
#
#    The changes are listed below.
#    a) Put decimal degrees of RABASE in CRVAL1, and DECBASE in CRVAL2.
#    The comment includes a sexagesimal version of the co-ordinate.
#    b) Change CRPIXn to the centre of the frame or a supplied x-y
#    reference pixel.
#    c) Divide CDELTn by 3600 to convert to degrees.  Make CDELT1
#    negative.
#    d) Change CTYPE1 to "RA---TAN", CTYPE2 to "DEC--TAN".
#    e) Revise the comments for the above to adhere to the UKIRT FITS
#    document, orac0016-fith, e.g. CRVAL1's comment becomes "RA 
#    (hh:mm:ss.ss) at reference point [deg]" with the sexigesimal
#    position substituted.
#
#    Old IRCAM headers are also shuffled, reformatted, with new
#    comments to bring them into closer agreement with the UKIRT
#    FITS standard promulgated in orac-0016-fith.  This uses the
#    $ORAC_DATA_CAL/fits_reorder.lis steering file.
#
# Arguments:
#    XREF = REAL (Given)
#       The x pixel index corresponding to the base equatorial position.
#       This defaults to the centre of the array for IRCAM, Michelle, and
#       for UFTI sub-arrays along the RA axis; but 20 pixels into the
#       west half for UFTI.  If supplied beyond the range 0 to 1024 for
#       UFTI, 0 to 320 for Michelle, and 0 to 256 for IRCAM, or some
#       non-numeric value supplied, a warning is issued and the default
#       adopted.  []
#    YREF = REAL (Given)
#       The y pixel index corresponding to the base equatorial position.
#       This defaults to the centre of the array for IRCAM, Michelle, and
#       for UFTI sub-arrays along the Declination axis; but 25 pixels into
#       the south half for UFTI.  If supplied beyond the range 0 to 1024
#       for UFTI, 0 to 240 for Michelle, and 0 to 256 for IRCAM, or some
#       non-numeric value supplied, a warning is issued and the default
#       adopted.  []

# Notes:
#    - Editing only occurs for OBJECT and SKY frames, for which
#    there is no WCS.  This includes all editing steps.
#    -  Offsets of 23" N and 6" E are applied to the reference
#    position for UFTI polarimetry.
#    -  The location of the reference pixel is the biggest source
#    of error, and may vary systematically with telescope operator.
#    Comparison of real data with the defaults suggests errors
#    are typically +/-1" in each axis.
#    -  Following a successful introduction of a WCS, the current
#    AST Frame is SKY.  Any existing WCS Frames besides the default
#    three---PIXEL, GRID, AXIS---are lost. 
#    -  Problem IRCAM instrument names containing the Xi string
#    (during polarimetry and FP observations) are corrected.

# Output Data:
#    The modified NDF.

# Tasks:
#    KAPPA: ERASE, FITSMOD, WCSFRAME.

# Authors:
#    MJC: Malcolm J. Currie (JAC)
#    {enter_new_authors_here}

# History:
#    2000 July 16 (MJC):
#       Original version.
#    {enter_further_changes_here}

# Copyright:
#    Copyright (C) 2000 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.

#-

# Do headers need editing?
# ========================

# Determine which instrument is being used, and wether or not it is
# a polarimetric frame.
    my $instrument = $Frm->uhdr( "ORAC_INSTRUMENT" );
    my $polarimetry = $Frm->uhdr( "ORAC_FILTER" ) =~ m/pol/;

# Set the instrument to its correct value if it were IRCAM taken
# when using IRPOL too gave a weird name in the INSTRUME header.
    my $instval = " ";
    if ( $instrument =~ /Xi/ ) {
       $instrument = "IRCAM3";
       $instval = $instrument;
    }

# Do not want to redo a frame already converted, otherwise the scale
# will erroneously be reduced each pass through this primitive.
    my $needs_editing = 0;
    if ( $instrument =~ /^UFTI/ ) {
       $needs_editing = $Frm->hdr( "CTYPE1" ) eq "Detector Columns";

# **** To be changed once the FITS headers are agreed. ****
    } elsif ( $instrument =~ /^Michelle/ ) {
       $needs_editing = $Frm->hdr( "CTYPE1" ) eq "Detector Columns";
    } elsif ( $instrument =~ /^IRCAM/ ) {
       $needs_editing = ! defined( $Frm->hdr( "CTYPE1" ) );
    }

# Modify the headers should only be performed on OBJECT or SKY
# frames, which have not already been converted.  
    my $correct_obstype = $Frm->uhdr( "ORAC_OBSTYPE" ) eq "OBJECT" ||
                          $Frm->uhdr( "ORAC_OBSTYPE" ) eq "SKY";
    if ( $correct_obstype && $needs_editing ) {

# Set the maximum reference pixel index.
       my ( $xmaxref, $ymaxref );
       if ( $instrument =~ /^UFTI/ ) {
          $xmaxref = 1024;
          $ymaxref = 1024;
       } elsif ( $instrument =~ /^Michelle/ ) {
          $xmaxref = 320;
          $ymaxref = 240;
       } elsif ( $instrument =~ /^IRCAM/ ) {
          $xmaxref = 256;
          $ymaxref = 256;
       }

       my $ndf = $Frm->file;

# Obtain the reference position.
# ==============================

# First see if the reference positions are supplied as arguments.
       my $xref = $_CREATE_WCS_{XREF};
       my $yref = $_CREATE_WCS_{YREF};

# Validate the x position.
       if ( defined( $xref ) ) {
          if ( $xref =~ /^-?(?:\d+(?:\.\d*)?|\.\d+)$/ ) {
             orac_warn "Programming error: x reference pixel '$xref' " .
                       "is not numeric.  Using default.\n";
             undef $xref;
          } elsif ( $xref < 0 || $xref > $xmaxref ) {
             orac_warn "Programming error: x reference pixel '$xref' " .
                       "is out of range.  Using default.\n";
             undef $xref;
          }
       }

# Validate the y position.
       if ( defined( $yref ) ) {
          if ( $yref =~ /^-?(?:\d+(?:\.\d*)?|\.\d+)$/ ) {
             orac_warn "Programming error: y reference pixel '$yref' " .
                       "is not numeric.  Using default.\n";
             undef $yref;
          } elsif ( $yref < 0 || $yref > $ymaxref ) {
             orac_warn "Programming error: y reference pixel '$yref' " .
                       "is out of range.  Using default.\n";
             undef $yref;
          }
       }

       if ( ! ( defined( $xref ) && defined( $yref ) ) ) {
 
# At least one was not given so define approximate positions with respect
# to the frame centre.

# Find the bounds of the NDF.
          my $ORAC_STATUS;
          $Mon{"ndfpack_mon"}->obeyw("ndftrace", "ndf=$ndf");

# Extract the bounds of the frame.
          ( $ORAC_STATUS, my @lbnd ) = $Mon{"ndfpack_mon"}->get("ndftrace","lbound");
          ( $ORAC_STATUS, my @ubnd ) = $Mon{"ndfpack_mon"}->get("ndftrace","ubound");

# Find the mid points.
          my $xmid = nint( ( $lbnd[ 0 ] + $ubnd[ 0 ] ) / 2 );
          my $ymid = nint( ( $lbnd[ 1 ] + $ubnd[ 1 ] ) / 2 );

# Find the dimensions.
          my $xdim = $ubnd[ 0 ] - $lbnd[ 0 ] + 1;
          my $ydim = $ubnd[ 1 ] - $lbnd[ 1 ] + 1;

# Set an x reference pixel is not supplied as an argument.
# UFTI is at the centre for a sub-array along an axis but offset slightly
# for a sub-array to avoid the joins between the four sub-array sections
# of the frame.  There are no such joins for IRCAM.
          if ( ! defined( $xref ) ) {
             if ( $instrument =~ /^UFTI/ ) {
                if ( $xdim == 1024 ) {
                   $xref = $xmid + 20;
                } else {
                   $xref = $xmid;
                }
             } else {
                $xref = $xmid;
             }

             if ( $polarimetry ) {
                $xref = $xref - 65.5;
             }
          }

# Repeat for y position.
          if ( ! defined( $yref ) ) {
             if ( $instrument =~ /^UFTI/ ) {
                if ( $ydim == 1024 ) {
                   $yref = $ymid - 25;
                } else {
                   $yref = $ymid;
                }
             } else {
                $yref = $ymid;
             }

             if ( $polarimetry ) {
                $yref = $yref + 253;
             }
          }
       }

# Obtain headers.
# ===============

# First the reference equatorial position.
       my $rabase = $Frm->uhdr( "ORAC_RABASE" );
       my $decbase = $Frm->uhdr( "ORAC_DECBASE" );

# Then the plate scale and where to insert the FITS cards.
# For UFTI, the headers already exist so no new location
# is necessary; in contrast IRCAM lacks these headers so
# insert before the MEANRA keyword.
       my $incrx = $Frm->uhdr( "ORAC_RASCALE" );
       my $incry = $Frm->uhdr( "ORAC_DECSCALE" );
       my $insert_card;
       if ( $instrument =~ /^UFTI/ ) {
          $insert_card = " ";

       } elsif ( $instrument =~ /^Michelle/ ) {
          $insert_card = " ";

       } elsif ( $instrument =~ /^IRCAM/ ) {

# There was a time when CROTA2 was not written to the headers.
# Therefore test for its existence, and if it's absent use the
# next card before MEANRA.
          if ( defined ( $Frm->uhdr( "ORAC_ROTATION" ) ) ) {
             my %keywords = $Frm->translate_hdr( "ORAC_ROTATION" );
             my @rotkey = keys( %keywords );
             $insert_card = "($rotkey[ 0 ]) ";
          } else {
             $insert_card = "(MEANRA) ";
          }
       }

# Convert co-ordinate units.
# ==========================

# Correct the increments from arcseconds to degrees.  Format
# them so header reading picks up the exponent.
       $incrx /= -3600.0;
       $incry /= 3600.0;
       my $fs_incrx = sprintf( "%14.6e", $incrx );
       my $fs_incry = sprintf( "%14.6e", $incry );

# Convert RA to Sexagesimal for the comment.
       my $rah = int( $rabase );
       my $rares = $rabase - $rah;
       my $ram = int( 60.0 * $rares );
       $rares -= $ram / 60.0;
       my $ras = sprintf( "%5.2f", 3600.0 * $rares );

# Convert Declination to Sexagesimal for the comment.
       my $decsign = "+";
       if ( $decbase < 0 ) {
          $decsign = "-";
       }
       my $decres = abs( $decbase );
       my $decd = int( $decres );
       $decres = $decres - $decd;
       my $decm = int( 60.0 * $decres );
       $decres -= $decm / 60.0;
       my $decs = sprintf( "%4.1f", 3600.0 * $decres );

# Convert RA from hours to degrees.
       $rabase *= 15.0;
       my $fs_rabase = sprintf( "%14.6e", $rabase );

# Create the FITSMOD steering file.
# =================================

       my $table = "fitsmod$$.lis";
       unlink( $table );

# Open the steering file of editing instructions.  For IRCAM, prepend
# the WCS-creation editing instructions with a reordering and tidying
# of the FITS headers into something readable and more pleasing to the
# human viewer.  Also the WCS headers do not exist so a different
# FITSMOD editing command is needed.
       my $cmd;
       if ( $instrument =~ /^UFTI/ ) { 
          open ( STEERING, ">$table" );
          $cmd = "U";

       } elsif ( $instrument =~ /^Michelle/ ) {
          open ( STEERING, ">$table" );
          $cmd = "U";

       } elsif ( $instrument =~ /^IRCAM/ ) {

# Defines the file-copy function.
          use File::Copy;

# Note there was a bug in FITSMOD up to V0.15-3 which prevents the
# IRCAM shuffle from working.  While some changes to the steering
# file could circumvent the problem, it would make the reordering
# steering file hard to follow and support.
          my $reorder = "$ENV{ORAC_DATA_CAL}/fits_reorder.lis";
          if ( -e $reorder && starversion_gt( "KAPPA", 'V0.15-3' ) ) {
             copy ( $reorder, $table );
             open ( STEERING, ">>$table" );
          } else {
             open ( STEERING, ">$table" );
          }
          $cmd = "W";
       }

       print STEERING "$cmd CTYPE1$insert_card 'RA---TAN' Equatorial tangent-plane projection\n";
       print STEERING "$cmd CRPIX1$insert_card $xref Pixel at reference point along axis 1\n";
       print STEERING "$cmd CRVAL1$insert_card $fs_rabase RA ($rah:$ram:$ras) at reference point [deg]\n";
       print STEERING "$cmd CDELT1$insert_card $fs_incrx Increment per pixel at reference point [deg]\n";
       print STEERING "$cmd CUNIT1$insert_card 'deg' Physical units of axis 1\n";
       print STEERING "$cmd CTYPE2$insert_card 'DEC--TAN' Equatorial tangent-plane projection\n";
       print STEERING "$cmd CRPIX2$insert_card $yref Pixel at reference point along axis 2\n";
       print STEERING "$cmd CRVAL2$insert_card $decbase Dec ($decsign$decd:$decm:$decs) at reference point [deg]\n";
       print STEERING "$cmd CDELT2$insert_card $fs_incry Increment per pixel at reference point [deg]\n";
       print STEERING "$cmd CUNIT2$insert_card 'deg' Physical units of axis 2\n";
       print STEERING "U INSTRUME $instval \$C\n" unless $instval eq " ";
       close( STEERING );

# Edit the headers.
       $Mon{"ndfpack_mon"}->obeyw("fitsmod", "ndf=$ndf mode=file table=$table");
       unlink( $table );

       orac_print "Orac says: AIPS-convention world co-ordinate system added " .
                  "to headers of $ndf.  Reference pixel is ($xref,$yref)\n";

# Remove an existing WCS component, so that later when a new WCS is made,
# it will include a SKY co-ordinate frame.  As there may not already be a
# WCS component, make one with wcsframe.
       $Mon{"ndfpack_mon"}->obeyw("wcsframe", "ndf=$ndf frame=pixel");
       $Mon{"ndfpack_mon"}->obeyw("erase", "object=${ndf}.WCS ok");

# Create the SKY frame in the WCS component.
       $Mon{"ndfpack_mon"}->obeyw("wcsframe", "ndf=$ndf frame=sky");
       orac_print "Orac says: astrometry SKY co-ordinate frame created in $ndf.\n";

    }

# Podule
# ======

=head1 NAME

_CREATE_WCS_  -- Corrects the headers of UKIRT imaging data to create an AIPS-convention World Co-ordinate System.

=head1 DESCRIPTION

This primitive converts astrometric information in a UKIRT
pre-ORAC frame into an AIPS-convention World Co-ordinate System.
This is achieved by editing the headers in the FITS airlock.

The changes are listed below.

a) Put decimal degrees of RABASE in CRVAL1, and DECBASE in CRVAL2.
The comment includes a sexagesimal version of the co-ordinate.

b) Change CRPIXI<n> to the centre of the frame or a supplied x-y
reference pixel.

c) Divide CDELTI<n> by 3600 to convert to degrees.  Make CDELT1
negative.

d) Change CTYPE1 to "RA---TAN", CTYPE2 to "DEC--TAN".

e) Revise the comments for the above to adhere to the UKIRT FITS
document, orac0016-fith, e.g. CRVAL1's comment becomes "RA
(hh:mm:ss.ss) at reference point [deg]" with the sexigesimal
position substituted.

Old IRCAM headers are also shuffled, reformatted, with new
comments to bring them into closer agreement with the UKIRT
FITS standard promulgated in orac-0016-fith.  This uses the
F<$ORAC_DATA_CAL/fits_reorder.lis> steering file.

=head1 ARGUMENTS

=over 4

=item XREF = REAL (Given)

The I<x> pixel index corresponding to the base equatorial position.
This defaults to the centre of the array for IRCAM, Michelle, and
for UFTI sub-arrays along the RA axis; but 20 pixels into the
west half for UFTI.  If supplied beyond the range 0 to 1024 for
UFTI, 0 to 320 for Michelle, and 0 to 256 for IRCAM, or some
non-numeric value supplied, a warning is issued and the default
adopted.  []

=item YREF = REAL (Given)

The I<y> pixel index corresponding to the base equatorial position.
This defaults to the centre of the array for IRCAM, Michelle, and
for UFTI sub-arrays along the Declination axis; but 25 pixels into
the south half for UFTI.  If supplied beyond the range 0 to 1024
for UFTI, 0 to 240 for Michelle, and 0 to 256 for IRCAM, or some
non-numeric value supplied, a warning is issued and the default
adopted.  []

=back

=head1 NOTES

=over 4

=item 

Editing only occurs for OBJECT and SKY frames, for which
there is no WCS.  This includes all editing steps.

=item 

Offsets of 23" N and 6" E are applied to the reference
position for UFTI polarimetry.

=item 

The location of the reference pixel is the biggest source
of error, and may vary systematically with telescope operator.
Comparison of real data with the defaults suggests errors
are typically +/-1" in each axis.

=item 

Following a successful introduction of a WCS, the current
AST Frame is SKY.  Any existing WCS Frames besides the default
three---PIXEL, GRID, AXIS---are lost. 

=item 

Problem IRCAM instrument names containing the Xi string
(during polarimetry and FP observations) are corrected.

=back

=head1 OUTPUT DATA

=over 4

=item

The modified NDF.

=back

=head1 TASKS

KAPPA: ERASE, FITSMOD, WCSFRAME.

=head1 AUTHORS

Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 2000 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
