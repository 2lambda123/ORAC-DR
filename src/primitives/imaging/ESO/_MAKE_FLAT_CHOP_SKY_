#+
# Name:
#    _MAKE_FLAT_CHOP_SKY_
#
# Purpose:
#    Makes a flat from the sky frames for a CHOP_SKY_JITTER recipe.
#
# Language:
#    Perl5
#
# Description:
#    This primitive processes sky frames in the current $Grp of a
#    CHOP_SKY_JITTER recipe, to make a flat field.  It masks deviant
#    pixels, normalises the sky frames to each other, and combines the 
#    frames using the median at each pixel.  The resultant frame is
#    normalised (to 1) to make the flat.  The flat is indexed.
#
# Notes:
#    -  This primitive is suitable for ESO near infra-red imagers.
#    -  Processing only occurs when the steering header TARGET_OR_SKY
#    is "sky", and when the flat has not be specified already.
#    -  Primitives _MASK_DEVIANTS_, _NORMALISE_TO_MODE_EXTENDED_, and
#    _MAKE_FLAT_FROM_NORMALISED_CHOP_SKY_ make the unmasked flat.
#    -  For masking frame normalisation is with respect to a reference
#    level of the first frame, stored in the first frame's internal header 
#    REFERENCE_LEVEL.  If this is not defined, as would be the case on
#    the first cycle, the mode of the reference is calculated.
#    - Masking is achieved through _CLIPPED_STATS_, 
#    _DIVIDE_BY_FLAT_FROM_GROUP_, _MAKE_OBJECTS_MASK_, _NORMALISE_TO_MODE_,
#    and _MAKE_FLAT_FROM_NORMALISED_GROUP_.
#    -  Stores the template name before normalisation, so that it can
#    be reset at the end, for determining sky levels.  After masking
#    the original sky frames are restored for determining correct sky
#    levels.
#    -  The original bad pixels in the initial flat are retained and
#    later combined with the object masking.
#
# Output Data:
#    -  The invoked primitives create new frames.  The bottom line is that
#    a flat field frame is filed and indexed.  Various intermediate frames
#    are normally removed by a tidy primitive.
#    -  A map of the original bad pixels in the flat, and a flat with
#    original bad pixels and objects masked, having the name of the flat
#    with _bpm and _fm suffices respectively.

# Authors:
#    MJC: Malcolm J. Currie (JAC, Starlink)
#
# Copyright:
#    Copyright (C) 1998-2004 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Determine whether or not to mask objects.
# =========================================

# Use the MASK argument.
    my $mask_obj;
    if ( defined $_MAKE_FLAT_CHOP_SKY_{MASK} ) {
       $mask_obj = $_MAKE_FLAT_CHOP_SKY_{MASK};
    } else {
       $mask_obj = 1;
    }

# Selection
# =========

# Test whether or not this is an object frame or a sky frame. 
    my $class = $Frm->uhdr( "TARGET_OR_SKY" );

    my ( @sky_names, $template );

# Select the sky frame members in the current cycle.
    my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
    $cycleno = defined( $cycleno ) ? $cycleno : 0;
    my $skyGrp = $Grp->subgrp( CYCLE_NUMBER => $cycleno,
                            TARGET_OR_SKY => "sky" );

# Determine whether or not there is a predefined flat frame specified.
    my $create_flat = !( $Cal->flatnoupdate() );

# Prepare frames before combination.
# ==================================

# Only perform this on sky frames.  This is an added check for all but
# _MASK_DEVIANTS_.  The other primitives called ought to do this for
# themselves.
    if ( $class eq "sky" & $create_flat ) {

# Mask deviant pixels, such as cosmic rays, from the sky frame.
       _MASK_DEVIANTS_

# Store the template name here.  This is because the intermediate
# sky frames after normalisation lose their relative signals.
       $template = $Frm->file;

# Record the template sky file in case the final frame of the group is
# of the target.
       $Grp->uhdr( "SKY_TEMPLATE", $template );

# Normalise the sky frames to each other.
       _NORMALISE_TO_MODE_EXTENDED_
    }

# Make the initial flat field.  
# ============================
    if ( $create_flat ) {

# Any faint sources present will bias the initial flat field.  These
# are allowed for later.

# _MAKE_FLAT_FROM_NORMALISED_CHOP_SKY_ uses the Grp->template method.
# In order to always have the normalised sky frames combined to make the 
# flat, irrespective of whether  the last frame is of the sky or of the
# target, we have to use the last sky-group frame temporarily, and ensure
# that its MAKE_FLAT flag is enabled. 
       if ( $Frm->uhdr( "MAKE_FLAT" ) ) {
          my $Frm = $skyGrp->frame( -1 );
          $Frm->uhdr( "MAKE_FLAT", 1 );
          _MAKE_FLAT_FROM_NORMALISED_CHOP_SKY_
       }

# Define the reference level for object masking.
# ==============================================
       my $predef_refmode;

# Test whether or not it is time to mask objects.  Use global
# argument first, then frame by frame.
       if ( $mask_obj && $Frm->uhdr( "MAKE_FLAT" ) ) {

# If object masking is applied, biases can be introduced in the flat,
# as the objects move to different locations on the detector each with
# a different response in the flat field.  Merely taking a median at
# each pixel will preferentially select values from certain frames.  Thus
# there has to be an allowance for these systematic differences before
# the data are combined to give representative relative intensities.  We
# nominate one frame, the first in the group, to be the reference frame
# against # which we scale the modal values of the other frames.

# As the routine which evaluates the mode (_NORMALISE_TO_MODE_)
# operates on a sub-group of a cycle of the jitter/recipe, after the
# first cycle it cannot access a reference mode from the reference frame.
# Therefore, the reference mode must be obtained before the sub-group is
# created.  If we are processing the reference frame, there will not be
# a reference mode in its user header yet.  _NORMALISE_TO_MODE_ detects
# this; it then determines the reference mode and writes it to the user
# header of the reference frame.  The group header only exists at this
# point once a first cycle mosaic has been generated, hence the $Grp->uhdr
# method cannot be used to propagate the reference level.

# Determine whether or not this is the first frame, and hence whether or
# not a reference mode is needed.
          if ( $skyGrp->num > 0 ) {

# Recall the reference level from the reference frame within the group.
             my $refFrm = $skyGrp->frame( 0 );
             $predef_refmode = $refFrm->uhdr( "REFERENCE_LEVEL" );

# Find the clipped mean (effectively the mode) for the reference
# frame if it's not already determined.  Make the reference frame the
# current frame temporarily.  Store the value for later frames.
             if ( ! ( defined $predef_refmode ) ) {
                my $Frm = $refFrm;
                _CLIPPED_STATS_
                $predef_refmode = $_CLIPPED_STATS_{MEAN};
             }

# We need now to restore the sky filenames as they were prior to
# normalisation.  Recall the template sky name for this.
             $template = $Grp->uhdr( "SKY_TEMPLATE" );
             $skyGrp->template( $template );
          }

# Mask objects.
# =============

# Record the group members at this point.
          @sky_names = $skyGrp->membernames;

# The group for the primitives below becomes the group of sky frames.
          my $Grp = $skyGrp;

# Apply the self-flat field to the sky frames.
          _DIVIDE_BY_FLAT_FROM_GROUP_

# Obtain the bad pixels in the flat.
          my $inflat = $Cal->flat;
          my $flatmask = $inflat . "_bpm";
          my $param = "in=$inflat out=$flatmask scalar=0 title=!";
          $Mon{ "kappa_mon" }->obeyw( "cmult", "$param" );

# Report the processing status.
          orac_print "Made a mask of bad pixels in the original flat.\n";

          my $maskobjects = 1;
          my ( @maskfiles, @masked_names, $maskfile, $file );
          if ( $maskobjects ) {

# Create an array to store the names of the mask files. 
             @maskfiles = ();

# Compute a mask of the objects for each member of the sky flat-field
# group, using a local $Frm.
             foreach $Frm ( $Grp->members ) {
                _MAKE_OBJECTS_MASK_

# Record the mask filename into an array.
                push ( @maskfiles, $_MAKE_OBJECTS_MASK_{MASKFILE} );
             }

# Create an array to store the names of the masked datasets. 
             @masked_names = ();

# Mask the objects in each frame.  Make a copy of the @sky_names
# so we can shift its elements.  Again use a local $Frm.
             my @local_sky_names = @sky_names;
             foreach $Frm ( $Grp->members ) {
                $file = shift( @local_sky_names );
                $maskfile = shift( @maskfiles );
                $Frm->file( $file );

# Normalise the frames to each other.
                _NORMALISE_TO_MODE_ REFMODE=$predef_refmode

# Mask the objects.  Use a 120% enlargement factor.
                _MASK_OBJECTS_ MASKFILE=$maskfile ENLARGE=1.2

# Add the mask which comprises bad pixels and zero elsewhere.
# Apply bad-pixel mask of the first flat field.
                ( my $in, my $out ) = $Frm->inout( "_fm" );
                my $param = "in1=$in out=$out in2=$flatmask title=!";
                $Mon{ "kappa_mon" }->obeyw( "add", "$param" );

# Report the processing status.
                orac_print "Applied the bad pixels in the original flat to make $out.\n\n";

# Record the new file name in the frame object.
                $Frm->file( $out );

# Record the masked (or unmasked file if the masking has failed)
# filename into an array.
                push ( @masked_names, $Frm->file );
             }

# Remove the flat-field bad-pixel mask.
             _DELETE_A_FRAME_ FRAME=$flatmask

# Set the group names to be the masked ones to form improved flat field.
            $Grp->membernames( @masked_names );

# Make the improved flat field.
# =============================

# Generate the new flat field using the jittered masked frames.
# _MAKE_FLAT_FROM_NORMALISED_GROUP_ will expect steering header
# MAKE_FLAT to be true, but here it's not because we're dealing
# with the sky frames, not target.  Perhaps the steering primitive
# can be improved.
             {
                my $Frm = $skyGrp->frame( $skyGrp->num );
                $Frm->uhdr( "MAKE_FLAT", 1 );
                _MAKE_FLAT_FROM_NORMALISED_GROUP_ 
             }
          }
       }
   
# Restore the sky filenames as they were prior to normalisation.
       if ( $mask_obj && $Frm->uhdr( "MAKE_FLAT" ) ) {
          $skyGrp->membernames( @sky_names );
       }
    }

# Podule
# ======

=head1 NAME

_MAKE_FLAT_CHOP_SKY_ -- Makes a flat from the sky frames for a CHOP_SKY_JITTER recipe.

=head1 DESCRIPTION

This primitive processes sky frames in the current $Grp of a
CHOP_SKY_JITTER recipe, to make a flat field.  It masks deviant
pixels, normalises the sky frames to each other, and combines the
frames using the median at each pixel.  The resultant frame is
normalised (to 1) to make the flat.  The flat is indexed.

=head1 NOTES

=over 4

=item *

This primitive is suitable for ESO near infra-red imagers.

=item *

Processing only occurs when the steering header TARGET_OR_SKY is
"sky", and when the flat has not be specified already.

=item *

Primitives L<_MASK_DEVIANTS_|_MASK_DEVIANTS_>,
L<_NORMALISE_TO_MODE_EXTENDED_|_NORMALISE_TO_MODE_EXTENDED_>, and
L<_MAKE_FLAT_FROM_NORMALISED_CHOP_SKY_|_MAKE_FLAT_FROM_NORMALISED_CHOP_SKY_>
make the unmasked flat.

=item *

For masking frame normalisation is with respect to a reference
level of the first frame, stored in the first frame's internal header 
REFERENCE_LEVEL.  If this is not defined, as would be the case on
the first cycle, the mode of the reference is calculated.

=item *

Masking is achieved through L<_CLIPPED_STATS_|_CLIPPED_STATS_>,
L<_DIVIDE_BY_FLAT_FROM_GROUP_|_DIVIDE_BY_FLAT_FROM_GROUP_>,
L<_MAKE_OBJECTS_MASK_|_MAKE_OBJECTS_MASK_>,
L<_NORMALISE_TO_MODE_|_NORMALISE_TO_MODE_>, and
L<_MAKE_FLAT_FROM_NORMALISED_GROUP_|_MAKE_FLAT_FROM_NORMALISED_GROUP_>.

=item *

Stores the template name before normalisation, so that it can
be reset at the end, for determining sky levels.  After masking
the original sky frames are restored for determining correct sky
levels.

=item *

The original bad pixels in the initial flat are retained and
later combined with the object masking.

=back

=head1 OUTPUT DATA

=over 4

=item *

The invoked primitives create new frames.  The bottom line is that
a flat field frame is filed and indexed.  Various intermediate frames
are normally removed by a tidy primitive.

=item *

A map of the original bad pixels in the flat, and a flat with
original bad pixels and objects masked, having the name of the flat
with _bpm and _fm suffices respectively.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC, Starlink)

=head1 COPYRIGHT

Copyright (C) 1998-2004 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
