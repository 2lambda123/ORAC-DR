#+
# Name:
#    _MAKE_MOSAIC_NOD_
#
# Purpose:
#    Forms a mosaic for a NOD differenced-pairs group.
#
# Language:
#    Perl5
#
# Description:
#    This primitive makes a mosaic from the object frames in the
#    differenced-frame group of a NOD recipe.  In most cases it
#    merely calls the standard _MAKE_MOSAIC_ primitive using the
#    difference group instead of the current $Grp.
#
#    For a scan, for which there is a mosaic at each position, the
#    primitive marshalls all the various groups and headers for
#    current scan position in a form compatible with _MAKE_MOSAIC_.
#    First it determines which scan position is current; accesses
#    the number of cycles at the given position and the group of
#    mosaics; temporarily sets cycle-number header in the frames
#    of the current cycle of the difference-frame group; sets
#    the mosaic's rootname; and on all but the first scan-position
#    cycle, copies the headers from the mosaic group into the
#    group accessed by _MAKE_MOSAIC_.  After making the mosaic,
#    the primitive replaces the mosaic frame name in the mosaic
#    group; reverses the header copying, the headers having been
#    modified in _MAKE_MOSAIC_; restores the recipe-cycle numbers
#    to the frames changed above; and restores the scan index
#    to the mosaic frame in mosaic group.
#
# Arguments:
#    FILLBAD = LOGICAL (Given)
#       If true (1), replace the bad pixels in the current cycle's
#       mosaic with a smooth function derived from its neighbours.
#       Otherwise, leave the bad pixels unaltered.  [1]
#    INT_METHOD = CHARACTER (Given)
#       The interpolation method.  This is either "linint" for bi-linear
#       interpolation, or "nearest" for nearest neighbour.  The latter
#       takes about half the time.  ["linint"]
#    RESAMPLE = LOGICAL (Given)
#       If true (1), resample the current cycle's frames to the same
#       Cartesian co-ordinate system using the method given by argument
#       INT_METHOD.  If false (0), use integer offsets and changes of
#       origin to register the frames.  The latter is many times
#       faster and is recommended for pipeline operation.
#
# Notes:
#    -  This primitive is suitable for UFTI, IRCAM, and Michelle
#    in imaging mode.
#    -  Processing only occurs when the steering header MAKE_MOSAIC is
#    true.
#    -  For non-scan data, the arguments are merely passed to
#    _MAKE_MOSAIC_ and the group mosaic name is restored to that of the
#    current $Grp, not that of the difference group.  The updated
#    headers are also propagated back into the current $Grp from the
#    sub-group.
#    -  For scan data, the main-group user headers MOSAIC_GROUP and
#    SCAN_CYCLES specify the mosaic group and the scan-cycle number; and
#    the scan index comes from the current frames user header SCAN_INDEX.
#    The mosaic's rootname is specified by the frame user header
#    SCAN_ROOTNAME.
#    -  The recipe-cycle number is associated with the frame steering header
#    CYCLE_NUMBER.
#    -  The SKY WCS is not selected because it's meaningless for
#    chopped data.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2002 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Selection
# =========

# Test whether or not it is time to make a mosaic.
    my $makemos = $Frm->uhdr( "MAKE_MOSAIC" );
    if ( $makemos ) {

# Arguments
# =========

# Obtain the value for the interpolation.
       my $intmethod = ( $_MAKE_MOSAIC_NOD_{INT_METHOD} || "linint" );

# Determine whether or not to fill bad pixels.
       my $fillbad = $_MAKE_MOSAIC_NOD_{FILLBAD};
       $fillbad = defined( $fillbad ) ? $fillbad : 1;

# Determine whether or not to resample.
       my $resample = $_MAKE_MOSAIC_NOD_{RESAMPLE};
       $resample = defined( $resample ) ? $resample : 1;

# Determine whether this is part of a scan.
       my $scanindex = $Frm->uhdr( "SCAN_INDEX" );
       my ( $mosGrp, $scanref, $scan_cycleref, @scanoffs, @scan_cycles );
       if ( defined( $scanindex ) ) {

# Obtain the mosaic group by reference.
          $mosGrp = $Grp->uhdr( "MOSAIC_GROUP" );

# Record some ancillary data which will be lost during mosaicking.
          $scanref = $Grp->uhdr( "SCAN_OFFSETS" );
          $scan_cycleref = $Grp->uhdr( "SCAN_CYCLES" );
          @scan_cycles = @$scan_cycleref;
       }

# Make the mosaic.
# ================

# Make the group of differenced pairs the local version of $Grp within
# the context delimited by the braces.  The mosaic name is the group
# name.  Define outside the context so that it persists when the
# Grp reverts to the main Grp.
       my ( $mosname, $subGrp, $cycleno, $scan_cycleno );
       {
          my $Grp = $Grp->uhdr( "DIFFERENCE_GROUP" );

# Make a copy of the group identifier which persists outside the current
# context.  It's needed to propagate the headers.
          $subGrp = $Grp;

# Select the scan mosaic and cycle in this block.
          if ( defined( $scanindex ) ) {

# Need to switch from the total cycle number of the recipe, to the
# cycle number for the current offset index.
             $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
             $scan_cycleno =  $scan_cycles[ $scanindex ];
             $Frm->uhdr( "CYCLE_NUMBER", $scan_cycleno );

# There's more.  _MAKE_MOSAIC_ uses cycle number for both selecting the
# subgrp and the mosaic naming and processing.  Therefore we need to
# temporarily change the recipe cycle number for the frames _MAKE_MOSAIC_
# would select, i.e. those in the current recipe cycle.
             $Grp = $Grp->subgrp( CYCLE_NUMBER => $cycleno );
             foreach $Frm ( $Grp->members ) {
                $Frm->uhdr( "CYCLE_NUMBER", $scan_cycleno );
             }

# Need to set the mosaic rootname for a scan.  Allow for a sensible
# default name in case the frame header doesn't have the name stored.
             my $rootname = $Frm->uhdr( "SCAN_ROOTNAME" );
             if ( !defined( $rootname ) ) {
                $rootname = $Grp->file . "_o" . $scanindex;
             }

# Set the group name.  Here we mimic what happens for most uses of
# _MAKE_MOSAIC_ where there is a single group.  The group name changes
# having the "_mos" appended once the first mosaic is made.  There is a
# mosaic for each scan offset position, so this should appear in the
# mosaic's name.
             if ( $scan_cycleno == 0 ) {
                $Grp->file( $rootname );
             } else {
                $Grp->file( $rootname . "_mos" );
             }

# Transfer the existing mosaic headers, originally created by
# _MAKE_MOSAIC on the first cycle at the current scan position.
             if ( $scan_cycleno > 0 ) {
                %{ $Grp->hdr } = %{ $mosGrp->frame( $scanindex )->hdr };
                %{ $Grp->uhdr } = %{ $mosGrp->frame( $scanindex )->uhdr };
             }

# _MAKE_MOSAIC_ uses the group header ROOT_NAME for cycles after the first
# to create the name of the mosaic.  Here we know what ROOT_NAME has to be
# in all cases, so it's just set.  This avoids recording both values in
# the main group's header to enable the value to persist between cycles.
             $Grp->uhdr( "ROOT_NAME", $rootname );
          }

# Make an untrimmed mosaic using the supplied parameters.  SKY world
# co-ordinates are not appropriate.  Do not trim the mosaic to a
# single frame.
          _MAKE_MOSAIC_ INT_METHOD=$intmethod FILLBAD=$fillbad RESAMPLE=$resample TRIM=0 SKYWCS=0

# The group name is changed in _MAKE_MOSAIC_ to the mosaic name.
# However, that's only for the difference group, not the main Grp.  So
# save the name outside this group context, and modify the file
# associated with main Grp.
          $mosname = $Grp->file;

# Restore information for scans.
          if ( defined( $scanindex ) ) {

# Replace the mosaic frame name in the mosaic group
              $mosGrp->frame( $scanindex )->file( $mosname );

# Propagate the modified headers back to the mosaic group's latest member.
             %{ $mosGrp->frame( $scanindex )->hdr } = %{ $Grp->hdr };
             %{ $mosGrp->frame( $scanindex )->uhdr } = %{ $Grp->uhdr };

# Restore the original cycle number to the current frame and the
# members of the group with current recipe cycle.  This is so that
# they're not slected again.
             $Frm->uhdr( "CYCLE_NUMBER", $cycleno );
             foreach $Frm ( $Grp->members ) {
                $Frm->uhdr( "CYCLE_NUMBER", $cycleno );
             }

# Restore the scan index to the mosaic frame for selection on later
# cycles.
             $mosGrp->frame( $scanindex )->uhdr( "SCAN_INDEX", $scanindex );
          }
       }

# Propagate the modified headers back to the original group.
       %{ $Grp->hdr } = %{ $subGrp->hdr };
       %{ $Grp->uhdr } = %{ $subGrp->uhdr };

# Restore the pointer to the group in the main Group user header.
       $Grp->uhdr( "DIFFERENCE_GROUP", $subGrp );

# Kludge to restore the lost headers.
       if ( defined( $scanindex ) ) {

# Restore the mosaic group, scan offset and cycles arrays all by reference.
          $Grp->uhdr( "MOSAIC_GROUP", $mosGrp );
          $Grp->uhdr( "SCAN_OFFSETS", $scanref );
          $Grp->uhdr( "SCAN_CYCLES", $scan_cycleref );

# Set the new group file name for non-scan data.
       } else {
          $Grp->file( $mosname );
       }
    }

# Podule
# ======

=head1 NAME

_MAKE_MOSAIC_NOD_ -- Forms a mosaic for a NOD differenced-pairs group.

=head1 DESCRIPTION

This primitive makes a mosaic from the object frames in the
differenced-frame group of a NOD recipe.  It merely calls the standard
_MAKE_MOSAIC_ primitive using the difference group instead of the
current $Grp.

=head1 ARGUMENTS

=over 4

=item FILLBAD = LOGICAL (Given)

If true (1), replace the bad pixels in the current cycle's
mosaic with a smooth function derived from its neighbours.
Otherwise, leave the bad pixels unaltered.  [1]

=item INT_METHOD = CHARACTER (Given)

The interpolation method.  This is either "linint" for bi-linear
interpolation, or "nearest" for nearest neighbour.  The latter
takes about half the time.  ["linint"]

=item RESAMPLE = LOGICAL (Given)

If true (1), resample the current cycle's frames to the same
Cartesian co-ordinate system using the method given by argument
INT_METHOD.  If false (0), use integer offsets and changes of
origin to register the frames.  The latter is many times
faster and is recommended for pipeline operation.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UFTI, IRCAM, and Michelle in imaging mode.

=item *

Processing only occurs when the steering header MAKE_MOSAIC is
true.

=item *

For non-scan data, the arguments are merely passed to
_MAKE_MOSAIC_ and the group mosaic name is restored to that of the
current $Grp, not that of the difference group.  The updated
headers are also propagated back into the current $Grp from the
sub-group.


=item *

For scan data, the main-group user headers MOSAIC_GROUP and
SCAN_CYCLES specify the mosaic group and the scan-cycle number; and
the scan index comes from the current frames user header SCAN_INDEX.
The mosaic's rootname is specified by the frame user header
SCAN_ROOTNAME.

=item *

The recipe-cycle number is associated with the frame steering header
CYCLE_NUMBER.

=item *

The SKY WCS is not selected because it's meaningless for chopped data.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
