#+
# Name:
#    _MAKE_MOSAIC_EXTENDED_
#
# Purpose:
#    Forms mosaics for an EXTENDED recipe.
#
# Language:
#    Perl5
#
# Description:
#    This primitive either makes a mosaic of object frames either
#    in the current row or a `grand' mosaic of the whole of the
#    current $Grp of an EXTENDED recipe.  There are two main
#    stages: resampling and making the mosaic.
#
#    The primitive either resamples each frame using the non-integer
#    Cartesian offsets, or merely finds the offsets between frames to
#    the nearest pixel and shifts the origin (see argument RESAMPLE).
#    The resampling or shifting imposes no limit to the frame bounds,
#    so the mosaic extends to include all pixels in contributing frames. 
#
#    The primitive then makes the mosaic using zero-point shifts (unless
#    argument ZERO is false) to give the most self-consistent mosaic based
#    upon the statistics of overlapping pixels.  On the final row the
#    primitive creates the grand mosaic combining all target frames.  On
#    the first cycle of the recipe (normally there is only one) the grand
#    mosaic becomes the group file and its headers read.  On subsequent
#    recipe cycles, the current grand mosaic is added into the group
#    `grand' mosaic.
#
#    To prevent the accumulated build up of bad pixels in the grand
#    mosaic, there is an option (argument FILLBAD) to fill in bad pixels
#    by using a smooth function which matches the surrounding data.  The
#    function is an iterative approximation to a solution of Laplace's
#    equation.
#
# Arguments:
#    FILLBAD = LOGICAL (Given)
#       If true (1), replace the bad pixels in the current cycle's
#       mosaic with a smooth function derived from its neighbours. 
#       Otherwise, leave the bad pixels unaltered.  [0]
#    INT_METHOD = CHARACTER (Given)
#       The interpolation method.  This is either "linint" for bi-linear
#       interpolation, or "nearest" for nearest neighbour.  The latter
#       takes about half the time.  ["linint"]
#    METHOD = CHARACTER (Given)
#       The method used to combine frames to form the mosaic.  See
#       parameter METHOD of CCDPACK/MAKEMOS (SUN/139) for the options.
#       The main two in practice will be "Median" or "Mean".  The former
#       excludes outliers but has problems in good seeing where the
#       registration is poor, as it biases against the peak values of
#       the steepening profile near the core, and hence underestimate
#       the flux.  In this circumstance the mean blurs the psf profile,
#       making it more of a plateau than a sharp peak.  However, the
#       mean preserves the flux, at the cost of the odd rogue value
#       affecting the result.  ["Mean"]
#    RESAMPLE = LOGICAL (Given)
#       If true (1), resample the current cycle's frames to the same
#       Cartesian co-ordinate system using the method given by argument
#       INT_METHOD.  If false (0), use integer offsets and changes of
#       origin to register the frames.  The latter is many times
#       faster and is recommended for pipeline operation.
#    SKYWCS = LOGICAL (Given)
#       If true (1), each mosaic files has its world co-ordinate frame
#       set to sky domain, thus appear on supported graphics, provided
#       a sky frame exists.  Otherwise the frame will be unchanged,
#       presumably set to domain PIXEL or CCD_REG. [1]
#    ZERO = LOGICAL (Given)
#       If true (1), the mosaicking determines the most-consistent
#       shifts of zero-point level between the contributing frames.
#       If false (0), no such comparison is made.  For the vast majority
#       of cases this will be true.
#
# Notes:
#    -  This primitive is suitable for near-infra-red imagers.
#    -  Processing only occurs for object and sky frames, and when
#    either steering header MAKE_MOSAIC or MAKE_GRAND_MOSAIC is
#    true.  Mosaic making occurs only for groups members with the
#    steering header TARGET_OR_SKY is "target", and for a grand
#    mosaic only within the current recipe as given by steering
#    header CYCLE_NUMBER.
#    -  When RESAMPLE is false, the offset files (.off extension)
#    associated with each frame are interrogated to find one common
#    object.  This is identifier 1 if telescope or central-source 
#    offsets are used, but the script searches upwards from 1 the first
#    nine identifiers, if necessary, until it finds a match.  For each 
#    frame the read x-y co-ordinates rounded to the nearest integer and
#    with opposite sign become the new origin.
#    -  Group internal header ROOT_NAME stores the name of the grand
#    mosaic excluding any suffix.  It is written for the first cycle,
#    and read back for subsequent cycles of the recipe.
#    -  The start and end airmasses and UT times of the grand mosaic
#    are revised to the limiting values for the first and last
#    contributing frames respectively.  Likewise the exposure time is
#    summed.
#    -  The individual row mosaic and grand mosaic are displayed.
#    -  The frame titles are propagated.
#    -  The optimum number of overlaps for the mosaic creation is 
#    two for a row and six for a grand mosaic.
#    -  Code to concatenate field rotation into the resampling is
#    commented out.  This is because rotation should be handled by the
#    world co-ordinate system, not by resampling and hence degrading the
#    data.
#
# Tasks:
#    CCDPACK: MAKEMOS, TRANNDF; KAPPA: ADD, FILLBAD, FITSMOD, NDFCOPY,
#    NDFTRACE, SETORIGIN, STATS, WCSFRAME.
#
# Output Data:
#    -  The grand mosaic, which is called is "<groupname>", where
#    <groupname> is the name of the group.  For multiple cycles,
#    individual grand mosaics are also retained and called
#    <groupname>_<cyclenumber>", where <cyclenumber> is the cycle
#    number derived from steering header CYCLE_NUMBER.
#    -  The row mosaics of the last cycle in <groupname>_mos_<row>,
#    where <row> is the number of the row.
#    -  Resampled frames each inheriting the name of its input frame but
#    with the _trn suffix, when RESAMPLE is true.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Arguments
# =========

# Obtain the value for the interpolation.
    my $intmethod = ( $_MAKE_MOSAIC_EXTENDED_{INT_METHOD} || "linint" );
    if ( $intmethod ne "linint" && $intmethod ne "nearest" ) {
       $intmethod = "linint";
    }

# Obtain the value for the combination method.
    my $method = ( $_MAKE_MOSAIC_EXTENDED_{METHOD} || "mean" );

# Determine whether or not to fill bad pixels.
    my $fillbad = $_MAKE_MOSAIC_EXTENDED_{FILLBAD};
    $fillbad = defined( $fillbad ) ? $fillbad : 0;

# Determine whether or not to resample.
    my $resample = $_MAKE_MOSAIC_EXTENDED_{RESAMPLE};
    $resample = defined( $resample ) ? $resample : 1;

# Determine whether or not to resample.
    my $skywcs = $_MAKE_MOSAIC_EXTENDED_{SKYWCS};
    $skywcs = defined( $skywcs ) ? $skywcs : 1;

# Determine whether or not to apply zero-point shifts.
    my $zero = $_MAKE_MOSAIC_EXTENDED_{ZERO};
    $zero = defined( $zero ) ? $zero : 1;

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "OBJECT"  ||
         $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "SKY" ) {

# Obtain the cycle number.  Default to zero if undefined, so that recipes
# which do not support this feature will continue to work.
       my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
       $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Obtain the current row number.
       my $ext_row = $Frm->uhdr( "EXTENDED_ROW" );

# Determine whether it is time to make a mosaic.
       my $makemosaic = $Frm->uhdr( "MAKE_MOSAIC" );
       my $make_grand = $Frm->uhdr( "MAKE_GRAND_MOSAIC" );
       if ( $makemosaic || $make_grand ) {

# Determine whether the full mosaic is required, otherwise make the
# mosaic for the current row.
          my $tarGrp;
          if ( $make_grand ) {

# Form a subgroup comprising all the target frames within the current
# cycle.
             $tarGrp = $Grp->subgrp( TARGET_OR_SKY => "target",
                                     CYCLE_NUMBER => $cycleno );

          } else {

# Form a subgroup comprising all the target frames in the current row.
             $tarGrp = $Grp->subgrp( TARGET_OR_SKY => "target",
                                     EXTENDED_ROW => $ext_row );
          }

# Form a list of input file names for the CCDPACK tasks.  We need to
# generate an input list for TRANJOIN and TRANNDF and an output list
# using a hard-wired suffix of "_trn".
          ( my $inref, my $outref ) = $tarGrp->members_inout( "_trn" );

# Specify the mosaic suffix.
          my $osuffix = "_mos";

# Convert the list to a comma-separated list as needed by CCDPACK (GRP).
          my $objlist = join( ",", @$inref );
          my $outlist = join( ",", @$outref );

# Concatenate rotation to transformation
# ======================================

# Specify the other parameters for the TRANJOIN stage.  Note that the
# rotation occurs first and the translation seconds as we are using 
# offsets measured in equatorial not Cartesian co-ordinates.
          my ( $param1, $param2, $ORAC_STATUS );
          if ( $resample ) {

# Specify the other parameters for the TRANJOIN stage.
#             $param2 = "in1=".$Cal->rotation." dest=second"; 

# Join the rotation transformation to each of the CCDPACK extensions.
# The rotation transformation follows the shift-of-origin and is stored
# in the input frame.  Unfortunately, CCDEDIT doesn't support joining
# transformations, and KAPPA/TRANJOIN does operate on lists of files.
# Write the input file names to the text files.
#             foreach $flatted (@$inref) {
#                $param1 = "in2=${flatted}.more.ccdpack.transform";
#                $Mon{ "kappa_mon" }->obeyw( "tranjoin", "$param1 $param2 accept" );
#             }

# Report the status.
#             orac_print "Rotation transformation joined.\n";

# Resampling
# ==========

# Create text files to hold the list of input and output files, one per line.
# This is needed because expanded lists of files may make the command line
# too long for the ADAM message system.
             unlink( "tranndf.inlist$$", "tranndf.outlist$$" );

             open( my $fh_inlist, ">tranndf.inlist$$" ) || 
               orac_throw "Unable to open tranndf.inlist$$ to create a list of frames to resample.  Error: $!.\n";
             print $fh_inlist join( "\n", @$inref ), "\n";
             close( $fh_inlist );

             open( my $fh_outlist, ">tranndf.outlist$$" ) || 
               orac_throw "Unable to open tranndf.outlist$$ to create a list of resampled frames.  Error: $!.\n";
             print $fh_outlist join( "\n", @$outref ), "\n";
             close( $fh_outlist );

# Assign the other parameters.  Determime the bounds automatically.  It takes
# the origin from the first target frame.
             $param1 = "in='^tranndf.inlist$$' out='^tranndf.outlist$$'";
             $param2 = "shape=auto method=$intmethod title=!";

# Shift and resample the flat-field object frames.  This determines
# the bounds automatically.  It takes the origin from the first object
# frame.
             $Mon{ "ccdpack_reg" }->obeyw( "tranndf", "$param1 $param2" );

# Report the processing status.
             orac_print "Frames $objlist resampled.\n";
             orac_print "Resampled frames are $outlist.\n";

          } else {

# Derive the offsets
# ==================

# The matched offsets may not be with the first-ranked item, especially 
# if it is extended, although most cases it will find a #1.  So prepare
# to loop a few times until an identification number is available. 
# Currently it is limited to nineteen id numbers, so it's far from perfect,
# but it will be very rare (in practice once a year) for this not to work.
# It will be a faint or low surface-brightness  galaxy at low galactic
# latitude where the stars relegate the galaxy to a high id number.
             my $id = 1;
             my $match = 0;
             my ( @xoffsets, @yoffsets );
             NEXTID: while ( $id < 20 && !$match ) {

# Open the offset files and store the co-ordinates.  Note that this
# assumes central-source or telescope offsets have been used, and that there
# is but one position in each.
                @xoffsets = ();
                @yoffsets = ();
                foreach my $Frame ( $tarGrp->members ) {
                   my $offfile = $Frame->file . ".off";

                   open( my $fh_offset_file, "<$offfile" ) ||
                     orac_throw "Missing $offfile offset text file.\n";

# Store the offsets.
                   my $offfound = 0;
                   foreach my $line ( <$fh_offset_file> ) {

# Match the identification number followed by a space, in case there are
# more than nine objects, unlikely but possible.
                      my @fields;
                      if ( $line =~ /^$id\s/ ) {
                         @fields = split( /\s+/, $line );
                         push( @xoffsets, $fields[ 1 ] );
                         push( @yoffsets, $fields[ 2 ] );
                         $offfound = 1 ;
                         last;
                      }
                   }
                   close( $fh_offset_file );

# Cannot proceed unless the x-y offsets were found.
                   if ( ! $offfound ) {
                      orac_err "No object #$id in $offfile offset text file.\n";

# Try the next identification.
                      $id++;
                      next NEXTID;
                   }
                }

# Convert the offsets to be displacements of the origin to the nearest pixel.
                my $framecount = 0;
                foreach my $frame ( @xoffsets ) {
                   $xoffsets[ $framecount ] = -int( $xoffsets[ $framecount ] + 0.5 );
                   $yoffsets[ $framecount ] = -int( $yoffsets[ $framecount ] + 0.5 );
                   $framecount++;
                }

# We have a match, so exit the loop.
                $match = 1;
             }

# Change of origin
# ================

# Loop through all the members of the group, as KAPPA task can only handle
# one data file at a time.
             foreach my $Frame ( $tarGrp->members ) {
                my $frame = $Frame->file;

# Assign the other parameters.  Use the original bounds.  Note we do not
# resample the main mosaic if one exists.
                $param1 = "ndf=$frame origin=[$xoffsets[0],$yoffsets[0]]";

# Shift the first item from the lists of displacements.
                shift( @xoffsets );
                shift( @yoffsets );

# Apply change of origin to the current frame.
                $Mon{ "ndfpack_mon" }->obeyw( "setorigin", "$param1" );
             }

# Create text files to hold the list of 'output' files, one per line.
# The files are modified in situ, but are the equivalent of the output files
# if resampling is performed.  This is needed because the command may be long.
# Expanded lists of files may make the command line too long for the ADAM
# message system.
             unlink( "tranndf.outlist$$" );

             open( my $fh_inlist, ">tranndf.outlist$$" ) ||
               orac_throw "Unable to open tranndf.outlist$$ to create a list of frames to form mosaic.  Error: $!.\n";
             print $fh_inlist join( "\n", @$inref ), "\n";
             close( $fh_inlist );

# Report the processing status.
             orac_print "Frames $objlist have origin shifted.\n";
          } 

# Make mosaic.
# ============

# Derive a reasonable number of overlaps to generate a mosaic, yet not
# make all the possible comparisons for efficiency.
          my $optov;
          if ( $make_grand ) {
             $optov = 6;
          } else {
             $optov = 2;
          }

# Define the root name for the group for the first cycle.  On later
# cycles read the group root name from the group header.
          my $grproot;
          if ( $cycleno == 0 ) {
             $grproot = $Grp->file;

          } else {
             $grproot = $Grp->uhdr( "ROOT_NAME" );
          }

# Define the mosaic and grand mosaic names.  
          my $grandmos = $grproot . $osuffix;
          my $mosname;
          if ( $make_grand ) {
             $mosname = $grandmos . "_" . $cycleno;

          } else {
             $mosname = $grproot . "_row" . $ext_row . $osuffix; 
          }

# Assign other parameters.  The scale might become a user parameter.
          $param1 = "in='^tranndf.outlist$$' out=$mosname title=!";
          if ( $zero ) {
             $param2 = "zero optov=$optov method=$method";
          } else {
             $param2 = "nozero optov=$optov method=$method";
          }

# Make the mosaic correcting for differences in offset.
          $Mon{ "ccdpack_reg" }->obeyw( "makemos", "$param1 $param2" );
          unlink( "tranndf.inlist$$", "tranndf.outlist$$" );

# Report the processing status.
          orac_print "Mosaic $mosname formed.\n";

# Display the resultant mosaic.
          $tarGrp->file( $mosname );
          $Display->display_data( $tarGrp ) if ( defined $Display );

# Set the world co-ordinate system to sky.
# ========================================
          if ( $skywcs ) {

# Determine whether or there is a SKY frame present.  First obtain a
# list of the frames' domains.  See if there is a domain "SKY" ignoring
# case.
             $Mon{ "ndfpack_mon" }->obeyw( "ndftrace", "ndf=$mosname fullwcs" );
             ( $ORAC_STATUS, my @domain ) = $Mon{ "ndfpack_mon" }->get( "ndftrace", "fdomain" );
             if ( join( " ", @domain ) =~ /\sSKY\s/i ) {

# Select the SKY frame in the WCS component.
                $Mon{ "ndfpack_mon" }->obeyw( "wcsframe", "ndf=$mosname frame=sky" );
                orac_print "Astrometry SKY co-ordinate frame selected in $mosname.\n";
             }
          }

# Correct the headers for the current cycle's mosaic.
# ===================================================

# Change the end airmass to reflect the last frame included in the mosaic.  Note this
# is done to the physical file as well as the ORAC-DR internal header.  This will
# change the grand mosaic only on the first cycle.
          my $amendname = "ORAC_AIRMASS_END";
          my $amend = $tarGrp->frame( $tarGrp->num )->uhdr( $amendname );
          my %am_translated = $tarGrp->frame( $tarGrp->num )->translate_hdr( $amendname );
          while( ( my $key, my $value ) = each %am_translated ) {
            _SET_FILE_FITS_ITEM_ FILE=$mosname KEY=$key VALUE=$value
          }

# Change the end UT time to reflect the last frame included in the mosaic.  Note this
# is done to the physical file as well as the ORAC-DR internal header.  This will
# change the grand mosaic only on the first cycle.
          my $utendname = "ORAC_UTEND";
          my $utend = $tarGrp->frame( $tarGrp->num )->uhdr( $utendname );
          my %ut_translated = $tarGrp->frame( $tarGrp->num )->translate_hdr( $utendname );
          while( ( my $key, my $value ) = each %ut_translated ) {
            _SET_FILE_FITS_ITEM_ FILE=$mosname KEY=$key VALUE=$value
          }

# Display the resultant mosaic.
          $tarGrp->file( $mosname );
          $Display->display_data( $tarGrp ) if ( defined $Display );

# Remove bad pixels
# =================

# Bad pixels can accumulate as the mosaics are added.  Thus they may
# need to be removed.

# Only fill bad pixels when requested.
          if ( $fillbad ) {

# Test for the present of any bad pixels.
             $Mon{ "kappa_mon" }->obeyw( "stats", "ndf=$mosname" );
             ( $ORAC_STATUS, my $numbad ) = $Mon{ "kappa_mon" }->get( "stats", "numbad" );
             if ( $numbad > 0 ) {

# As the Grp->inout method applies the Frm->inout method for the members
# we have to generate the name of the filled mosaic directly.
                ( my $outname = $mosname )  =~ s/$osuffix/_fb/;

# Fill in the bad pixels.
                $param1 = "in=$mosname out=$outname niter=4 size=4";
                $Mon{ "kappa_mon" }->obeyw( "fillbad", "$param1" );

# Report the processing status.
                orac_print "Bad pixels filled in mosaic $mosname to form $outname.\n";

# We need to keep the variables for the current cycle's mosaic
# matching to avoid numerous further conditional tests.
                $mosname = $outname;
             }
          }

# Define the group file and headers.
# ==================================

# On the first cycle (to make a grand mosaic), merely copy the current
# cycle into the main grand mosaic.
# Set the group name in the Group object...
          if ( $make_grand && $cycleno == 0 ) {

             $param1 = "in=$mosname out=$grandmos";
             $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "$param1" );
             
# Report the processing status.
             orac_print "The first cycle's grand mosaic, $mosname, " .
                        "becomes the main grand mosaic $grandmos.\n";

# Set the group name in the Group object to the main grand mosaic name,
# not the original group name.
             $Grp->file( $grandmos );

# ...and read the header.
             $Grp->readhdr;

# Store the root name.
             $Grp->uhdr( "ROOT_NAME", $grproot );

# Ensure that the correct start and end times are present.  readhdr
# doesn't always provide them.  Take the start from the first frame
# used to form the mosaic and the end from the last (and current) frame.
             my $utstartname = "ORAC_UTSTART";
             if ( ! defined ( $Grp->uhdr( $utstartname ) ) ) {
                $Grp->uhdr( $utstartname,
                            $Grp->frame( 0 )->uhdr( $utstartname ) );
             }

             if ( ! defined ( $Grp->uhdr( $utendname ) ) ) {
                $Grp->uhdr( $utendname, $Frm->uhdr( $utendname ) );
             }

# Add the current mosaic into the grand mosaic.
# =============================================

# On the second and subsequent grand-mosaic cycle, we just need to
# add the single-cycle mosaic into the main mosaic.
          } elsif ( $cycleno > 0 && $make_grand ) {

# Make a duplicate of the main mosaic, using a temporary file.
             my $grpfile = $Grp->file;
             my $tempfile = new ORAC::TempFile;
             my $tempmos = $tempfile->file;
             $param1 = "in=$grpfile out=$tempmos";
             $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "$param1" );

# Add the frames.  Note the main mosaic is the primary component, thus
# its history records are retained.
             $param1 = "in1=$tempmos in2=$mosname out=$grpfile";
             $Mon{ "kappa_mon" }->obeyw( "add", "$param1" );

# Obtain the name of the exposure time header and external FITS keyword.
             my $exptimename = "ORAC_EXPOSURE_TIME";
             my %expt_translated = $Frm->translate_hdr( $exptimename );

# Change the integration time of the grand mosaic by summing the current
# value and that of the primary NDF used to make the latest mosaic.  Note
# this is done to the physical file as well as the ORAC-DR internal header,
# and only to the added (grand) mosaic.
             my $exptime = $Grp->uhdr( $exptimename ) +
                           $tarGrp->frame( 0 )->uhdr( $exptimename );
             $Grp->uhdr( $exptimename, $exptime );
             while( ( my $key, my $value ) = each %expt_translated ) {
               _SET_FILE_FITS_ITEM_ FILE=$grpfile KEY=$key VALUE=$exptime
             }

# Change the end airmass to reflect the last frame included in the grand mosaic.  Note this
# is done to the physical file as well as the ORAC-DR internal header.
             $Grp->uhdr( $amendname, $amend );
             if ( %am_translated ) {
               while( ( my $key, my $value ) = each %am_translated ) {
                 _SET_FILE_FITS_ITEM_ FILE=$grpfile KEY=$key VALUE=$value
               }
             }

# Change the end UT time to reflect the last frame included in the grand mosaic.  Note this
# is done to the physical file as well as the ORAC-DR internal header.
             $Grp->uhdr( $utendname, $utend );
             if ( %ut_translated ) {
               while( ( my $key, my $value ) = each %ut_translated ) {
                 _SET_FILE_FITS_ITEM_ FILE=$grpfile KEY=$key VALUE=$value
               }
             }

             orac_print "Current cycle's grand mosaic, $mosname, added into main grand mosaic " . $Grp->file . ".\n";

# Set the main mosaic world co-ordinate system to sky.
# ====================================================

# The registration process may have reset the WCS domain of the main
# mosaic to pixel or CCD_REG, so reset the domain to sky co-ordinates.
             if ( $skywcs ) {

# Determine whether or there is a SKY frame present.  First obtain a
# list of the frames' domains.  See if there is a domain "SKY" ignoring
# case.
                $Mon{ "ndfpack_mon" }->obeyw( "ndftrace", "ndf=$grandmos fullwcs" );
                ( $ORAC_STATUS, my @domain ) = $Mon{ "ndfpack_mon" }->get( "ndftrace", "fdomain" );
                if ( join( " ", @domain ) =~ /\sSKY\s/i ) {

# Select the SKY frame in the WCS component.
                   $Mon{ "ndfpack_mon" }->obeyw( "wcsframe", "ndf=$grandmos frame=sky" );
                   orac_print "Astrometry SKY co-ordinate frame selected in $grandmos grand mosaic.\n";
                }
             }
          }

# Display the main mosaic.
          _DISPLAY_GROUP_IMAGE_

# Remove the intermediate mosaic.
          if ( $fillbad ) {
             _DELETE_A_FRAME_ FRAME=$mosname
          }
          orac_print "\n";
       }
    }

# Podule
# ======

=head1 NAME 

_MAKE_MOSAIC_EXTENDED_ -- Forms mosaics for an EXTENDED recipe.

=head1 DESCRIPTION

This primitive either makes a mosaic of object frames either
in the current row or a `grand' mosaic of the whole of the
current $Grp of an EXTENDED recipe.  There are two main
stages: resampling and making the mosaic.

The primitive either resamples each frame using the non-integer
Cartesian offsets, or merely finds the offsets between frames to
the nearest pixel and shifts the origin (see argument RESAMPLE).
The resampling or shifting imposes no limit to the frame bounds,
so the mosaic extends to include all pixels in contributing frames. 

The primitive then makes the mosaic using zero-point shifts (unless
argument ZERO is false) to give the most self-consistent mosaic based
upon the statistics of overlapping pixels.  On the final row the
primitive creates the grand mosaic combining all target frames.  On
the first cycle of the recipe (normally there is only one) the grand
mosaic becomes the group file and its headers read.  On subsequent
recipe cycles, the current grand mosaic is added into the group
`grand' mosaic.

To prevent the accumulated build up of bad pixels in the grand
mosaic, there is an option (argument FILLBAD) to fill in bad pixels
by using a smooth function which matches the surrounding data.  The
function is an iterative approximation to a solution of Laplace's
equation.

=head1 ARGUMENTS

=over 4

=item FILLBAD = LOGICAL (Given)

If true (1), replace the bad pixels in the current cycle's
mosaic with a smooth function derived from its neighbours. 
Otherwise, leave the bad pixels unaltered.  [0]

=item INT_METHOD = CHARACTER (Given)

The interpolation method.  This is either "linint" for bi-linear
interpolation, or "nearest" for nearest neighbour.  The latter
takes about half the time.  ["linint"]

=item METHOD = CHARACTER (Given)

The method used to combine frames to form the mosaic.  See
parameter METHOD of CCDPACK/MAKEMOS (SUN/139) for the options.
The main two in practice will be "Median" or "Mean".  The former
excludes outliers but has problems in good seeing where the
registration is poor, as it biases against the peak values of
the steepening profile near the core, and hence underestimate
the flux.  In this circumstance the mean blurs the psf profile,
making it more of a plateau than a sharp peak.  However, the
mean preserves the flux, at the cost of the odd rogue value
affecting the result.  ["Mean"]

=item RESAMPLE = LOGICAL (Given)

If true (1), resample the current cycle's frames to the same
Cartesian co-ordinate system using the method given by argument
INT_METHOD.  If false (0), use integer offsets and changes of
origin to register the frames.  The latter is many times
faster and is recommended for pipeline operation.

=item SKYWCS = LOGICAL (Given)

If true (1), each mosaic files has its world co-ordinate frame
set to sky domain, thus appear on supported graphics, provided
a sky frame exists.  Otherwise the frame will be unchanged,
presumably set to domain PIXEL or CCD_REG. [1]

=item ZERO = LOGICAL (Given)

If true (1), the mosaicking determines the most-consistent
shifts of zero-point level between the contributing frames.
If false (0), no such comparison is made.  For the vast majority
of cases this will be true.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for near-infra-red imagers.

=item *

Processing only occurs for object and sky frames, and when either
steering header MAKE_MOSAIC or MAKE_GRAND_MOSAIC is true.  Mosaic
making occurs only for groups members with the steering header
TARGET_OR_SKY is "target", and for a grand mosaic only within the
current recipe as given by steering header CYCLE_NUMBER.

=item *

When RESAMPLE is false, the offset files (.off extension) associated
with each frame are interrogated to find one common object.  This is
identifier 1 if telescope or central-source offsets are used, but the
script searches upwards from 1 the first nine identifiers, if
necessary, until it finds a match.  For each frame the read I<x>-I<y>
co-ordinates rounded to the nearest integer and with opposite sign
become the new origin.

=item *

Group internal header ROOT_NAME stores the name of the grand mosaic
excluding any suffix.  It is written for the first cycle, and read
back for subsequent cycles of the recipe.

=item *

The start and end airmasses and UT times of the grand mosaic
are revised to the limiting values for the first and last
contributing frames respectively.  Likewise the exposure time is
summed.

=item *

The individual mosaic and grand mosaic are displayed.

=item *

The frame titles are propagated.

=item *

The optimum number of overlaps for the mosaic creation is 
two for a row and six for a grand mosaic.

=item *

Code to concatenate field rotation into the resampling is
commented out.  This is because rotation should be handled by the
world co-ordinate system, not by resampling and hence degrading the
data.

=back

=head1 TASKS

CCDPACK: MAKEMOS, TRANNDF; KAPPA: ADD, FILLBAD, FITSMOD, NDFCOPY,
NDFTRACE, SETORIGIN, STATS, WCSFRAME.

=head1 OUTPUT DATA

=over 4

=item *

The grand mosaic, which is called is "E<lt>groupnameE<gt>", where
E<lt>groupnameE<gt> is the name of the group.  For multiple cycles,
individual grand mosaics are also retained and called
"E<lt>groupnameE<gt>_E<lt>cyclenumberE<gt>", where E<lt>cyclenumberE<gt> is the cycle
number derived from steering header CYCLE_NUMBER.

=item *

The row mosaics of the last cycle in E<lt>groupnameE<gt>_mos_E<lt>rowE<gt>,
where E<lt>rowE<gt> is the number of the row.

=item *

Resampled frames each inheriting the name of its input frame but
with the _trn suffix, when RESAMPLE is true.

=back

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
