# -*-perl-*-

=head1 NAME

_DETECT_LIGHT_LEAK_ - Detect a light leak for long darks.

=head1 DESCRIPTION

For part of its operation, WFCAM suffered from a light leak problem
which shows up on long-exposure dark frames taken at the beginning of
the night when the dome is still light. This primitive looks at the
central 10% of the array, and if the mean value is larger than 20 (for
cameras 1, 2, and 3) or 30 (for camera 4), then a light leak is
present.

=head1 ARGUMENTS

=over 4

=item LEAK = BOOLEAN (Returned)

Whether or not a light leak is detected.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for WFCAM.

=back

=head1 OUTPUT DATA

=over 4

None.

=back

=head1 TASKS

KAPPA: STATS.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Science and Technology Facilities
Council.  All Rights Reserved.

=cut

# Set up the limits.
my %limit = ( '1' => 20,
              '2' => 20,
              '3' => 20,
              '4' => 45 );

my $ndf = $Frm->file;

# Run STATS on the central 10%. WFCAM arrays are 2048x2048.
my $params = "ndf=$ndf(~10\%,~10\%)";
$Mon{'kappa_mon'}->obeyw( "stats", "$params" );
my( $ORAC_STATUS, $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

# Run the check.
my $limit = $limit{ $Frm->uhdr( "ORAC_CAMERA_NUMBER" ) };
my $light_leak = ( $mean > $limit );
orac_say sprintf( "Light leak check: Mean value: %.2f Threshold: %.2f\n",
                  $mean, $limit );

# Return;
$_DETECT_LIGHT_LEAK_{LEAK} = $light_leak;

