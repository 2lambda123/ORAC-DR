=head1 NAME

_MASK_BAD_PIXELS_ -- Applies a bad-pixel mask.

=head1 DESCRIPTION

This primitive applies the bad-pixel mask to the current frame,
creating a masked frame by adding a pixel mask frame.  The bad
pixels are specified by Starlink bad (`magic') values.  The
primitive reports a successful masking and the frames concerned.

=head1 NOTES

=over 4

=item *

This primitive is suitable for UFTI, IRCAM, INGRID, and
Michelle in imaging mode.

=item *

Processing only occurs for object and sky frames, and
sub-frames therein.

=item *

The masked image can be displayed.

=item *

The mask frame is obtained from the $Cal-E<gt>mask method.

=item *

The frame title is propagated.

=back

=head1 OUTPUT DATA

=over 4

=item *

Bad-pixel-masked frame inheriting the current frame's name but with
the _bp suffix.

=back

=head1 TASKS

KAPPA: ADD.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998--2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

my $mask = $Cal->find_file( $Cal->mask . ".sdf" );
$mask =~ s/\.sdf//;

if( ! defined( $mask ) ) {

  orac_print "No bad-pixel mask found in calibration directory. Cannot mask bad pixels.\n";

} else {

  orac_print "Bad-pixel mask $mask will be used.\n";

# Loop through the sub-files.
  foreach my $i ( 1 .. $Frm->nfiles ) {

# Generate the input and output filenames.
    ( my $in, my $out ) = $Frm->inout( "_bp", $i );

# Add the mask which comprises bad pixels and zero elsewhere.
    $Mon{ "kappa_mon" }->obeyw( "add", "in1=$in out=$out in2=$mask title=!" );

# Report the processing status.
    orac_print "$in to $out: Bad pixels done.\n";

# Record the new file name in the frame object.
    $Frm->file( $i, $out );                      # obligatory update step

# Display the frame.
    _DISPLAY_FRAME_IMAGE_
  }

}

orac_print "\n";
