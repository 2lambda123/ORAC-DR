# -*-perl-*-

=head1 NAME

_QA_SYSTEM_TEMPERATURE_ - Run system temperature QA checks.

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council. All
Rights Reserved.

=cut

use Starlink::HDSPACK qw/ create_hdsobj copy_hdsobj /;
use JCMT::ACSIS::Array;

my %tsys;
my %receptor_tsys;

my $key = ( defined( $Frm->hdr( "OBSIDSS" ) ) ?
            $Frm->hdr( "OBSIDSS" )            :
            $Frm->hdr( "OBSID" ) . "_" . $Frm->hdr( "SUBSYSNR" ) );

my $array_tsys = 0;

foreach my $i ( 1 .. $Frm->nfiles ) {

  my $infile = $Frm->file( $i );

  orac_say "Retrieving Tsys values from $infile.";

  my $tmptsys = new ORAC::TempFile;

  # Copy the Tsys array out to a temporary NDF.
  my $ORAC_STATUS = ( create_hdsobj( "$tmptsys", 'NDF' ) ? ORAC__OK : ORAC__ERROR );
  $ORAC_STATUS = ( copy_hdsobj( "$infile.MORE.ACSIS.TSYS", "$tmptsys.DATA_ARRAY" ) ? ORAC__OK : ORAC__ERROR );

  # Get stats on the Tsys array.
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$tmptsys" );

  ( $ORAC_STATUS, my $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

  $array_tsys += $mean;

  # Get stats for each receptor.
  my $array = new JCMT::ACSIS::Array( File => $infile );
  my @receptors = $array->receptors;

  foreach my $receptor ( @receptors ) {
    my $pixel = $array->pixel( $receptor );
    $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$tmptsys($pixel,)" );
    ( $ORAC_STATUS, my $pixmean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

    if( $pixmean > 0 ) {
      $receptor_tsys{$receptor} += $pixmean;
    } else {
      $receptor_tsys{$receptor} = "bad";
    }
  }
}

$array_tsys /= $Frm->nfiles;
foreach my $receptor ( keys %receptor_tsys ) {
  if( $receptor_tsys{$receptor} ne 'bad' ) {
    $receptor_tsys{$receptor} /= $Frm->nfiles;
  }
}

orac_say sprintf( " Tsys for entire array:   %7.2f K", $array_tsys );

_PRETTYPRINT_RECEPTOR_QA_ HASH=\%receptor_tsys TYPE=Tsys

$tsys{$key} = \%receptor_tsys;

# Store the hash of Tsys values.
$Frm->uhdr( "QA_TSYS_VALUES", \%tsys );

# Tidy-up output.
orac_print "\n";
