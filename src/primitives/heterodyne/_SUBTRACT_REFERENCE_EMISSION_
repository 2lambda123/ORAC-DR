=head1 NAME

_SUBTRACT_REFERENCE_EMISSION_

=head1 DESCRIPTION

The purpose of this primitive is to remove any absorption lines
originating from emission in a poorly chosen reference position.  It
forms one or two representative reference spectra either by masking
known emission or not or both, and then for each representative
spectrum forming the mode spectrum for each receptor and then average
those. It then applies a mild smooth to it and determines its rms.
There are pros and cons for the masked spectrum, and so an option is
to allow either or use both. (See Argument USE_SOURCE_MASK.)

Then follows an analysis phase for which there two approaches.  First
is to set the positions of the reference lines via the
REF_EMISSION_REGIONS recipe parameter.  These regions are masked and
filled in, the background determined and subtracted from the unmasked
representative spectrum to form an approximation to the reference
spectrum.

The alternative is to determine the line locations and extents
automatically (using primitive _REFINE_REFERENCE_SPECTRUM_, which also
determines and subtracts the background, again to form an estimate of
the reference spectrum.

The estimated spectrum is expanded to the size of the input unmasked
time series cubes and added (so as to fill in the absorption lines).

This primiitve is only implemented if recipe parameter
SUBTRACT_REF_EMISSION is defined.

=head1 ARGUMENTS

=over 4

=item COMBINE_DETECTORS = BOOLEAN (Given)

Whether or to combine all detectors to form the reference spectrum.
The receptors are strictly viewing slightly different locations and
hence each receptor's reference spectrum will be different.  However,
if the source of the reference emission is not particularly compact
this may not be significant in comparison with the much better
signal-to-noise ratio in the composite reference spectrum, leading to
better line detection.  This argument can be overridden by the
RECPAR_REF_EMISSION_COMBINE_DETECTORS uhdr via the recipe parameter
system.  [0]

=item COMBINE_BY_REFPOS = BOOLEAN (Given)

Whether to combine observations by their reference position. Combining
should improve the signal-to-noise ratio in the derived reference
spectrum.  This argument can be overridden by the
RECPAR_REF_EMISSION_COMBINE_REFPOS uhdr via the recipe parameter
system.  If false, observations are grouped by observation date.  [1]

=item ITERATION = INTEGER (Given)

The group-processing iteration number.  It is needed to retain each
iteration's estimate of the reference spectrum.  [1]

=item ONLY_SOURCE_MASK = BOOLEAN (Given)

If set true the value of USE_SOURCE_MASK or its recipe parameter
REF_EMISSION_MASK_SOURCE are ignored and forces USE_SOURCE_MASK to 1.
[0]

=item USE_SOURCE_MASK = STRING (Given)

This controls the use of the mask of source emission already detected.
At first enabling this (setting it to 1) would appear to be the right
choice, as it greatly reduces the source emission in the compressed
spectrum and thus makes discrimination between dips in multiple source
emission lines versus an emission line in the reference spectrum
easier. However, in practice it often leaves the reference lines in
steep-sided valleys, and as a result underestimates (typically by
0.1-0.2 K) the reference line height, and leaves residual reference
absorption lines in the source spectra.  Combining using the mode
instead (when set to 0) avoids this, but it then becomes problematic
discriminating between lower source emission and a reference line with
extended source emission.  A third option is to set this to "Both".
This attempts to get the best of both, as it uses the masked spectrum
to locate the lines, but the unmasked modal spectrum to determine the
line strengths.

This argument can be overridden by the RECPAR_REF_EMISSION_MASK_SOURCE
uhdr via the recipe parameter system.  ["Both"]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=item *

The masked time-series cube is determined by the _RECREATE_MASKED_TIMESERIES_
primitive.

=item *

The masked time-series data filenames must be stored in a hash
reference in the Group MASKED_TIMESERIES uhdr, with the key being the
original unmasked time-series data, and the value being the masked
time-series data.

=item *

The names of the new output files are updated in the Group internal
header MASKED_TIMESERIES.

=item *

The output files are logged as group intermediates.

=back

=head1 OUTPUT DATA

=over 4

=item *

Time-series data with reference emission subtracted having the _sre suffix
applied to the current Frame.

=item *

The derived cleaned reference spectra with the _refspec suffix applied to
the current Frame for each reference position.

=item *

A mask of emission of the cleaned reference spectra with the _refmask
suffix applied to the current Frame for each reference position.  This
is only done for automatic line detection and on the first iteration.

=back

=head1 TASKS

KAPPA: ADD, ARDMASK, BLOCK, CMULT, COLLAPSE, FILLBAD, GAUSMOOTH, MANIC,
       MATHS, NDFCOPY, NDFTRACE, SETUNITS, STATS, SUB, WCSCOPY.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2016, 2019, 2020 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Retrieve and validate parameters.
# =================================

# Override order if we've been given a recipe parameter.
my $apply = ( defined( $Frm->uhdr( "RECPAR_SUBTRACT_REF_EMISSION" ) ) ?
              $Frm->uhdr( "RECPAR_SUBTRACT_REF_EMISSION" )            :
              0 );
if ( ! $apply ) { goto RETURN }

my $combine_detectors = get_prim_arg( $_PRIM_ARGS_, "COMBINE_DETECTORS", 0 );
my $combine_refpos = get_prim_arg( $_PRIM_ARGS_, "COMBINE_BY_REFPOS", 1 );
my $iteration = get_prim_arg( $_PRIM_ARGS_, "ITERATION", 1 );
my $only_mask_default = $iteration > 1 ? 0 : 1;
my $only_masked = get_prim_arg( $_PRIM_ARGS_, "ONLY_SOURCE_MASK", $only_mask_default );
my $usemasked = get_prim_arg( $_PRIM_ARGS_, "USE_SOURCE_MASK", "Both" );

$combine_detectors = ( defined( $Frm->uhdr( "RECPAR_REF_EMISSION_COMBINE_DETECTORS" ) ) ?
                       $Frm->uhdr( "RECPAR_REF_EMISSION_COMBINE_DETECTORS"  )            :
                       $combine_detectors );
$combine_refpos = ( defined( $Frm->uhdr( "RECPAR_REF_EMISSION_COMBINE_REFPOS" ) ) ?
                    $Frm->uhdr( "RECPAR_REF_EMISSION_COMBINE_REFPOS"  )            :
                    $combine_refpos );

if ( ! $combine_detectors ) {
   my $isok = eval { require JCMT::ACSIS::Array; 1; };
   if ( ! $isok ) {
      orac_warn "Could not load the JCMT::ACSIS::Array Perl module: $@\n";
      orac_warn "Will average all receptors to correct for reference spectrum.\n";
      $combine_detectors = 1;
   }
}

my %masked;
my $user_region = 0;

# Retrieve the regions containing strong reference-spectrum emission
# from the Frame's user header.
my $rem_regions = ( defined( $Frm->uhdr( "RECPAR_REF_EMISSION_REGIONS" ) ) ?
                  $Frm->uhdr( "RECPAR_REF_EMISSION_REGIONS" )              :
                  undef );
my ( @rem_bounds, @regions );
if ( ref( $rem_regions ) eq 'ARRAY' ) {
   @regions = @{ $rem_regions }
} else {
   push @regions, $rem_regions;
}

if ( defined( $rem_regions ) ) {

# Validate the syntax of the reference-emission region.
   foreach ( @regions ) {
      if ( /:/ ) {
         my ( $lowvel, $uppvel ) = split( ":", $_ );
         $user_region = 1;
         push @rem_bounds, $lowvel;
         push @rem_bounds, $uppvel;
      } else {
         $user_region = 0;
         last;
      }
   }
}

$usemasked = ( defined( $Frm->uhdr( "RECPAR_REF_EMISSION_MASK_SOURCE" ) ) ?
               $Frm->uhdr( "RECPAR_REF_EMISSION_MASK_SOURCE"  )            :
               $usemasked );
my $both = lc( $usemasked ) =~ /^b/ && ! $user_region && ! $only_masked ;
$usemasked = $only_masked ? 1 : $usemasked;
my @combine = ( $usemasked );
@combine = ( 1, 0 ) if $both;


# Form initial estimate of reference spectrum.
# ============================================

# Write a heading to structure the commentary.
orac_say "\n\nSubtract mean spectrum from unmasked time-series";
my $underline = "-" x 70;
orac_say "$underline\n";

orac_say "Averaging spectra in masked time-series data.";

my @refposgrps = $combine_refpos ? $Grp->subgrps( "ORAC_REFERENCE_LOCATION" ) : $Grp->subgrps( "ORAC_UTDATE" );
my ( @mean_spectra, @mean_weights );
my ( @masks, $params, @weight );
my ( $in, $out, $esp, $ressp, $text, $suffix );
my ( $mrsp, $resm );
my ( $array, @receptors, $nreceptor );
my $ORAC_STATUS;

# Initialise the index of the arrayof masks.
   my $mask_i = 0;

# Loop over the common reference positions or current date.
# =========================================================
my $refposnum = 0;
GROUP: foreach my $rpGrp ( @refposgrps ) {
   $refposnum++;
   my @Objs = $rpGrp->members;
   my $number_at_location = scalar( @Objs );
   my ( $refspec_masked, $refspec_unmasked );
   my $grpFrm = $rpGrp->allmembers->[0];

   foreach my $maskspec ( @combine ) {
      @mean_spectra = ();
      @mean_weights = ();

# Each object (group or observation) may comprise more than one file.
      OBJECT: foreach my $rpFrm ( @Objs ) {
         $in = $rpFrm->file;

# Form average spectrum for each observation.
# ===========================================
         my ( $key, @msp );
         foreach my $i ( 1 .. $rpFrm->nfiles ) {
            ( $in, $esp ) = $rpFrm->inout( "_esp", $i );
            orac_say "  Processing observation: $in.";
            push @msp, $esp;

# We need the dimensions of the input file for later.
            _GET_DIMENSIONS_ FILE=$in
            my $lbnd = $_GET_DIMENSIONS_{LBOUND};
            my $ubnd = $_GET_DIMENSIONS_{UBOUND};
            push @weight, $ubnd->[2] - $lbnd->[2] + 1;

# Extract the masked timeseries associated with the current input file.
            ( my $rootname, $suffix ) = split /_([^_]+)$/, $in;
            my $mask_ref = $Grp->uhdr( "TIMESERIES_MASKS" );
            $key = $rootname . "_" . $i;
            my $tsmask = $mask_ref->{$key};
            push @masks, $tsmask;

# Obtain some temporary filenames.
            my $temp1file = new ORAC::TempFile( 0 );
            my $temp2file = new ORAC::TempFile( 0 );
            my $temp3file = new ORAC::TempFile( 0 );

# Apply the mask (zero times the data values should still pass the
# mask from the masked timeseries through to the output.
            if ( $maskspec ) {
               $params = "in1=$in in2=$tsmask out=$temp1file";
               $Mon{'kappa_mon'}->obeyw( "add", "$params" );
               orac_say "    Apply source-emission mask before collapsing the time-series cube.";

# Collapse along the time axis.  Use the mode to remove at least some of
# the residual source emission.
               $params = "in=$temp1file out=$temp2file estimator=mode wlim=0.0 axis=3";
               $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
            } else {
               $params = "in=$in out=$temp2file estimator=mode wlim=0.0 axis=3";
               $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
            }

            if ( $combine_detectors ) {
               $params = "in=$temp2file out=$temp3file estimator=mean wlim=0.0 axis=2";
               $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
               orac_say "    Collapse using the mode on the time axis and the mean by receptor.";

               $params = "in=$temp3file out=$esp scalar=-1.0";
               $Mon{'kappa_mon'}->obeyw( "cmult", "$params" );

            } else {
               orac_say "    Collapse using the mode on the time axis.";

               $params = "in=$temp2file out=$esp scalar=-1.0";
               $Mon{'kappa_mon'}->obeyw( "cmult", "$params" );
            }

# Request that the flipped spectrum is removed upon completion of the
# Group processing.
            $Grp->push_intermediates( $esp );
         }

# Find the weighted average of each subfile's mean spectrum (the one
# after source emission being masked).  The fiddly bit is forming the
# MATHS command line to form ia, ib, ic... for the input file names.
         $ressp = $rpFrm->inout( "_ressp" );
         my $total_weight;
         if ( $rpFrm->nfiles > 1 ) {
            my $maths_list = '';
            my $maths_eq = 'exp=\'(';
            my $maths_index = "a";
            $total_weight = 0;
            foreach my $j ( 1 .. $rpFrm->nfiles ) {
               $maths_list .= "i" . $maths_index . "=$msp[$j-1] ";
               $maths_eq .= "i" . $maths_index . "*" . $weight[$j-1] . "+";
               $maths_index = chr( ord( $maths_index ) + 1 );
               $total_weight += $weight[$j-1];
            }
            $maths_eq =~ s/\+$/)/;
            $maths_eq .= "/" . $total_weight . "'";

            $Mon{'kappa_mon'}->obeyw( "maths", "$maths_eq $maths_list out=$ressp" );
         } else {
            $params = "in=$msp[0] out=$ressp";
            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
            $total_weight = $weight[0];
         }
         push @mean_spectra, $ressp;
         push @mean_weights, $total_weight;

# Request that the mean spectrum is removed upon completion of the
# Group processing.
         $Grp->push_intermediates( $ressp );
      }

# Form average spectrum for the current sub-group and receptor.
# =============================================================

# Reminder: the sub-group is either by reference position or by UT date.

# For data taken at different epochs the mapping from pixel to
# velocity is likely to be different.  So before we can do averaging
# over pixels, the different observations need to be aligned.
# The mean spectra are passed to _ALIGN_SPECTRA in a bespoke Group.
      $mrsp = $grpFrm->inout( "_mrsp" );
      if ( $number_at_location > 1 ) {
         orac_say "";
         orac_say "Align the mean spectra in order to form a weighted average.";
         {
            my $Grp = $Grp->new;
            foreach my $m ( 1 .. $number_at_location ) {
               my $temp_Frm = $Frm->new;
               $temp_Frm->file( $mean_spectra[$m-1] );
               $Grp->push( $temp_Frm );
            }
            $suffix = "_resspal";
            _ALIGN_SPECTRA_ SUFFIX=$suffix
         }

# Find the weighted average of the current reference sub-group's mean
# spectrum (the one after source emission being masked).  Most of the
# following is forming the expression for the average to give to MATHS.
         my $maths_list = '';
         my $maths_eq = 'exp=\'(';
         my $maths_index = "a";
         my $total_weight = 0;
         foreach my $i ( 1 .. $number_at_location ) {
            $mean_spectra[$i-1] =~ s/_ressp/$suffix/;
            $maths_list .= "i" . $maths_index . "=$mean_spectra[$i-1] ";
            $maths_eq .= "i" . $maths_index . "*" . $mean_weights[$i-1] . "+";
            $maths_index = chr( ord( $maths_index ) + 1 );
            $total_weight += $mean_weights[$i-1];
         }
         $maths_eq =~ s/\+$/)/;
         $maths_eq .= "/" . $total_weight . "'";

         $Mon{'kappa_mon'}->obeyw( "maths", "$maths_eq $maths_list out=$mrsp" );
         orac_say "Create weighted mean of the modal spectra in $mrsp";
      } else {
         $params = "in=$mean_spectra[0] out=$mrsp";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
         orac_say "Copy mean spectra to $mrsp";
      }

# Request that each aligned mean spectrum is removed upon completion of the
# Group processing.
      foreach my $i ( 1 .. $number_at_location ) {
         $Grp->push_intermediates( $mean_spectra[$i-1] );
      }

# Request that the mean spectrum across observations is removed upon completion
# of the Group processing.
      $Grp->push_intermediates( $mrsp );

      $Mon{ndfpack_mon}->obeyw( "ndftrace", "ndf=$mrsp" );
      ( $ORAC_STATUS, my $ndim ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "ndim" );
      my $fwhm = $ndim > 1 ? "[1.5,0.1]" : 1.5;

# Reduce the noise with minimal broadening of the lines.
      my $suffix = $maskspec ? "resmask" : "resmode";
      $suffix = $iteration > 1 ? $suffix . "$iteration" : $suffix;
      $resm = $grpFrm->inout( $suffix );
      $params = "in=$mrsp out=$resm fwhm=$fwhm orient=0.0";
      $Mon{'kappa_mon'}->obeyw( "gausmooth", "$params" );
      my $ref_spectrum = new ORAC::TempFile( 0 );

# Find the representative rms of the mean spectrum.
# -------------------------------------------------

# It should comprise minimal source emission (now in absorption),
# reference-spectrum emission and noise.  It's the last that we seek.
      if ( ( ! $maskspec && $both ) || ! $both ) {
         my @rms;
         {
            my $Frm = $Frm->new;
            if ( $combine_detectors ) {
               $Frm->file( $resm );
               _FIND_MEAN_RMS_ GROUP=0
               push @rms, $Frm->uhdr( "RMS_MEAN" );
               orac_say "  RMS for the mean modal spectrum is $rms[0].";
               $Frm->push_intermediates( $resm )
            } else {

# Find the mean in each receptor's spectrum.
               my $meanspec = new ORAC::TempFile( 0 );
               $params = "in=$resm out=$meanspec estimator=mean wlim=0.0 axis=2";
               $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
               $Frm->file( $meanspec );
               _FIND_MEAN_RMS_ GROUP=0
               push @rms, $Frm->uhdr( "RMS_MEAN" );
               orac_say "  RMS for the modal spectrum is $rms[-1].";
            }
         }
      }

# Store the two smoothed collapsed spectra separately.  For user-defined
# regions there is no both and so will continue to use $resm.
      if ( $both ) {
         if ( $maskspec ) {
            $refspec_masked = $resm;
         } else {
            $refspec_unmasked = $resm;
         }
      }
   }

# Analysis phase
# ==============

   my $units;
   my $linemap = undef;
   my $cleaned = undef;
   my ( $ardmask, $boxsize, $maxwidth );
   my ( @lbnd, @ubnd );
   my $suffix = $iteration == 1 ? "_refspec" : "_refspec$iteration";
   my $refspec = $grpFrm->inout( $suffix );
   my $refmask = $grpFrm->inout( "_refmask" ) if ! $user_region;

   my $first = 1;
   my $first_group = 1;

   foreach my $rpFrm ( @Objs ) {
      foreach my $i ( 1 .. $rpFrm->nfiles ) {
         $mask_i++;

# Do the preliminary steps for each file.
# ---------------------------------------

         ( $in, $out ) = $rpFrm->inout( "_sre", $i );

# Retrieve the bounds (needed later to regenerate the cube), units, and
# pixel scale of the input cube.
         $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
         ( $ORAC_STATUS, @lbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "lbound" );
         ( $ORAC_STATUS, @ubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "ubound" );
         ( $ORAC_STATUS, $units ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "units" );
         ( $ORAC_STATUS, my $pixscale ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fpixscale" );

# Need extra work NDFs.
         my $temp6file = new ORAC::TempFile( 0 );
         my $temp7file = new ORAC::TempFile( 0 );
         my $temp8file = new ORAC::TempFile( 0 );

# Determine reference emission in user-specified regions.
# -------------------------------------------------------

         if ( $user_region ) {
            my $userlines = scalar( @rem_bounds );
            if ( $userlines ) {
               orac_say "Subtracting the user-defined region from unmasked time-series data.";
            } else {
               orac_say "Subtracting the $userlines user-defined regions from unmasked time-series data.";
            }

            if ( $first ) {

# Create a temporary file to hold an ARD mask.
               $ardmask = new ORAC::TempFile;

# Need to tell ARD the data are one-dimensional and the co-ordinates
# are spectral (not pixels).
               print {$ardmask->handle} "COFRAME( SPECTRUM )\n";
               print {$ardmask->handle} "DIMENSION( 1 )\n";

# For each pair of baseline regions, write a RECT ARD region.  Also
# find the halfwidth in pixels of the widest line.
               my $hw = 0.0;
               for ( my $j = 0; $j <= $#rem_bounds ; $j += 2 ) {
                  print {$ardmask->handle} "LINE( $rem_bounds[$j], $rem_bounds[$j+1] )\n";
                  $hw = max( $hw, 0.5 / $pixscale * ( $rem_bounds[$j+1] - $rem_bounds[$j] ) );
               }
               $boxsize = max( 3.0, $hw );

# Run ARDMASK to mask the line.
               $params = "in=$resm out=$temp6file inside ardfile=" . $ardmask->file;
               $Mon{'kappa_mon'}->obeyw( "ardmask", "$params" );

# Lightly smooth the remaining spectrum and fill in the gap where the line is
# masked.
               $params = "in=$temp6file out=$temp7file estimator=median box=5";
               $Mon{'kappa_mon'}->obeyw( "block", "$params" );
               $params = "in=$temp7file out=$temp8file niter=10 size=$boxsize";
               $Mon{'kappa_mon'}->obeyw( "fillbad", "$params" );

# Subtract this spectrum from the original, so as to correct for
# residual non-reference emission that may be present around the
# reference line.
               $params = "in1=$mrsp in2=$temp8file out=$refspec";
               $Mon{'kappa_mon'}->obeyw( "sub", "$params" );

               $text = "mean of chosen line regions";
            }

# Attempt automated removal of reference emission from the mean spectrum
# ----------------------------------------------------------------------
         } elsif ( $combine_detectors ) {

# Form background-subtracted reference spectrum.  Need to pass
# the Frame associated with the current reference position to generate
# the desired file names.
            if ( $first ) {
               my $Frm = $rpFrm;
               if ( $both ) {
                  if ( $iteration > 1 ) {
                     _REFINE_REFERENCE_SPECTRUM_ IN=$refspec_unmasked LOCATION=$refspec_masked OUT=$refspec ITERATION=$iteration REFMASK=$refmask
                  } else {
                     _REFINE_REFERENCE_SPECTRUM_ IN=$refspec_unmasked LOCATION=$refspec_masked OUT=$refspec ITERATION=$iteration
                  }
               } else {
                  if ( $iteration > 1 ) {
                     _REFINE_REFERENCE_SPECTRUM_ IN=$resm OUT=$refspec ITERATION=$iteration REFMASK=$refmask
                  } else {
                     _REFINE_REFERENCE_SPECTRUM_ IN=$resm OUT=$refspec ITERATION=$iteration
                  }
               }
               $text = "mean of reference-emission line regions";
            }

# Attempt automated removal of reference emission receptor by receptor
# --------------------------------------------------------------------
         } else {

            if ( $first ) {

# Obtain the number of receptors if analyss is per receptor.
               $array = new JCMT::ACSIS::Array( File => $in );
               @receptors = $array->receptors;
               $nreceptor = scalar( @receptors );

# Create the NDF to hold the reference spectrum for each receptor.
# Existing approximate reference spectra will be replaced by better
# estimates.
               $params = "in=$resm out=$refspec trim trimwcs";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

               my @refspec_files;
               for ( my $r = 1; $r <= $nreceptor; $r++ ) {
                  my $receptor =  $receptors[$r - 1];
                  orac_say "Receptor " . $receptor . ".";
                  my $Frm = $rpFrm;

# Extract the modal spectrum for each receptor.
                  my $refspec_1r = "$refspec" . "_$receptor";
                  if ( $both ) {
                     my $rs_unmasked_1r = new ORAC::TempFile( 0 );
                     $params = "in=$refspec_unmasked(,$r) out=$rs_unmasked_1r trim trimwcs";
                     $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Create and initialise the reference spectrum for the current receptor in
# case something goes awry like a blanked receptor because it failed QA.
# Retain other aspects of the input spectrum.
                     $params = "in=$rs_unmasked_1r scalar=0 out=$refspec_1r";
                     $Mon{'kappa_mon'}->obeyw( "cmult", "$params" );

# Check that the receptor still has sufficient valid values to protect
# calls within _REFINE_REFERENCE_SPECTRUM_.  If it does not, just fill
# this receptor's reference spectrum with zeroes.
                     $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$rs_unmasked_1r" );
                     ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
                     if ( $numgood > 10 ) {
                        my $rs_masked_1r = new ORAC::TempFile( 0 );
                        $params = "in=$refspec_masked(,$r) out=$rs_masked_1r trim trimwcs";
                        $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Later iterations use the previous mask for the receptor.
                        if ( $iteration > 1 ) {
                           my $rf_mask_1r = new ORAC::TempFile( 0 );
                           $params = "in=$refmask(,$r) out=$rf_mask_1r trim trimwcs";
                           $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

                           _REFINE_REFERENCE_SPECTRUM_ IN=$rs_unmasked_1r LOCATION=$rs_masked_1r OUT=$refspec_1r ITERATION=$iteration REFMASK=$rf_mask_1r RECPTOR=$receptor
                        } else {
                           _REFINE_REFERENCE_SPECTRUM_ IN=$rs_unmasked_1r LOCATION=$rs_masked_1r OUT=$refspec_1r ITERATION=$iteration RECEPTOR=$receptor
                        }
                    }

# Duplicate but simpler if not using both mode and source masked time series.
                  } else {
                     my $rs_1r = new ORAC::TempFile( 0 );
                     $params = "in=$resm(,$r) out=$rs_1r trim trimwcs";
                     $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Create and initialise the reference spectrum for the current receptor in
# case something goes awry like a blanked receptor because it failed QA.
# Retain other aspects of the input spectrum.
                     $params = "in=$rs_1r scalar=0 out=$refspec_1r";
                     $Mon{'kappa_mon'}->obeyw( "cmult", "$params" );

# Check that the receptor still has sufficient valid values to protect
# calls within _REFINE_REFERENCE_SPECTRUM_.
                     $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$rs_1r" );
                     ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

                     if ( $numgood > 10 ) {
                        if ( $iteration > 1 ) {
                           my $rf_mask_1r = new ORAC::TempFile( 0 );
                           $params = "in=$refmask(,$r) out=$rf_mask_1r trim trimwcs";
                           $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

                           _REFINE_REFERENCE_SPECTRUM_ IN=$rs_1r OUT=$refspec_1r ITERATION=$iteration REFMASK=$rf_mask_1r
                        } else {
                           _REFINE_REFERENCE_SPECTRUM_ IN=$rs_1r OUT=$refspec_1r ITERATION=$iteration
                        }
                     }
                  }

# Need to save the output filenames for pasting together.
                  push @refspec_files, $refspec_1r;

# Request that the inverted reference spectrum is removed upon completion
# of the Group processing.
                  $Grp->push_intermediates( $refspec_1r );
               }

# Paste the improved reference spectra for all receptors into the two-dimensional array
# of all the reference spectra.  Offset each spectrum by one row.
               my $to_paste = write_file_list( @refspec_files );
               $params = "in=^$to_paste out=$refspec shift=[0,1]";
               $Mon{'kappa_mon'}->obeyw( "paste", "$params" );
               $text = "mean of reference-emission line regions for each receptor";
            }
         }

# Application phase
# =================

# For data taken at different epochs the mapping from pixel to
# velocity is likely to be different.  A combined reference-spectra
# file (with suffix _refspec) has been aligned the first epoch's data.
# When we come to subtract it from the current file ($in), we need to
# realign  the _refspec with the current file, so that they can be
# subtracted pixel by pixel.

# For the first (master) group, there is no need to align to itself.
         my ( $crep, $crepal );
         if ( ! $first_group ) {
            orac_say "";
            orac_say "Align the reference spectrum ($refspec) with the current observation.";

# Extract a spectrum for its WCS, trimming higher dimenstions and
# their associated WCS.
            $crep = $rpFrm->inout( "_crep", $i );
            $params = "in=$in(,1,1) out=$crep trim trimwcs";
            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Append the "al" modifier to the suffix to indicate an aligned file.
            my $suffix = "refspecal";
            $crepal = $refspec;
            $crepal =~ s/refspec/$suffix/;

# The reference file is the current spectrum and the reference
# spectrum is aligned to that.  The reference spectrum is passed
# as the only bespoke Group member.
            {
               my $Grp = $Grp->new;
               my $Frm = $Frm->new;
               $Frm->file( $refspec );
               $Grp->push( $Frm );
               _ALIGN_SPECTRA_ SUFFIX=$suffix REF=$crep
            }

         } else {
            $crepal = $refspec;
         }

# Grow the background mean reference spectrum to match the original time
# series.
         my $tsc = $rpFrm->inout( "_tsc", $i );
         if ( $combine_detectors ) {
            $params = "in=$crepal out=$tsc axes=[1,0,0] ";
            $params .= "lbound=[" . $lbnd[1] . "," . $lbnd[2] . "] ";
            $params .= "ubound=[" . $ubnd[1] . "," . $ubnd[2] . "]";
            $Mon{'kappa_mon'}->obeyw( "manic", "$params" );
         } else {
            $params = "in=$crepal out=$tsc axes=[1,2,0] ";
            $params .= "lbound=" . $lbnd[2] . " ";
            $params .= "ubound=" . $ubnd[2];
            $Mon{'kappa_mon'}->obeyw( "manic", "$params" );
         }
         orac_say "Grow the aligned reference spectrum to the input " .
                  "cube's bounds: $crepal to $tsc.";

# Restore the cube's WCS Frame to the reference spectra/um now in cube
# form.
         $params = "ndf=$tsc like=$in confirm=f";
         $Mon{'ndfpack_mon'}->obeyw( "wcscopy", "$params" );

# Save the spectrum mask for future iterations.  Later iterations
# should just be adjusting for missing signal in the previously detected
# reference-point lines because they were located in source emission
# previously recognised.
         if ( $first && $iteration == 1 && ! $user_region ) {
            $params = "exp='qif(ia.eq.0,<bad>,0)' ia=$refspec out=$refmask";
            $Mon{'kappa_mon'}->obeyw( "maths", "$params" );
         }

# Subtract the mean reference spectrum from the input file.
         $params = "in1=$in in2=$tsc out=$out";
         $Mon{'kappa_mon'}->obeyw( "add", "$params" );

# Set the units back to what they were.
         $Mon{'ndfpack_mon'}->obeyw( "setunits", "ndf=$out units=$units" );

# Report to the user.
         orac_say "Subtract $text after application of mask " . $masks[$mask_i - 1];
         orac_say "$in to $out\n";

# Update the Frm.
         $rpFrm->file( $i, $out );

# Request that the output file, and the raw and aligned master
# reference emission files are removed upon completion of the Group
# processing.
         $Grp->push_intermediates( $tsc );
         $Grp->push_intermediates( $crep ) if defined $crep;
         $Grp->push_intermediates( $crepal );
         $Grp->push_intermediates( $out );
         $first = 0;
      }
      $first_group = 0;
   }

# Request that the intermediate files are removed upon completion of the
# Group processing.  Keep the reference spectrum for inspection of
# quality of the automated reference-spectrum filtering.
   $Grp->push_intermediates( $refmask ) if ! $user_region;
   $Grp->push_intermediates( $resm );
}

orac_print "\n";

RETURN:
