# -*-cperl-*-

=head1 NAME

_CREATE_INTEGRATED_INTENSITY_IMAGE_

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item AXIS = INTEGER (Given)

The axis to collapse over.[3]

=item ESTIMATOR = STRING (Given)

The collapse estimator used to create the image. This can be any of
those listed for the ESTIMATOR parameter for the KAPPA/COLLAPSE
command. ['INTEG']

=item MASK = LOGICAL (Given)

Whether or not to mask out non-signal regions of the cube to help
increase signal-to-noise of the image. [1]

=back

=head1 NOTES

=over 4

This primitive is suitable for ACSIS observations.

=item *

The collapsed WCS axis is not removed from the output WCS. For
example, if the cube is collapsed over the frequency axis, the WCS in
the resulting image will reflect the full frequency bounds over which
the cube was collapsed.

=item *

This primitive is suitable for true 3-D data. This primitive will not
create an image from data that are functionally 3-D but only have one
pixel in any of the three dimensions.

=back

=head1 OUTPUT DATA

=over 4

=item *

The integrated intensity image with _integ suffix.

=back

=head1 TASKS

KAPPA: COLLAPSE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Handle parameters.
my $axis = get_prim_arg( $_PRIM_ARGS_, "AXIS", 3 );
my $estimator = get_prim_arg( $_PRIM_ARGS_, "ESTIMATOR", 'integ' );
my $mask = get_prim_arg( $_PRIM_ARGS_, "MASK", 1 );
my $tag = ( $_PRIM_ARGS_->{TAG} ? 1 : 0 );

# Check the dimensionality.
_GET_DIMENSIONS_
my $dims = $_GET_DIMENSIONS_{DIMS};

my $degen = 0;
foreach ( @$dims ) {
  $degen = ( $_ == 1 );
  last if $degen;
}

my @infiles;

# Only create an image if we don't have a degenerate cube.
if( ! $degen ) {

  my ( undef, $out ) = $Frm->inout( "_integ" );
  my @collapsed;

  my $infile = new ORAC::TempFile;
  open my $fh, ">", $infile->file;

  # We need to collapse the data and variance components, then paste
  # the results together, then paste together the SMURF components
  # into the output image, but only if there are more than two files.
  if( $Frm->nfiles > 1 ) {

    # Set up some temporary files to hold SMURF extension information.
    my $exptimetf = new ORAC::TempFile;
    my $exptimefh = $exptimetf->handle;
    my $exptimefile = $exptimetf->file;
    my $efftimetf = new ORAC::TempFile;
    my $efftimefh = $efftimetf->handle;
    my $efftimefile = $efftimetf->file;
    my $tsystf = new ORAC::TempFile;
    my $tsysfh = $tsystf->handle;
    my $tsysfile = $exptimetf->file;

    foreach my $i ( 1 .. $Frm->nfiles ) {

      my $in = $Frm->file( $i );

      push @infiles, $in;

      my $temp1 = new ORAC::TempFile( 0 );
      my $temp1file = $temp1->file;

      # Set up the parameters to COLLAPSE and run it.
      my $params = "in=$in out=$temp1file estimator=$estimator axis=$axis trim=false";
      $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

      push( @collapsed, $temp1 );
      print $fh "$temp1file\n";

      print $exptimefh "$temp1file.MORE.SMURF.EXP_TIME\n";
      print $efftimefh "$temp1file.MORE.SMURF.EFF_TIME\n";
      print $tsysfh "$temp1file.MORE.SMURF.TSYS\n";

    }
    close $fh;
    close $exptimefh;
    close $efftimefh;

    # Paste together the files in @collapsed into $out.
    my $params = "in='^" . $infile->file . "' out=$out confine=false transp=true";
    $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

    # Paste the SMURF extensions into the output file.
    $params = "in='^$exptimefile' out=$out.MORE.SMURF.EXP_TIME confine=false transp=true";
    $Mon{'kappa_mon'}->obeyw( "paste", "$params" );
    $params = "in='^$efftimefile' out=$out.MORE.SMURF.EFF_TIME confine=false transp=true";
    $Mon{'kappa_mon'}->obeyw( "paste", "$params" );
    $params = "in='^$tsysfile' out=$out.MORE.SMURF.TSYS confine=false transp=true";
    $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

  } else {

    my $in = $Frm->file;
    push @infiles, $in;
    my $params = "in=$in out=$out estimator=$estimator axis=$axis trim=false";
    $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

  }

  # Retrieve stats for the integrated intensity image to find out
  # where the peak is. Block-smooth the image first to get rid of any
  # spikes.
  my $temp = new ORAC::TempFile( 0 );
  my $tempfile = $temp->file;
  $Mon{'kappa_mon'}->obeyw( "block", "in=$out out=$tempfile box=[3,3] estimator=median" );
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$tempfile" );
  my ( $ORAC_STATUS, @maxpos ) = $Mon{'kappa_mon'}->get( "stats", "maxpos" );
  # make sure there was a valid result. We check for numgood rather than
  # checking for bad value in pixel coordinates
  ($ORAC_STATUS, my $ngood) = $Mon{kappa_mon}->get("stats", "numgood");
  if ($ngood > 0) {
      $Frm->uhdr( "INTEG_MAX_POS", \@maxpos );
  } else {
      orac_warn("Unable to calculate position of strongest spectrum\n");
  }

  orac_print "Integrated intensity image created in $out.\n";

  if( $tag ) {
    _TAG_AS_REPRESENTATIVE_ FILE=$out GROUP=0 SUFFIX=rimg
  }
}

orac_print "\n";
