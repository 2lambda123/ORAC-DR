# -*-perl-*-

=head1 NAME

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

my $isok = eval { require JSA::QA; 1; };
if( ! $isok ) {
  orac_warn "Could not load the JSA::QA Perl module: $@\n";
  orac_warn "Continuing with data reduction.\n";
} else {

  my $tsys_values_href = $Frm->uhdr( "QA_TSYS_VALUES" );
  my $rms_values_href = $Frm->uhdr( "QA_RMS_VALUES" );

  my $survey = $Frm->hdr( "SURVEY" );

  my ( $tsys_result, $rms_result, %result );

  if( ! defined( $survey ) ) {
    $tsys_result = JSA::QA::analyse_tsys( $tsys_values_href );
    $rms_result = JSA::QA::analyse_timeseries_rms( $rms_values_href );
  } else {
    $tsys_result = JSA::QA::analyse_tsys( $tsys_values_href,
                                     'survey' => $survey );
    $rms_result = JSA::QA::analyse_timeseries_rms( $rms_values_href,
                                                   'survey' => $survey );
  }

  # Merge the results. If any of the tests fail, then the whole survey QA test fails.
  foreach my $result_survey ( keys %$tsys_result ) {
    my $merged_result = new JSA::QA::Result;
    $merged_result->pass( $tsys_result->{$result_survey}->pass &&
                          $rms_result->{$result_survey}->pass );
    $merged_result->add_fail_reason( $tsys_result->{$result_survey}->fail_reasons );
    $merged_result->add_fail_reason( $rms_result->{$result_survey}->fail_reasons );

    $result{$result_survey} = $merged_result;
  }

  # Display the results.
  foreach my $result_survey ( sort keys %result ) {
    my $pass = $result{$result_survey}->pass;
    orac_print "Time-series QA ";
    orac_print ( ( $pass ? "passed" : " failed " ),
                 ( $pass ? "green" : "bold white on_red" ) );
    orac_print " for $result_survey.\n";
    if( ! $pass ) {
      orac_print " Failure reason" . ( scalar @{$result{$result_survey}->fail_reasons} > 1 ?
                                       "s"                                                   :
                                       "" );
      orac_print ":\n";
      orac_print " " . join( "\n ", @{$result{$result_survey}->fail_reasons} );
      orac_print "\n";
    }
  }
}
