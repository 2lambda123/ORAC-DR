# -*-perl-*-

=head1 NAME

_TAG_AS_REDUCED_CUBE_ -- Tag cube as "reduced".

=head1 DESCRIPTION

For the relevant file (or files), copy it to a new name with product
"reduced" and filename ending in _reduced.

=head1 ARGUMENTS

=over 4

=item FILE = STRING (Given)

By default all files in the given Frame object are tagged as
reduced. This argument allows an explicit file to be tagged.

=item GROUP = LOGICAL (Given)

Whether to operate on the current Frame or Group object. Defaults to
Frame. [0]

=item UPDATE = LOGICAL (Given)

If true, the output files are stored in the current Frame or Group
object (see C<GROUP> argument) and tagged as product
"reduced". Default is for this update to not happen. [0]

=back

=head1 OUTPUT DATA

=over 4

=item *

Cubes with suffix _reducedNNN. If a single file is given (see C<FILE>
argument), then the suffix will be _reduced.

=back

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council. All
Rights Reserved.

=cut

# Handle arguments.
my $file = $_TAG_AS_REDUCED_CUBE_{FILE};
my $group = ( $_PRIM_ARGS_->{GROUP} ? 1 : 0 );
my $update = ( $_TAG_AS_REDUCED_CUBE_{UPDATE} ? 1 : 0 );

my $Obj;
if( $group ) {
  $Obj = $Grp;
} else {
  $Obj = $Frm;
}

if( ! defined( $file ) ) {

  foreach my $i ( 1 .. $Obj->nfiles ) {

    my( $in, $out ) = $Obj->inout( "_reduced", $i );

    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );

    # Modify the FITS header to get the provenance. This is a hack
    # that won't be needed once provenance is tracked automatically by
    # KAPPA routines.

    # First, delete all existing PRVnnnnn headers. We know how many
    # there are by getting the value of the PRVCNT header.
    $Obj->readhdr($out);
    my $hdr = $Obj->hdr;
    my $prvcnt = $hdr->{'PRVCNT'};
    if( $prvcnt ) {
      foreach my $j ( 1 .. $prvcnt ) {
        my $header = sprintf( "PRV%05d", $j );
        _DELETE_FILE_FITS_ITEM_ FILE=$out KEY=$header
      }
    }

    ( $in, my $prov ) = $Obj->inout( "_cube", $i );

    _SET_FILE_FITS_ITEM_ FILE=$out KEY=PRV00001 VALUE=$prov
    _SET_FILE_FITS_ITEM_ FILE=$out KEY=PRVCNT VALUE=1

    orac_print "$in to $out:\n Tagged as reduced cube.\n";

    _DISPLAY_FILE_ FILE=$out GROUP=$group

    if( $update ) {
      $Obj->product( "reduced" );
      $Obj->file( $i, $out );
    }
  }
} else {

  my $in = $file;
  ( undef, my $out ) = $Obj->inout( "_reduced" );

  $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );

  # Modify the FITS header to get the provenance. This is a hack that
  # won't be needed once provenance is tracked automatically by KAPPA
  # routines.

  # First, delete all existing PRVnnnnn headers. We know how many
  # there are by getting the value of the PRVCNT header.
  $Obj->readhdr($out);
  my $hdr = $Obj->hdr;
  my $prvcnt = $hdr->{'PRVCNT'};
  foreach my $j ( 1 .. $prvcnt ) {
    my $header = sprintf( "PRV%05d", $j );
    _DELETE_FILE_FITS_ITEM_ FILE=$out KEY=$header
  }

  ( $in, my $prov ) = $Obj->inout( "_cube" );

  _SET_FILE_FITS_ITEM_ FILE=$out KEY=PRV00001 VALUE=$prov
  _SET_FILE_FITS_ITEM_ FILE=$out KEY=PRVCNT VALUE=1

  _DISPLAY_FILE_ FILE=$out GROUP=$group

  if( $update ) {
    $Obj->product( "reduced" );
    $Obj->file( $out );
  }

  orac_print "$in to $out:\n Tagged as reduced cube.\n";
}

orac_print "\n";
