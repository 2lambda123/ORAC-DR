=head1 NAME

_SET_REF_EMISSION_RECPARS_ - Obtains and reports the recipe parameters
that control removal of reference-spectrum absorption lines.

=head1 DESCRIPTION

This primitive obtains the recipe parameters associated with the
determination and removal of the reference spectrum that itself has emission.
It copies the values to internal headers for access by the relevant
primitives.  The primitive also reports the settings to the log in
yellow.

This primitive serves the heterodyne recipes' steering files in order
to avoid duplicated code.

=head1 NOTES

=over 4

=item

The recipe parameters accessed by this primitive come in two sets.
First the ones that relate to removal of the emission from the time
series are SUBTRACT_REF_EMISSION, REF_EMISSION_BOXSIZE,
REF_EMISSION_COMBINE_REFPOS, REF_EMISSION_MASK_SOURCE, and
REF_EMISSION_REGIONS.  Second the parameters that relate to the
removal of residual reference emission from the group spectral cube(s)
are SUBTRACT_REF_SPECTRUM, REF_EMISSION_LINE_FILE, and
REF_EMISSION_MAXWIDTH.  These should be added to the list of
parameters to verify with ORAC::Recipe::Parameters::verify_parameters
in the calling steering primitive.

=item

If SUBTRACT_REF_EMISSION is set false, the REF_EMISSION... recipe
parameters in the first set defined in this primitive are ignored.
The assumed default is for no reference-spectrum correction.

If SUBTRACT_REF_SPECTRUM is set false, the REF_EMISSION... recipe
parameters in the second set defined in this primitive are ignored.
The assumed default is for no reference-spectrum correction applied to
the group spectral cube.

=item

The internal headers have names "RECPAR_" followed by the recipe
parameter name.

=back

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2016, 2019 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

my $commasep;
if ( defined( $RECPARS{'SUBTRACT_REF_EMISSION'} ) ) {
  $Frm->uhdr( "RECPAR_SUBTRACT_REF_EMISSION", $RECPARS{'SUBTRACT_REF_EMISSION'} );
  if ( $RECPARS{'SUBTRACT_REF_EMISSION'} == 1 ) {
    orac_say( " Subtract non-emission mean spectrum to remove reference-spectrum emission.", "yellow" );

    if ( defined( $RECPARS{'REF_EMISSION_REGIONS'} ) ) {
      $Frm->uhdr( "RECPAR_REF_EMISSION_REGIONS", $RECPARS{'REF_EMISSION_REGIONS'} );
      if ( ref( $RECPARS{'REF_EMISSION_REGIONS'} ) eq 'ARRAY' ) {
        $commasep = join( ",", @{$RECPARS{'REF_EMISSION_REGIONS'} } );
      } else {
        $commasep = $RECPARS{'REF_EMISSION_REGIONS'};
      }
      orac_say( "   Setting reference emission regions to $commasep.", "yellow" );
    }

    if ( defined( $RECPARS{'REF_EMISSION_COMBINE_REFPOS'} ) ) {
      $Frm->uhdr( "RECPAR_REF_EMISSION_COMBINE_REFPOS", $RECPARS{'REF_EMISSION_COMBINE_REFPOS'} );
      if ( $RECPARS{'REF_EMISSION_COMBINE_REFPOS'} ) {
        orac_say( "   Combine all observations with the same reference position.", "yellow" );
      }
    }

    if ( defined( $RECPARS{'REF_EMISSION_COMBINE_DETECTORS'} ) ) {
      $Frm->uhdr( "RECPAR_REF_EMISSION_COMBINE_DETECTORS", $RECPARS{'REF_EMISSION_COMBINE_DETECTORS'} );
      if ( $RECPARS{'REF_EMISSION_COMBINE_DETECTORS'} ) {
        orac_say( "   Combine all receptors.", "yellow" );
      }
    }

    if ( defined( $RECPARS{'REF_EMISSION_MASK_SOURCE'} ) ) {
      $Frm->uhdr( "RECPAR_REF_EMISSION_MASK_SOURCE", $RECPARS{'REF_EMISSION_MASK_SOURCE'} );
      if ( $RECPARS{'REF_EMISSION_MASK_SOURCE'} ) {
        orac_say( "   Apply the source-emission mask before collapsing to determine the reference spectrum.", "yellow" );
      } else {
        orac_say( "   Do not apply the source-emission mask before collapsing to determine the reference spectrum.", "yellow" );
      }
    }

  }
}

if ( defined( $RECPARS{'SUBTRACT_REF_SPECTRUM'} ) ) {
  $Frm->uhdr( "RECPAR_SUBTRACT_REF_SPECTRUM", $RECPARS{'SUBTRACT_REF_SPECTRUM'} );
  if ( $RECPARS{'SUBTRACT_REF_SPECTRUM'} == 1 ) {
    orac_say( " Subtract reference-spectrum emission from the group spectral cube(s).", "yellow" );

    if ( defined( $RECPARS{'REF_EMISSION_LINE_FILE'} ) ) {
      $Frm->uhdr( "RECPAR_REF_EMISSION_LINE_FILE", $RECPARS{'REF_EMISSION_LINE_FILE'} );
      $commasep = $RECPARS{'REF_EMISSION_LINE_FILE'};
      orac_say( "   Define extents of reference emission lines in text file $commasep.", "yellow" );
    }

    if ( defined( $RECPARS{'REF_EMISSION_MAXWIDTH'} ) ) {
      $Frm->uhdr( "RECPAR_REF_EMISSION_MAXWIDTH", $RECPARS{'REF_EMISSION_MAXWIDTH'} );
      $commasep = $RECPARS{'REF_EMISSION_MAXWIDTH'};
      orac_say( "   The maximum half width of the reference spectral lines is $commasep km/s.", "yellow" );
    }
  }
}
