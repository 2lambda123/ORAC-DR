# -*-cperl-*-

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array, Starlink::HDSPACK, Statistics::Descriptive.

=cut

use JCMT::ACSIS::Array;
use Statistics::Descriptive;

my $params;

my $params;
my @bad_receptors;

# Store the name of the first file in the list for the index.qa file.
my $osuffix = "_blnmasked";
my ( $first_file_in, $first_file_out)  = $Frm->inout( $osuffix, 1 );

foreach my $i ( 1 .. $Frm->nfiles ) {
   orac_say( "Performing bad baseline detection comparing noise." );
   if ( $i == 1 ) { orac_say( "The first file is $first_file_in." ) };
   my @bad_receptors_local;

# Set/get filenames.
   my ( $in, $out ) = $Frm->inout( $osuffix, $i );

# We need the dimensions of the input file for later.
   _GET_DIMENSIONS_ FILE=$in
   my $lbnd = $_GET_DIMENSIONS_{LBOUND};
   my $ubnd = $_GET_DIMENSIONS_{UBOUND};

   my $temp1file = new ORAC::TempFile( 0 );
   my $temp2file = new ORAC::TempFile( 0 );
   my $temp3file = new ORAC::TempFile( 0 );

# Form arrays of bad detectors.
# =============================

# Retrieve the list of bad detectors from the calibration system ONLY
# ignoring the ones set locally.  The reading of INDEXORMASTER is
# done to setup the survey (survey_br).
   $Cal->bad_receptors( "MASTER" );
   my @baddets = $Cal->bad_receptors_list;
   orac_say( " Receptors disabled by the calibration system: " . join( ",", sort @baddets ) );

   $Cal->bad_receptors( "INDEXORMASTER" );
   my @tmpdets = $Cal->bad_receptors_list;

# Get average noise for each receptor not in the bad_receptors list.
# ==================================================================

# Collapse spectral axis around the central 75% using the Csigma estimator
# to get representative noise for each receptor.  The 75% excludes
# noisy ends, and the clipped statistic should exclude spikes and strong
# astronomical signal.
   orac_say( " Collapsing image..." );
   $params = "in=$in(~75%,,) out=$temp1file estimator=Csigma";
   $params .= " axis=spec trim=true wlim=0.0 variance=false";
   $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# This assumes that the collapsed noise is fairly constant with time, but
# in practice there will be drift, so this test for anomalous noise may be
# diluted.
   my %receptor_stats;
   my %receptor_rms;
   my $array_stats = new Statistics::Descriptive::Sparse;
   my $array = new JCMT::ACSIS::Array( File => $temp1file );

# Form set of receptors that are not bad in the master list.
   my @receptors = grep{ my $x=$_; not grep { $x =~ /\Q$_/i} @baddets} $array->receptors;

   foreach my $receptor ( @receptors ) {
      my $pixel = $array->pixel( $receptor );
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp1file($pixel,)" );
      my ( $ORAC_STATUS, $pixmean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

      if ( ! defined( $receptor_stats{$receptor} ) ) {
         $receptor_stats{$receptor} = new Statistics::Descriptive::Sparse;
      }

      if ( $pixmean > 0 ) {
         $receptor_stats{$receptor}->add_data( $pixmean );
      }
   }

   foreach my $receptor ( keys %receptor_stats ) {
      if ( $receptor_stats{$receptor}->count != 0 ) {
         $receptor_rms{$receptor} = $receptor_stats{$receptor}->mean();
      } else {
         $receptor_rms{$receptor} = 'bad';
      }
   }

   _PRETTYPRINT_RECEPTOR_QA_ HASH=\%receptor_rms TYPE=RMS

# Measure the median and standard deviation of the noise across detectors.
   my @values;
   my $sigma;
   my $median;
   my $stat = Statistics::Descriptive::Full->new();

   while ( my ($k,$v) = each %receptor_rms ) {
      push @values, $v unless ( $v eq 'bad' );
   }
   $stat->add_data( @values );

   if ( $stat->count != 0 ) {
      $sigma = $stat->standard_deviation();
      $median = $stat->median();
   }

# Calculate the number of pixels and ordered statistics.
   $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp1file order=true" );
   my ( $ORAC_STATUS, my $numpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );

# Thresholding at median + 2-sigma level.
   my $threshold = $median + 2 * $sigma;
   orac_say( " Turning off spectra with clipped sigma above " . sprintf( "%.3f", $threshold ) );
   $params = "in=$temp1file out=$temp2file thrlo=-100000 newlo=bad thrhi=$threshold newhi=bad";
   $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );

# Find the percentage of pixels above the threshold.
   ( $ORAC_STATUS, my $numhi ) = $Mon{'kappa_mon'}->get( "thresh", "numhi" );
   my $perc_rejected = sprintf( "%.1f", ( $numhi / $numpix ) * 100 );
   orac_say( " Rejected $perc_rejected % of the samples." );

# Get number of pixel rejected for each receptor.
   my %receptor_stats_thresh;
   my %receptor_fracbad;
   my $array_stats_thresh = new Statistics::Descriptive::Sparse;
   my $array_thresh = new JCMT::ACSIS::Array( File => $temp2file );

   my @receptors_thresh = $array_thresh->receptors;

   foreach my $receptor ( @receptors_thresh ) {
      my $pixel = $array->pixel( $receptor );
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp2file($pixel,)" );
      ( $ORAC_STATUS, my $badpix ) = $Mon{'kappa_mon'}->get( "stats", "numbad" );
      ( $ORAC_STATUS, my $totpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );
      my $frac_rejected = sprintf( "%.3f", $badpix / $totpix * 100 );

      if ( ! defined( $receptor_stats_thresh{$receptor} ) ) {
         $receptor_stats_thresh{$receptor} = new Statistics::Descriptive::Sparse;
      }
      $receptor_stats_thresh{$receptor}->add_data( $frac_rejected );
   }

   foreach my $receptor ( keys %receptor_stats_thresh ) {
      if ( $receptor_stats_thresh{$receptor}->count != 0 ) {
         $receptor_fracbad{$receptor} = $receptor_stats_thresh{$receptor}->mean();
         if ( $receptor_fracbad{$receptor} > 40 ) { push @bad_receptors,$receptor; }
      } else {
         $receptor_fracbad{$receptor} = 'bad';
      }
   }

   orac_say( " List of bad receptor for file $in:" .
             join( ",", sort( @bad_receptors_local ) ) );
   _PRETTYPRINT_RECEPTOR_QA_ HASH=\%receptor_fracbad TYPE=BAD(%)


   _GET_DIMENSIONS_ FILE=$temp2file
   my $sslbnd = $_GET_DIMENSIONS_{LBOUND};
   my $ssubnd = $_GET_DIMENSIONS_{UBOUND};

# Expand the thresholded image to the size of the initial cube.
   $params = "in=$temp2file out=$temp3file axes=[0,1,2] lbound=" . $lbnd->[0] . " ubound=" . $ubnd->[0];
   $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Copy the bad pixels to the output image.
   $params = "in=$in ref=$temp3file out=$out";
   $Mon{'kappa_mon'}->obeyw( "copybad", "$params" );

# Set the product.
   $Frm->product( $osuffix );

# Update the Frm object.
   $Frm->file( $i, $out );

# Display if necessary.
   $Display->display_data( $Frm ) if defined $Display;

# Add the bad receptors for this frame to the master list.
   foreach my $receptor ( @bad_receptors_local ) { push ( @bad_receptors, $receptor ) }
}

# Make sure each bad detector is mentioned only once.
my %seen = ();
my @bad_receptors_uniq = ();

foreach my $item ( @bad_receptors ) {
   push( @bad_receptors_uniq, $item ) unless $seen{$item}++;
}

my $lofreq = $Frm->hdr( "LOFREQS" );

my $survey_br = defined( $Frm->uhdr( "SURVEY_BR" ) ) ? $Frm->uhdr( "SURVEY_BR" ) : 'Telescope';

# Sort out bad receptors.  They'll be added to the calibration system
# for either the specific survey or for everything, and only for the
# current LOFREQ +/- 1 GHz.
if ( scalar( @bad_receptors ) > 0 ) {
   my %recep_hash = ( %{$Frm->hdr },
                      LOFREQ_MAX => $lofreq + 1,
                      LOFREQ_MIN => $lofreq - 1,
                      DETECTORS => ( join ',',@bad_receptors_uniq ),
                      SURVEY_BR => $survey_br,
                    );

   orac_say( " Masking receptor(s) " .
             join( ",", sort @bad_receptors_uniq ) . " for survey $survey_br." );

   $Cal->bad_receptors_qa_index->add( $first_file_in, \%recep_hash );

}

# Tidy-up output.
orac_print "\n";
