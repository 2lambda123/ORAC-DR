# -*-cperl-*-

=head1 NAME

_REDUCE_SCIENCE_STEER_ - Set up steering parameters for REDUCE_SCIENCE recipes.

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item COPY_FRAME = BOOLEAN (Given)

Whether or not to copy Frame products to Group products when there's
only one member in the group. [1]

=item SUMMIT = BOOLEAN (Given)

This should be set true (1) for SUMMIT recipes.  It sets a Frame
internal header so that later primitives can take different action
for summit recipes.  [0]

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

None.

=back

=head1 TASKS

None.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2017 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Handle arguments.
my $copy = get_prim_arg( $_PRIM_ARGS_, "COPY_FRAME", 1 );

my $summit = get_prim_arg( $_PRIM_ARGS_, "SUMMIT", 0 );
$Frm->uhdr( "SUMMIT", $summit );

_VERIFY_HEADERS_

# Figure out if we are going to copy the Group cube from the Frame cube.
if( $Grp->num == 0 && $Grp->lastallmembers( $Frm ) && $copy ) {
  $Grp->uhdr( "COPY_FRAME_CUBE", 1 );
} else {
  $Grp->uhdr( "COPY_FRAME_CUBE", 0 );
}

# Figure out if we're doing hybrid-mode or not.
my $ishybrid = 0;
if( $Frm->can( "subsysnrs" ) ) {
  my $nsubsys = $Frm->subsysnrs;
  $ishybrid = 1 if $nsubsys > 1;
}
$Frm->uhdr( "ISHYBRID", $ishybrid );

orac_print( "Observing Mode: " . $Frm->uhdr( "ORAC_INSTRUMENT" ) .
            " / " . $Frm->uhdr( "ORAC_SAMPLE_MODE" ) .
            " / " . $Frm->hdr( "SW_MODE" ) .
            ( $Frm->hdr( "STANDARD" ) ? " / standard" : "" ) .
            ( $Frm->uhdr( "ISHYBRID" ) ? " / hybrid mode" : "" ) .
            "\n" );

if( $Frm->hdr( "SIMULATE" ) == 1 ) {
  orac_warn( " *** This observation is simulated data. ***\n" );
}

# Set a default OBSIDSS for hybrid-mode observations.
if( $Frm->uhdr( "ISHYBRID" ) ) {
  $Frm->hdr( "OBSIDSS", $Frm->hdrval( "OBSIDSS" ) );
}

# Calculate the requested map region if we're doing a scan.
# but only if we are processing raw data [proxied by availability
# of jcmtstate method]
if( $Frm->can("jcmtstate") && $Frm->uhdr( "ORAC_SAMPLE_MODE" ) eq 'scan' ) {

  use JCMT::MapArea;

  my $hdr = $Frm->hdr;
  my $region = &JCMT::MapArea::region( header => $hdr );
  $Frm->uhdr( "MAP_ASTREGION", $region );

}
