# -*-cperl-*-

=head1 NAME

_MASK_BASELINE_REGIONS_

=head1 DESCRIPTION

This primitive uses the Frame internal header called BASELINE_REGIONS
to either mask the baseline regions defined by that header, or mask
the non-baseline regions.  The choice is controlled by Argument INVERSE.

=head1 ARGUMENTS

=over 4

=item INVERSE = BOOLEAN (Given)

If false, the mask covers the baseline regions.  If true, it the mask
covers the non-baseline regions.  [0]

=back

=head1 NOTES

=over 4

=item *

The baseline regions are accessed by reference from the Frame
internal header called BASELINE_REGIONS.

=back

=head1 OUTPUT DATA

=over 4

The masked cubes with suffix _mbl.

=back

=head1 TASKS

KAPPA: ARDMASK, NDFTRACE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research Council.

Copyright (C) 2018 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Deal with arguments.
my $inverse = get_prim_arg( $_PRIM_ARGS_, "INVERSE", 0 );

# Retrieve the baseline regions from the Frame's user header.
my $regions = $Frm->uhdr( "BASELINE_REGIONS" );

if( defined( $regions ) ) {
  my @regions = @$regions;

  foreach my $i ( 1 .. $Frm->nfiles ) {

    my( $in, $out ) = $Frm->inout( "_mbl", $i );

    # Retrieve the dimensions of the input Frame object.
    $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
    my ( $ORAC_STATUS, @lbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "lbound" );
    ( $ORAC_STATUS, my @ubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "ubound" );

    # Retrieve the baselined regions for this Frame.
    my @bl_regions = @{$regions[$i-1]};

    # Create a temporary file to hold the ARD mask.
    my $ardmask = new ORAC::TempFile;

    # ARD defaults to two dimensions.  We're doing three dimensions here...
    print {$ardmask->handle} "DIMENSION(3)\n";

    # For each pair of baseline regions, write a RECT ARD region.
    for ( my $j = 0; $j <= $#bl_regions ; $j += 2 ) {
      my $lower_x = $lbnd[0] - 1;
      my $lower_y = $lbnd[1] - 1;
      my $upper_x = $ubnd[0];
      my $upper_y = $ubnd[1];
      print {$ardmask->handle} "RECT( $lower_x, $lower_y, $bl_regions[$j], $upper_x, $upper_y, $bl_regions[$j+1] )\n";
    }

    # Run ARDMASK.
    my $params = "in=$in out=$out ardfile=" . $ardmask->file;
    if( $inverse ) {
      $params .= " inside=false";
    }
    $Mon{'kappa_mon'}->obeyw( "ardmask", "$params" );

    # Report to the user.
    orac_print "$in to $out:\n";
    orac_print " Masked ";
    orac_print "non-" if $inverse;
    orac_print "baseline regions.\n";

    # Update the product.
    $Frm->product( "mbl" );

    # Update the Frame object.
    $Frm->file( $i, $out );

  }

  # Display if necessary.
  $Display->display_data( $Frm ) if defined( $Display );

  # Tidy-up output.
  orac_print "\n";

}
