# -*-cperl-*-

=head1 NAME 

_REDUCE_SCIENCE_CONTINUUM_STEER_

=head1 DESCRIPTION

This primitive assigns up and reports the recipe parameters set for use
in the L<REDUCE_SCIENCE_CONTINUUM|REDUCE_SCIENCE_CONTINUUM> recipe.

=head1 NOTES

=over 4 

=item *

The recipe parameters set are C<CHUNKSIZE>, C<CUBE_MAXSIZE>, C<CUBE_WCS>, 
C<MOMENTS>, C<PIXEL_SCALE>, C<REBIN>, C<SPREAD_FWHM_OR_ZERO>,
C<SPREAD_METHOD> and C<SPREAD_WIDTH>.
In practice only C<CUBE_WCS>, C<MOMENTS>, and C<REBIN> are likely to be used.
The remainder are present for completeness, being active in some of
the primivities invoked by the 
L<REDUCE_SCIENCE_CONTINUUM|REDUCE_SCIENCE_CONTINUUM> recipe.

=back

=head1 REQUIRED PERL MODULES

None

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2017 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Verify recipe parameters.
ORAC::Recipe::Parameters::verify_parameters( \%RECPARS, [ 'CHUNKSIZE',
                                                          'CUBE_MAXSIZE',
                                                          'CUBE_WCS',
                                                          'MOMENTS',
                                                          'PIXEL_SCALE',
                                                          'REBIN',
                                                          'SPREAD_FWHM_OR_ZERO',
                                                          'SPREAD_METHOD',
                                                          'SPREAD_WIDTH' ] ) ;

if( scalar keys %RECPARS >= 1 ) {
  orac_say( "\nRecipe parameter overrides:", "yellow" );
}

# This variable is used to reform comma-separated lists turned into
# stringified array reference.
my $commasep;

# Put recipe parameters into our uhdr.

if ( defined( $RECPARS{'CHUNKSIZE'} ) ) {
  $Frm->uhdr( "RECPAR_CHUNKSIZE", $RECPARS{'CHUNKSIZE'} );
  orac_say( " Maximum chunksize to form group cube is $RECPARS{'CHUNKSIZE'}MB.", "yellow" );
}

if ( defined( $RECPARS{'CUBE_MAXSIZE'} ) ) {
  $Frm->uhdr( "RECPAR_CUBE_MAXSIZE", $RECPARS{'CUBE_MAXSIZE'} );
  orac_say( " Maximum tile size is $RECPARS{'CUBE_MAXSIZE'}MB.", "yellow" );
}

if ( defined( $RECPARS{'CUBE_WCS'} ) ) {
  $Frm->uhdr( "RECPAR_SYSTEM", uc( $RECPARS{'CUBE_WCS'} ) );
  orac_say( " Setting cube coordinate system to $RECPARS{'CUBE_WCS'}.", "yellow" );
}

if ( defined( $RECPARS{'MOMENTS'} ) ) {
  my $moments = $RECPARS{'MOMENTS'};
  if( ref( $moments ) eq 'ARRAY' ) {
    $moments = join ",", @$moments;
  }
  $Frm->uhdr( "RECPAR_MOMENTS", $moments );
  my $str = " Will create $moments moments map";
  if( ref( $RECPARS{'MOMENTS'} ) eq 'ARRAY' ) {
    $str .= "s";
  }
  $str .= ".";
  orac_say( $str, "yellow" );
}

if ( defined( $RECPARS{'PIXEL_SCALE'} ) ) {
  $Frm->uhdr( "RECPAR_PIXSIZE", $RECPARS{'PIXEL_SCALE'} );
  orac_say( " Setting pixel scale to $RECPARS{'PIXEL_SCALE'} arcseconds per pixel.", "yellow" );
}

if ( defined( $RECPARS{'REBIN'} ) ) {
  my $rebin = $RECPARS{'REBIN'};
  if( ref( $rebin ) eq 'ARRAY' ) {
    $rebin = join ",", @$rebin;
  }
  $Frm->uhdr( "RECPAR_REBIN", $rebin );
  orac_say( " Will rebin final cubes to $rebin km/s resolution.", "yellow" );
}

if ( defined( $RECPARS{'SPREAD_METHOD'} ) ) {
  $Frm->uhdr( "RECPAR_SPREAD_METHOD", uc( $RECPARS{'SPREAD_METHOD'} ) );
  orac_say( " Setting MAKECUBE spread method to $RECPARS{'SPREAD_METHOD'}.", "yellow" );
}

if ( defined( $RECPARS{'SPREAD_WIDTH'} ) ) {
  $Frm->uhdr( "RECPAR_PARAM1", $RECPARS{'SPREAD_WIDTH'} );
  orac_say( " Setting MAKECUBE spread width to $RECPARS{'SPREAD_WIDTH'} arcseconds.", "yellow" );
}

if ( defined( $RECPARS{'SPREAD_FWHM_OR_ZERO'} ) ) {
  $Frm->uhdr( "RECPAR_PARAM2", $RECPARS{'SPREAD_FWHM_OR_ZERO'} );
  orac_say( " Setting MAKECUBE spread FWHM or zero to $RECPARS{'SPREAD_FWHM_OR_ZERO'} arcseconds.", "yellow" );
}

if ( scalar keys %RECPARS >= 1 ) {
  orac_say "";
}

