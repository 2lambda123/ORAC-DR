=head1 NAME

_CONVERT_1D_CLUMPMAP_TO_MASKS_

=head1 DESCRIPTION

This primitive takes a output one-dimensional clump map generated by
CUPID:FINDCLUMPS and creates two masks---one of the lines detected and
one with the background masked.

=head1 ARGUMENTS

=over 4

=item BGDMASK = STRING (Given)

The name of the mask of the background, i.e. where emission lines are
not detected the elements are set bad and all other elements are zero.
If this is undefined, no background mask is created. [undef]

=item LINEMAP = STRING (Given)

The name of the clump map generated by CUPID:FINDCLUMPS.  This has
integers in its DATA_ARRAY that are the indices to the clumps (i.e.
lines) detected.  This must be supplied, otherwise an error will
ensue.  [undef]

=item LINEMASK = STRING (Given)

The name of the mask of the lines, i.e. where emission lines are
detected the elements are set bad and all other elements are zero.
This must be set, otherwise an error will ensue.  [undef]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=back

=head1 OUTPUT DATA

=over 4

=item *

The line and background masks given the supplied names.

=back

=head1 TASKS

KAPPA: MATHS, NOMAGIC, THRESH.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2016 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Retrieve and validate parameters.
# =================================

my $linemap = get_prim_arg( $_PRIM_ARGS_, "LINEMAP", undef );
my $linemask = get_prim_arg( $_PRIM_ARGS_, "LINEMASK", undef );
my $bgdmask = get_prim_arg( $_PRIM_ARGS_, "BGDMASK", undef );

if ( ! defined( $linemap ) ) {
   orac_err "_CONVERT_1D_CLUMPMAP_TO_MASKS_: Programming error.  Name of clump map not supplied\n";
}

if ( ! defined( $linemask ) ) {
   orac_err "_CONVERT_1D_CLUMPMAP_TO_MASKS_: Programming error.  Name of line mask not supplied\n";
}

# Form the masks.
# ===============

# The conversion requires a work array.
my $tempfile = new ORAC::TempFile( 0 );

# The line map contains positive integers---the line indices---for each
# emission line detected, and bad elsewhere.  Convert this to a mask of
# the lines and a mask of the background (in which good elements are zero).

# Replace bad values with zero.
my $params = "in=$linemap repval=0 out=$tempfile";
$Mon{'kappa_mon'}->obeyw( "nomagic", "$params" );

# Make non-zero integers bad.  Thresholds are exclusive, so set the thresholds 
# just above desired levels.
$params = "in=$tempfile thrhi=0.1 newhi=bad thrlo=-0.9 ";
$params .= "newlo=bad out=$linemask";
$Mon{'kappa_mon'}->obeyw( "thresh", "$params" );

if ( defined( $bgdmask ) ) {
   $params = "exp='qif(ia.eq.<bad>,0,<bad>)' ia=$linemask out=$bgdmask";
   $Mon{'kappa_mon'}->obeyw( "maths", "$params" );
}
