# -*-cperl-*-

=head1 NAME

_FOLD_FSW_DATA_ - Reduce FSW data

=head1 DESCRIPTION

This primitive is part of the reduction of frequency-switch data. It
creates a copy of the original file, inverts it, and slides its WCS by
the frequency throw.  It then forms a mosaic of the inverted and shifted
data with the original file.

=head1 ARGUMENTS

=over 4

None.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for HARP and RxA3.

=back

=head1 OUTPUT DATA

=over 4

=item *

A file whose filename is of the same form as the input file, but with
_fsw appended.

=back

=head1 TASKS

KAPPA: CMULT, WCSATTRIB, WCSMOSAIC, WCSSLIDE.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Luca Rizzi E<lt>l.rizzi@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2010, 2016 Science and Technology Facilities Council.
Council.  All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

my $ORAC_STATUS;
my $params;

# Write a heading to structure the commentary.
orac_say "\nFrequency-switch folding";
my $underline = "-" x 33;
orac_say "$underline\n";

foreach my $i ( 1 .. $Frm->nfiles ) {

  my ($in, $out) = $Frm->inout( "_fsw", $i );

  # Read header parameters.
  my $rx        = $Frm->uhdr( "ORAC_INSTRUMENT" );
  my $ifchansp  = $Frm->hdr( "IFCHANSP" );
  if ( !defined( $ifchansp ) ) {
    orac_warn( " Header keyword IFCHANSP is not defined. Halting processing of this observation.\n" );
    return ORAC__TERM;
  }
  my $side_band = $Frm->hdr( "OBS_SB" );
  if ( !defined( $side_band ) ) {
    orac_warn( " Header keyword OBS_DB (side band) is not defined. Halting processing of this observation.\n" );
    return ORAC__TERM;
  }
  my $freq_thr  = $Frm->hdr( "FREQ_THR" );
  if ( !defined( $freq_thr ) ) {
    orac_warn( " Header keyword FREQ_THR (frequency throw) is not defined. Halting processing of this observation.\n" );
    return ORAC__TERM;
  }

  # Reformat the header parameters.
  my $width = abs( $ifchansp / 1000000000. );
  my $throw = $freq_thr / 500;

  # Report to user in order to check that we have the right values.
  orac_print "Performing folding with the following parameters:\n");
  orac_print "  Receiver  = $rx\n";
  orac_print "  Width     = $width [Ghz]\n";
  orac_print "  Side band = $side_band\n";
  orac_print "  Throw     = $freq_thr [Mhz]\n";

  # Calculate the frequency shift.
  my $fshift = $throw / $width;
  my $shift = int( $fshift + 0.5 * $fshift / abs( $fshift ) );

  # Create temporary files to store copies of the original files.
  my $tempafile = new ORAC::TempFile( 0 );
  my $tempbfile = new ORAC::TempFile( 0 );

  # Make a copy of input file before starting to change it.
  $params = "in=$in out=$tempafile";
  $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

  # Read and store the current WCS parameters.
  $Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=get name='system(1)'" );
  ($ORAC_STATUS, my $system) = $Mon{ndfpack_mon}->get("wcsattrib","value");
  $Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=get name=stdofrest" );
  ($ORAC_STATUS, my $stdofrest) = $Mon{ndfpack_mon}->get( "wcsattrib", "value" );

  # Set the WCS parameters to what we need for the reduction.
  $Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$tempafile mode=set name='system(1)' newval=Freq" );
  $Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$tempafile mode=set name=stdofrest newval=topo" );

  # Find the pixel bounds.
  _GET_DIMENSIONS_ FILE=$tempafile
  my @lbnd = @{$_GET_DIMENSIONS_{LBOUND}};
  my @ubnd = @{$_GET_DIMENSIONS_{UBOUND}};

  # Modify the bounds to trim the file of the switched portion.
  $lbnd[0] = $lbnd[0] + $shift;

  if ( $rx =~ /HARP/ ) {

    # Multiply A by -1 to obtain B.
    $params = "in=$tempafile out=$tempbfile scalar=-1";
    $Mon{'kappa_mon'}->obeyw( "cmult", "$params" );

  } elsif ( $rx =~ /RxA3/ ) {

    # Copy A to B.
    $params = "in=$tempafile out=$tempbfile";
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

    # Multiply B by -1 to obtain A.
    $params = "in=$tempbfile out=$tempafile scalar=-1";
    $Mon{'kappa_mon'}->obeyw( "cmult", "$params" );

  } else {
    orac_warn( " Not applicable for receiver $rx\n");
    orac_warn( " Halting processing of this observation.\n" );
    return ORAC__TERMERR;
  }

  # Shift the world coordinates by the throw.
  $params = "ndf=$tempbfile abs=[$throw,0,0]";
  $Mon{'kappa_mon'}->obeyw( "wcsslide", "$params" );

  # Create the mosaic.
  $params = "in='$tempafile,$tempbfile' out=$out ref=$in method=nearest ";
  $params .= "wlim=2 ubnd=[$ubnd[0],$ubnd[1],$ubnd[2]] lbnd=[$lbnd[0],$lbnd[1],$lbnd[2]]";
  $Mon{'kappa_mon'}->obeyw( "wcsmosaic", "$params" );

  # Restore the original WCS attributes.
  $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$out mode=set name='system(1)' newval=$system" );
  $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$out mode=set name=stdofrest newval=$stdofrest" );

  orac_print "\nFrequency-switched data from $in combined in $out\n";
  orac_print "Done.\n\n";

  # Update the file name in the object
  $Frm->file( $i, $out );

}
