# -*-cperl-*-

=head1 NAME

_FOLD_FSW_DATA_ - Reduce FSW data

=head1 DESCRIPTION

This primitive is part of the reduction of frequency switch data. It creates a copy of the orginal file,
invert it, and slide its wcs by the frequency throw. It then wcsmosaic it with the original file.

=head1 ARGUMENTS

=over 4

None.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for HARP and RxA3

=back

=head1 OUTPUT DATA

=over 4

=item *

A file whose filename is of the same form as the input file, but with
_fsw appended.

=back

=head1 TASKS

KAPPA: wcsattrib, cmult, wcsslide, wcsmosaic

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Luca Rizzi E<lt>l.rizzi@jach.hawaii.eduE<gt>,

=head1 COPYRIGHT

Copyright (C) 2010 Science and Technology Facilities Council.
Council.  All Rights Reserved.

=cut

my $ORAC_STATUS;
my $params;

foreach my $i ( 1 .. $Frm->nfiles ) {

  my ($in, $out) = $Frm->inout("_fsw",$i);

  # reading header parameters
  my $rx        = $Frm->uhdr( "ORAC_INSTRUMENT" );
  my $ifchansp  = $Frm->hdr( "IFCHANSP" );
  if (!defined($ifchansp)) {
    orac_warn( " Header keyword IFCHANSP is not defined. Halting processing of this observation.\n" );
    return ORAC__TERM;
  }
  my $side_band = $Frm->hdr( "OBS_SB" );
  if (!defined($side_band)) {
    orac_warn( " Header keyword OBS_DB (side band)  is not defined. Halting processing of this observation.\n" );
    return ORAC__TERM;
  }
  my $freq_thr  = $Frm->hdr( "FREQ_THR" );
  if (!defined($freq_thr)) {
    orac_warn( " Header keyword FREQ_THR (frequency throw) is not defined. Halting processing of this observation.\n" );
    return ORAC__TERM;
  }
  # reformat header parameters
  my $width = abs($ifchansp/1000000000.);
  my $throw = $freq_thr / 500;

  # output to user to check we got the right values
  orac_print ("Performing frequency switch folding\n");
  orac_print ("Receiver  = $rx\n");
  orac_print ("Width     = $width [Ghz]\n");
  orac_print ("Side band = $side_band\n");
  orac_print ("Throw     = $freq_thr [Mhz]\n");

  # calculate the frequency shift
  my $shift = int ( $throw / $width + 0.5);

  # create temporary files to store copies of the original files
  my $tempafile = new ORAC::TempFile;
  my $tempbfile = new ORAC::TempFile;

  # make a copy of input file before starting to change
  $params="in=$in out=$tempafile";
  $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params");

  # read and store the current WCS parameters
  $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$in mode=get name='system(1)'");
  ($ORAC_STATUS, my $system) = $Mon{ndfpack_mon}->get("wcsattrib","value");
  $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$in mode=get name=stdofrest");
  ($ORAC_STATUS, my $stdofrest) = $Mon{ndfpack_mon}->get("wcsattrib","value");

  # set the WCS parameters to what we need for the reduction
  $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$tempafile mode=set name='system(1)' newval=Freq");
  $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$tempafile mode=set name=stdofrest newval=topo");

  # find boundaries
  _GET_DIMENSIONS_ FILE=$tempafile
  my @lbnd = @{$_GET_DIMENSIONS_{LBOUND}};
  my @ubnd = @{$_GET_DIMENSIONS_{UBOUND}};

  # modify boundaries to trim the file of the switched portion
  $lbnd[0]=$lbnd[0]+$shift;

  if ( $rx =~ /HARP/ ) {

    # multiply A for -1 to obtain B
    $params = "in=$tempafile out=$tempbfile scalar=-1";
    $Mon{'kappa_mon'}->obeyw( "cmult", "$params" );

  } elsif ( $rx =~ /RxA3/ ) {

    # copy in to B
    $params="in=$tempafile out=$tempbfile";
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params");

    # multiply B for -1 to obtain A
    $params = "in=$tempbfile out=$tempafile scalar=-1";
    $Mon{'kappa_mon'}->obeyw( "cmult", "$params" );

  } else {
    orac_warn( " Not applicable for receiver $rx\n");
    orac_warn( " Halting processing of this observation.\n" );
    return ORAC__TERMERR;
  }

  # Shift the world coordinates by the throw
  $params = "ndf=$tempbfile abs=[$throw,0,0]";
  $Mon{'kappa_mon'}->obeyw( "wcsslide", "$params" );

  # do the mosaic
  $params = "in='$tempafile,$tempbfile' out=$out ref=$in method=nearest wlim=2 ubnd=[$ubnd[0],$ubnd[1],$ubnd[2]] lbnd=[$lbnd[0],$lbnd[1],$lbnd[2]]";
  $Mon{'kappa_mon'}->obeyw( "wcsmosaic", "$params" );

  # find boundaries
  #_GET_DIMENSIONS_ FILE=$out
  #my @lbnd = @{$_GET_DIMENSIONS_{LBOUND}};
  #my @ubnd = @{$_GET_DIMENSIONS_{UBOUND}};
  #orac_print ("Dimensions after combining: \n");
  #orac_print ("First  axis ".$lbnd[0]." ".$ubnd[0]."\n");


  # Restore original WCS attributes
  $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$out mode=set name='system(1)' newval=$system");
  $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$out mode=set name=stdofrest newval=$stdofrest");

  orac_print("done.\n");

  # Update the file name in the object
  $Frm->file( $i, $out);

}



