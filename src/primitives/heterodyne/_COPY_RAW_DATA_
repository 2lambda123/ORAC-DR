# -*-cperl-*-

=head1 NAME

_COPY_RAW_DATA_ - Copy data from input directory to output directory.

=head1 DESCRIPTION

This primitive copies the input data (which typically resides in
$ORAC_DATA_IN) to the $ORAC_DATA_OUT directory unchanged.

=head1 ARGUMENTS

=over 4

None.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS.

=back

=head1 OUTPUT DATA

=over 4

=item *

A file whose filename is of the same form as the input file, but with
_raw appended.

=back

=head1 TASKS

KAPPA: NDFCOPY.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>,
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>


=head1 COPYRIGHT

Copyright (C) 2008-2010 Science and Technology Facilities Council.
Copyright (C) 2007 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

my $filecopied = 0;

foreach my $i ( 1 .. $Frm->nfiles ) {

  # Do not use inout here since we do not really want the _raw at the
  # end to have a numeric suffix that is unrelated to the original.
  # This becomes a possible issue in multi-subsystem hybrid observations
  # where the sub-scan number starts at 1 for both subsystems.
  # If we change the numbering the JSA harvesting scripts can't work
  # out the original filename from the provenance because the provenance
  # will include this output file name and not the original raw file name.
  my $in = $Frm->file( $i );
  my $out = $in;
  if ($out =~ /_(\d{4})$/) {
    $out =~ s/_(\d{4})$/_raw$1/;
  } else {
    # This should not trigger. May be better to complain here.
    $out .= "_raw". sprintf("%04d", $i );
  }

  # We only need to do this if the input "file" is a softlink to the
  # raw data.
  if( -l "$in.sdf" ) {

    my $file = $out;
    $file =~ s/\..*$//;

    if( ! -e "$file.sdf" ) {

      orac_print "Copying $in to $out...";

      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );

      orac_print "done.\n";

      $filecopied = 1;

      # Track provenance properly - we need to get the OBSIDSS from this file
      # so read the header of this file in particular rather than relying on the frame
      # object. If we can't find OBSIDSS we don't add provenance.
      my $hdr = Astro::FITS::Header::NDF->new( File => $out );
      my $obsidss = $hdr->value( "OBSIDSS" );
      if (defined $obsidss) {
        $Mon{ndfpack_mon}->obeyw( "provadd", "ndf=$out creator=KAPPA:NDFCOPY parent=$in moretext=OBSIDSS=$obsidss");
      }
    }

    my $recipe = $Frm->uhdr( "ORAC_DR_RECIPE" );
    $Frm->file( $i, $out );
    $Frm->uhdr( "ORAC_DR_RECIPE", $recipe );

  } else {

    # if the file is local we do not copy (that would be slow) and we do not make a link
    # with the new name (that would mess up root provenance)

  }

}

# Make sure the data is okay.
_VERIFY_DATA_

# Tidy up output if we've actually written output.
orac_print "\n" if $filecopied;
