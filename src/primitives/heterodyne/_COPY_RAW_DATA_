# -*-perl-*-

=head1 NAME

_COPY_RAW_DATA_ - Copy data from input directory to output directory.

=head1 DESCRIPTION

This primitive copies the input data (which typically resides in
$ORAC_DATA_IN) to the $ORAC_DATA_OUT directory unchanged.

=head1 ARGUMENTS

=over 4

None.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS.

=back

=head1 OUTPUT DATA

=over 4

=item *

A file whose filename is of the same form as the input file, but with
_raw appended.

=back

=head1 TASKS

KAPPA: NDFCOPY.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.
Copyright (C) 2007 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

my $filecopied = 0;

foreach my $i ( 1 .. $Frm->nfiles ) {

  my( $in, $out ) = $Frm->inout( "_raw", $i );

  # There is no need for the 4 digit subscan number in the output name
  # because that information is duplicated by the counter in the _raw
  # suffix
  $out =~ s/_\d{4}_/_/;

  # We only need to do this if the input "file" is a softlink to the
  # raw data.
  if( -l "$in.sdf" ) {

    my $file = $out;
    $file =~ s/\..*$//;

    if( ! -e "$file.sdf" ) {

      orac_print "Copying $in to $out...";

      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );

      orac_print "done.\n";

      $filecopied = 1;

    }

  } else {

    hardlink( "$in.sdf", "$out.sdf" ) or orac_throw "Could not link $in.sdf to $out.sdf: $!\n";

  }

  my $recipe = $Frm->uhdr( "ORAC_DR_RECIPE" );
  $Frm->file( $i, $out );
  $Frm->uhdr( "ORAC_DR_RECIPE", $recipe );
}

# Make sure the data is okay.
_VERIFY_DATA_

# Tidy up output if we've actually written output.
orac_print "\n" if $filecopied;
