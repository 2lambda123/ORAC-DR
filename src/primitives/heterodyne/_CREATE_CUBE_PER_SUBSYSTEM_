# -*-cperl-*-

=head1 NAME

_CREATE_CUBE_PER_SUBSYSTEM_ - Create one (or more) cube from each
subsystem.

=head1 DESCRIPTION

This primitive "ungroups" hybrid-mode observations and creates a
spatial/spectral cube for each subsystem in the current Frame.

=head1 ARGUMENTS

=over 4

None.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS timeseries data.

=item *

Hybrid-mode observations are "ungroups" by grouping files with similar
subsystem number together, then creating a cube from each of these
groups.

=item *

The Frame object is not updated.

=back

=head1 OUTPUT DATA

=over 4

=item *

The output cube with suffix _cube.

=back

=head1 TASKS

None, but see _CREATE_CUBE_FRAME_.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2010 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

my %newFrms;

foreach my $file ( $Frm->files ) {

  # Retrieve the SUBSYSNR header.
  # Use the direct class rather than a temp frame since we do not
  # want the file to be updated on disk just by doing a read.
  my $hdr = Astro::FITS::Header::NDF->new( File => $file );
  my $subsysnr = $hdr->value("SUBSYSNR");
  push @{$newFrms{$subsysnr}}, $file;

}

foreach my $subsysnr ( sort keys %newFrms ) {
  my $newFrm = new $Frm;
  my $files = $newFrms{$subsysnr};

  $newFrm->files( @$files );
  $newFrm->readhdr; # Ensure that we have a header even if raw

  {
    my $Frm = $newFrm;
    # Create a cube, but don't allow recipe parameters to override
    # anything.
    _CREATE_CUBE_FRAME_ OVERRIDE=0
  }

}
