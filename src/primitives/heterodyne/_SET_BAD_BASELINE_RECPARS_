=head1 NAME

_SET_BAD_BASELINE_RECPARS_ - Obtains and reports the recipe parameters that
control non-linear baseline rejection.

=head1 DESCRIPTION

This primitive obtains the recipe parameters associated with the
removal of transient non-linear baselines or whole receptors suffering
from non-linear baselines.  It copies the values to internal headers
for access by the relevant primitives.  The primitive also reports the
settings to the log in yellow.

This primitive serves the heterodyne recipes' steering files in order
to avoid duplicated code.

=head1 NOTES

=over 4

=item

The recipe parameters accessed by this primitive are:
BASELINE_LINEARITY, BASELINE_LINEARITY_CLIP, BASELINE_LINEARITY_LINEWIDTH,
BASELINE_LINEARITY_MINRMS, BASELINE_LINEARITY_RMS_THRESHOLD,
BASELINE_LINEARITY_SCALELENGTH, LOWFREQ_INTERFERENCE,
LOWFREQ_INTERFERENCE_EDGE_CLIP, and LOWFREQ_INTERFERENCE_THRESH_CLIP.
These should be added to the list of parameters to verify with
ORAC::Recipe::Parameters::verify_parameters in the calling steering
primitive.

=item

If BASELINE_LINEARITY is set false, other BASELINE_LINEARITY_...
recipe parameters are ignored.  Likewise for false LOWFREQ_INTERFERENCE
where other LOWFREQ_INTERFERENCE_... parameters ae not applied.
The assumed defaults are that there will be filtering of non-linear
baselines.

=item

The internal headers have names "RECPAR_" followed by the recipe
parameter name.

=item

The bad-baseline detections assume that the receptors supplied are
not full of bad values.  Therefore the primitive sets the boolean
internal header INDEX_BAD_RECEPTORS if bad baselines are being
hunted to ensure that an all-bad receptor is listed in the
bad_receptors index.

=back

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2013 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# This variable is used to reform comma-separated lists turned into
# stringified array reference.
my $commasep;

# Put recipe parameters into our uhdr.

# Baseline linearity for whole receptors
# ======================================

# This assumes that default is true without setting the corresponding
# recipe parameter.
my $linearity = 1;
my $linearity_message = 0;
if ( defined( $RECPARS{'BASELINE_LINEARITY'} ) ) {
   $Frm->uhdr( "RECPAR_BASELINE_LINEARITY", $RECPARS{'BASELINE_LINEARITY'} );
   if ( $RECPARS{'BASELINE_LINEARITY'} ) {
      orac_say( " Rejects receptors with mostly or all non-linear baselines.", "yellow" );
      $linearity_message = 1;
   } else {
      orac_say( " Retains receptors with mostly or all non-linear baselines.", "yellow" );
      $linearity = 0;
   }
}

if ( $linearity ) {
   if ( defined( $RECPARS{'BASELINE_LINEARITY_RMS_THRESHOLD'} ) ) {
      if ( !$linearity_message ) {
         orac_say( " Rejects receptors with mostly or all non-linear baselines.", "yellow" );
         $linearity_message = 1;
      }

      $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_RMS_THRESHOLD", $RECPARS{'BASELINE_LINEARITY_RMS_THRESHOLD'} );
      orac_say( "    Setting a fixed rms non-linearity threshold to $RECPARS{'BASELINE_LINEARITY_RMS_THRESHOLD'}.", "yellow" );

   } elsif ( defined( $RECPARS{'BASELINE_LINEARITY_CLIP'} ) ) {
      if ( !$linearity_message ) {
         orac_say( " Rejects receptors with mostly or all non-linear baselines.", "yellow" );
         $linearity_message = 1;
     }

     $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_CLIP", $RECPARS{'BASELINE_LINEARITY_CLIP'} );

# If the user enters a single value, the recipe parameter's value can be
# used directly.  However, should a comma-separated list be supplied, the
# returned value is a stringified ARRAY(address).  To circumvent this
# convert the reference to an array, and reassemble the pieces.
     if ( ref( $RECPARS{'BASELINE_LINEARITY_CLIP'} ) eq 'ARRAY' ) {
        $commasep = join( ",", @{ $RECPARS{'BASELINE_LINEARITY_CLIP'} } );
     } else {
        $commasep = $RECPARS{'BASELINE_LINEARITY_CLIP'};
     }
     orac_say( "    Setting baseline clipping levels to $commasep standard deviations.", "yellow" );

   }

   if ( defined( $RECPARS{'BASELINE_LINEARITY_MINRMS'} ) ) {
      $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_MINRMS", $RECPARS{'BASELINE_LINEARITY_MINRMS'} );
      orac_say( "    Setting minimum rms non-linearity to $RECPARS{'BASELINE_LINEARITY_MINRMS'}.", "yellow" );
   }


   if ( defined( $RECPARS{'BASELINE_LINEARITY_LINEWIDTH'} ) ) {
      if ( !$linearity_message ) {
         orac_say( " Rejects receptors with mostly or all non-linear baselines.", "yellow" );
         $linearity_message = 1;
      }

      $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_LINEWIDTH", $RECPARS{'BASELINE_LINEARITY_LINEWIDTH'} );
      if ( lc( $RECPARS{'BASELINE_LINEARITY_LINEWIDTH'} ) =~ /auto/ ) {
         orac_say( "    Masking emission automatically.", "yellow" );
      } else {
         if ( ref(  $RECPARS{'BASELINE_LINEARITY_LINEWIDTH'} ) eq 'ARRAY') {
            $commasep = join( ",", @{ $RECPARS{'BASELINE_LINEARITY_LINEWIDTH'} } );
         } else {
            $commasep = $RECPARS{'BASELINE_LINEARITY_LINEWIDTH'};
         }
         orac_say( "    Masking emission at $commasep km/s.", "yellow" );
      }
   }

   if ( defined( $RECPARS{'BASELINE_LINEARITY_SCALELENGTH'} ) ) {
      if ( !$linearity_message ) {
         orac_say( " Rejects receptors with mostly or all non-linear baselines.", "yellow" );
         $linearity_message = 1;
      }

      $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_SCALELENGTH", $RECPARS{'BASELINE_LINEARITY_SCALELENGTH'} );
      orac_say( "    Setting smoothing scalength to $RECPARS{'BASELINE_LINEARITY_SCALELENGTH'} pixels.", "yellow" );
   }

}

# Transient low-frequency interference
# ====================================

# This assumes that default is true without setting the corresponding
# recipe parameter.
my $lowfreq = 1;
my $lowfreq_message = 0;

# Remove spectra with low-frequency interference?
if ( defined( $RECPARS{'LOWFREQ_INTERFERENCE'} ) ) {
   $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE", $RECPARS{'LOWFREQ_INTERFERENCE'} );
   if ( $RECPARS{'LOWFREQ_INTERFERENCE'} ) {
      orac_say( " Will detect and mask spectra with low-frequency interference.", "yellow" );
      $lowfreq_message = 1;
   } else {
      orac_say( " Will ignore low-frequency interference.", "yellow" );
      $lowfreq = 0;
   }
}

if ( $lowfreq ) {
   if ( defined( $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'} ) ) {
      if ( !$lowfreq_message ) {
         orac_say( " Will detect and mask spectra with low-frequency interference.", "yellow" );
         $lowfreq_message = 0;
      }

      $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_EDGE_CLIP", $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'} );
      if ( ref( $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'} ) eq 'ARRAY' ) {
         $commasep = join( ",", @{ $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'} } );
      } else {
         $commasep = $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'};
      }
      orac_say( "    Setting clipping levels to determine dispersion in noise profile to $commasep standard deviations.", "yellow" );
   }

   if ( defined( $RECPARS{'LOWFREQ_INTERFERENCE_THRESH_CLIP'} ) ) {
      if ( !$lowfreq_message ) {
         orac_say( " Will detect and mask spectra with low-frequency interference.", "yellow" );
         $lowfreq_message = 0;
      }

      $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_THRESH_CLIP", $RECPARS{'LOWFREQ_INTERFERENCE_THRESH_CLIP'} );
      orac_say( "    Setting clipping level to select bad spectra to $RECPARS{'LOWFREQ_INTERFERENCE_THRESH_CLIP'} standard deviations.", "yellow" );
   }
}

# The bad-baseline detections assume that the receptors supplied are
# not full of bad values.  So set a flag to hunt for such bad receptors
# that are not in the bad_receptors index, and add them to the index.
# Without the bad-baseline filtering the QA stage will pick these up.
# Other primitives may have set this flag already, so OR the current
# value with the existing value.
my $indexbad = $lowfreq;
if ( defined( $Frm->uhdr( "INDEX_BAD_RECEPTORS" ) ) ) {
   $indexbad = $indexbad || $Frm->uhdr( "INDEX_BAD_RECEPTORS" );
}
$Frm->uhdr( "INDEX_BAD_RECEPTORS", $indexbad );

