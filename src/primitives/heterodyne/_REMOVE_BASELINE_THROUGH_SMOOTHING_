# -*-cperl-*-

=head1 NAME

_REMOVE_BASELINE_THROUGH_SMOOTHING_

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=back

=head1 NOTES

=item *

The output files are logged as group intermediates.

=over 4

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2012, 2014 Science and Technology Facilities Council.
All Rights Reserved.

=cut

# Handle parameters.
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $freqsmooth = get_prim_arg( $_PRIM_ARGS_, "FREQUENCY_SMOOTH", 25 );
my $spatsmooth = get_prim_arg( $_PRIM_ARGS_, "SPATIAL_SMOOTH", 3 );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
my $tag = get_prim_arg( $_PRIM_ARGS_, "TAG", 1 );

# Override various parameters if we've been given them as recipe
# parameters.
$order = ( defined( $Frm->uhdr( "RECPAR_BASELINE_ORDER" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_ORDER" )            :
           $order );

my @objs;
if( $group == 0 ) {
  push @objs, $Frm;
} elsif( $group == 1 ) {
  push @objs, $Grp;
} elsif( $group == 2 ) {
  @objs = $Grp->members;
}

if( $group != 1 ||
    ( ( $group == 1 ) && ( $Grp->lastallmembers( $Frm ) ) ) ) {

  # We only need to do this if we have more than one member in the
  # group.
  if( $group == 1 && $Grp->uhdr( "COPY_FRAME_CUBE" ) ) {

    # Retrieve the tagged frame and copy it into the Group object.
    _RETRIEVE_TAG_ TAG=POST_REMOVE_BASELINE

    # Now copy over each of the Frame files.
    foreach my $i ( 1 .. $Frm->nfiles ) {

      my $in = $Frm->file( $i );
      ( undef, my $out ) = $Grp->inout( "_bl", $i );

      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );

      $Grp->allow_header_sync( 1 );
      $Grp->file( $i, $out );
      $Grp->sync_headers( $i );

      # Remove the output file after group processing.
      $Grp->push_intermediates( $out );

      orac_print "$in to $out:\n";
      orac_print " Copied to Group file.\n";

    }

    # Tag the group files as 'reduced', if requested.
    if( $tag ) {
      _TAG_AS_REDUCED_PRODUCT_ UPDATE=1 GROUP=1 FLAG_QUAL_BAD=1
    }

    # Set Frame back to whatever it was before.
    _RETRIEVE_TAG_ TAG=PREVIOUS

  } else {

    orac_print "Removing baseline through smoothing and masking.\n";

    _CREATE_BASELINE_MASK_ GROUP=$group FREQUENCY_SMOOTH=$freqsmooth SPATIAL_SMOOTH=$spatsmooth ORDER=$order

    foreach my $Obj ( @objs ) {

      foreach my $i ( 1 .. $Obj->nfiles ) {

        my ( $in, $out ) = defined( $Obj->uhdr( "JSA_TILES" ) ) && $Obj->uhdr( "JSA_TILES" ) ?
                           $Obj->inout_jsatile( "_bl", $i ) :
                           $Obj->inout( "_bl", $i );
        my $mask = $Obj->uhdr( "BASELINE_MASKS" )->[$i];

        # Mask out the non-baseline regions in the original cube.
        my $temp1 = new ORAC::TempFile( 0 );
        my $temp1file = $temp1->file;
        my $params = "in1=$in in2=$mask out=$temp1file";
        $Mon{'kappa_mon'}->obeyw( "add", "$params" );

        # Fit better baselines to the masked cube. We can use the
        # whole range but don't use auto.
        my $temp2 = new ORAC::TempFile( 0 );
        my $temp2file = $temp2->file;
        $params = "in=$temp1file out=$temp2file axis=3 order=$order auto=false ranges=\! variance subtract=false method=single";
        $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

        # And subtract these baselines from the input cube.
        $params = "in1=$in in2=$temp2file out=$out";
        $Mon{'kappa_mon'}->obeyw( "sub", "$params" );

        # Copy the variance across over from the input cube, but only
        # if the input cube has a variance.
        $params = "ndf=$in";
        $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "$params" );
        my( $ORAC_STATUS, $var ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "variance" );
        if( uc( $var ) eq 'TRUE' ) {
          $params = "ndf=$out from=$in comp=VARIANCE";
          $Mon{'ndfpack_mon'}->obeyw( "setvar", "$params" );
        }

        orac_print "$in to $out:\n";
        orac_print " Removed baseline.\n";

        $Obj->product( "bl" );
        $Obj->file( $i, $out );

        # Remove the output file after group processing.
        $Grp->push_intermediates( $out );

        if( $group == 0 ) {
          _SET_TAG_ TAG=POST_REMOVE_BASELINE
        }

      }

      if( $tag ) {
        $Frm = $Obj;
        _TAG_AS_REDUCED_PRODUCT_ UPDATE=1 FLAG_QUAL_BAD=1
      }

    }

  }

  # Tidy-up output.
  orac_print "\n";

}
