# -*-cperl-*-

=head1 NAME

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009, 2013-2014, 2016 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Verify recipe parameters.
ORAC::Recipe::Parameters::verify_parameters( \%RECPARS, [ 'BASELINE_EDGES',
                                                          'BASELINE_ORDER',
                                                          'BASELINE_REGIONS',
                                                          'CHUNKSIZE',
                                                          'CLUMP_METHOD',
                                                          'CREATE_MOMENTS_USING_SNR',
                                                          'CUBE_MAXSIZE',
                                                          'CUBE_WCS',
                                                          'DESPIKE',
                                                          'DESPIKE_BOX',
                                                          'DESPIKE_CLIP',
                                                          'DESPIKE_PER_DETECTOR',
                                                          'FINAL_LOWER_VELOCITY',
                                                          'FINAL_UPPER_VELOCITY',
                                                          'FLATFIELD',
                                                          'FLAT_APPLY',
                                                          'FLAT_LOWER_VELOCITY',
                                                          'FLAT_METHOD',
                                                          'FLAT_MINIMUM_SNR',
                                                          'FLAT_REGIOMS',
                                                          'FLAT_UPPER_VELOCITY',
                                                          'FRACTION_BAD',
                                                          'FREQUENCY_SMOOTH',
                                                          'HIGHFREQ_INTERFERENCE',
                                                          'HIGHFREQ_INTERFERENCE_EDGE_CLIP',
                                                          'HIGHFREQ_INTERFERENCE_THRESH_CLIP',
                                                          'HIGHFREQ_RINGING',
                                                          'HIGHFREQ_RINGING_MIN_SPECTRA',
                                                          'ITERATIONS',
                                                          'LV_AXIS',
                                                          'LV_ESTIMATOR',
                                                          'LV_IMAGE',
                                                          'MOMENTS',
                                                          'MOMENTS_LOWER_VELOCITY',
                                                          'MOMENTS_UPPER_VELOCITY',
                                                          'PIXEL_SCALE',
                                                          'REBIN',
                                                          'RESTRICT_LOWER_VELOCITY',
                                                          'RESTRICT_UPPER_VELOCITY',
                                                          'SPATIAL_SMOOTH',
                                                          'SPREAD_FWHM_OR_ZERO',
                                                          'SPREAD_METHOD',
                                                          'SPREAD_WIDTH',
                                                          'TILE',
                                                          'TRIM_MINIMUM_OVERLAP',
                                                          'TRIM_PERCENTAGE',
                                                          'TRIM_PERCENTAGE_LOWER',
                                                          'TRIM_PERCENTAGE_UPPER' ] ) ;

if( scalar keys %RECPARS >= 1 ) {
  orac_say( "\nRecipe parameter overrides:", "yellow" );
}

# This variable is used to reform comma-separated lists turned into
# stringified array reference.
my $commasep;

if ( defined( $RECPARS{'ITERATIONS'} ) ) {
  $Frm->uhdr( "RECPAR_ITERATIONS", $RECPARS{'ITERATIONS'} );
  orac_say( " Number of iterations is $RECPARS{'ITERATIONS'}.", "yellow" );
}

if ( defined( $RECPARS{'FRACTION_BAD'} ) ) {
  $Frm->uhdr( "RECPAR_FRACTION_BAD", $RECPARS{'FRACTION_BAD'} );
  orac_say( " Setting maximum fraction of bad values allowed in an " .
            "observation or subscan to $RECPARS{'FRACTION_BAD'}.", "yellow" );
}

# Put recipe parameters into our uhdr.
if( defined( $RECPARS{'BASELINE_ORDER'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_ORDER", $RECPARS{'BASELINE_ORDER'} );
  orac_say( " Setting baseline order to $RECPARS{'BASELINE_ORDER'}.", "yellow" );
}

if ( defined( $RECPARS{'BASELINE_EDGES'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_EDGES", $RECPARS{'BASELINE_EDGES'} );
  orac_say( " Setting baseline regions to outer $RECPARS{'BASELINE_EDGES'}% " .
            "at each end of noise-clipped spectra.", "yellow" );

} elsif ( defined( $RECPARS{'BASELINE_REGIONS'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_REGIONS", $RECPARS{'BASELINE_REGIONS'} );
  if ( ref( $RECPARS{'BASELINE_REGIONS'} ) eq 'ARRAY' ) {
    $commasep = join( ",", @{$RECPARS{'BASELINE_REGIONS'} } );
  } else {
    $commasep = $RECPARS{'BASELINE_REGIONS'};
  }

  orac_say( " Setting baseline regions to $commasep.", "yellow" );
}

if ( defined( $RECPARS{'CLUMP_METHOD'} ) ) {
  $Frm->uhdr( "RECPAR_CLUMP_METHOD", $RECPARS{'CLUMP_METHOD'} );
  orac_say( " Method for identifying emission clumps is $RECPARS{'CLUMP_METHOD'}.", "yellow" );
}

if ( defined( $RECPARS{'CHUNKSIZE'} ) ) {
  $Frm->uhdr( "RECPAR_CHUNKSIZE", $RECPARS{'CHUNKSIZE'} );
  orac_say( " Maximum chunksize to form group cube is $RECPARS{'CHUNKSIZE'}MB.", "yellow" );
}

if( defined( $RECPARS{'CREATE_MOMENTS_USING_SNR'} ) ) {
  $Frm->uhdr( "RECPAR_MOMENTS_SNR", $RECPARS{'CREATE_MOMENTS_USING_SNR'} );
  orac_say( " Will create signal-to-noise cube for moments map creation.", "yellow" );
}

if( defined( $RECPARS{'CUBE_WCS'} ) ) {
  $Frm->uhdr( "RECPAR_SYSTEM", uc( $RECPARS{'CUBE_WCS'} ) );
  orac_say( " Setting cube coordinate system to $RECPARS{'CUBE_WCS'}.", "yellow" );
}

if ( defined( $RECPARS{'FINAL_LOWER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_FINAL_LOWER_VELOCITY", $RECPARS{'FINAL_LOWER_VELOCITY'} );
  orac_say( " Restricting lower velocity bound of final products to $RECPARS{'FINAL_LOWER_VELOCITY'} km/s.", "yellow" );
}

if ( defined( $RECPARS{'FINAL_UPPER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_FINAL_UPPER_VELOCITY", $RECPARS{'FINAL_UPPER_VELOCITY'} );
  orac_say( " Restricting upper velocity bound of final products to $RECPARS{'FINAL_UPPER_VELOCITY'} km/s.", "yellow" );
}

# Whether or not to flatfield and associated parameters.
_SET_FLATFIELD_RECPARS_

# Remove spectra with high-frequency interference?
_SET_HIGHFREQ_INTERFERENCE_RECPARS_

# Whether or not to despike and associated parameters.
_SET_DESPIKE_RECPARS_

if ( defined( $RECPARS{'LV_IMAGE'} ) ) {
  $Frm->uhdr( "RECPAR_LV_IMAGE", $RECPARS{'LV_IMAGE'} );
  if ( $RECPARS{'LV_IMAGE'} ) {
    orac_say( " Creating LV images.", "yellow" );

    if ( defined( $RECPARS{'LV_AXIS'} ) ) {
      $Frm->uhdr( "RECPAR_LV_AXIS", $RECPARS{'LV_AXIS'} );
      orac_say( "    Collapsing the $RECPARS{'LV_AXIS'} axis.", "yellow" );
    }

    if ( defined( $RECPARS{'LV_ESTIMATOR'} ) ) {
      $Frm->uhdr( "RECPAR_LV_ESTIMATOR", $RECPARS{'LV_ESTIMATOR'} );
      orac_say( "    Using the $RECPARS{'LV_ESTIMATOR'} statistic.", "yellow" );
    }
  }
}

if( defined( $RECPARS{'MOMENTS'} ) ) {
  my $moments = $RECPARS{'MOMENTS'};
  if( ref( $moments ) eq 'ARRAY' ) {
    $moments = join ",", @$moments;
  }
  $Frm->uhdr( "RECPAR_MOMENTS", $moments );
  my $str = " Will create $moments moments map";
  if( ref( $RECPARS{'MOMENTS'} ) eq 'ARRAY' ) {
    $str .= "s";
  }
  $str .= ".";
  orac_say( $str, "yellow" );
}

if( defined( $RECPARS{'MOMENTS_LOWER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_MOMENTS_LOWER", $RECPARS{'MOMENTS_LOWER_VELOCITY'} );
  orac_say( " Restricting lower velocity bound for moments maps to $RECPARS{'MOMENTS_LOWER_VELOCITY'} km/s.", "yellow" );
}

if( defined( $RECPARS{'MOMENTS_UPPER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_MOMENTS_UPPER", $RECPARS{'MOMENTS_UPPER_VELOCITY'} );
  orac_say( " Restricting upper velocity bound for moments maps to $RECPARS{'MOMENTS_UPPER_VELOCITY'} km/s.", "yellow" );
}

if ( defined( $RECPARS{'FREQUENCY_SMOOTH'} ) ) {
  $Frm->uhdr( "RECPAR_FREQUENCY_SMOOTH", $RECPARS{'FREQUENCY_SMOOTH'} );
  orac_say( " Moment-map frequency smoothing set to $RECPARS{'FREQUENCY_SMOOTH'} km/s.", "yellow" );
}

if ( defined( $RECPARS{'SPATIAL_SMOOTH'} ) ) {
  $Frm->uhdr( "RECPAR_SPATIAL_SMOOTH", $RECPARS{'SPATIAL_SMOOTH'} );
  orac_say( " Moment-map spatial smoothing set to $RECPARS{'SPATIAL_SMOOTH'} pixels", "yellow" );
}


if( defined( $RECPARS{'PIXEL_SCALE'} ) ) {
  $Frm->uhdr( "RECPAR_PIXSIZE", $RECPARS{'PIXEL_SCALE'} );
  orac_say( " Setting pixel scale to $RECPARS{'PIXEL_SCALE'} arcseconds per pixel.", "yellow" );
}

if( defined( $RECPARS{'REBIN'} ) ) {
  my $rebin = $RECPARS{'REBIN'};
  if( ref( $rebin ) eq 'ARRAY' ) {
    $rebin = join ",", @$rebin;
  }
  $Frm->uhdr( "RECPAR_REBIN", $rebin );
  orac_say( " Will rebin final cubes to $rebin km/s resolution.", "yellow" );
}

if( defined( $RECPARS{'RESTRICT_LOWER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_RESTRICT_LOWER", $RECPARS{'RESTRICT_LOWER_VELOCITY'} );
  orac_say( " Restricting lower velocity bound to $RECPARS{'RESTRICT_LOWER_VELOCITY'} km/s.", "yellow" );
}

if( defined( $RECPARS{'RESTRICT_UPPER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_RESTRICT_UPPER", $RECPARS{'RESTRICT_UPPER_VELOCITY'} );
  orac_say( " Restricting upper velocity bound to $RECPARS{'RESTRICT_UPPER_VELOCITY'} km/s.", "yellow" );
}

if( defined( $RECPARS{'SPREAD_METHOD'} ) ) {
  $Frm->uhdr( "RECPAR_SPREAD_METHOD", uc( $RECPARS{'SPREAD_METHOD'} ) );
  orac_say( " Setting MAKECUBE spread method to $RECPARS{'SPREAD_METHOD'}.", "yellow" );
}

if( defined( $RECPARS{'SPREAD_WIDTH'} ) ) {
  $Frm->uhdr( "RECPAR_PARAM1", $RECPARS{'SPREAD_WIDTH'} );
  orac_say( " Setting MAKECUBE spread width to $RECPARS{'SPREAD_WIDTH'} arcseconds.", "yellow" );
}

if( defined( $RECPARS{'SPREAD_FWHM_OR_ZERO'} ) ) {
  $Frm->uhdr( "RECPAR_PARAM2", $RECPARS{'SPREAD_FWHM_OR_ZERO'} );
  orac_say( " Setting MAKECUBE spread FWHM or zero to $RECPARS{'SPREAD_FWHM_OR_ZERO'} arcseconds.", "yellow" );
}

if ( defined( $RECPARS{'TILE'} ) ) {
  $Frm->uhdr( "RECPAR_TILE", $RECPARS{'TILE'} );
  if ( $RECPARS{'TILE'} ) {
    orac_say( " Disabling tiling in MAKECUBE.", "yellow" );
  } else {
    if ( defined( $RECPARS{'CUBE_MAXSIZE'} ) ) {
      $Frm->uhdr( "RECPAR_CUBE_MAXSIZE", $RECPARS{'CUBE_MAXSIZE'} );
      orac_say( " Maximum tile size is $RECPARS{'CUBE_MAXSIZE'}MB.", "yellow" );
    }
  }
}

if ( defined( $RECPARS{'TRIM_MINIMUM_OVERLAP'} ) ) {
  $Frm->uhdr( "RECPAR_TRIM_MINIMUM_OVERLAP", uc( $RECPARS{'TRIM_MINIMUM_OVERLAP'} ) );
  orac_say( " Setting minimum overlap trimming for hybrid spectra to $RECPARS{'TRIM_MINIMUM_OVERLAP'} channels.", "yellow" );
}

my $lower_trim = 0;
if ( defined( $RECPARS{'TRIM_PERCENTAGE_LOWER'} ) ) {
  $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_LOWER", uc( $RECPARS{'TRIM_PERCENTAGE_LOWER'} ) );
  orac_say( " Setting lower spectral trimming to $RECPARS{'TRIM_PERCENTAGE_LOWER'} percent.", "yellow" );
  $lower_trim = 1;
}

my $upper_trim = 0;
if ( defined( $RECPARS{'TRIM_PERCENTAGE_UPPER'} ) ) {
  $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_UPPER", uc( $RECPARS{'TRIM_PERCENTAGE_UPPER'} ) );
  orac_say( " Setting upper spectral trimming to $RECPARS{'TRIM_PERCENTAGE_UPPER'} percent.", "yellow" );
  $upper_trim = 1;
}

if ( !( $lower_trim || $upper_trim ) ) {
  if ( defined( $RECPARS{'TRIM_PERCENTAGE'} ) ) {
    $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE", uc( $RECPARS{'TRIM_PERCENTAGE'} ) );
    orac_say( " Setting spectral trimming to $RECPARS{'TRIM_PERCENTAGE'} percent.", "yellow" );
  }
}

if( scalar keys %RECPARS >= 1 ) {
  orac_say "";
}

