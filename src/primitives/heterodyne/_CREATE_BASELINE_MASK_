# -*-cperl-*-

=head1 NAME

_CREATE_BASELINE_MASK_

=head1 DESCRIPTION

This primitive creates a mask that masks out line emission, thus
preserving baseline regions. It does so by smoothing the input cube
first in the two spatial dimensions, then in the frequency
dimension. Baselines are then fit, and clipping levels are such that
the resulting mask masks out any emission.

=head1 ARGUMENTS

=over 4

=item FREQUENCY_SMOOTH = INTEGER (Given)

The number of channels over which the frequency axis is smoothed. [25]

=item GROUP = INTEGER (Given)

Defines how group handling is done. 0 means the current Frame object
is used, 1 means the current Group object is used, and 2 means every
Frame member in the current Group is used. [0]

=item ORDER = INTEGER (Given)

The order of fit used for the baseline. This can be overridden by the
RECPAR_BASELINE_ORDER recipe parameter. [1]

=item SPATIAL_SMOOTH = INTEGER (Given)

The number of pixels in both spatial dimensions over which the cube is
smoothed. [3]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS cubes.

=item *

If there are fewer than five pixels in either of the spatial
dimensions, then spatial smoothing is not performed.

=item *

The PRODUCT header is set to 'blmask'.

=item *

The names of the baseline masks are stored in the BASELINE_MASKS uhdr
of whichever object is used (see the GROUP argument) as an array
reference.

=back

=head1 OUTPUT DATA

=over 4

=item *

The output baseline mask with suffix _blmask.

=back

=head1 TASKS

KAPPA: BLOCK, MFITTREND.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2009 Science and Technology Facilities Council.
All Rights Reserved.

=cut

my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $freqsmooth = get_prim_arg( $_PRIM_ARGS_, "FREQUENCY_SMOOTH", 25 );
my $spatsmooth = get_prim_arg( $_PRIM_ARGS_, "SPATIAL_SMOOTH", 3 );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );

# Override order if we've been given a recipe parameter.
$order = ( defined( $Frm->uhdr( "RECPAR_BASELINE_ORDER" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_ORDER" )            :
           $order );

my @objs;
if( $group == 0 ) {
  push @objs, $Frm;
} elsif( $group == 1 ) {
  push @objs, $Grp;
} elsif( $group == 2 ) {
  @objs = $Grp->members;
}

foreach my $Obj ( @objs ) {

  my @baseline_masks;

  orac_print "Creating baseline region mask.\n";

  foreach my $i ( 1 .. $Obj->nfiles ) {

    my ( $in, $mask ) = $Obj->inout( "_blmask", $i );

    my $temp2 = new ORAC::TempFile( 0 );
    my $temp2file = $temp2->file;

    if( starversion_gt( 'KAPPA', 'V1.11-7' ) ) {

      orac_say " Smoothing cube $in with [$spatsmooth,$spatsmooth,$freqsmooth] tophat.";
      my $params = "in=$in out=$temp2file box=[$spatsmooth,$spatsmooth,$freqsmooth] estimator=mean";
      $Mon{'kappa_mon'}->obeyw( "block", "$params" );
    } else {

      # Smooth in frequency.
      my $temp1 = new ORAC::TempFile( 0 );
      my $temp1file = $temp1->file;
      my $params = "in=$in out=$temp1file axes=[1,3] box=[1,$freqsmooth] estimator=mean";
      $Mon{'kappa_mon'}->obeyw( "block", "$params" );

      # Smooth in spatial, but only if we have enough pixels.
      _GET_DIMENSIONS_ FILE=$in
      my $dims = $_GET_DIMENSIONS_{DIMS};
      if( $dims->[0] > 5 || $dims->[1] > 5 ) {
        $params = "in=$temp1file out=$temp2file axes=[1,2] box=[$spatsmooth,$spatsmooth] estimator=mean";
        $Mon{'kappa_mon'}->obeyw( "block", "$params" );
      } else {
        $temp2file = $temp1file;
      }
    }

    # Find line-free regions in the smoothed cube. We do this by doing
    # an 'auto' fit with a high-order baseline.
    my $temp3 = new ORAC::TempFile( 0 );
    my $temp3file = $temp3->file;
    my $params = "in=$temp2file out=$temp3file axis=3 order=$order auto mask=$mask method=single variance=true subtract=false";
    $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

    # Report to user.
    orac_print " $mask: baseline region mask created.\n";

    $baseline_masks[$i] = $mask;

    _SET_FILE_FITS_ITEM_ FILE=$mask KEY=PRODUCT VALUE=blmask

    # Request that the mask be removed at the end of group processing.
    $Grp->push_intermediates( $mask )

  }

  # Store the baseline mask names.
  $Obj->uhdr( "BASELINE_MASKS", \@baseline_masks );

}

# Tidy-up output.
orac_print "\n";
