=head1 NAME

_FIND_HISTOGRAM_PEAK_

=head1 DESCRIPTION

This primitive uses a smoothed histogram of data values to estimate
the mode from the most populous peak, or the first or last significant
peak for positive or negative skewness respectively.  There is a
choice of methods available (see Argument METHOD).

Because of outliers it adopts an iterative approach.  First it forms
the histogram with some clipping of the data (see Argument CLIP).  The
number of bins comes from the Freedman & Diaconis rule or three per
standard deviation depending on the use (see Argument FINE).  Using
the Nyquist sampling is too coarse to determine the peak.  Although
the resolution may be scaled if the peak bin contains more than 15% of
the sample after first smoothing with a 2-pixel FWHM.  Once the number
of bins is set, the primitive forms a new histogram, again smoothed
with a 2-pixel FWHM Gaussian.  On this first pass the primitive
estimates a background to alleviate the effect of outliers; its
scalelength is one third of the histogram range.  Next it estimates
with the ClumpFind algorithm the clump peak and width parameters,
which in turn it uses to trim the histogram with clipping to
counteract, albeit in an ad hoc fashion, skewed distributions.  Then
it optionally fits a Gaussian should that method be chosen.

Then the process is repeated on the histogram of just the peak of
interest.  However, it doubles the resolution, especially relevant for
the Peak method.  To counteract greater noise the smoothing width is
enlarged to 3-pixel FWHM, and there is no background subtraction.

This primitive not guaranteed to work for all distributions, and some
of the parameters such as smoothing widths and resolution are
arbitrary.  Further refinements and tuning may be necessary.

=head1 ARGUMENTS

=over 4

=item CLIP = STRING (Given)

The standard deviation to clip the data values to exclude extreme
outliers, thereby being more efficient define the range of interest
and its standard deviation more accurately.  A comma-separated list
will perform iterative sigma clipping of outliers, but standard
deviations in the list should not decrease.  ["2.0,2.0,2.5,3.0"]

=item EXTREME = BOOLEAN (Given)

Whether to obtain the peak of the first (or last if skewness is negative),
or the most populous peak.  [1]

=item FINE_RESOLUTION = BOOLEAN (Given)

This selects the method for defining the resolution of the histogram
bins.  Set true the Freedman & Diaconis rule is used as would be
appropriate for determining the base level in a line forest spectrum,
where an accurate determination of the peak is desirable.  Set false
it uses three bins per standard deviation of the peak.  This would be
appropriate where a rough estimate of the peak is adequate, such as
to reject outlier non-linear spectra.  The danger of using FINE=1
for such bad-baseline rejections is that the histogram becomes
multi-modal and the wrong peak and width are returned.  [0]

=item METHOD = STRING (Given)

This selects the statistic to use for the peak.  Allowed values are
"Peak" for the location of the peak bin, "Centroid" for the clump
centroid, and "Gauss" for a Gaussian fit.  The peak is limited to the
box width, typically 30 bins over +/-2.5 standard deviations.
The clump is easily biased by unresolved clumps or extended signal to
one side of the peak.  For example, the centroid would tend to
understimate the base level in a line forest.  The Gauss will also be
biased but to a somewhat lesser extent.   ["Peak"]

=item PEAK = REAL (Returned)

The chosen peak of distribution of the values in the current Frame.

=item SMOOTH = BOOLEAN (Given)

Whether or to apply Gaussian smooth of 2-pixels then 3-pixels FWHM to
the histogram.  The recommenation is to only enble smoothing if only the peak value is
required and not the width of the peak.  [0]

=item WIDTH = REAL (Returned)

The width of the chosen peak of the distribution of values in the
current Frame.   This the the clump width for METHOD="Peak" or
"Centroid", or the Gaussian fit standard deviation for METHOD="Gauss".

=back

=head1 TASKS

CUPID: FINDBACK, FINDCLUMPS;
Figaro: FITGAUSS;
KAPPA: BLOCK, GAUSMOOTH, HISSET, HISTOGRAM, NDFCOPY, SETTYPE, STATS,
       SUB, THRESH.

=head1 REQUIRED PERL MODULES

POSIX.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2013 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use POSIX qw(ceil floor);

# Handle arguments.
# =================
my $peak = undef;
my $width = undef;
my $outlier_clip = get_prim_arg( $_PRIM_ARGS_, "EDGE_CLIP", "2.0,2.0,2.5,3.0" );
my $method = get_prim_arg( $_PRIM_ARGS_, "METHOD", "Peak" );
my $extreme = get_prim_arg( $_PRIM_ARGS_, "EXTREME", 1 );
my $fine_res = get_prim_arg( $_PRIM_ARGS_, "FINE_RESOLUTION", 1 );
my $smooth = get_prim_arg( $_PRIM_ARGS_, "SMOOTH", 1 );

# Convert list of standard-deviation clip levels to an array.
my @clips = split( ',', $outlier_clip );

# Constrain parameters to allowed values.
# ---------------------------------------

# Sigma clipping levels should not decrease. Do not set the initial
# threshold too low lest we exclude acceptable but slightly deviant
# spectra in an otherwise good set.
my @clip_sigma = ();
my $last = 2.0;
foreach ( @clips ) {
   push @clip_sigma, max( $last, $_ );
}

$outlier_clip = "[" . join( ",", @clip_sigma ) . "]";

my @methods = qw( peak centroid gauss );
$method = "peak" if ( ! grep( $_ eq lc( $method ), @methods ) );

if ( $fine_res ) {
   orac_say "Finding the histogram peak using the $method method at high resolution.";
} else {
   orac_say "Finding the histogram peak using the $method method at low resolution.";
}

my $in = $Frm->file;

# Create configuration-parameter file for FINDCLUMPS.
# ===================================================

# The main ones are ClumpFind.MaxBad, ClumpFind.MinPix (although double the
# default it could be set larger to weed out peaks from lines),
# ClumpFind.FwhmBeam, and the dynamic ClumpFind.Tlow added on the command
# line.  ClumpFind.VeloRes could be set to 1 channel.
my $fc_param = new ORAC::TempFile( 1 );
open my $fc_fh, ">", $fc_param;
print $fc_fh "ClumpFind.Minpix=6\n";
print $fc_fh "ClumpFind.AllowEdge=1\n";
print $fc_fh "ClumpFind.FwhmBeam=0.0\n";
print $fc_fh "ClumpFind.MaxBad=1\n";
print $fc_fh "ClumpFind.VeloRes=0\n";
close $fc_fh;

# Evaluate and smooth the histogram.
# ==================================
my $ORAC_STATUS;

my $full = 1;
my $data = $in;
my $params;
my @fwhm = ( 2, 3 );
my @iqr_factor = ( 1.0, 0.5 );
my $itermax = min( scalar( @fwhm ), scalar( @iqr_factor ) );

for ( my $iter = 1; $iter <= $itermax; $iter++ ) {

# Perform statistics trimming off much of the signal from the signal
# causing positive skewness.  Set the resolution to give seven bins across
# the FWHM.
   $params = "ndf=$data clip=$outlier_clip order percentiles=[25,75]";
   $Mon{'kappa_mon'}->obeyw( "stats", "$params" );
   ( $ORAC_STATUS, my $skewness ) = $Mon{'kappa_mon'}->get( "stats", "skewness" );
   ( $ORAC_STATUS, my $kurtosis ) = $Mon{'kappa_mon'}->get( "stats", "kurtosis" );
   ( $ORAC_STATUS, my $minimum ) = $Mon{'kappa_mon'}->get( "stats", "minimum" );
   ( $ORAC_STATUS, my $maximum ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );
   ( $ORAC_STATUS, my $sigma ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );
   ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
   ( $ORAC_STATUS, my @perval ) = $Mon{'kappa_mon'}->get( "stats", "perval" );

# Allow for extended wings.
# -------------------------

# It is hard to set default clipping factors which apply well to all
# data.  If the previous estimate at the standard deviation overestimates
# the spread from long tails, such as would occur for broadline or
# lineforest emission, the bin size is too wide and definition of the
# peak is degraded.  There are various rules such as Sturges or
# Freedman & Diaconis to set the optimal bin width.  However, tests with
# one problem dataset either gave fewer bins as used above (Sturges) or
# what looked too many (Freedman-Diaconis).  The latter was certainly
# better and offered far-better resolution for the peak method.

# If there are few outliers and the standard deviation is good
# estimate of the true standard deviation of the main peak of the
# histogram.  This another approach is to create the histogram adopting
# this assumption and see if there is one bin dominating, and scale
# the number of bins in a refined histogram to bring down the peak
# count to a smaller fraction, say 12 to 15% of the sample size.

# Let's use both approaches.  If the data look reasonably Gaussian
# go with the standard deviation and revise the histogram if necessary.
# Also the crude normality test is gives different results analysing
# the raw data and binned into the histogram reducing both skewness and
# kurtosis, so test both.
   my ( $binmax, $hist_normal, $numbin, $resolution );
   my $normal = abs( $skewness ) < 1 && $kurtosis < 1;
   orac_warn "   Data distribution is not approximately Gaussian\n" if ( !$normal );

# Set the initial bin width using the Freedman & Diaconis formula or
# one based upon the Nyquist sampling depending on the application.
   my $def_resolution;
   if ( $fine_res ) {
     $def_resolution = 2.0 * abs( $perval[1] - $perval[0] ) / $numgood ** 0.3333;
   } else {
     $def_resolution = $sigma / 3 ;
   }
   $resolution = $iqr_factor[$iter-1] * $def_resolution;

   my $histfile = new ORAC::TempFile( 0 );

# Adjust the resolution.
# ----------------------
   my $loop = 1;
   my $lc = 1;
   my ( $hist_kurtosis, $hist_skewness, $hist_total, $smooth_hist, $smooth_hist_s );
   while ( $loop ) {

# Round up or down the histogram range to the bin resolution, and hence
# determine the number of histogram bins, allowing numerical rounding.
# Append an extra bin at the lower end so that the first peak does not
# touch the array lower bound.
      $minimum = ceil( $minimum / $resolution - 1 ) * $resolution;
      $maximum = floor( $maximum / $resolution ) * $resolution;
      $numbin = int( ( $maximum - $minimum + 0.01 * $resolution ) / $resolution );

# Create histogram at the resolution, covering the range of relevant data.
      $params = "in=$data out=$histfile ";
      $params .= "device=! numbin=$numbin range='$minimum,$maximum'";
      $Mon{'kappa_mon'}->obeyw( "histogram", "$params" );
      $Mon{'ndfpack_mon'}->obeyw( "hisset", "ndf=$histfile mode=verbose" );

# A gentle smooth should generate a well-defined less jagged, rounded
# peak, and not overemphasize the the most populous bin regarding scaling
# to increase the bin resolution.
      $smooth_hist_s = new ORAC::TempFile( 0 );
      if ( $smooth && $lc == 1 ) {
         $Mon{'ndfpack_mon'}->obeyw( "settype", "ndf=$histfile type=_REAL" );
         $params = "in=$histfile out=$smooth_hist_s fwhm=$fwhm[$iter-1]";
         $Mon{'kappa_mon'}->obeyw( "gausmooth", "$params" );
      } else {
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$histfile out=$smooth_hist_s" );
      }

# Repeat the crude test for normality but also obtain the maximum
# count in a bin.
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$smooth_hist_s" );
      ( $ORAC_STATUS, $binmax ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );
      ( $ORAC_STATUS, $hist_skewness ) = $Mon{'kappa_mon'}->get( "stats", "skewness" );
      ( $ORAC_STATUS, $hist_kurtosis ) = $Mon{'kappa_mon'}->get( "stats", "kurtosis" );
      ( $ORAC_STATUS, $hist_total ) = $Mon{'kappa_mon'}->get( "stats", "total" );
      $hist_normal = abs( $hist_skewness ) < 1 && $hist_kurtosis < 1;
      if ( !$hist_normal ) {
         $resolution = $iqr_factor[$iter-1] * $def_resolution;
      }

# Repeat if we had a normalish original data but skewed or spread out
# histogram.
      $loop = $normal && !$hist_normal && $lc == 1;
      $lc++;
   }

# Is the main bin over-populated?
   my $target = int( 0.15 * $hist_total );
   if ( $binmax > $target ) {

# Simple scaling is insufficient because of the drop off around the
# peak, so add in a fudge factor.  There is probably some mathematical
# formula that would derive this correction for a Gaussian to give the
# peak bin desired.  For this routine this should be adequate to define
# peak location sufficiently accurately.
      $resolution /= $binmax / $target * 2;
      $minimum = ceil( $minimum / $resolution - 1 ) * $resolution;
      $maximum = floor( $maximum / $resolution ) * $resolution;
      $numbin = int( ( $maximum - $minimum + 0.01 * $resolution ) / $resolution );
      $params = "in=$data out=$histfile ";
      $params .= "device=! numbin=$numbin range='$minimum,$maximum'";
      $Mon{'kappa_mon'}->obeyw( "histogram", "$params" );
   }

# A gentle smooth should generate a well-defined less jagged, rounded peak.
   $smooth_hist = new ORAC::TempFile( 0 );
   if ( $smooth ) {
      $Mon{'ndfpack_mon'}->obeyw( "settype", "ndf=$histfile type=_REAL" );
      $params = "in=$histfile out=$smooth_hist fwhm=$fwhm[$iter-1]";
      $Mon{'kappa_mon'}->obeyw( "gausmooth", "$params" );
   } else {
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$histfile out=$smooth_hist" );
   }

# Remove the background.
# ----------------------

# Attempt to remove the background for asymmetric distributions which
# bias the centroid.
   if ( !$normal || !$hist_normal && $iter == 1 ) {
      my $histback = new ORAC::TempFile( 0 );
      my $histsub = new ORAC::TempFile( 0 );
      my $boxsize = max( $numbin / 3, $def_resolution );

# Find rough background but with a box size that it only has a marginal
# effect on the centroid of the main peak of the histogram.
      my $oddboxsize = $boxsize + ( $boxsize + 1 ) % 2;
      $params = "in=$smooth_hist out=$histback box=$oddboxsize rms=1 accept";
      my $FINDBACK_STATUS = $Mon{'cupid_mon'}->obeyw( "findback", "$params" );

# FINDBACK can fall over, but this should not be fatal.
      if ( $FINDBACK_STATUS != ORAC__OK ) {
         if ( starversion_gt( 'CUPID', 'V1.6' ) && $FINDBACK_STATUS == 262703466 ) {
           orac_say "   Unable to find the background in the histogram due to insufficient good data.";
         }
         orac_say "   Attempting to continue using block smoothing.";
         $params = "in=$smooth_hist out=$histback box=$oddboxsize estimator=median";
         $Mon{'kappa_mon'}->obeyw( "block", "$params" );
      }

      $params = "in1=$smooth_hist in2=$histback out=$histsub";
      $Mon{'kappa_mon'}->obeyw( "sub", "$params" );
      orac_say "   Subtract the background from the histogram.";
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$histsub out=$smooth_hist" );
   }

# Set data-driven parameters for clump finding.
# =============================================

# Find the minimum count in the histogram for the clump finding and
# ensure that the first threshold for clump finding is above this.
   $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$smooth_hist" );
   ( $ORAC_STATUS, my $mincount ) = $Mon{'kappa_mon'}->get( "stats", "minimum" );
   $mincount++;

# Obtain some backup values should a clump not be located.
   ( $ORAC_STATUS, my $maxpos ) = $Mon{'kappa_mon'}->get( "stats", "maxpos" );
   ( $ORAC_STATUS, my $hist_sigma ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );

# Set a representative rms for clump finding.
   ( $ORAC_STATUS, my $total ) = $Mon{'kappa_mon'}->get( "stats", "total" );
   my $rms = max( 1.001, 0.5 * sqrt( $total / $numbin ) );

# Use maximum as initial value for the Gaussian fit.
   ( $ORAC_STATUS, my $hist_max ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );

# Measure the properties of peaks in the histogram.
# =================================================

# Identify the peaks in the histogram, storing the results table to a
# Starlink STL file.  Since the quanta are integers ensure the RMS level
# is at least that.
   my $outmap = new ORAC::TempFile( 0 );
   my $outcat = new ORAC::TempFile( 0 );
   $outcat .= ".TXT";
   my $nclumps = 0;

   $params = "in=$smooth_hist out=$outmap outcat=$outcat method=clumpfind rms=$rms ";
   $params .= "config='^$fc_param,ClumpFind.Tlow=$mincount' accept";
   my $FINDCLUMPS_STATUS = $Mon{'cupid_mon'}->obeyw( "findclumps", "$params" );
   if ( $FINDCLUMPS_STATUS == ORAC__OK ) {

# Check number of clumps using NCLUMPS output parameter.
      ( $ORAC_STATUS, $nclumps ) = $Mon{'cupid_mon'}->get( "findclumps", "nclumps" );
   }
   if ( $nclumps > 0 ) {

# Extract the desired information from the output table.
# ======================================================

# Since I'm not allowed to use STILTS, here is a not terribly pretty
# means to access the required data in the file.  It searches the STL
# format for the start of the table and given by the BEGINTABLE, and
# there is no development of this format so this should be robust.
# Then we assume that the first row is the lowest co-ordinate; there
# should not be a peak below the baseline.
      open( TABLE, "< $outcat" ) or
            die "Could not find catalogue $outcat specifying the histogram peaks: $!\n";
      unlink $outcat;
      my @lines = <TABLE>;
      my $i = 0;
      my $row;
      my $nlines = scalar( @lines );
      if ( $skewness >= 0.0 && $extreme ) {
         while ( $i < $nlines ) {
            chomp $lines[$i];
            if ( $lines[$i] =~ /BEGINTABLE/ ) {
               $row = $lines[$i+1];
               last;
            }
            $i++;
         }

# The final clump is specified in the last line of the file, although
# this is not particularly robust to external change, albeit unlikely.
      } elsif ( $extreme ) {
         $i = $nlines - 1;
         $row = $lines[$i];

# Find the most-populous clump.  First reach the table itself.
      } else {
         while ( $i < $nlines ) {
            chomp $lines[$i];
            if ( $lines[$i] =~ /BEGINTABLE/ ) {
               last;
            }
            $i++;
         }

# The fields are Index, Peak1, Cen1, Size1, Sum, Peak.  So search to find the
# row with the biggest Sum.
         my $pop = -1;
         my $popindex = $i;
         my $sumindex = 4;
         while ( $i < $nlines ) {
            my @fields = split( ' ', chomp $lines[$i] );
            if ( $fields[$sumindex] > $pop ) {
               $pop = $fields[$sumindex];
               $popindex = $i;
            }
            $i++;
         }
         $row = $lines[$popindex];
      }

# Extract the centroid value for the first or last peak depending on the skewness.
# Convert from scientific notion with a D exponent to E so that Perl recognises it.
      my @fields = split( ' ', $row );
      $peak = $method eq "centroid" ? $fields[2] : $fields[1];
      $peak =~ s/D/e/;
      $peak = $peak * $resolution + $minimum;

      $width = $fields[3];
      $width =~ s/D/e/;
      $width *= $resolution;

# Fit the Gaussian.
      if ( $method eq "gauss" ) {
         my $init_fwhm = 2.35 * $width;
         $params = "in=$smooth_hist device=! dialog=f varuse=f ncomp=1 ";
         $params .= "centre=$peak cont=0 peak=$hist_max fwhm=$init_fwhm ";
         $params .= "cf=[0] pf=[0] wf=[0] logfil=! comp=1 accept";
         my $FitStatus = $Mon{'figaro4'}->obeyw( "fitgauss", "$params" );
         if ( $FitStatus == ORAC__OK ) {

# Retrieve the fit information.  FITGAUSS uses the data scale not pixel
# co-ordinates.
            ( $ORAC_STATUS, $peak ) = $Mon{'figaro4'}->get( "fitgauss", "fcentre" );
            ( $ORAC_STATUS, my $ffwhm ) = $Mon{'figaro4'}->get( "fitgauss", "ffwhm" );
            $width = $ffwhm / 2.3548;
         } else {
           orac_warn "Unable to fit Gaussian to histogram peak. Using the location of the maximum bin.\n";
         }
      }

   } else {
      orac_warn "No clumps found.  Using the location of the maximum bin.\n";
   }

# If clump finding or fitting failed set approximate returned values.
   $peak = ( $maxpos - 0.5 ) * $resolution + $minimum if ( ! defined( $peak ) );
   $width = $hist_sigma * $resolution if ( ! defined( $width ) );

# Bias range according to the skewness in an another ad hoc attempt to
# offset skewness on the centroid.
   my $tempthresh = new ORAC::TempFile( 0 );
   if ( $iter != $itermax ) {
      $minimum = max( $minimum, $peak - 2.5 * $width );
      $maximum = min( $maximum, $peak + 2.5 * $width );
      if ( $hist_skewness > 1.0 ) {
         $maximum = min( $maximum, $peak + 1.5 * $width );
      } elsif ( $hist_skewness > 0.5 ) {
         $maximum = min( $maximum, $peak + 2.0 * $width );
      } elsif ( $hist_skewness < 1.0 ) {
         $minimum = max( $minimum, $peak - 1.5 * $width );
      } elsif ( $hist_skewness < 0.5 ) {
         $minimum = max( $minimum, $peak - 2.0 * $width );
      }

# Apply the trimmed data range.
      $params = "in=$data out=$tempthresh ";
      $params .= "thrlo=$minimum thrhi=$maximum newlo=bad newhi=bad";
      $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );
      $data = $tempthresh;
   }
}

# Remove the FINDCLUMPS configuration file.
unlink( $fc_param );

# Export the required statistics.
$_FIND_HISTOGRAM_PEAK_{PEAK} = $peak;
$_FIND_HISTOGRAM_PEAK_{WIDTH} = $width;

