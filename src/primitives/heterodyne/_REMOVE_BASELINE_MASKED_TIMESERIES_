# -*-cperl-*-

=head1 NAME

_REMOVE_BASELINE_MASKED_TIMESERIES_

=head1 DESCRIPTION

This primitive determines a baseline for a time-series cube using
previously masked time-series data, determined by the
_RECREATE_MASKED_TIMESERIES_ primitive. A high-order polynomial is fit
to the masked data to determine the baseline, which is then subtracted
from the original (unmasked) time-series data.

=head1 ARGUMENTS

=over 4

=item ORDER = INTEGER (Given)

The polynomial order that will be used to determine the baseline. As
the masked data will be used, a high order is recommended.  The order
of fit used for the baseline.  This can be overridden by the
RECPAR_BASELINE_ORDER recipe parameter.  [1]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=item *

The masked time-series data filenames must be stored in a hash
reference in the Group MASKED_TIMESERIES uhdr, with the key being the
original unmasked time-series data, and the value being the masked
time-series data.

=item *

The output files are logged as group intermediates.

=back

=head1 OUTPUT DATA

=over 4

=item *

Baselined time-series data with _blNNN suffix.

=back

=head1 TASKS

KAPPA: MFITTREND, SUB

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2012, 2016 Science and Technology Facilities Council.
All Rights Reserved.

=cut

# Retrieve parameters.
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );

# Override order if we've been given a recipe parameter.
$order = ( defined( $Frm->uhdr( "RECPAR_BASELINE_ORDER" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_ORDER" )            :
           $order );

# Write a heading to structure the commentary.
orac_say "\n\nSubtract masked baselines from unmasked time-series";
my $underline = "-" x 74;
orac_say "$underline\n";

orac_say "Fitting baselines to masked time-series data and subtracting them from unmasked time-series data.";
my %masked;

foreach my $mFrm ( $Grp->members ) {

  foreach my $i ( 1 .. $mFrm->nfiles ) {

    my ( $in, $out ) = $mFrm->inout( "_bl", $i );

    my $masked_ref = $Grp->uhdr( "MASKED_TIMESERIES" );
    my $masked = $masked_ref->{$in};

    my $temp1 = new ORAC::TempFile( 0 );
    my $temp1file = $temp1->file;
    my $temp2 = new ORAC::TempFile( 0 );
    my $temp2file = $temp2->file;

    # Set up parameters to MFITTREND.
    my $params = "in=$masked out=$temp1file axis=1 order=$order auto=false ranges=\! variance subtract=false method=single";
    $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

    # Subtract the mask from the input file.
    $params = "in1=$in in2=$temp1file out=$temp2file";
    $Mon{'kappa_mon'}->obeyw( "sub", "$params" );

    # Copy over.
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp2file out=$out" );

    # Report to the user.
    orac_print "$in to $out:\n";
    orac_print " Subtracted baselines determined from $masked.\n";

    # Update the Frm.
    $mFrm->file( $i, $out );

    # Update the key for the masks.
    $masked{$out} = $masked;

    # Request that the output file is removed upon completion of the
    # group processing.
    $Grp->push_intermediates( $ out );
  }
}

# Update the list of files associated with the masks.
$Grp->uhdr( "MASKED_TIMESERIES", \%masked );

orac_print "\n";
