# -*-cperl-*-

=head1 NAME

_GET_TILE_DIMENSIONS_

=head1 DESCRIPTION

This determines the square-tile dimension for reduced spectral cubes.
It uses the formula

C<sqrt( MAXSIZE (in MB) / (BYTES_PER_PIXEL * NC) ) - 2 * TILEBORDER>,

where NC is the number of channels obtained from header NCHNSUBS, but
doubled for hybrid data; and the other variables are the input arguments.

=head1 ARGUMENTS

=over 4

=item BYTES_PER_PIXEL = INTEGER (Given)

The number of bytes per pixel in the data to be tiled.  [4]

=item MAXSIZE = INTEGER (Given)

The maximum storage size of a tile, measured in megabytes.  [512]

=item TILEBORDER = INTEGER (Given)

The width in pixels of the border where tiles overlap.  This must be a
non-neagtive value.  [0]

=item TILEDIMS = INTEGER (Returned)

The dimension in pixels of the square tile.

=back

=head1 NOTES

=over 4

=item *

The internal Frame header ISHYBRID is tested to see if the data are hybrid.

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

use constant MEGABYTE => 1048576;

# Handle parameters.
my $tileborder = get_prim_arg( $_PRIM_ARGS_, "TILEBORDER", 0 );
my $maxsize = get_prim_arg( $_PRIM_ARGS_, "MAXSIZE", 512 );
my $bytes_per_pixel = get_prim_arg( $_PRIM_ARGS_, "BYTES_PER_PIXEL", 4 );

# Find the number of channels.
my $numchan = $Frm->hdr( 'NCHNSUBS' );

# If we're doing a hybrid observation, double the number of
# channels. Strictly speaking this isn't right as some of the channels
# are duplicated, but it's a good ballpark figure.
if ( $Frm->uhdr( "ISHYBRID" ) ) {
  $numchan *= 2;
}

# Tiles are square.
my $tiledims = int( sqrt( $maxsize * MEGABYTE / ( $bytes_per_pixel * $numchan ) ) ) - 2 * $tileborder;

# Return.
$_PRIM_ARGS_->{TILEDIMS} = $tiledims;
