# -*-cperl-*-

=head1 NAME

_REMOVE_FLAT_FIELD_ITERATE_ - Remove flat-field effects iteratively.

=head1 DESCRIPTION

This primitive removes a global flat-field from a baselined
time-series cube.  It generates spectral cubes for each receptor
individually, then collapses each cube along the frequency and time
axes to form a composite spectrum for each receptor.  Then it has a
choice of methods to analyse them (see Argument METHOD).

The first sums the flux over a velocity range for each individual
receptor (Curtis, Richer & Buckle 2009) integrating over all the
spectra.  This assumes that all receptors see the same flux which in
general will not be true, but in practice this does a decent job
provided the velocity range just spans the emission.  One case where
it din't work so well is where there appeared to be non-linearity in
the data and the flat field for the bright parts seemed not to be the
same as near the background.

The second selects signal above the median plus four standard
deviations, particurlarly when there are multiple lines.  This offers
a simple means to exclude the noisy baseline and reduce the
uncertainty in the relative data values in each receptor.  It then
normalizes the flux in the receptors to the tracking receptor's flux.
It then uses this multiplicative factor to normalize the input
time-series data.  Since there are differences in the baselines and
relative signal between receptors, the thresholding introduces a bias.
This primitive employs an iterative method, first applying the initial
corrections, which raise or lower the mean spectrum of a receptor so
that the thresholding is more consistent with other receptors.  It
then recalculates the correction factors and folds these in with the
earlier factors.  The procedure stops after MAX_ITERATIONS iterations
or when convergence has been met, currently set at no more than 1 per
cent shift from the previous iteration.

=head1 ARGUMENTS

=over 4

=item GROUP = INTEGER (Given)

How to process group files. 0 means use the current Frame object. 1
means use the current Group object. 2 means use each Frame member of
the current Group object. [0]

=item LOWER_VELOCITY = REAL (Given)

The requested lower velocity for the flat-field estimations.
This argument can be overridden by the RECPAR_FLAT_LOWER_VELOCITY uhdr
via the recipe parameter system.  [undef]

=item MAX_ITERATIONS = INTEGER (Given)

The maximum number of iterations to seek convergence for METHOD set to
'itersum'.  This will be ignored (effectively set to 1) if the
METHOD is 'sum'.  [5]

=item METHOD = STRING (Given)

This selects the method used to derive the relative gains of the
receptors.  The allowed selection comprises 'sum' which finds the
integrated flux in a velocity window, or 'itersum' which uses
thresholiding to define the contributing signal.  This argument can be
overridden by the RECPAR_FLAT_METHOD uhdr via the recipe parameter
system.  ['sum']

=item REFERENCE_RECEPTOR = STRING (Given)

Which receptor is the reference receptor to which the others are
normalized. ['H05']

=item UPPER_VELOCITY = REAL (Given)

The requested upper velocity for the flat-field estimations.
This argument can be overridden by the RECPAR_FLAT_UPPER_VELOCITY uhdr
via the recipe parameter system.  [undef]

=back

=head1 NOTES

=over 4

=item *

This primitive should only be used when you can be assured that each
receptor has sampled approximately the same amount of flux across the
observation. Rasters of clouds are good candidates, jiggles or grids
are not.

=item *

This primitive is suitable for baselined time-series ACSIS cubes.

=item *

The cube is collapsed along the time and frequency axes using the
'sum' estimator.

=back

=head1 OUTPUT DATA

=over 4

=item *

The flat-fielded time-series cube with suffix _ff.

=back

=head1 TASKS

KAPPA: BLOCK, CDIV, COLLAPSE, DIV, MATHS, MANIC, NDFCOPY, NDFTRACE, PASTE,
SETUNITS, STATS, THRESH.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2012-2013 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Obtain arguments and recipe parameters.
# =======================================

my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $reference_receptor = get_prim_arg( $_PRIM_ARGS_, "REFERENCE_RECEPTOR", undef );
my $flatmethod = get_prim_arg( $_PRIM_ARGS_, "METHOD", 'sum' );
my $maxiter = get_prim_arg( $_PRIM_ARGS_, "MAX_ITERATIONS", 5 );
my $lower_vel = get_prim_arg( $_PRIM_ARGS_, "LOWER_VELOCITY", undef );
my $upper_vel = get_prim_arg( $_PRIM_ARGS_, "UPPER_VELOCITY", undef );

$flatmethod = ( defined( $Frm->uhdr( "RECPAR_FLAT_METHOD" ) ) ?
                $Frm->uhdr( "RECPAR_FLAT_METHOD" )            :
                $flatmethod );
$lower_vel = ( defined( $Frm->uhdr( "RECPAR_FLAT_LOWER_VELOCITY" ) ) ?
             $Frm->uhdr( "RECPAR_FLAT_LOWER_VELOCITY" )              :
             $lower_vel );
$upper_vel = ( defined( $Frm->uhdr( "RECPAR_FLAT_UPPER_VELOCITY" ) ) ?
             $Frm->uhdr( "RECPAR_FLAT_UPPER_VELOCITY" )              :
             $upper_vel );

# Integer velocity must be made floating point so that NDF sectioning
# does not regard it as pixels.
if ( $lower_vel =~ /^[+-]?\d+$/ ) { $lower_vel = sprintf( "%.1f", $lower_vel ) }
if ( $upper_vel =~ /^[+-]?\d+$/ ) { $upper_vel = sprintf( "%.1f", $upper_vel ) }

my $flat_range = "";
if ( defined( $lower_vel ) && defined( $upper_vel ) ) {
   $flat_range = "$lower_vel" . ":" . "$upper_vel";
} else {
   orac_warn "Flat fielding selected without specifying the velocity range to perform \n";
   orac_warn "receptor-to-receptor comparisons.  Using the full spectrum, but the analysis \n";
   orac_warn "may be affected by noise. \n";
   orac_warn "Set FLAT_LOWER_VELOCITY and FLAT_UPPER_VELOCITY to span the astronomical signal.\n";
}

# Provide a shorthand for the selecting the method.
my $sum = lc( $flatmethod ) eq 'sum' ? 1 : 0;

# For the sum method there is no iteration.
$maxiter = 1 if ( $sum );

# Select objects to analyse and flat field.
# =========================================

my $isok = eval { require JCMT::ACSIS::Array; 1; };
if ( ! $isok ) {
   orac_warn "Could not load the JCMT::ACSIS::Array Perl module: $@\n";
   orac_warn "Cannot remove flat-field.\n";
} else {

   my @Objs;
   if ( $group == 0 ) {
      push @Objs, $Frm;
   } elsif ( $group == 1 ) {
      push @Objs, $Grp;
   } elsif ( $group == 2 ) {
      @Objs = $Grp->members;
   }

# Only do this if we're not doing a Group, or if we are doing a
# Group and this Frame is the last member of the Group.
   if ( $group != 1 ||
        ( $group == 1 && $Grp->lastallmembers( $Frm ) ) ) {
      my $params;

      orac_say "Detector gain correction";

# Obtain required attributes of each object
# =========================================

# Each object (group or observation) may comprise more than one file.
      foreach my $Obj ( @Objs ) {
         my $in = $Obj->file;
         orac_say "Processing observation: $in.";
         my $nval;

# Determine valid spectral range.  This will either be the regular central 85%,
# or to user-defined final velocity limits, whichever is more extensive.
         my $wcs_spec_bounds = '';
         my ( $lower_spect, $upper_spect );
         if ( ! ( defined( $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) &&
                 $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) ) {
            _GET_SPECTRAL_LIMITS_ FILE=$in TRIM_PERCENT=85
            $lower_spect = $_GET_SPECTRAL_LIMITS_{LBOUND};
            $upper_spect = $_GET_SPECTRAL_LIMITS_{UBOUND};
            $wcs_spec_bounds = "$lower_spect:$upper_spect";
         }

# Find the reference receptor's name.
         my $ref = ( defined( $reference_receptor ) ?
                     $reference_receptor            :
                     $Obj->hdr( "REFRECEP" ) );

# Retrieve the units of the input cube.
         $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in fullframe" );
         my( $ORAC_STATUS, $units ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "units" );

# Retrieve bounds of input cube needed to create out flat-field sub-files.
         my $first_file = $in;
         _GET_DIMENSIONS_ FILE=$first_file
         my $lbound = $_GET_DIMENSIONS_{LBOUND};
         my $ubound = $_GET_DIMENSIONS_{UBOUND};

# Obtain the number of receptors.
         my $array = new JCMT::ACSIS::Array( File => $first_file );
         my @receptors = $array->receptors;
         my $nreceptor = scalar( @receptors );

# Form the array to store the mean spectrum for each receptor.
# The values are irrelevant as they will be pasted over later.
         my $mean_spectra = new ORAC::TempFile( 0 );
         $params = "in=$first_file($wcs_spec_bounds,,1) out=$mean_spectra trim trimwcs";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Analyse by receptor
# ===================

# One reason for this is reduce the data volume; the raw data were
# divided to avoid demanding too much storage or memory at any one
# time.
         my @time_bounds;
         for ( my $r = 1; $r <= $nreceptor; $r++ ) {
            my $no_times = 0;

# Set up some temporary files.
            my $fulltimes = new ORAC::TempFile( 0 );
            my $temp0file = new ORAC::TempFile( 0 );
            my $temp1file = new ORAC::TempFile( 0 );
            my $temp2file = new ORAC::TempFile( 0 );
            my $temp3file = new ORAC::TempFile( 0 );

# Combine all the subfiles for the current receptor.
# --------------------------------------------------
            my $receptor = $array->receptor( $r );
            if ( $r == 1 ) {
               orac_print "Concatenate time series for receptor $receptor";
            } elsif ( $r == $nreceptor ) {
               orac_print ", $receptor.\n";
            } else {
               orac_print ", $receptor";
            }

            my $insub;
            if ( $Obj->nfiles > 1 ) {
               foreach my $i ( 1 .. $Obj->nfiles ) {
                  $insub = $Obj->file( $i );

# We need the dimensions of the input file for later.
                  my ( $lbnd, $ubnd, $dims, $nel );
                  if ( $r == 1 ) {
                     _GET_DIMENSIONS_ FILE=$insub
                     $lbnd = $_GET_DIMENSIONS_{LBOUND};
                     $ubnd = $_GET_DIMENSIONS_{UBOUND};
                     $dims = $_GET_DIMENSIONS_{DIMS};
                     $nel = $ubnd->[0] - $lbnd->[0] + 1;
                     push @time_bounds, $lbnd->[2] + $no_times, $ubnd->[2] + $no_times;
                     $no_times += $ubnd->[2] - $lbnd->[2] + 1;
                  }

# Concatenate the spectra for the receptor.
# -----------------------------------------

# Form a profile for each receptor throughout a whole observation.  The
# whole gives a better handle on the normal non-linearity level.
                  if ( $i == 1 ) {
                     $params = "in=$insub($wcs_spec_bounds,$r,) out=$fulltimes";
                     $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

                  } else {

# Shift the origin on the time during concatenation.  Exclode the very
# noisy peripheries.
                     my $time_origin = $time_bounds[-2] - 1;
                     $params = "shift=[0,0,$time_origin] ";
                     $params .= "in=$fulltimes p1=$insub($wcs_spec_bounds,$r,) out=$temp0file";
                     $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

# Ready for the next slice to concatenate.  Another, but brave, way
# is to make the input and output the same on PASTE.
                     $params = "in=$temp0file out=$fulltimes";
                     $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
                  }
               }

# No concatenation is required so avoid unnecessary processing.
            } else {
               $insub = $Obj->file( 1 );
               $fulltimes = "$insub($wcs_spec_bounds,$r,)";
            }

# Collapse along the time axis.  Use a clipped mean to exclude single
# spectra with strongly negative values.
            my $params = "in=$fulltimes out=$temp1file estimator=cmean wlim=0.0 axis=3";
            $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# Reduce the noise by smoothing.
            $params = "in=$temp1file out=$temp2file box=[25,1] estimator=mean";
            $Mon{'kappa_mon'}->obeyw( "block", "$params" );

# Store the smoothed mean spectrum for later analysis.
            $params = "in=$mean_spectra p1=$temp2file out=$temp3file";
            $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

            $params = "in=$temp3file out=$mean_spectra";
            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
         }


# Obtain the pixel bounds of the trimmed spectra.
         _GET_DIMENSIONS_ FILE=$mean_spectra
         my $trim_lbnd = $_GET_DIMENSIONS_{LBOUND};
         my $trim_ubnd = $_GET_DIMENSIONS_{UBOUND};
         my $lower_bound = $trim_lbnd->[0];
         my $upper_bound = $trim_ubnd->[0];

# Set up some temporary files.
         my $previousfile = new ORAC::TempFile( 0 );
         my $ratiofile = new ORAC::TempFile( 0 );
         my $spectfile = new ORAC::TempFile( 0 );
         my $temp4file = new ORAC::TempFile( 0 );
         my $temp5file = new ORAC::TempFile( 0 );
         my $temp6file = new ORAC::TempFile( 0 );
         my $temp7file = new ORAC::TempFile( 0 );
         my $temp8file = new ORAC::TempFile( 0 );
         my $temp9file = new ORAC::TempFile( 0 );
         my $ratiocube = new ORAC::TempFile( 0 );

# Iteration
# =========
         my $ratio_shift = 10000.0;
         my $first = 1;
         my $iter = 1;
         my $derive_flat = 1;
         while ( $ratio_shift > 0.01  && $iter <= $maxiter ) {
            orac_print "\nIteration $iter:";

# Apply the previous iterations to the fit.
            if ( $first ) {
               $params = "in=$mean_spectra out=$spectfile";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Grow the vector ratios into an array with the dimensions of the mean
# spectra.
            } else {
               $params = "in=$temp7file out=$temp9file axes=[0,1] ";
               $params .= "lbound=$lower_bound ubound=$upper_bound";
               $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Apply the ratio to the spectra.
               $params = "in1=$spectfile in2=$temp9file out=$temp4file";
               $Mon{'kappa_mon'}->obeyw( "div", "$params" );
               $params = "in=$temp4file out=$spectfile";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
            }

# Section to select the astronomical signal.
# ------------------------------------------

# It is possible to use more-sophisticated clump finding... but it is unclear
# whether this is justified given we assume that all receptors are receiving
# the same flux, which we know is incorrect.

# First the non-iterative simple approach, summing over the line.
            if ( $sum ) {

# Collapse along the velocity axis giving the mean emission.
               $params = "in=$spectfile($flat_range,,) out=$temp6file estimator=mean wlim=0.0 axis=1";
               $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

            } else {

# Calculate clipped statistics on the array.
               $params = "ndf=$spectfile clip=[2,2.0,2.5,3.0] order";
               $Mon{'kappa_mon'}->obeyw( "stats", "$params" );
               ( $ORAC_STATUS, my $sigma ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );
               ( $ORAC_STATUS, my $median ) = $Mon{'kappa_mon'}->get( "stats", "median" );

# Threshold to select the astronomical signal.
               my $clip = 4.0;
               my $thresh = $median + $clip * $sigma;
               my $fs_thresh = sprintf( "%.4f", $thresh );
               orac_print " Set threshold to $fs_thresh.\n";
               $params = "in=$spectfile out=$temp5file thrlo=$thresh thrhi=1.0e30 newlo=bad newhi=1E30";
               $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );

               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp5file" );
               ( $ORAC_STATUS, my $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

# Want to avoid having too few and especially no good values that will
# cause problems later.  The number is somehat arbitrary.
               ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
               if ( $numgood < 10 * $nreceptor ) {
                  orac_warn "Unable to calculate the flat field.  There are too few data data values\n";
                  orac_warn "either because the scan is small or lacks tangible astronomical signal.\n";
                  $derive_flat = 0;
                  last;
               }

# Collapse along the velocity axis giving the mean emission.
               $params = "in=$temp5file out=$temp6file estimator=mean wlim=0.0 axis=1";
               $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
            }

# Normalize to the value in the reference receptor.
            my $array = new JCMT::ACSIS::Array( File => $temp6file );
            my $pixel = $array->pixel( $ref );
            $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp6file" );
            ( $ORAC_STATUS, $nval ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
            $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp6file($pixel)" );

            ( $ORAC_STATUS, my $refvalue ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
            $Mon{'kappa_mon'}->obeyw( "cdiv", "in=$temp6file out=$temp7file scalar=$refvalue" );

# Initialise the vector of ratios.
            if ( $first ) {
               $params = "in=$temp7file out=$previousfile";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$previousfile" );
               ( $ORAC_STATUS, $ratio_shift ) = $Mon{'kappa_mon'}->get( "stats", "total" );

               $params = "in=$previousfile out=$ratiofile";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
               $first = 0;

            } else {

# Sum the differences for the non-reference receptors.
               $params = "ia=$temp7file ib=$previousfile out=$temp8file exp=abs(ia-ib)";
               $Mon{'kappa_mon'}->obeyw( "maths", "$params" );
               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp8file" );
               ( $ORAC_STATUS, $ratio_shift ) = $Mon{'kappa_mon'}->get( "stats", "total" );
               $ratio_shift = $ratio_shift / max( $nval - 1, 1 );
               my $fs_ratio = sprintf( "%.4f", $ratio_shift );
               orac_say "  Ratio shift is $fs_ratio.";

# Prepare for the next iteration.
               $params = "in=$temp7file out=$previousfile";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Update the ratios for the factors derived in the current iteration.
               $params = "in1=$ratiofile in2=$temp7file out=$temp9file";
               $Mon{'kappa_mon'}->obeyw( "div", "$params" );
               $params = "in=$temp9file out=$ratiofile";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
            }

# Report the receptor ratios.  It does seem a little clunky to have to call
# STATS for every element.  LOOK only outputs a single value to a parameter.
            my %flat_ratio;
            for ( my $i = 1; $i <= $nval; $i++ ) {
               my $receptor = $array->receptor( $i );
               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$ratiofile($i)" );
               ( $ORAC_STATUS, my $ratio ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
               $flat_ratio{$receptor} = $ratio;
            }

            orac_say "";
            my $type = "Flat field normalisation";
            _PRETTYPRINT_RECEPTOR_QA_ HASH=\%flat_ratio TYPE=$type
            $iter++;
         }

# Grow the vector of receptor ratios into a cube.
         if ( $derive_flat ) {
            $params = "in=$ratiofile out=$ratiocube axes=[0,1,0] lbound=[";
            $params .= join( ',', $lbound->[0], $lbound->[2] );
            $params .= "] ubound=[";
            $params .= join( ',', $ubound->[0], $ubound->[2] );
            $params .= "]";
            $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

            foreach my $i ( 1 .. $Obj->nfiles ) {
               my ( $in, $out ) = $Obj->inout( "_ff", $i );

# Divide this ratio cube into the input cube, creating the flat-fielded
# output.
               $params = "in1=$in in2=$ratiocube out=$out";
               $Mon{'kappa_mon'}->obeyw( "div", "$params" );

# Set the units back to what they were.
               $Mon{'ndfpack_mon'}->obeyw( "setunits", "ndf=$out units=$units" );

# Update the Object.
               $Obj->file( $i, $out );

# Request that the output file be removed upon completion of group processing.
               $Grp->push_intermediates( $out );

               orac_say "$in to $out:";
               orac_say " Removed flat-field.\n";
            }
         }
      }
   }
}

# Tidy up output.
orac_print "\n";
