# -*-cperl-*-

=head1 NAME

_CREATE_MOMENTS_MAPS_ - Create moments maps by collapsing along
spectral axis.

=head1 DESCRIPTION

This primitive is used to create moments maps. The input cube is
simply collapsed along the spectral axis, using the requested
estimator.

=head1 ARGUMENTS

=over 4

=item GROUP = INTEGER (Given)

How to process group files. 0 means use the current Frame object. 1
means use the current Group object. 2 means use each Frame member of
the current Group object. [0]

=item MASK = LOGICAL (Given)

Whether or not to use a baseline region mask before creating the
moments map. [1]

=item MOMENTS = STRING (Given)

The moment maps to create. These are any of the values allowed for the
ESTIMATOR parameter to the COLLAPSE method, but in reality this should
probably be 'integ', 'iwc', and/or 'itd'. Any number of moments can be
given in a comma-separated string. This argument can be overridden by
the RECPAR_MOMENTS uhdr via the recipe parameter system. ['integ']

=item TAG = STRING (Given)

Which moment map to tag as a representative image. ['integ']

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS cubes.

=back

=head1 OUTPUT DATA

=over 4

=item *

The moments map(s) with suffix equal to the given moment(s) by the
MOMENTS parameter.

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

None, but see _COMPONENT_EXISTS_.

=head1 SEE ALSO

_CREATE_MOMENTS_MAPS_THROUGH_SMOOTHING_

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Handle parameters.
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $mask = get_prim_arg( $_PRIM_ARGS_, "MASK", 1 );
my $moments = get_prim_arg( $_PRIM_ARGS_, "MOMENTS", 'integ' );
my $tag = uc( get_prim_arg( $_PRIM_ARGS_, "TAG", 'integ' ) );

# Handle recipe parameters.
$moments = ( defined( $Frm->uhdr( "RECPAR_MOMENTS" ) ) ?
             $Frm->uhdr( "RECPAR_MOMENTS" )            :
             $moments );

my @moments = split /,/, $moments;
my $group2 = ( $group == 2 ? 0 : $group );

my @Objs;
if( $group == 0 ) {
  push @Objs, $Frm;
} elsif( $group == 1 ) {
  push @Objs, $Grp;
} elsif( $group == 2 ) {
  @Objs = $Grp->members;
}

# Only go on if we're not doing a Group, or if we are doing a Group
# and this Frame is the last member of the Group.
if( $group != 1 || ( $group == 1 && $Grp->lastallmembers( $Frm ) ) ) {

  foreach my $Obj ( @Objs ) {

    my $masks;
    if( defined( $Obj->uhdr( "BASELINE_MASKS" ) ) ) {
      $masks = $Obj->uhdr( "BASELINE_MASKS" );
    }

    my %paste_inputs;

    foreach my $i ( 1 .. $Obj->nfiles ) {

      if( $Obj->uhdr( "SPARSE" ) ) {
        orac_warn $Obj->file( $i ) . " is a sparse cube. Cannot create moments map for a sparse cube.\n";
      } else {

        my $in = $Obj->file( $i );

        orac_say "Creating moments maps for $in.";

        # Only collapse if the cube isn't 1xMxN or Mx1xN.
        _GET_DIMENSIONS_ FILE=$in
        my $dims = $_GET_DIMENSIONS_{DIMS};
        my $lbound = $_GET_DIMENSIONS_{LBOUND};
        my $ubound = $_GET_DIMENSIONS_{UBOUND};

        if( $dims->[0] == 1 ||
            $dims->[1] == 1 ) {
          orac_warn "Cannot create moment map with a " . $dims->[0] . "x" . $dims->[1] . "x" . $dims->[2] . " cube.\n";

          # If both dimensions are 1, then copy this file into the _sp.
          if( $dims->[0] == 1 && $dims->[1] == 1 ) {

            {
              my $Frm = $Obj;
              $Frm->uhdr( "INTEG_MAX_POS", [ 1, 1 ] );
              _EXTRACT_MAXVALUE_SPECTRUM_ TAG=1 GROUP=0
            }

          }
        } else {

          # Create a temporary file.
          my $temp1file = new ORAC::TempFile( 0 );

          # Mask, if we have a mask and if we were asked to.
          if( defined( $masks ) && $mask ) {
            my $curmask = $masks->[$i];

            orac_say " Using mask $curmask to mask out baseline regions.";

            my $params = "in=$in out=$temp1file ref=$curmask invert=true";
            $Mon{'kappa_mon'}->obeyw( "copybad", "$params" );

          } else {
            $temp1file = $in;
          }

          # For each moment, collapse.
          foreach my $moment ( @moments ) {

            if( ! exists( $paste_inputs{$moment} ) ) {
              $paste_inputs{$moment} = ();
            }

            orac_say " Creating temporary $moment moment map.";

            my $temp2file = new ORAC::TempFile( 0 );

            # Collapse the cube.
            orac_say " Collapsing along frequency axis.";
            $Mon{'ndfpack_mon'}->obeyw( "setbb", "ndf=$temp1file bb=255" );
            my $params = "in=$temp1file out=$temp2file estimator=$moment axis=spec wlim=0.0 trim=false";
            $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

            push @{$paste_inputs{$moment}}, $temp2file;
          }
        }
      }
    }

    # Now we've collapsed each file for the given Obj in each moment,
    # so paste them together, but only if we have something to paste
    # together.
    foreach my $moment ( @moments ) {

      next if ! defined $paste_inputs{$moment};

      my ( $in, $out ) = $Obj->inout( "_$moment" );
      if( scalar( @{$paste_inputs{$moment}} ) == 1 ) {

        # We only have one input file, so just copy it over.
        my $params = "in=${$paste_inputs{$moment}}[0] out=$out";
        $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

      } else {

        orac_say " Pasting together temporary maps to form $moment map.";
        my $title = $Frm->uhdr( "ORAC_OBJECT" );
        _PASTE_FILES_ FILES=$paste_inputs{$moment} OUT=$out TITLE=$title

      }

      _SET_FILE_FITS_ITEM_ FILE=$out KEY=PRODUCT VALUE=$moment
      $Obj->sync_headers;

      orac_say "Created $moment map in $out.\n";

      if( uc( $moment ) eq $tag ) {

        if( $group == 2 ) {
          my $Frm = new $Obj;
          $Frm->file( $out );
          _TAG_AS_REPRESENTATIVE_ FILE=$out GROUP=$group2 SUFFIX=rimg UPDATE=0
        } else {
          _TAG_AS_REPRESENTATIVE_ FILE=$out GROUP=$group SUFFIX=rimg UPDATE=0
        }
      }

      # Find the position of the peak, then extract a spectrum from
      # that position, but only if the moment is 'integ'.
      if( $moment eq 'integ' ) {

        _FIND_TRUE_PEAK_ FILE=$out BOX=3
        my $maxpos = $_GET_DIMENSIONS_{PEAK};
        $Obj->uhdr( "INTEG_MAX_POS", $maxpos );

        if( $group == 2 ) {
          my $Frm = new $Obj;
          $Frm->files( $Obj->files );
          $Frm->uhdr( "INTEG_MAX_POS", $maxpos );
          _EXTRACT_MAXVALUE_SPECTRUM_ TAG=1 GROUP=$group2
        } else {
          _EXTRACT_MAXVALUE_SPECTRUM_ TAG=1 GROUP=$group
        }
      }
    }
  }
}

