# -*-perl-*-

=head1 NAME

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item EDGES = INTEGER (Given)

Percentage of the full range to fit on either edge of the
spectrum. [0]

=item FREQUENCY_SMOOTH = INTEGER (Given)

The number of channels to smooth in the frequency axis when smoothing
to determine baselines. This number should be small (~10) for
narrow-line observations and large (~25) for broad-line
observations. [25]

=item MOMENTS = STRING (Given)

The moment maps to create. These are any of the values allowed for the
ESTIMATOR parameter to the COLLAPSE method, but in reality this should
probably be 'integ', 'iwc', and/or 'itd'. Any number of moments can be
given in a comma-separated string. ['integ']

=item ORDER = INTEGER (Given)

The polynomial order that will be used when estimating baselines. [1]

=item PARAM1 = REAL (Given)

The first parameter required by the spreading method. This parameter
is required by all methods, and specifies how many arcseconds on
either side of the output position are to receive contributions from
the input pixel. A value of zero indicates that a suitable number
should be calculated automatically. [0]

=item PARAM2 = REAL (Given)

The second parameter required by the spreading method, but only for
SombCos, Gauss, SincSinc, SincCos, and SincGauss schemes. For the
SombCos, SincSinc, and SincCos schemes, it specifies the number of
arcseconds at which the envelope of the function goes to zero. The
minimum value is 1.0, and the run-time default value is 2.0.  For the
Gauss and SincGauss scheme, it specifies the full-width at
half-maximum (FWHM) of the Gaussian envelope.  The minimum value is
0.1, and the run-time default is 1.0. []

=item PIXSIZE = REAL (Given)

The output pixel scale. If not defined, this value is automatically
determined from the data. []

=item QA = LOGICAL (Given)

Whether or not to perform QA calculations on the final map. [1]

=item SPATIAL_SMOOTH = INTEGER (Given)

The number of pixels to smooth in both spatial axes when smoothing to
determine baselines. [3]

=item SPREAD = STRING (Given)

The method to use when spreading each input pixel value out between a
group of neighbouring output pixels when using MAKECUBE to generate a
cube. ['nearest']

=item TILEBORDER = INTEGER (Given)

The size of the border to be added to tiles. This is used when
smoothing the cube in spatial extend in later processing so as to not
add edge effects when merging tiles together. [0]

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Handle parameters.
my $edges = get_prim_arg( $_PRIM_ARGS_, "EDGES", 0 );
my $frequency_smooth = get_prim_arg( $_PRIM_ARGS_, "FREQUENCY_SMOOTH", 25 );
my $moments = get_prim_arg( $_PRIM_ARGS_, "MOMENTS", "integ" );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
my $param1 = get_prim_arg( $_PRIM_ARGS_, "PARAM1", 0 );
my $param2 = get_prim_arg( $_PRIM_ARGS_, "PARAM2", undef );
my $pixsize = get_prim_arg( $_PRIM_ARGS_, "PIXSIZE", undef );
my $qa = get_prim_arg( $_PRIM_ARGS_, "QA", 1 );
my $spatial_smooth = get_prim_arg( $_PRIM_ARGS_, "SPATIAL_SMOOTH", 3 );
my $spread = uc( get_prim_arg( $_PRIM_ARGS_, "SPREAD", "NEAREST" ) );
my $tileborder = get_prim_arg( $_PRIM_ARGS_, "TILEBORDER", 0 );

# Only process if we're on the last member of a group.
if( $Grp->lastallmembers( $Frm ) ) {

  my @good = $Grp->check_membership;
  if( ! @good ) {
    orac_warn "No good members in current group. Cannot do group processing.\n";
  } else {

    _CREATE_CUBE_GROUP_ SPREAD=$spread PARAM1=$param1 PARAM2=$param2 TILEBORDER=$tileborder PIXSIZE=$pixsize

    _REMOVE_BASELINE_ EDGES=$edges ORDER=$order GROUP=1 TAG=1

    _CREATE_MOMENTS_MAPS_THROUGH_SMOOTHING_ GROUP=1 MOMENTS=$moments FREQUENCY_SMOOTH=$frequency_smooth SPATIAL_SMOOTH=$spatial_smooth ORDER=$order TAG=integ

    _CREATE_NOISE_MAP_ GROUP=1 QA=$qa

  }
}
