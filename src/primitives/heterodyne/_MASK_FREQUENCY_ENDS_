# -*-cperl-*-

=head1 NAME

_MASK_FREQUENCY_ENDS_ - Mask the ends of a cube's frequency axis.

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item PERCENT = REAL (Given)

The percentage of the total frequency range to trim from either
end. For example, if a cube has 1024 frequency channels, and the
percentage to trim is 10%, then 102 channels will be trimmed from
either end. [10.0]

=back

=head1 NOTES

=over 4

None.

=back

=head1 OUTPUT DATA

=over 4

Cube with masked frequency ends, with the _em suffix appended to the
filename.

=back

=head1 TASKS

KAPPA: ARDMASK, NDFTRACE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Deal with parameters.
my $percent = ( defined( $_MASK_FREQUENCY_ENDS_{PERCENT} ) ?
                $_MASK_FREQUENCY_ENDS_{PERCENT}            :
                10 );

foreach my $i ( 1 .. $Frm->nfiles ) {

  # Set/get filenames.
  my ( $in, $out ) = $Frm->inout( "_em", $i );

  # Retrieve the dimensions of the cube.
  $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
  my ( $ORAC_STATUS, @lbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "lbound" );
  ( $ORAC_STATUS, my @ubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "ubound" );

  # Calculate the upper and lower bounds for ARDMASK.
  my $lower_x = $lbnd[0] - 1;
  my $lower_y = $lbnd[1] - 1;
  my $upper_x = $ubnd[0];
  my $upper_y = $ubnd[1];

  # Get the extent of the 3rd axis.
  my $extent = $ubnd[2] - $lbnd[2] + 1;

  # Calculate the amount to blank off from either end.
  my $trim = int( $extent * $percent / 100 );

  # Calculate the lower and upper extents.
  my $lower_z = $lbnd[2] + $trim;
  my $upper_z = $ubnd[2] - $trim;

  # Create a temporary file to hold the ARD mask.
  my $ardmask = new ORAC::TempFile;

  # We're doing three dimensions here...
  print {$ardmask->handle} "DIMENSION(3)\n";

  # Make the mask to be the unmasked central region, then we'll use the
  # INSIDE parameter to ARDMASK to mask out the ends.
  print {$ardmask->handle} "RECT( $lower_x, $lower_y, $lower_z, $upper_x, $upper_y, $upper_z )\n";

  # Run ARDMASK.
  my $params = "in=$in out=$out ardfile=" . $ardmask->file . " inside=false";
  $Mon{'kappa_mon'}->obeyw( "ardmask", "$params" );

  # Report to user.
  orac_print "$in to $out:\n";
  orac_print " Masked $percent\% from both ends of frequency range.\n";

  # Update the Frm object.
  $Frm->file( $i, $out );

}

# Display if necessary.
$Display->display_data( $Frm ) if defined $Display;

# Tidy-up output.
orac_print "\n";
