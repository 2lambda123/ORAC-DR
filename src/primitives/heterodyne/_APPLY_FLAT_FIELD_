=head1 NAME

_APPLY_FLAT_FIELD_ - Applies flat-field ratios.

=head1 DESCRIPTION

This primitive applies supplied relative receptor-to-receptor sensitivities
to flat field one or more baselined time-series cubes in the current Group.

=head1 ARGUMENTS

=over 4

=item RATIO = HASH REFERENCE (Given)

A hash reference pointing to the receptor-specific flat-field ratios.
Keys are receptor names and values are the specific REAL value. This
argument must be defined.  An error is reported if this is not supplied.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for baselined time-series ACSIS cubes.

=item *

Only applies to RASTER or SCAN types.

=back

=head1 OUTPUT DATA

=over 4

=item *

The flat-fielded time-series cube with suffix _ff.

=back

=head1 TASKS

KAPPA: DIV, MANIC, NDFTRACE, SETUNITS, TRANDAT.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2012-2014, 2016 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Obtain the reference to the associative array of relative responsivities.
my $flat_ratio = get_prim_arg( $_PRIM_ARGS_, "RATIO", undef );
if ( ! defined( $flat_ratio ) ) {
   orac_throw "HASH argument to _APPLY_FLAT_FIELD_ must be defined: programming error";
}

my @Objs = $Grp->members;
my $params;
my $ratiocube = new ORAC::TempFile( 0 );
my $ratiofile = new ORAC::TempFile( 0 );

foreach my $Obj ( @Objs ) {

# Obtain the receptors present in the current observation.  Note we
# assume that different subscans are not treated differently in QA
# and interference filtering.
   my $in = $Obj->file;
   my $array = new JCMT::ACSIS::Array( File => $in );
   my @receptors = $array->receptors;
   my $nreceptor = scalar( @receptors );

# Extract the relative fluxes for the current observation.  This accounts
# for missing/bad receptors.
   my @ratios;
   foreach ( @receptors ) {
      if ( defined( $flat_ratio->{$_} ) ) {
         push @ratios, $flat_ratio->{$_};
      } else {
         push @ratios, 1.0;
      }
   }

# Convert the ratios into a one-dimensional NDF.
   my $ratiolist = 'ratio.list';
   open ( my $fh, '>', $ratiolist ) or
     orac_err "Could not open file $ratiolist\n";
   print $fh join( "\n", @ratios );
   close $fh;

   $params = "auto freename=$ratiolist dtype=_REAL ";
   $params .= " shape=$nreceptor ndf=$ratiofile";
   $Mon{'kappa_mon'}->obeyw( "trandat", "$params" );
   unlink $ratiolist;

# Retrieve the units of the input cube.
   $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in fullframe" );
   my ( $ORAC_STATUS, $units ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "units" );

   foreach my $i ( 1 .. $Obj->nfiles ) {
      my ( $in, $out ) = $Obj->inout( "_ff", $i );

# Retrieve bounds of input cube needed to create out flat-field sub-files.
      _GET_DIMENSIONS_ FILE=$in
      my $lbound = $_GET_DIMENSIONS_{LBOUND};
      my $ubound = $_GET_DIMENSIONS_{UBOUND};

# Grow the vector of receptor ratios into a cube.
      $params = "in=$ratiofile out=$ratiocube axes=[0,1,0] lbound=[";
      $params .= join( ',', $lbound->[0], $lbound->[2] );
      $params .= "] ubound=[";
      $params .= join( ',', $ubound->[0], $ubound->[2] );
      $params .= "]";
      $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Divide this ratio cube into the input cube, creating the flat-fielded
# output.
      $params = "in1=$in in2=$ratiocube out=$out";
      $Mon{'kappa_mon'}->obeyw( "div", "$params" );

# Set the units back to what they were after the division.
      $Mon{'ndfpack_mon'}->obeyw( "setunits", "ndf=$out units=$units" );

# Update the Object.
      $Obj->file( $i, $out );

# Request that the output file be removed upon completion of group processing.
      $Grp->push_intermediates( $out );

      orac_say "$in to $out:";
      orac_say " Removed flat-field.\n";
   }
}