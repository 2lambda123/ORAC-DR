# -*-cperl-*-

=head1 NAME

_VERIFY_DATA_

=head1 DESCRIPTION

This primitive uses statistics to determine if any data are mostly bad,
or contain spectra comprising anomalous values.  Bad is defined as
comprising more than 85% bad values.  Anomalous values are suspected
when the standard deviation exceeds a nominal 500.

In the first case the observation is rejected.  In the second case,
thresholding is applied only to the affected sub-files, wherein the
outliers are flagged as bad.

Since some early raw data have a frequency first axis rather than the
radial velocity expected later in the recipes, the current files may
have their Axis 1 System and Units WCS attributes modified to vrad and
km/s respectively.

Observations may be taken in different sidebands.  In order to combine
these with MAKECUBE, the AlignSideBand attribute should be set to 1
(true).  However, this is incompatible with some early ACSIS data,
where various changes were made to the WCS attributesc stdo1frest, If,
and DSBCentre.  Should reductions fail with "No usable spectral
channels found", set the ALIGN_SIDE_BAND recipe parameter to 0
(false); this prevents the AlignSideBand attribute being enabled.  The
default is not not to align sidebands, but `raw' data may have had
this attribute enabled from earlier processing (where the default was
to align).  Likewise data taken on different epochs with the same
sideband should not have AlignSideBand switched on.

=head1 ARGUMENTS

=over 4

=item None

=back

=head1 NOTES

=over 4

=item The thresholding is set between -250 and 500.

=back

=head1 OUTPUT DATA

=over 4

=item A new NDF is only created if its data required outlier flagging,
and this will have suffix _thr.

=back

=head1 TASKS

KAPPA: NDFTRACE, STATS, THRESH, WCSATTRIB.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009, 2013, 2016-2018, 2020 Science and Technology
Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

my $alignbands = defined( $Frm->uhdr( "RECPAR_ALIGN_SIDE_BAND" ) ) ?
                          $Frm->uhdr( "RECPAR_ALIGN_SIDE_BAND" )   : 0;

# For each member of the Frame, check to see if it's all bad
# pixels. If it is, remove it from processing.
my @goodfiles;
my $reject = 0;
foreach my $i ( 1 .. $Frm->nfiles ) {
  my $file = $Frm->file( $i );

  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$file" );
  my ( $ORAC_STATUS, $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
  ( $ORAC_STATUS, my $sigma ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );
  ( $ORAC_STATUS, my $numpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );
  my $good_fraction;
  if ( $numpix > 0 ) {
    $good_fraction = $numgood / $numpix;
  }
  if ( $numgood < 1 || $sigma == 0 ) {
    orac_warn "$file has no good pixels. Removing from processing.\n";
    $reject++;
    next;
  }
  if ( $good_fraction < 0.15 ) {
    orac_warn "$file has more than 85% bad pixels. Removing from processing. \n";
    $reject++;
    next;
  }

# If the raw data have a large spread there might be one or more bad spectra
# present, possibly with values exceeding dex20.  These need to be masked in
# order to prevent problems from occurring later in recipes.  Apply assymmetric
# thresholds because there is likely to be positive emission.  The sigma exceeding
# 500 is arbitrary, however, outliers of a few thousand should be handled
# successfully by other primitives, whereas sufficient extreme are not rejected by
# sigma clipping can lead to nonsense statistics being determined and applied.
  if ( $sigma > 500 ) {
    my ( undef, $out ) = $Frm->inout( "_thr", $i );
    my $params = "in=$file out=$out thrhi=500 newhi=bad thrlo=-200 newlo=bad";
    $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );
    push @goodfiles, $out;
  } else {
    push @goodfiles, $file;
  }
}

if ( $#goodfiles >= 0 ) {
  $Frm->files( @goodfiles );
  $Frm->readhdr if ( $reject > 0 );
} else {
  orac_warn "No good data exists in current observation. Skipping to next.\n";
  $Frm->isgood( 0 );
  return ORAC__TERM;
}

# Some raw data have a frequency first axis rather than the radial
# velocity expected later in the recipes.
foreach my $file ( @goodfiles ) {
  $Mon{ndfpack_mon}->obeyw( "ndftrace", "ndf=$file" );
  my ( $ORAC_STATUS, @funit ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "funit" );

# Change the attributes to be the normal radial velocity.
  if ( lc( $funit[0] ) ne 'km/s' ) {
    ( $ORAC_STATUS, my @flabel ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "flabel" );
    orac_warn "Raw data spectral axis was '$flabel[0] ($funit[0])' instead of 'Radio velocity (km/s)'\n";
    orac_warn "Attributes modified in $file to enable the recipe to function.\n";

    $Mon{ndfpack_mon}->obeyw( "wcsattrib", "ndf=$file mode=set name='system(1)' newval=vrad" );
    $Mon{ndfpack_mon}->obeyw( "wcsattrib", "ndf=$file mode=set name='unit(1)' newval=km/s" );
  }

# Permit the combination of raw data with different sidebands.
  $Mon{ndfpack_mon}->obeyw( "wcsattrib", "ndf=$file mode=set name='AlignSideBand' newval=$alignbands" );
}
