=head1 NAME

_REMOVE_FLAT_FIELD_INDEX_ - Remove flat-field obtained from the calibration system

=head1 DESCRIPTION

This primitive first obtains the receptor-to-receptor responses via
the flat calibration for each UT date for the chosen cubes. (See
Argument GROUP.) Then it applies the relative sensitivities to flat
field those same cubes.  It segregates a group of cubes by observation
date, and applies a flat field for each date.

If $ORAC_DATA_OUT contains an index.flat file but no rules.flat, a
rules.flat is created there unless the index.flat has entries for all
16 receptors.  The created rules.flat lists the union of the receptors
present in all the observations, derived from the RECPTORS header in
the first Frame of each night.

=head1 ARGUMENTS

=over 4

=item GROUP = INTEGER (Given)

How to process group files. 0 means use the current Frame object. 1
means use the current Group object. 2 means use each Frame member of
the current Group object. [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for baselined time-series ACSIS cubes.

=item *

Only applies to RASTER or SCAN types.

=back

=head1 OUTPUT DATA

=over 4

=item *

The flat-fielded time-series cube with suffix _ff.

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2016 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Need more data than a stare or jiggle provides.
my $obstype = uc( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) );
if ( $obstype ne 'RASTER' and $obstype ne 'SCAN' ) { goto RETURN }

# Obtain argument.
# ================

my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );

# Write a header to structure the commentary
# ==========================================

orac_say "\n\nIndexed flat-field correction";
my $underline = "-" x 37;
orac_say "$underline\n";

# Select objects to flat field.
# =============================

# We want to combine data taken on the same night to be able to
# to use the nightly flat fields stored in the calibration file
# index.flat.
my @dategrps;
my $singleGrp;
if ( $group == 0 ) {
   $singleGrp->push( $Frm );
   push @dategrps, $singleGrp;
} elsif ( $group == 1 ) {
   $singleGrp->push( $Grp );
   push @dategrps, $singleGrp;
} elsif ( $group == 2 ) {
   @dategrps = $Grp->subgrps( "ORAC_UTDATE" );
}

# Only do this if we're not doing a Group, or if we are doing a
# Group and this Frame is the last member of the Group.
if ( $group != 1 ||
     ( $group == 1 && $Grp->lastallmembers( $Frm ) ) ) {
   my ( %flat_ratio, @keys, $utdate );

   orac_say "Detector gain correction";

# Get information about a user-defined index.flat.
# ================================================

# If there is a user-defined index.flat, does it contain all 16 receptors?
   my $make_rules = 0;
   my $index_file = File::Spec->catfile( $ENV{'ORAC_DATA_OUT'}, "index.flat" );
   if ( -f $index_file ) {
      open( my $fh, '<', $index_file ) or orac_err "Could not open file '$index_file' $!";

# Read the first line containing the receptor keys.
      my $first = <$fh>;
      chomp $first;

      orac_warn "Index files always start with a # character.  $index_file does not."
        unless $first =~ /^\#/;

# Strip off the leading # and ORACTIME.
      $first =~ s/^\#//;
      $first =~ s/^ORACTIME\s+//;

# Create array of receptors in the user-created index file by splitting on spaces.
      @keys = split( /\s+/, $first );

# Determine whether all receptors are listed.  If they are, the
# standard $ORAC_DATA_CAL rules file should be used ($make_rules is
# false).
      foreach my $i ( 0..15 ) {
         my $fn = sprintf( "%02d", $i );
         my $receptor_name = "H$fn";
         if ( ! grep( /^$receptor_name$/, @keys ) ) {
            $make_rules = 1;
            last;
         }
      }
   }

# Create a rules file.
# ====================

   my @distinct_receptors;
   my $rules_file = File::Spec->catfile( $ENV{'ORAC_DATA_OUT'}, "rules.flat" );
   if ( $make_rules ) {

# Determine whether or not to create a dynamic receptors rules.flat.
# We want the superset of receptors for all the nights in the group.
# The RECPTORS header will list the receptors actually present
# in the data for that night.
      my @all_receptors;

# If there is a user-defined index and no rules file, one needs to be
# created.  If there is a pair, we trust the user has made a matching
# pair.
      if ( -f $index_file && ! -f $rules_file ) {

# Form an array of the receptors present during any of the nights.
         foreach my $dateGrp ( @dategrps ) {
            my @Objs = $dateGrp->members;

            if ( defined( $Objs[ 0 ]->hdr( "RECPTORS" ) ) ) {
               my @receptors = split / /, $Objs[ 0 ]->hdr( "RECPTORS" );
               @all_receptors = ( @receptors, @all_receptors );
            }
         }

# Form array of distinct receptor names present in the observations
# being processed.
         my %seen;
         @distinct_receptors = grep { ! $seen{$_}++ } @all_receptors;
      } else {
         $make_rules = 0;
      }
   }

# Write the rules file.
   if ( $make_rules ) {
      orac_say "Create $rules_file containing all the receptors";
      orac_say "present in the group's observations.";
      open( my $fh, '>', $rules_file ) or orac_err "Could not open file '$rules_file' $!";
      print $fh "ORACTIME\n";
      foreach my $r ( @distinct_receptors ) { print $fh "$r\n" }
      close $fh;
   }

# Loop over the UT date or current group
# ======================================
   foreach my $Grp ( @dategrps ) {
      my @Objs = $Grp->members;
      $utdate = $Objs[ 0 ]->uhdr( "ORAC_UTDATE" );

# Trick the calibration system that the ORACTIME is that of the
# date-selected group, not that of the current Frame (probably the
# last one is a reduction).
      my $oractime = $Frm->hdr( "ORACTIME" );
      $Frm->hdr( "ORACTIME", $utdate );

# Obtain the ratios from the calibration index.
      my %flat_ratio = $Cal->flat();

# Reset the ORACTIME.
      $Frm->hdr( "ORACTIME", $oractime );

# Report the set of ratios used.
      orac_say "";
      my $type = "Flat field normalisation for $utdate.";
      _PRETTYPRINT_RECEPTOR_QA_ HASH=\%flat_ratio TYPE=$type

# Apply the flat field to each file in each observation for the
# current night (group).
      _APPLY_FLAT_FIELD_ RATIO=\%flat_ratio
   }
}

# Tidy up output.
orac_print "\n";

RETURN:
