# -*-perl-*-

=head1 NAME

_CALCULATE_FIVEPOINT_POINTING_

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item TYPE = STRING (Given)

The type of pointing being calculated. This is purely for bookkeeping
purposes, and should be either CONTINUUM or LINE. This argument is
case-insensitive. ['LINE']

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS pointing observations.

=back

=head1 OUTPUT DATA

=over 4

None.

=back

=head1 TASKS

FIGARO: FITPOLY.
KAPPA: NDFCOPY, SETAXIS, WCSATTRIB.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Science and Technology Facilities Council. All
Rights Reserved.

=cut

# Find out what type of pointing we're doing, line or
# continuum. Default to line.
my $type = ( defined( $_CALCULATE_FIVEPOINT_POINTING_{TYPE} ) ?
             uc( $_CALCULATE_FIVEPOINT_POINTING_{TYPE} ) :
             'LINE' );

my $in = $Frm->file;

# Set the offset coordinate system to Origin, storing the original
# value so we can restore it once we've finished.
$Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=get name=SkyRefIs" );
my ( $ORAC_STATUS, $skyrefis ) = $Mon{'ndfpack_mon'}->get( "wcsattrib", "value" );
$Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=set name=SkyRefIs newval=Origin" );

# Retrieve the format of either axis, so that we can set them back
# when we're done processing.
$Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=get name='Format(1)'" );
( $ORAC_STATUS, my $format1 ) = $Mon{'ndfpack_mon'}->get( "wcsattrib", "value" );
$Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=get name='Format(2)'" );
( $ORAC_STATUS, my $format2 ) = $Mon{'ndfpack_mon'}->get( "wcsattrib", "value" );

# Set the format of the axes to arcseconds, with four decimal places.
my $newformat = "s.4";
$Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=set name='Format(1)' newval=$newformat" );
$Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=set name='Format(2)' newval=$newformat" );

# We need to take two cuts of the data, one horizontal and the other
# vertical. Then we'll fit a gaussian to both of these using
# FIGARO:FITGAUSS to determine the pointing offsets.
#
# First, the horizontal.
my $horiz = new ORAC::TempFile;
my $horiz_file = $horiz->file;
$Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in(,1) out=$horiz_file trim trimwcs" );
$Mon{'ndfpack_mon'}->obeyw( "setaxis", "ndf=$horiz_file dim=1 mode=wcs" );

# Determine the peak value to pass to FITGAUSS.
$Mon{'kappa_mon'}->obeyw( "stats", "ndf=$horiz_file" );
my ( $ORAC_STATUS, $max ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );

# Fit the gaussian.
my $params = "in=$horiz_file device=! dialog=f varuse=true mask1=[-10]";
$params   .= " mask2=[10] ncomp=1 centre=0 cont=0 peak=$max fwhm=0.0001";
$params   .= " cf=[0] pf=[1] wf=[0] logfil=! comp=1";
$Mon{'figaro4'}->obeyw( "fitgauss", "$params" );

# Retrieve the fit information.
( $ORAC_STATUS, my @horiz_centre ) = $Mon{'figaro4'}->get( "fitgauss", "fcentre" );
my $horiz_centre = $horiz_centre[0] * 206265;

# Now the vertical.
my $vert = new ORAC::TempFile;
my $vert_file = $vert->file;

$Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in(1,) out=$vert_file trim trimwcs" );
$Mon{'ndfpack_mon'}->obeyw( "setaxis", "ndf=$vert_file dim=1 mode=wcs" );

# Again, determine the peak value.
$Mon{'kappa_mon'}->obeyw( "stats", "ndf=$vert_file" );
( $ORAC_STATUS, $max ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );

# Fit the polynomial.
my $params = "in=$vert_file device=! dialog=f varuse=true mask1=[-10]";
$params   .= " mask2=[10] ncomp=1 centre=0 cont=0 peak=$max fwhm=0.0001";
$params   .= " cf=[0] pf=[1] wf=[0] logfil=! comp=1";
$Mon{'figaro4'}->obeyw( "fitgauss", "$params" );

# Retrieve the fit information.
( $ORAC_STATUS, my @vert_centre ) = $Mon{'figaro4'}->get( "fitgauss", "fcentre" );
my $vert_centre = $vert_centre[0] * 206265;

# Display the results to the user.
my $p_horiz_centre = sprintf( "%.2f", $horiz_centre );
my $p_vert_centre = sprintf( "%.2f", $vert_centre );
orac_print( "Pointing results using Gaussian fit:\n", "blue" );
orac_print( " DAZ: $p_horiz_centre\n DEL: $p_vert_centre\n", "blue" );

# Store with the calibration system.
my %calhash = ( %{$Frm->hdr},
                DAZ => $horiz_centre,
                DEL => $vert_centre,
                DAZ_ERR => 0,
                DEL_ERR => 0,
                POINTING_TYPE => $type,
                METHOD => 'FIVEPOINT',
              );

# Display a warning if values are large.
if( abs( $horiz_centre ) > 10 ) {
  orac_err "Absolute DAZ pointing value greater than 10 arcseconds.\n";
} elsif( abs( $horiz_centre ) > 5 ) {
  orac_warn "Absolute DAZ pointing value greater than 5 arcseconds.\n";
}
if( abs( $vert_centre ) > 10 ) {
  orac_err "Absolute DEL pointing value greater than 10 arcseconds.\n";
} elsif( abs( $vert_centre ) > 5 ) {
  orac_warn "Absolute DEL pointing value greater than 5 arcseconds.\n";
}

$Cal->pointingindex->add( $Frm->file, \%calhash );

# Set SkyRefIs and Format back to what they were before.
$Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=set name=SkyRefIs newval=$skyrefis" );
$Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=set name='Format(1)' newval=$format1" );
$Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=set name='Format(2)' newval=$format2" );

# Tidy-up output.
orac_print "\n";
