# -*-cperl-*-

=head1 NAME

_CREATE_CUBE_FRAME_FROM_GROUP_

=head1 DESCRIPTION

This primitive creates a cube (or cubes) from each good member of the
current Group.

=head1 ARGUMENTS

=over 4

=item BYTES_PER_PIXEL = INTEGER (Given)

The number of bytes per pixel. [4]

=item LOWER_VELOCITY = REAL (Given)

The requested lower velocity, in km/s to be applied to the
created products.  This argument can be overridden by the
RECPAR_FINAL_LOWER_VELOCITY uhdr via the recipe parameter system.  [undef]

=item MAXSIZE = INTEGER (Given)

The maximum size, in megabytes, of the output cube. This value does not
include extra information such as variance or weight arrays, FITS
headers, or any other NDF extensions. [512]

=item PARAM1 = REAL (Given)

The first parameter required by the spreading method. This parameter
is required by all methods, and specifies how many arcseconds on
either side of the output position are to receive contributions from
the input pixel. A value of zero indicates that a suitable number
should be calculated automatically. [0]

=item PARAM2 = REAL (Given)

The second parameter required by the spreading method, but only for
SombCos, Gauss, SincSinc, SincCos, and SincGauss schemes. For the
SombCos, SincSinc, and SincCos schemes, it specifies the number of
arcseconds at which the envelope of the function goes to zero. The
minimum value is 1.0 pixels, and the run-time default value is 2.0
pixels.  For the Gauss and SincGauss scheme, it specifies the
full-width at half-maximum (FWHM) of the Gaussian envelope.  The
minimum value is 0.1 pixels, and the run-time default is 1.0
pixels. Note that these numbers are given in pixels and this parameter
takes the number of requested arcseconds. This is done because the
pixel scale could be automatically determined from the data. []

=item PIXSIZE = REAL (Given)

The output pixel scale. If not defined, this value is automatically
determined from the data. []

=item SPREAD = STRING (Given)

The interpolation method to use when regridding the cube. This can be
any of those allowed by MAKECUBE, listed in the SPREAD
parameter. ['nearest']

=item SYSTEM = STRING (Given)

The celestial coordinate system for the output cube. Can be any one of
ICRS, GAPPT, FK5, FK4, FK4-NO-E, AZEL, GALACTIC, or ECLIPTIC. A
special value of TRACKING can also be given, in which case the system
used will be that used as the tracking system during the
observation.

If this argument is not defined, then the system is determined from
the data and is typically set to 'tracking'. The only case where this
does not apply is if the observation is a scan and the scanning was
done in AZ/EL, in which case the system will be set to 'AZEL'.

This argument can be overridden by the RECPAR_SYSTEM uhdr via the
recipe parameter system. [undef]

=item TILE = LOGICAL (Given)

Whether or not to break the spectral cubes into tiles.  [1]

=item TILEBORDER = INTEGER (Given)

The size of the border to be added to tiles. This is used when
smoothing the cube in spatial extent in later processing, so as to not
add edge effects. [0]

=item UPPER_VELOCITY = REAL (Given)

The requested upper velocity, in km/s to be applied to the
created products.  This argument can be overridden by the
RECPAR_FINAL_UPPER_VELOCITY uhdr via the recipe parameter system.  [undef]

=back

=head1 NOTES

=over 4

=item *

Assumes this has been called after the baseline has been subtracted
from the raw time series following masking from the group. The primitive
does not enforce this and will tag the resulting cube as a reduced
product regardless.

=back

=head1 OUTPUT DATA

=over 4

=item *

A cube (or multiple cubes, depending on the size of the input
timeseries data) for each member of the current Group, with suffix
_gcube, along with "reduced" cubes with suffix _reduced.

=back

=head1 TASKS

None, but see _CREATE_CUBE_FRAME_ and _TAG_AS_REDUCED_PRODUCT_.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008-2009 Science and Technology Facilities Council.
All Rights Reserved.

=cut

# Handle parameters.
my $bytes_per_pixel = get_prim_arg( $_PRIM_ARGS_, "BYTES_PER_PIXEL", 4 );
my $lower_vel = get_prim_arg( $_PRIM_ARGS_, "LOWER_VELOCITY", undef );
my $maxsize = get_prim_arg( $_PRIM_ARGS_, "MAXSIZE", 512 );
my $param1 = get_prim_arg( $_PRIM_ARGS_, "PARAM1", 0 );
my $param2 = get_prim_arg( $_PRIM_ARGS_, "PARAM2", undef );
my $pixsize = get_prim_arg( $_PRIM_ARGS_, "PIXSIZE", undef );
my $spread = uc( get_prim_arg( $_PRIM_ARGS_, "SPREAD", 'NEAREST' ) );
my $system = get_prim_arg( $_PRIM_ARGS_, "SYSTEM", undef );
my $tile = get_prim_arg( $_PRIM_ARGS_, "TILE", 1 );
my $tileborder = get_prim_arg( $_PRIM_ARGS_, "TILEBORDER", 5 );
my $upper_vel = get_prim_arg( $_PRIM_ARGS_, "UPPER_VELOCITY", undef );

foreach my $Frm ( $Grp->members ) {

  _CREATE_CUBE_FRAME_ SPREAD=$spread PARAM1=$param1 PARAM2=$param2 TILEBORDER=$tileborder SUFFIX=_gcube PRODUCT=group_derived_cube PIXSIZE=$pixsize SYSTEM=$system BYTES_PER_PIXEL=$bytes_per_pixel MAXSIZE=$maxsize TILE=$tile

# Want trimmed velocity range for final product?
  if ( defined( $lower_vel ) || defined( $upper_vel ) ) {
    _RESTRICT_VELOCITY_RANGE_ GROUP=0 LOWER=$lower_vel UPPER=$upper_vel
  }

  _TAG_AS_REDUCED_PRODUCT_ UPDATE=1 GROUP=0 FLAG_QUAL_BAD=1

  orac_print "\n";

}
