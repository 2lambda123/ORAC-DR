# -*-cperl-*-

=head1 NAME

_REMOVE_FREQUENCY_ENDS_ADVANCED_ - Intelligently find high-noise
regions at end of frequency bounds and remove them.

=head1 DESCRIPTION

This primitive expects the current Frame to contain a spectrum, image,
or cube.  If it is not a spectrum, this primitive first collapses
it along the time and/or receptor axes using the COLLAPSE SIGMA estimator
to form a single spectrum.  It fits a constant value background to the
resulting or input spectrum. The fitting regions are used to determine
where the spectrum gets noisier (i.e. higher RMS values in the RMS
spectrum), and these high-noise regions are trimmed from the ends in
the frequency axis.

Hybrid-mode observations have an additional check done to ensure that
too many channels are not trimmed.

=head1 ARGUMENTS

=over 4

=item AXIS = INTEGER (Given)

The index of the spectral axis to retain. For time-series data this
should be set to 1. For spatial cubes this should be set to 3.  [3]

=item LOWER = REAL (Given)

The percentage of the total frequency range to trim from the lower
end of the frequency range. For example, if a cube has 1024 frequency
channels, and the percentage to trim is 10%, then 102 channels will be
trimmed from the lower end.  This argument can be overridden by the
RECPAR_TRIM_PERCENTAGE_LOWER uhdr via the recipe parameter system. [undef]

=item MINIMUM_OVERLAP = INTEGER (Given)

The minimum number of desired channels that will overlap after doing
trimming for hybrid-mode observations. If the number of overlapping
channels is lower than this, then the fixed number of channels will be
trimmed according to the C<LOWER> and C<UPPER> arguments. [10]

=item PERCENT = REAL (Given)

The percentage of the total frequency range to trim from either
end. For example, if a cube has 1024 frequency channels, and the
percentage to trim is 10%, then 102 channels will be trimmed from
either end.   This argument can be overridden by the
RECPAR_TRIM_PERCENTAGE uhdr via the recipe parameter system.
The default depends on the value of the ORAC_BACKEND internal header
in the current Frame; for ACSIS it is 2.75%, for DAS it is 7.5%.  If
the backend is undefined or has another value the default is 10%.  []

=item UPPER = REAL (Given)

The percentage of the total frequency range to trim from the higher
end of the frequency range. For example, if a cube has 1024 frequency
channels, and the percentage to trim is 10%, then 102 channels will be
trimmed from the upper end.  This argument can be overridden by the
RECPAR_TRIM_PERCENTAGE_UPPER uhdr via the recipe parameter system. [undef]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS time-series data.

=item *

For hybrid data the argument AXIS is by definition effectively set to 1.

=item *

This primitive can only handle the case where there are two subbands
in the hybrid-mode observation.

=item *

It calls F<_REMOVE_FREQUENCY_ENDS_ADVANCED_HYBRID_> for hybrid data that
are unmerged.

=item *

If there are fewer than five pixels in either spatial axis, then the
_REMOVE_FREQUENCY_ENDS_ primitive is called to trim the noisy ends.

=back

=head1 OUTPUT DATA

=over 4

Cube with removed frequency ends, with the _em suffix appended to the
filename.

=back

=head1 TASKS

KAPPA: COLLAPSE, MFITTREND, NDFCOPY.

=head1 REQUIRED PERL MODULES

Number::Interval.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2013 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Set appropriate defaults for the percentage cut.
my $default_percent = 10;
my $backend = $Frm->uhdr( 'ORAC_BACKEND' );
if ( defined( $backend ) && uc( $backend ) eq "ACSIS" ) {
  $default_percent = 2.75;
} elsif ( defined( $backend ) && uc( $backend ) eq "DAS" ) {
  $default_percent = 7.5;
}

# Handle parameters to pass on to _REMOVE_FREQUENCY_ENDS_.
my $axis = get_prim_arg( $_PRIM_ARGS_, "AXIS", 3 );
my $minimum_overlap = get_prim_arg( $_PRIM_ARGS_, "MINIMUM_OVERLAP", 10 );
my $percent = get_prim_arg( $_PRIM_ARGS_, "PERCENT", $default_percent );
my $lower = $_PRIM_ARGS_->{LOWER};
my $upper = $_PRIM_ARGS_->{UPPER};

if ( $axis != 1 && $axis != 3 ) {
  orac_err "_REMOVE_FREQUENCY_ENDS_ADVANCED_: Spectral AXIS argument must " .
           "be either 1 or 3 (posible programming error).";
}

# Handle recipe parameter overrides.
$percent = ( defined( $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE" ) ) ?
             $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE" )            :
             $percent );
$lower = ( defined( $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_LOWER" ) ) ?
             $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_LOWER" )          :
             $lower );
$upper = ( defined( $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_UPPER" ) ) ?
             $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_UPPER" )          :
             $upper );

if( defined( $lower ) || defined( $upper ) ) {

  $lower = ( defined( $lower ) ? $lower : 0 );
  $upper = ( defined( $upper ) ? $upper : 0 );

} else {
  $lower = $percent;
  $upper = $percent;
}


# First, check to see if we even want to do this. Only perform
# advanced method if the number of pixels in either collapse direction
# is five or greater.
_GET_DIMENSIONS_ FILE=$Frm->file(1)
my $dims = $_GET_DIMENSIONS_{DIMS};
if ( $dims->[1] < 5 || $dims->[2] < 5 && ! $Frm->uhdr( "ISHYBRID" ) ) {

  _REMOVE_FREQUENCY_ENDS_ LOWER=$lower UPPER=$upper AXIS=$axis

} else {

  # Next, calculate the overlap region if we're doing hybrid mode
  # observations. Keep this around for later.
  my $overlap_range;
  my $NI_loaded = 0;
  if( $Frm->uhdr( "ISHYBRID" ) && ! defined( $Frm->uhdr( "MERGED_HYBRID" ) ) ) {

    _REMOVE_FREQUENCY_ENDS_ADVANCED_HYBRID_ LOWER=$lower UPPER=$upper MINIMUM_OVERLAP=$minimum_overlap

  } else {

    orac_say "Determine location of high-noise ends of the frequency range.";
    my $colaxis;

    foreach my $i ( 1 .. $Frm->nfiles ) {

      my $params;

      # Set/get filenames.
      my ( $in, $out ) = $Frm->inout( "_em", $i );

      # Retrieve dimensions.
      _GET_DIMENSIONS_ FILE=$in
      my @lbnd = @{$_GET_DIMENSIONS_{LBOUND}};
      my @ubnd = @{$_GET_DIMENSIONS_{UBOUND}};
      my $ndim = scalar( @ubnd );

      my $temp1file = new ORAC::TempFile( 0 );
      my $temp2file = new ORAC::TempFile( 0 );
      my $temp3file = new ORAC::TempFile( 0 );

      # Collapse along third axis, but only if it's non-degenerate.
      if ( $ndim == 3 ) {
        $colaxis = ( $axis == 1 ) ? $ndim : $ndim - 1;
        if ( ( $ubnd[$colaxis - 1] - $lbnd[$colaxis - 1] + 1 ) != 1 ) {
          $params = "in=$in out=$temp1file axis=$colaxis wlim=0.0 estimator=sigma trim";
          $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
        } else {
          $temp1file = $in;
        }
        $ndim = 2;
      }

      # Collapse along second axis of resulting cube, but only if it's
      # non-degenerate.
      if ( $ndim == 2 ) {
        $colaxis = ( $axis == 1 ) ? $ndim : $ndim - 1;
        if ( ( $ubnd[$colaxis - 1] - $lbnd[$colaxis - 1] + 1 ) != 1 ) {
          $params = "in=$temp1file out=$temp2file axis=$colaxis wlim=0.0 estimator=sigma trim";
          $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
        } else {
          $temp2file = $temp1file;
        }

      # Deal with an already collapsed cube.
      } else {
        $temp2file = $temp1file;
      }

      # Now run MFITTREND.
      orac_say " Fit constant baseline.";
      $params = "in=$temp2file out=$temp3file axis=1 method=region auto=true order=0";
      $params .= " numbin=" . ( int( ( $ubnd[0] - $lbnd[0] + 1 ) / 4 ) );
      $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );
      my ( $ORAC_STATUS, @aranges ) = $Mon{'kappa_mon'}->get( "mfittrend", "aranges" );

      my $trim_lower = $aranges[0];
      my $trim_upper = $aranges[-1];

      # Copy out the region from the input file into the output file.
      $params = "in=$in($trim_lower:$trim_upper,,) out=$out";
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

      orac_say "$in to $out:";
      orac_say " Removed high-noise ends from frequency range.";
      orac_say " Trimmed dimensions: [$trim_lower:$trim_upper]";

      # Set the product.
      $Frm->product( "em" );

      # Update the Frame object.
      $Frm->file( $i, $out );

    }

    # Display if necessary.
    $Display->display_data( $Frm ) if defined $Display;

    # Tidy-up output.
    orac_say "";

  }
}
