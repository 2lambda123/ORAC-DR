# -*-cperl-*-

=head1 NAME

_QA_RMS_TSYS_CONSISTENCY_ - Compare Tsys-calculated RMS values with
measured RMS values and optionally mask out those that fail to meet a
given threshold.

=head1 DESCRIPTION

This primitive compares RMS values calculated from the Tsys with those
measured from the data. Each spectrum has two RMS values calculated
for it, and if these values differ by more than a given amount, then
the spectrum fails the test. If a given percentage of spectra out of
the entire observation fail the test, then the observation is flagged
as either questionable or bad.

Failed spectra can be optionally masked.

=head1 ARGUMENTS

=over 4

=item MASK = STRING (Given)

The name of the survey to use when masking spectra. The special
"Telescope" survey can be used to mask spectra failing the
less-stringent telescope thresholds. If left undefined, then no
spectra will be masked. ['']

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=back

=head1 OUTPUT DATA

=over 4

=item *

If masking is done (see MASK argument), then the masked timeseries
data with suffix _tsmsk.

=back

=head1 TASKS

KAPPA: COLLAPSE, COPYBAD, DIV, MANIC, NDFCOPY, NUMB, THRESH.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array, JSA::QA, Starlink::HDSPACK.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2013 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Determine if we're supposed to use this as a mask for a survey.
my $mask = get_prim_arg( $_PRIM_ARGS_, "MASK", undef );
my $survey = get_prim_arg( $_PRIM_ARGS_, "SURVEY", undef );

my @surveys = qw/ GBS NGS SLS Telescope /;

my %result; # Hash containing percentages per file per survey.

use Starlink::HDSPACK qw/ create_hdsobj copy_hdsobj /;
use JSA::QA;

# Retrieve the QA parameters file and set up a new JSA::QA object.
my $qaparamfile = $Cal->qaparams;

# Treat non-HARP instruments as a survey as these older instruments
# either pre-date ACSIS or are not used by the surveys.  This is to
# avoid messy syntax additions to qaparams.ini and the header
# translations of ORAC_SURVEY.
my $qa;
my $instrument = uc( $Frm->uhdr( "ORAC_INSTRUMENT" ) );
if ( $instrument ne "HARP" ) {
  $qa = new JSA::QA( file => $qaparamfile, survey => $instrument );
} else {
  $qa = new JSA::QA( file => $qaparamfile );
}

# Set up a hash of options to pass to the QA object.
_SETUP_QA_OPTIONS_
my $opts = $_SETUP_QA_OPTIONS_{'OPTS'};
my %opts = %$opts;

# Set up a list of surveys to analyse.
my @analyse_surveys;
if ( $instrument ne "HARP" ) {
  push @analyse_surveys, $instrument;
  push @analyse_surveys, "Telescope";

} elsif( defined( $survey ) ) {
  if( uc( $survey ) eq 'ALL' ) {
    @analyse_surveys = @surveys;
  } else {
    push @analyse_surveys, $survey;
  }

} else {
  push @analyse_surveys, ( defined( $Frm->uhdr( "ORAC_SURVEY" ) ) ?
                           $Frm->uhdr( "ORAC_SURVEY" )            :
                           "Telescope" );
}

# Hash to store information so we can pass it to the primitive that
# writes the QA log.
my %timeseries;

# Retrieve the list of previously-determined RMS files.
my $rms_files = $Frm->uhdr( "QA_RMS_FILES" );

foreach my $i ( 1 .. scalar( @$rms_files ) - 1 ) {

  my ( $infile, $outfile ) = $Frm->inout( "_tsmsk", $i );
  my $rms_file = $rms_files->[$i];

  my $temp1file = new ORAC::TempFile( 0 );
  my $temp2file = new ORAC::TempFile( 0 );
  my $temp3file = new ORAC::TempFile( 0 );
  my $temp6file = new ORAC::TempFile( 0 );

  # Make sure this file has a VARIANCE component.
  _COMPONENT_EXISTS_ FILE=$infile COMPONENT=VARIANCE
  my $exists = $_COMPONENT_EXISTS_{EXISTS};
  if( ! $exists ) {
    orac_throw "Cannot perform Tsys/RMS consistency checks on a file ($infile) that has no VARIANCE component\n";
  }

  # We need the dimensions of the input file for later.
  _GET_DIMENSIONS_ FILE=$infile
  my $lbnd = $_GET_DIMENSIONS_{LBOUND};
  my $ubnd = $_GET_DIMENSIONS_{UBOUND};

  # Mask out the central 10%.
  my $params = "in=$rms_file out=$temp1file newval=bad section=\"~10\%,,\"";
  $Mon{'kappa_mon'}->obeyw( "chpix", "$params" );

  # Collapse around the central 85% using the sigma estimator to get
  # the standard deviation.
  $params  = "in=$rms_file(~85\%,,) out=$temp2file estimator=sigma";
  $params .= " axis=spec trim=true wlim=0.0 variance=false";
  $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

  # Check to see how many good pixels we have.
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp2file" );
  my ( $ORAC_STATUS, $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
  if( $numgood == 0 ) {
    orac_err "No good pixels were found in $rms_file. Cannot perform Tsys/RMS consistency checks.\n";
    $Frm->isgood(0);
    $ORAC_STATUS = ORAC__TERM;
  }

  # Now copy a frequency slice from the VARIANCE component of the
  # input file. It doesn't matter where, since we're interested in the
  # VARIANCE component and that doesn't vary with frequency.  However,
  # we need this slice not to be all bad, which does happen if you
  # select the central element.
  $params = "in=$infile out=$temp3file comp=error axis=1 trim estimator=mean";
  $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

  # Find stats on this error array.
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp3file" );
  ( $ORAC_STATUS, my $rmsmeantsys ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

  # At this point, if we're doing an RxA sample the temp3file could be
  # 1D, so turn it into 2D.
  _GET_DIMENSIONS_ FILE=$temp3file
  my $temp3dims = $_GET_DIMENSIONS_{DIMS};
  if( scalar( @{$temp3dims} ) == 1 ) {

    my $temp7file = new ORAC::TempFile( 0 );
    $params = "in=$temp3file out=$temp7file axes=[0,1] lbound=1 ubound=1";
    $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

    $temp3file = $temp7file;
  }

  # Divide the measured RMS by the calculated RMS.
  $params = "in1=$temp2file in2=$temp3file out=$temp6file";
  $Mon{'kappa_mon'}->obeyw( "div", "$params" );

  # Run QA analysis on each requested survey.
  foreach my $analyse_survey ( @analyse_surveys ) {

    $opts{'survey'} = $analyse_survey;

    # Retrieve the constant(s) for the difference tolerance and the
    # questionable/bad limits.
    my $rmstol_const      = 'RMSTSYSTOL';
    my $rmstolquest_const = 'RMSTSYSTOL_QUEST';
    my $rmstolfail_const  = 'RMSTSYSTOL_FAIL';
    my $rmsmeantsystol_const = 'RMSMEANTSYSTOL';
    my $rmstol = $qa->get_data( key => $rmstol_const, %opts );
    my $rmstolquest = $qa->get_data( key => $rmstolquest_const, %opts );
    my $rmstolfail = $qa->get_data( key => $rmstolfail_const, %opts );
    my $rmsmeantsystol = $qa->get_data( key => $rmsmeantsystol_const, %opts );

    my $tol = $rmstol + 1;
    my $meantol = $rmsmeantsys * ( $rmsmeantsystol + 1 );
    $params = "in=$temp6file value=$tol above";
    $Mon{'kappa_mon'}->obeyw( "numb", "$params" );
    ( $ORAC_STATUS, my $numb_above ) = $Mon{'kappa_mon'}->get( "numb", "number" );

    # Find out how many pixels are below the tolerance to get a ratio.
    $params = "in=$temp6file value=$tol noabove";
    $Mon{'kappa_mon'}->obeyw( "numb", "$params" );
    ( $ORAC_STATUS, my $numb_below ) = $Mon{'kappa_mon'}->get( "numb", "number" );

    # Calculate the percentage above the threshold, and store it in a
    # hash for future printing.
    my $percent = $numb_above / ( $numb_above + $numb_below );
    $result{$analyse_survey}{$infile} = $percent;

    # Mask out the bad pixels, if requested.
    if( defined( $mask ) && ( uc( $analyse_survey ) eq $mask ) ) {

      my $temp7file = new ORAC::TempFile( 0 );
      my $temp8file = new ORAC::TempFile( 0 );
      my $temp9file = new ORAC::TempFile( 0 );
      my $temp10file = new ORAC::TempFile( 0 );
      my $temp11file = new ORAC::TempFile( 0 );

      # Threshold the comparison image.
      $params = "in=$temp6file out=$temp7file thrlo=-100000 newlo=bad thrhi=$tol newhi=bad";
      $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );

      # Threshold measured RMS array.
      orac_say "Thresholding samples with RMS above " . sprintf( "%.2f", $meantol ) . " K";
      $params = "in=$temp2file out=$temp9file thrlo=-100000 newlo=bad thrhi=$meantol newhi=bad comp=VAR";
      $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );
      if( starversion_gt( 'KAPPA', 'V1.10-0' ) ) {
        ( $ORAC_STATUS, my $numhi ) = $Mon{'kappa_mon'}->get( "thresh", "numhi" );
        orac_say sprintf( " %d samples had RMS above %.2f K", $numhi, $meantol );
        $timeseries{$analyse_survey}{'rmsmeantsysnum'} = $numhi;
        $timeseries{$analyse_survey}{'rmsmeantsysval'} = $meantol;
      }

      # Expand both out to size of input cube.
      $params = "in=$temp7file out=$temp8file axes=[0,1,2] lbound=" . $lbnd->[0] . " ubound=" . $ubnd->[0];
      $Mon{'kappa_mon'}->obeyw( "manic", "$params" );
      $params = "in=$temp9file out=$temp11file axes=[0,1,2] lbound=" . $lbnd->[0] . " ubound=" . $ubnd->[0];
      $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

      # Copy bad pixels from both to output cube.
      $params = "in=$infile ref=$temp8file out=$temp10file";
      $Mon{'kappa_mon'}->obeyw( "copybad", "$params" );
      $params = "in=$temp10file ref=$temp11file out=$outfile";
      $Mon{'kappa_mon'}->obeyw( "copybad", "$params" );

      orac_say "Masked out bad samples to form $outfile.";

      # Update the Frame object.
      $Frm->file( $i, $outfile );

      # The output files need to be preserved through to group
      # processing, however we will want to remove them once all
      # all input data have been processed.
      $Grp->push_intermediates( $outfile );
    }
  }
}


foreach my $survey ( sort keys %result ) {
  my $sum = 0;
  foreach my $value ( values %{$result{$survey}} ) {
    $sum += $value;
  }
  my $avg = $sum / scalar( values %{$result{$survey}} );

  $opts{'survey'} = $survey;

  my $rmstol_const      = 'RMSTSYSTOL';
  my $rmstolquest_const = 'RMSTSYSTOL_QUEST';
  my $rmstolfail_const  = 'RMSTSYSTOL_FAIL';
  my $rmstol = $qa->get_data( key => $rmstol_const, %opts );
  my $rmstolquest = $qa->get_data( key => $rmstolquest_const, %opts );
  my $rmstolfail = $qa->get_data( key => $rmstolfail_const, %opts );

  orac_print "Tsys versus RMS consistency check ";

  my $status;
  if( $avg > $rmstolfail ) {
    $status = "failed";
    orac_print( " failed ", "bold white on_red" );
  } elsif( $avg > $rmstolquest ) {
    $status = "questionable";
    orac_print( " is questionable ", "bold black on_yellow" );
  } else {
    $status = "passed";
    orac_print( " passed ", "bold white on_green" );
  }

  orac_print " for $survey.\n";

  orac_print sprintf( " %.2f%% of the samples had a calculated RMS that differed by more than %d%% from the measured RMS.\n", $avg * 100, $rmstol * 100 );

  $timeseries{$survey}{'percentage'} = $avg;
  $timeseries{$survey}{'rmstol'} = $rmstol;
  $timeseries{$survey}{'status'} = $status;

  if( $avg > $rmstolfail && scalar keys %result == 1 ) {
    $Frm->isgood( 0 );
    orac_say " Will not add current frame to group.";
  }

}

_QA_REPORT_TIMESERIES_ TIMESERIES=\%timeseries

# If we masked, test the first output file. If it's all bad, don't
# continue as we can't do anything with the data anyhow.
if( defined( $mask ) ) {

  my $test = $Frm->file( 1 );
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$test" );
  my ( $ORAC_STATUS, $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
  if( $numgood == 0 ) {
    orac_err "All samples were masked as bad. Continuing with next observation.\n";
    $Frm->isgood( 0 );
    $ORAC_STATUS = ORAC__TERM;
  }

}

# Tidy up output.
orac_say "";
