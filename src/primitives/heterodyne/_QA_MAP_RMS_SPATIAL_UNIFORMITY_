# -*-perl-*-

=head1 NAME

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item FILE = STRING (Given)

The file to perform quality assurance calculations on.

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

my $file = get_prim_arg( $_PRIM_ARGS_, "FILE", undef );
if( ! defined( $file ) ) {
  orac_throw "FILE argument must be passed to _QA_MAP_RMS_SPATIAL_UNIFORMITY_: programming error";
}

orac_say "Checking RMS spatial uniformity for $file.";

# Just run STATS on the file. This gives us min, max, and mean values.
$Mon{'kappa_mon'}->obeyw( "stats", "ndf=$file" );
my ( $ORAC_STATUS, $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
( $ORAC_STATUS, my $min ) = $Mon{'kappa_mon'}->get( "stats", "minimum" );
( $ORAC_STATUS, my $max ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );

my $RMSVAR_MAP = 0.6;

orac_say sprintf( " minimum: %.2f maximum: %.2f mean: %.2f",
                  $min, $max, $mean );

orac_print " Spatial RMS uniformity ";

if( $min > $mean * ( 1 - $RMSVAR_MAP ) &&
    $max < $mean * ( 1 + $RMSVAR_MAP ) ) {

  orac_print( " passed ", "bold white on_green" );

} else {
  orac_print( " failed ", "bold white on_red" );
}

orac_say " for GBS for $file.";
orac_say "";
