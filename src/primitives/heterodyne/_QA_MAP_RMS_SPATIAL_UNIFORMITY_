# -*-perl-*-

=head1 NAME

_QA_MAP_RMS_SPATIAL_UNIFORMITY_ - Check spatial uniformity across a
noise map.

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item CENTRAL = INTEGER (Given)

If defined, the central percentage of the map to use for
calculations. If defined, must be between 1 and 100 to make any
sense. []

=item FILE = STRING (Given)

The file to perform quality assurance calculations on. If not defined,
this primitive will throw an error.

=back

=head1 NOTES

=over 4

=item *

The FILE argument must be supplied.

=back

=head1 OUTPUT DATA

None.

=head1 TASKS

KAPPA: STATS.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

my $file = get_prim_arg( $_PRIM_ARGS_, "FILE", undef );
if( ! defined( $file ) ) {
  orac_throw "FILE argument must be passed to _QA_MAP_RMS_SPATIAL_UNIFORMITY_: programming error";
}

my $central = get_prim_arg( $_PRIM_ARGS_, "CENTRAL", undef );

orac_say "Checking RMS spatial uniformity for $file.";

my $region = "";
_GET_DIMENSIONS_ FILE=$file
my $dims = $_GET_DIMENSIONS_{DIMS};
if( defined( $central ) ) {
  orac_say " Using central $central% of map.";
  my $xdim = int( $dims->[0] * $central / 100 );
  my $ydim = int( $dims->[1] * $central / 100 );
  $region = "(~$xdim,~$ydim)";
}

if( ( $dims->[0] < 3 && $dims->[1] < 3 ) || $region eq "(~0,~0)" ) {
  orac_warn "Not enough data in map to calculate map uniformity QA.\n";
} else {

  # Just run STATS on the file. This gives us min, max, and mean values.
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$file$region" );
  my ( $ORAC_STATUS, $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
  ( $ORAC_STATUS, my $min ) = $Mon{'kappa_mon'}->get( "stats", "minimum" );
  ( $ORAC_STATUS, my $max ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );
  ( $ORAC_STATUS, my $numpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );
  ( $ORAC_STATUS, my $numbad ) = $Mon{'kappa_mon'}->get( "stats", "numbad" );

  # Obtain QA parameters.
  _SETUP_QA_OPTIONS_
  my %opts = %{$_SETUP_QA_OPTIONS_{'OPTS'}};
  $opts{'survey'} = ( defined( $Frm->hdr( "SURVEY" ) ) ?
                      $Frm->hdr( "SURVEY" )            :
                      "Telescope" );

  my $qaparamfile = $Cal->qaparams;
  my $qa = new JSA::QA( file => $qaparamfile );

  my $RMSVAR_MAP = $qa->get_data( key => 'RMSVAR_MAP', %opts );
  my $BADPIX_MAP = $qa->get_data( key => 'BADPIX_MAP', %opts );

  orac_say sprintf( " minimum: %.2f maximum: %.2f mean: %.2f",
                    $min, $max, $mean );

  orac_print " Spatial RMS uniformity ";

  if( $min > $mean * ( 1 - $RMSVAR_MAP ) &&
      $max < $mean * ( 1 + $RMSVAR_MAP ) ) {

    orac_print( " passed ", "bold white on_green" );

  } else {
    orac_print( " failed ", "bold white on_red" );
  }

  orac_say " for $opts{'survey'} for $file.";
  orac_say "";

  orac_say sprintf( " Number of pixels used: %5d", $numpix );
  orac_say sprintf( " Number of bad pixels:  %5d", $numbad );
  orac_say sprintf( " Percentage bad: %.2f%%", $numbad / $numpix * 100 );

  orac_print " QA based on bad pixels in final map ";

  if( $numbad / $numpix < $BADPIX_MAP ) {
    orac_print( " passed ", "bold white on_green" );

  } else {
    orac_print( " failed ", "bold white on_red" );
  }

  orac_say " for $opts{'survey'} for $file.";
  orac_say "";
}
