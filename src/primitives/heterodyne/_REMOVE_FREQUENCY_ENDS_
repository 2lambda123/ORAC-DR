# -*-cperl-*-

=head1 NAME

_REMOVE_FREQUENCY_ENDS_ - Remove the ends of a cube's frequency axis.

=head1 DESCRIPTION

This primitive removes the ends of a cube's frequency axis by copying
out a central portion of the cube to a new file. This primitive
differs from _MASK_FREQUENCY_ENDS_ in that this primitive does not
create a cube with masked-out bad pixels on either ends of the
frequency axis, whereas _MASK_FREQUENCY_ENDS_ does.

=head1 ARGUMENTS

=over 4

=item AXIS = INTEGER (Given)

The axis to trim. For time-series data this should be set to 1. For
spatial cubes this should be set to 3. [3]

=item LOWER = REAL (Given)

The percentage of the total frequency range to trim from the lower
end of the frequency range. For example, if a cube has 1024 frequency
channels, and the percentage to trim is 10%, then 102 channels will be
trimmed from the lower end.  This argument can be overridden by the
RECPAR_TRIM_PERCENTAGE_LOWER uhdr via the recipe parameter system. [undef]

=item PERCENT = REAL (Given)

The percentage of the total frequency range to trim from either
end. For example, if a cube has 1024 frequency channels, and the
percentage to trim is 10%, then 102 channels will be trimmed from
either end.   This argument can be overridden by the
RECPAR_TRIM_PERCENTAGE uhdr via the recipe parameter system.
The default depends on the value of the ORAC_BACKEND internal header
in the current Frame; for ACSIS it is 3%, for DAS it is 7.5%.  if the
backend is undefined or has another value the default is 10%.  []

=item UPPER = REAL (Given)

The percentage of the total frequency range to trim from the higher
end of the frequency range. For example, if a cube has 1024 frequency
channels, and the percentage to trim is 10%, then 102 channels will be
trimmed from the upper end.  This argument can be overridden by the
RECPAR_TRIM_PERCENTAGE_UPPER uhdr via the recipe parameter system. [undef]

=back

=head1 NOTES

=over 4

=item *

This primitive will only remove the ends if the Frame's user header
SPECTRAL_TRIMMED does not exist or it exists and is false..

=item *

If either of the LOWER or UPPER parameters are given, these will be
used. Otherwise, if both of them are left undefined, then the PERCENT
parameter will be used.

=back

=head1 OUTPUT DATA

=over 4

Cube with masked frequency ends, with the _em suffix appended to the
filename.

=back

=head1 TASKS

KAPPA: NDFCOPY, NDFTRACE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007, Particle Physics and Astronomy Research Council.
Copyright (C) 2013, 2014 Science and Technology Research Council.
All Rights Reserved.

=cut

# Set appropriate defaults for the percentage cut.
my $default_percent = 10;
my $backend = $Frm->uhdr( 'ORAC_BACKEND' );
if ( defined( $backend ) && uc( $backend ) eq "ACSIS" ) {
  $default_percent = 3;
} elsif ( defined( $backend ) && uc( $backend ) eq "DAS" ) {
  $default_percent = 7.5;
}

# Deal with parameters.
my $axis = get_prim_arg( $_PRIM_ARGS_, "AXIS", 3 );
my $percent = get_prim_arg( $_PRIM_ARGS_, "PERCENT", $default_percent );
my $lower = $_PRIM_ARGS_->{LOWER};
my $upper = $_PRIM_ARGS_->{UPPER};

# Handle recipe parameter overrides.
$percent = ( defined( $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE" ) ) ?
             $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE" )            :
             $percent );
$lower = ( defined( $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_LOWER" ) ) ?
             $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_LOWER" )          :
             $lower );
$upper = ( defined( $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_UPPER" ) ) ?
             $Frm->uhdr( "RECPAR_TRIM_PERCENTAGE_UPPER" )          :
             $upper );

if( defined( $lower ) || defined( $upper ) ) {

  $lower = ( defined( $lower ) ? $lower : 0 );
  $upper = ( defined( $upper ) ? $upper : 0 );

} else {
  $lower = $percent;
  $upper = $percent;
}

if( ! defined( $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) ||
    ! $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) {

  orac_say "\nRemove frequency ends";
  my $underline = "-" x 31;
  orac_say "$underline\n";

  foreach my $i ( 1 .. $Frm->nfiles ) {

    # Set/get filenames.
    my ( $in, $out ) = $Frm->inout( "_em", $i );

    # Retrieve the dimensions of the cube.
    _GET_DIMENSIONS_ FILE=$in
    my @lbnd = @{$_GET_DIMENSIONS_{LBOUND}};
    my @ubnd = @{$_GET_DIMENSIONS_{UBOUND}};

    # Get the extent of the requested axis.
    my $extent = $ubnd[$axis-1] - $lbnd[$axis-1] + 1;

    # Calculate the amount to blank off from either end.
    my $trim_lower = int( $extent * $lower / 100 );
    my $trim_upper = int( $extent * $upper / 100 );

    # Calculate the lower and upper extents.
    my $lower_extent = $lbnd[$axis-1] + $trim_lower;
    my $upper_extent = $ubnd[$axis-1] - $trim_upper;

    # Set up the NDF section.
    my $section;
    if( $axis == 1 ) {
      $section = "($lower_extent:$upper_extent,,)";
    } elsif( $axis == 2 ) {
      $section = "(,$lower_extent:$upper_extent,)";
    } elsif( $axis == 3 ) {
      $section = "(,,$lower_extent:$upper_extent)";
    }

    # Run NDFCOPY.
    my $params = "in=$in$section out=$out";
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

    # Report to user.
    orac_print "$in to $out:\n";
    orac_print " Trimmed $lower\% from lower end of frequency range.\n";
    orac_print " Trimmed $upper\% from upper end of frequency range.\n";
    orac_print " Trimmed dimensions on axis $axis: [$lower_extent:$upper_extent]\n";

    # Set the product.
    $Frm->product( "em" );

    # Update the Frm object.
    $Frm->file( $i, $out );

  }

  # Display if necessary.
  $Display->display_data( $Frm ) if defined $Display;

  # Tidy-up output.
  orac_print "\n";

}
