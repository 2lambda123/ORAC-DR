# -*-perl-*-

=head1 NAME

_MASK_FREQUENCY_ENDS_ - Remove the ends of a cube's frequency axis.

=head1 DESCRIPTION

This primitive removes the ends of a cube's frequency axis by copying
out a central portion of the cube to a new file. This primitive
differs from _MASK_FREQUENCY_ENDS_ in that this primitive does not
create a cube with masked-out bad pixels on either ends of the
frequency axis, whereas _MASK_FREQUENCY_ENDS_ does.

=head1 ARGUMENTS

=over 4

=item PERCENT = REAL (Given)

The percentage of the total frequency range to trim from either
end. For example, if a cube has 1024 frequency channels, and the
percentage to trim is 10%, then 102 channels will be trimmed from
either end. [10.0]

=back

=head1 NOTES

=over 4

=item *

This primitive will only remove the ends if the Frame's user header
SPECTRAL_TRIMMED does not exist or it exists and is false..

=back

=head1 OUTPUT DATA

=over 4

Cube with masked frequency ends, with the _em suffix appended to the
filename.

=back

=head1 TASKS

KAPPA: NDFCOPY, NDFTRACE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Deal with parameters.
my $percent = ( defined( $_REMOVE_FREQUENCY_ENDS_{PERCENT} ) ?
                $_REMOVE_FREQUENCY_ENDS_{PERCENT}            :
                10 );

if( ! defined( $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) ||
    ! $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) {

  foreach my $i ( 1 .. $Frm->nfiles ) {

    # Set/get filenames.
    my ( $in, $out ) = $Frm->inout( "_em", $i );

    # Retrieve the dimensions of the cube.
    $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
    my ( $ORAC_STATUS, @lbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "lbound" );
    ( $ORAC_STATUS, my @ubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "ubound" );

    # Get the extent of the 3rd axis.
    my $extent = $ubnd[2] - $lbnd[2] + 1;

    # Calculate the amount to blank off from either end.
    my $trim = int( $extent * $percent / 100 );

    # Calculate the lower and upper extents.
    my $lower_z = $lbnd[2] + $trim;
    my $upper_z = $ubnd[2] - $trim;

    # Run NDFCOPY.
    my $params = "in=$in(,,$lower_z:$upper_z) out=$out";
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

    # Report to user.
    orac_print "$in to $out:\n";
    orac_print " Trimmed $percent\% from both ends of frequency range.\n";

    # Set the product.
    $Frm->product( "em" );

    # Update the Frm object.
    $Frm->file( $i, $out );

  }

  # Display if necessary.
  $Display->display_data( $Frm ) if defined $Display;

  # Tidy-up output.
  orac_print "\n";

}
