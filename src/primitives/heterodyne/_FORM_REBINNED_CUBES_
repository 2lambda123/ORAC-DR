# -*-cperl-*-

=head1 NAME

_FORM_REBINNED_CUBES_ - Rebins spectral cubes to supplied velocity channel sizes.

=head1 DESCRIPTION

This primitive creates a group co-added cube from all members of the
current group. It then baselines the cube and creates moments maps.

=head1 ARGUMENTS

=over 4

=item GROUP = INTEGER (Given)

How to process group files.  0 means use the current Frame object.  1
means use the current Group object.  2 means use each Frame member of
the current Group object.  [1]

=item REBIN = STRING (Given)

A comma-separated list of requested rebinning resolutions, in km/s.  A
rebinned cube will be created for each requested resolution.  Only the
group cube will be rebinned.  A nullvalue results in no rebinned cubes
being created.  This argument can be overridden by the RECPAR_REBIN uhdr
via the recipe parameter system.  []

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=back

=head1 OUTPUT DATA

=over 4

=item *

The rebinned cubes with suffix _<res>bin. The resolution is passed into
the filename such that the decimal point is replaced with a 'p', and
two decimal places are included. For example, for a requested velocity
resolution of 0.1 km/s, each output filename will have a _0p10bin
suffix, and for a requested velocity resolution of 10 km/s, each output
filename will have a _10p00bin suffix.

=back

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2017 Science and Technology Facilities Council. 
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Obtain arguements and recipe parameter overrides.
# =================================================

my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 1 );
my $rebin = get_prim_arg( $_PRIM_ARGS_, "REBIN", undef );
$rebin = ( defined( $Frm->uhdr( "RECPAR_REBIN" ) ) ?
         $Frm->uhdr( "RECPAR_REBIN" )              :
         $rebin );

# Validate values that may have been supplied by recipe parameter.
# ================================================================

my @Objs;
if ( $group == 0 ) {
   push @Objs, $Frm;
} elsif( $group == 1 ) {
   push @Objs, $Grp;
} elsif( $group == 2 ) {
   @Objs = $Grp->members;
}

# Only go on if we're not doing a Group, or if we are doing a Group
# and this Frame is the last member of the Group.
if ( $group != 1 || ( $group == 1 && $Grp->lastallmembers( $Frm ) ) ) {
   if ( defined( $rebin ) ) {
      foreach my $res ( split ",", $rebin ) {
         _REBIN_VELOCITY_SCALE_ GROUP=$group PIXELSCALE=$res
      }
   }
}

# Tidy-up output.
orac_print "\n";
