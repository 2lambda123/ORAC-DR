=head1 NAME

_SET_DESPIKE_RECPARS_ - Obtains and reports the recipe parameters that
control spike removal.

=head1 DESCRIPTION

This primitive obtains the recipe parameters associated with the
removal of positive or negatives spikes in spectra.  It copies the
values to internal headers for access by the relevant _DESPIKE_
primitive.  The primitive also reports the settings to the log in
yellow.

This primitive serves the heterodyne recipes' steering files in order
to avoid duplicated code.

=head1 NOTES

=over 4

=item

The recipe parameters accessed by this primitive are:
DESPIKE, DESPKIE_BOX, DESPIKE_CUBE, and DESPIKE_PER_DETECTOR.
These should be added to the list of parameters to verify with
ORAC::Recipe::Parameters::verify_parameters in the calling steering
primitive.

=item

Only if DESPIKE is set true are the other DESPIKE_... recipe
parameters not ignored.  The assumed default is that there will not be
despiking, since there is a danger of removing genuine narrow emission
so only apply it where necessary.

=item

The internal headers have names "RECPAR_" followed by the recipe
parameter name.

=back

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2016 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# This variable is used to reform comma-separated lists turned into
# stringified array reference.
my $commasep;

# Put recipe parameters into our uhdr.

# Baseline linearity for whole receptors
# ======================================

# This assumes that default is true without setting the corresponding
# recipe parameter.
my $despike = 0;
if ( defined( $RECPARS{'DESPIKE'} ) ) {
   $Frm->uhdr( "RECPAR_DESPIKE", $RECPARS{'DESPIKE'} );
   if ( $RECPARS{'DESPIKE'} ) {
      orac_say( " Attempts to remove spikes from the spectra.", "yellow" );
      $despike = 1
   }
}

if ( $despike ) {
   if ( defined( $RECPARS{'DESPIKE_BOX'} ) ) {
      $Frm->uhdr( "RECPAR_DESPIKE_BOX", $RECPARS{'DESPIKE_BOX'} );
      orac_say( "    Box width to determine background is $RECPARS{'DESPIKE_BOX'} pixels.", "yellow" );
   }

   if ( defined( $RECPARS{'DESPIKE_CLIP'} ) ) {
      $Frm->uhdr( "RECPAR_DESPIKE_CLIP", $RECPARS{'DESPIKE_CLIP'} );

# If the user enters a single value, the recipe parameter's value can be
# used directly.  However, should a comma-separated list be supplied, the
# returned value is a stringified ARRAY(address).  To circumvent this
# convert the reference to an array, and reassemble the pieces.
     if ( ref( $RECPARS{'DESPIKE_CLIP'} ) eq 'ARRAY' ) {
        $commasep = join( ",", @{ $RECPARS{'DESPIKE_CLIP'} } );
     } else {
        $commasep = $RECPARS{'DESPIKE_CLIP'};
     }
      orac_say( "    Clip to find spikes in the RMS spectrum at $commasep standard deviations", "yellow" );
   }

   if ( defined( $RECPARS{'DESPIKE_PER_DETECTOR'} ) ) {
      $Frm->uhdr( "RECPAR_DESPIKE_PER_DETECTOR", $RECPARS{'DESPIKE_PER_DETECTOR'} );
      if ( $RECPARS{'DESPIKE_PER_DETECTOR'} ) {
         orac_say( "    Despike for each detector independently.", "yellow" );
      } else {
         orac_say( "    Despike combining all spectra.", "yellow" );
      }
   }
}

