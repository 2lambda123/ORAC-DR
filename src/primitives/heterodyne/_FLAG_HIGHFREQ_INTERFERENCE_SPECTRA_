=head1 NAME

_FLAG_HIGHFREQ_INTERFERENCE_SPECTRA_

=head1 DESCRIPTION

This primitive identifies and masks spectra affected by high-frequency
noise.

It achieves this through the following steps:
  -  Copies the current time-series cube to form a mask cube.
  -  Analyses the spectral-time-series image for each good receptor in
     turn.
     o  Applies a one-dimensional Laplacian edge filter to all the
        spectra, trimming the outer 15% where noise is always present.
        This approximates to a difference of Gaussian filter.
     o  Derives an rms `edginess' array to provide a rectified signal.
     o  Averages the signal along the spectral axis to form an edginess
        profile through the time series.
     o  Corrects for drifts or steps in the profile.
     o  Rejects spectra whose mean edginess exceeds the median level plus
        a nominated number of clipped standard deviations (see Arguments
        EDGE_CLIP and THRESH_CLIP).
     o  Pastes bad values in the mask cube at the location of any rejected
       spectrum.
  -  Applies the mask to the input cube.

It has the advantage of retaining good data for receptors that are only
occasionally bad, rather than rejecting all spectra for a receptor
as _MASK_BAD_BASELINE_* primitives do.

There is an option to detect bands of spectra affected by `ringing'
interference, where the same high-frequency ripple extends over tens
of spectra and strength has a steady increase then decline.  This is
enabled through Argument RINGING.

=head1 ARGUMENTS

=over 4

=item EDGE_CLIP = STRING (Given)

The standard deviation to clip iteratively the summed-edginess
profile in order to measure the mean and standard deviation of the
profile unaffected by bad spectra.  A comma-separated list
will perform iterative sigma clipping of outliers, but standard
deviations in the list should not decrease.  This argument
can be overridden by the RECPAR_HIGHFREQ_INTERFERENCE_EDGE_CLIP
uhdr via the recipe parameter system.  ["2.0,2.0,2.5,3.0"]

=item RINGING = BOOLEAN (Given)

Whether or not to test for ringing in the spectra.  This argument
can be overridden by the RECPAR_HIGHFREQ_RINGING uhdr via the recipe
parameter system.  Even if set to 1 (true), at least RINGING_MIN_SPECTRA
spectra are required to give a sufficient baseline against which to
detect spectra with ringing.  [0]

=item RINGING_MIN_SPECTRA = INTEGER (Given)

Minimum number of good spectra for ringing filtering to be attempted.
This argument can be overridden by the RECPAR_HIGHFREQ_RINGING_MIN_SPECTRA
uhdr via the recipe parameter system.  [400]

=item THRESH_CLIP = REAL (Given)

The number of standard deviations at which to threshold the noise
profile above the median level.  This argument can be overridden by
the RECPAR_HIGHFREQ_INTERFERENCE_THRESH_CLIP uhdr via the recipe
parameter system.  [4.0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS timeseries data.

=item *

This primitive is suitable for spectral-line observations.

=item *

This primitive will not run if the HIGHFREQ_INTERFERENCE uhdr in the current
Frame object is defined and false.

=item *

The 85% trimming of the spectra is the same trim applied in the
QA primitives.

=item *

The primitive excludes analysis of the bad receptors, defaulting to
those listed in either the master (F<$ORAC_DATA_CAL/index.bad_receptors>)
or the local index F<$ORAC_DATA_OUT/index.bad_receptors_qa>).

=back

=head1 OUTPUT DATA

=over 4

=item *

A cleaned version of the supplied time-series cube in which the noisy
spectra are set to bad.  It has the suffix _hfimasked (for High
Frequency Interference).

=back

=head1 TASKS

CUPID: FINDBACK;
KAPPA: COPYBAD, COLLAPSE, MANIC, MATHS, NDFCOPY, PASTE, SETTYPE, SLIDE,
       STATS, THRESH;
SMURF: FIXSTEPS.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2013 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use JCMT::ACSIS::Array;

# Inquire whether or not  non-linear baseline filtering is required.
my $apply = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE" ) ) ?
            $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE" )              :
            1 );
if ( ! $apply ) { goto RETURN }

# Handle arguments.
# =================

my $edge_clip = get_prim_arg( $_PRIM_ARGS_, "EDGE_CLIP", "2.0,2.0,2.5,3.0" );
my $ringing = get_prim_arg( $_PRIM_ARGS_, "RINGING", "0" );
my $min_spec = get_prim_arg( $_PRIM_ARGS_, "RINGING_MIN_SPECTRA", "400" );
my $thresh_clip = get_prim_arg( $_PRIM_ARGS_, "THRESH_CLIP", "4.0" );

# Handle recipe parameter overrides.

# Generate a comma-separated list if this has been turned into a stringified
# ARRAY reference.
$edge_clip = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_EDGE_CLIP" ) ) ?
             $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_EDGE_CLIP" )              :
             $edge_clip );
if ( ref( $edge_clip ) eq 'ARRAY' ) { $edge_clip = join( ",", @{ $edge_clip } ) }

$ringing = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING" ) ) ?
             $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING" )            : $ringing );

$min_spec = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING_MIN_SPECTRA" ) ) ?
            $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING_MIN_SPECTRA" )              :
            $min_spec );

$thresh_clip = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_THRESH_CLIP" ) ) ?
             $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_THRESH_CLIP" )                :
             $thresh_clip );

# Convert list of standard-deviation clip levels to an array.
my @clips = split( ',', $edge_clip );

# Constrain parameters to allowed values.
# ---------------------------------------

# Sigma clipping levels should not decrease. Do not set the initial
# threshold too low lest we exclude acceptable but slightly deviant
# spectra in an otherwise good set.
my @clip_sigma = ();
my $last = 2.0;
foreach ( @clips ) {
   push @clip_sigma, max( $last, $_ );
}

$edge_clip = "[" . join( ",", @clip_sigma ) . "]";

# Specify output and temporary filenames.
# =======================================
my $params;
my $osuffix = "_hfimasked";

foreach my $i ( 1 .. $Frm->nfiles ) {

# Set/get filenames.
   my ( $in, $out ) = $Frm->inout( $osuffix, $i );
   orac_say( "Determine spectra exhibiting transient high-frequency noise interference in $in." );

   my $temp1file = new ORAC::TempFile( 0 );
   my $temp2file = new ORAC::TempFile( 0 );
   my $temp3file = new ORAC::TempFile( 0 );
   my $temp4file = new ORAC::TempFile( 0 );
   my $temp5file = new ORAC::TempFile( 0 );
   my $temp6file = new ORAC::TempFile( 0 );
   my $temp7file = new ORAC::TempFile( 0 );
   my $temp8file = new ORAC::TempFile( 0 );
   my $temp9file = new ORAC::TempFile( 0 );
   my $temp10file = new ORAC::TempFile( 0 );
   my $temp11file = new ORAC::TempFile( 0 );
   my $temp12file = new ORAC::TempFile( 0 );
   my $temp13file = new ORAC::TempFile( 0 );
   my $temp14file = new ORAC::TempFile( 0 );

# We need the dimensions of the input file for later.
   _GET_DIMENSIONS_ FILE=$in
   my $lbnd = $_GET_DIMENSIONS_{LBOUND};
   my $ubnd = $_GET_DIMENSIONS_{UBOUND};
   my $nel = $ubnd->[0] - $lbnd->[0] + 1;
   my $ntimes = $ubnd->[2] - $lbnd->[2] + 1;

# We need at least twice the number of elements in the filtering boxes
# for FIXSTEPS and FINDBACK.
   my $boxsize = 50;
   next if $ntimes < 2 * $boxsize;

# Form arrays of bad detectors.
# =============================

# The default argument of $Cal->bad_receptors is "INDEXORMASTER".  However,
# the master index is far too underpopulated and can lead to picking an
# entry that is months before or after the date of the observation being
# processed.  Valid receptors can then be rejected and bad ones included.
# While this could be circumvented, such as making a private
# $ORAC_DATA_CAL/index.bad_receptors and enter a null (H14) entry if
# a night has no bad receptors.  A better technique is to use the
# -calib bad_receptors command-line option, through which one can also
# supply a list of bad receptors directly.  Here we specify INDEX to only
# use the pipeline-generated bad receptors.
#
# The reading of INDEX also sets up the survey (survey_br).
   $Cal->bad_receptors( "INDEX" );
   my @baddets = $Cal->bad_receptors_list;
   orac_say( "  Receptors disabled by the calibration system: " . join( ",", sort @baddets ) );

# Create a mask NDF.
# ==================
#
# As we shall be filling every receptor plane with a mask of any noisy
# spectra, it is adequate to merely copy the input NDF.
   $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$temp6file" );

# Find the interference.
# ======================

# The data thus appear noisy because of a 5-pixel frequency sinusoid
# in an envelope whose amplitude oscillates with at least one other
# frequency (around 60 pixels).
   my $spec_percent = "~85%";
   if ( defined( $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) &&
        $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) { $spec_percent = "" }

# Get average rms deviations for each receptor not in the bad_receptors list.
# ---------------------------------------------------------------------------
   my $array = new JCMT::ACSIS::Array( File => $in );

# Form set of receptors that are not bad in the master list.
   my @receptors = grep{ my $x=$_; not grep { $x =~ /\Q$_/i} @baddets} $array->receptors;
   @receptors = sort @receptors;

   foreach my $receptor ( @receptors ) {
      orac_say( "  Receptor $receptor." );
      my $pixel = $array->pixel( $receptor );

# Perform an approximate Difference of Gaussian filter along the spectral axis.
# -----------------------------------------------------------------------------
#
# Since the interference has lots of zero crossings an edge detector is
# one way to identify this inference signal.  Note as currently coded
# LAPLACE only operates on two-dimensional data and thus includes
# variation along the time-series axis into the signal, rejecting more
# spectra than is necessary.
      orac_say( "    Computing squared Laplacian of spectra." );
      $params = "in=$in($spec_percent,$pixel,) out=$temp8file stype=absolute";
      $params .= " method=nearest abs=[-1,0,0]";
      $Mon{'kappa_mon'}->obeyw( "slide", "$params" );

      $params = "in=$in($spec_percent,$pixel,) out=$temp9file stype=absolute";
      $params .= " method=nearest abs=[1,0,0]";
      $Mon{'kappa_mon'}->obeyw( "slide", "$params" );

      $params = "ia=$in($spec_percent,$pixel,) ib=$temp8file ic=$temp9file";
      $params .= " exp=2*IA-IB-IC out=$temp1file";
      $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

# Form clean 'edginess' profile.
# ------------------------------
#
# Find the rms `edginess' i.e. a positive measure of the deviation from flatness.
# The normalisation is arbitrary so just approximate with the full spectral
# dimension.
      $params = "ia=$temp1file out=$temp2file exp='sqrt(IA*IA/$nel)'";
      $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

# Collapse the spectral axis using a clipped mean to form average
# edginess for each spectrum for the current detector.
      orac_say( "    Collapsing spectra to form average edge detection per spectrum." );
      $params = "in=$temp2file out=$temp3file estimator=mean";
      $params .= " axis=spec trim=f wlim=0.0 variance=false";
      $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# There may be glitches or drift in the levels.  Correct for these
# before thresholding. FIXSTEPS needs double-precision data.
      my $rejected = 1;
      my $ORAC_STATUS;
      orac_say( "    Correcting for glitches or drift in the edginess profile." );
      $Mon{'ndfpack_mon'}->obeyw( "settype", "$temp3file type=_DOUBLE" );
      $params = "in=$temp3file out=$temp11file";
      $params .= " meanshift=no dcfitbox=$boxsize";
      my $FIXSTEPS_STATUS = $Mon{'smurf_mon'}->obeyw( "fixsteps", "$params" );
      if ( $FIXSTEPS_STATUS == 0 ) {
         ( $ORAC_STATUS, $rejected ) = $Mon{'smurf_mon'}->get( "fixsteps", "nrejected" );
      }

# Check that FIXSTEPS has not rejected the receptor.  This seems to
# happen extremely rarely when there are no genuine steps and too few
# points in the profile.  In this case we can pass the original profile
# directly to FINDBACK.
      if ( $rejected > 0 ) {
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp3file out=$temp11file" );
      }

# Reset the data type.
      $Mon{'ndfpack_mon'}->obeyw( "settype", "$temp11file type=_REAL" );

# Estimate and subtract the 'continuum' level.
      my $oddboxsize = $boxsize + ( $boxsize + 1 ) % 2;
      $params = "in=$temp11file out=$temp12file box=$oddboxsize sub accept";
      my $FINDBACK_STATUS = $Mon{'cupid_mon'}->obeyw( "findback", "$params" );

# FINDBACK can fall over, but this should not be fatal.
      if ( $FINDBACK_STATUS != ORAC__OK ) {
         if ( starversion_gt( 'CUPID', 'V1.6' ) && $FINDBACK_STATUS == 262703466 ) {
            orac_say "Unable to find the background level due to insufficient good data.";
            orac_say "Attempting to continue.";
         }
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp11file out=$temp12file" );
      }

# Identify anomalous spectra.
# ---------------------------

# Estimate the normal level, and standard deviation excluding anomalous spectra.
# This assumes that most of the spectra are good and the drift is not
# significant compared with the noise.
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp12file clip=$edge_clip order" );
      ( $ORAC_STATUS, my $sigma ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );
      ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

# Threshold spectra whose mean rms edginess exceeds an outlier limit.
# The median will give a reliable normal signal on which there are
# spikes or broader mountains caused by the oscillating noise in the
# time series for the detector.  In most cases there is no interference
# noise, so protect against drift and signal variations in the timeseries
# causing the dispersion; these should be small compared with the signal
# being detected.
      if ( $numgood > 0 ) {
         my $threshold = $thresh_clip * $sigma;
         orac_say( "    Turning off spectra with rms edginess above " . sprintf( "%.4f", $threshold ) );
         $params = "in=$temp12file out=$temp4file thrlo=-1 newlo=bad thrhi=$threshold newhi=bad";
         $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );
         ( $ORAC_STATUS, my $eject ) = $Mon{'kappa_mon'}->get( "thresh", "numhi" );
         ( $ORAC_STATUS, my $kept ) = $Mon{'kappa_mon'}->get( "thresh", "numsame" );
         my $total = $eject + $kept;
         if ( $eject == 1 ) {
            orac_say( "       One spectrum removed out of $total." );
         } elsif ( $eject > 0 ) {
            orac_say( "       $eject spectra removed out of $total." );
         } else {
            orac_say( "       No spectra removed out of $total." );
         }

# Early data exhibit a further effect, a persistent beating oscillatory
# high-frequency noise that has the same phase for all affected spectra,
# just the intensity varies.  The signal this generates peaks about 5%
# of the strong signal.  This is just a first crude attempt at
# filtering them.  They seem to occur between the the first type of
# high-frequency interference.  Given that ringing has been observed thus
# far to extend typically over tens and even over 200 spectra, and
# that some reference level for unaffected spectra is needed, define a
# minimum number of spectra.
         if ( $ringing && $numgood >= $min_spec ) {
            if ( $eject > 0 ) {

# The first step is to exclude the strong signals from the flattened
# profile.  The previous FINDBACK tracks the weaker slowly varying
# edge signal.
               $params = "ia=$temp3file ib=$temp4file ";
               $params .= "exp=ia+0*ib out=$temp13file";
               $Mon{'kappa_mon'}->obeyw( "maths", "$params" );
            } else {
               $params = "in=$temp3file out=$temp13file";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
            }

# Estimate and subtract the 'continuum' level.  0.4 aims to exclude
# broad regions of affected spectra but still allow for trending.
# While the the 500 is arbitrary, it is based on a few empirical
# observations of the time extent of blocks of affected spectra.
            my $box = max( int( 0.4 * $total ), 500 );
            $params = "in=$temp13file out=$temp14file box=$box sub accept";
            my $FINDBACK_STATUS = $Mon{'cupid_mon'}->obeyw( "findback", "$params" );

# FINDBACK can fall over, but this should not be fatal.
            if ( $FINDBACK_STATUS != ORAC__OK ) {
               if ( starversion_gt( 'CUPID', 'V1.6' ) && $FINDBACK_STATUS == 262703466 ) {
                  orac_say "Unable to find the background level due to insufficient good data.";
                  orac_say "Attempting to continue.";
               }
               $temp14file = $temp13file;
            }

# Threshold the profile at a fixed level  Using clip means and standard
# deviations have not worked too well.
            $threshold = 0.0036;
            orac_say( "    Turning off spectra with differential rms edginess above " . sprintf( "%.4f", $threshold ) );
            $params = "in=$temp14file out=$temp4file thrlo=-1 newlo=bad thrhi=$threshold newhi=bad";
            $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );
            ( $ORAC_STATUS, my $eject ) = $Mon{'kappa_mon'}->get( "thresh", "numhi" );
            ( $ORAC_STATUS, my $kept ) = $Mon{'kappa_mon'}->get( "thresh", "numsame" );
            if ( $eject == 1 ) {
               orac_say( "       One spectrum removed out of $kept." );
            } elsif ( $eject > 0 ) {
               orac_say( "       $eject spectra removed out of $kept." );
            } else {
               orac_say( "       No spectra removed out of $kept." );
            }
         }

# Add plane for receptor into mask cube.
# ======================================

# Expand the thresholded image to the size of the current receptor's
# plane in the initial cube.
         orac_say( "    Expand the masked profile." );
         $params = "in=$temp4file out=$temp5file axes=[0,2,3] lbound=" . $lbnd->[0] . " ubound=" . $ubnd->[0];
         $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Paste the data to the mask file.
         orac_say( "    Paste the masked data into the cube mask." );
         my $params = "in=$temp6file p1=$temp5file out=$temp7file confine=false transp=false";
         $Mon{'kappa_mon'}->obeyw( "paste", "$params" );
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp7file out=$temp6file" );
      }
   }

# At this point $temp6file should have all the original receptors
# checked for noisy spectra and have bad values for those spectra.
# Copy the bad spectra to the output image.
   orac_say( "  Apply the mask of noisy spectra to the input time series to form $out." );
   $params = "in=$in ref=$temp6file out=$out";
   $Mon{'kappa_mon'}->obeyw( "copybad", "$params" );

# Update the Frm object.
   $Frm->file( $i, $out );

# Display if necessary.
   $Display->display_data( $Frm ) if defined $Display;

}

# Tidy-up output.
orac_print "\n";

RETURN:
