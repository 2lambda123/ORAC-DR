=head1 NAME

_SET_FLATFIELD_RECPARS_ - Obtains and reports the recipe parameters
that control flatfielding.

=head1 DESCRIPTION

This primitive obtains the recipe parameters associated with the
determination and application of a flatfield for each receptor.
It copies the values to internal headers for access by the relevant
primitives.  The primitive also reports the settings to the log in
yellow.

This primitive serves the heterodyne recipes' steering files in order
to avoid duplicated code.

=head1 NOTES

=over 4

=item

The recipe parameters accessed by this primitive are:
FLATFIELD, FLAT_APPLY, FLAT_LOWER_VELOCITY, FLAT_METHOD, FLAT_MINIMUM_SNR,
and FLAT_UPPER_VELOCITY.  These should be added to the list of parameters
to verify with ORAC::Recipe::Parameters::verify_parameters in the
calling steering primitive.

=item

If FLATFIELD is set false, the FLAT_... recipe parameters defined
in this primitive are ignored.  The assumed default is for no
flat fielding.

=item

The internal headers have names "RECPAR_" followed by the recipe
parameter name.

=back

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2013 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# This assumes that default is false without setting the corresponding
# recipe parameter.
my $flatfield = 0;
my $flatfield_message = 0;
my $apply = 1;

if ( defined( $RECPARS{'FLAT_APPLY'} ) ) {
   $Frm->uhdr( "RECPAR_FLAT_APPLY", $RECPARS{'FLAT_APPLY'} );
   $apply = $RECPARS{'FLAT_APPLY'};
}

if ( defined( $RECPARS{'FLATFIELD'} ) ) {
   $Frm->uhdr( "RECPAR_FLATFIELD", $RECPARS{'FLATFIELD'} );

   $flatfield_message = 1;

   if ( $RECPARS{'FLATFIELD'} ) {
      if ( $apply ) {
         orac_say( " Turning on flat-fielding.", "yellow" );
      } else {
         orac_say( " Calculate but do not apply flat-fielding.", "yellow" );
      }
      $flatfield = 1;

   } else {
      orac_say( " Turning off flat-fielding.", "yellow" );
   }
}

# Although the additional check for the flatfield message is unnecessary
# with a current default of no flat field, should that change, $flatfield
# and $flatfield_message variables will alter, and the former would be
# set to 0 in the second block above (instead of 1 in the first block).
if ( $flatfield ) {
   if ( defined( $RECPARS{'FLAT_METHOD'} ) ) {
      if ( !$flatfield_message ) {
         orac_say( " Turning on flat-fielding.", "yellow" );
         $flatfield_message = 1;
      }

      my $flat_method = lc( $RECPARS{'FLAT_METHOD'} );
      $Frm->uhdr( "RECPAR_FLAT_METHOD", $flat_method );
      if ( $flat_method eq 'ratio' || $flat_method eq 'index' ||
           $flat_method eq 'sum'   || $flat_method eq 'itersum' ) {
         orac_say( "    Using the $flat_method method.", "yellow" );
      } else {
         $flat_method = "sum";
         orac_say( "    Using the sum method.", "yellow" );
      }
      $Frm->uhdr( "RECPAR_FLAT_METHOD", $flat_method );
   }

   if ( defined( $RECPARS{'FLAT_LOWER_VELOCITY'} ) ) {
      if ( !$flatfield_message ) {
         orac_say( " Turning on flat-fielding.", "yellow" );
         $flatfield_message = 1;
      }

      $Frm->uhdr( "RECPAR_FLAT_LOWER_VELOCITY", $RECPARS{'FLAT_LOWER_VELOCITY'} );
      orac_say( "    Lower velocity bound for comparisons set to $RECPARS{'FLAT_LOWER_VELOCITY'} km/s.", "yellow" );
   }

   if ( defined( $RECPARS{'FLAT_UPPER_VELOCITY'} ) ) {
      if ( !$flatfield_message ) {
         orac_say( " Turning on flat-fielding.", "yellow" );
         $flatfield_message = 1;
      }

      $Frm->uhdr( "RECPAR_FLAT_UPPER_VELOCITY", $RECPARS{'FLAT_UPPER_VELOCITY'} );
      orac_say( "    Upper velocity bound for comparisons set to $RECPARS{'FLAT_UPPER_VELOCITY'} km/s.", "yellow" );
   }

   if ( defined( $RECPARS{'FLAT_MINIMUM_SNR'} ) ) {
      if ( !$flatfield_message ) {
         orac_say( " Turning on flat-fielding.", "yellow" );
         $flatfield_message = 1;
      }

      $Frm->uhdr( "RECPAR_FLAT_MINIMUM_SNR", $RECPARS{'FLAT_MINIMUM_SNR'} );
      if ( $RECPARS{'FLAT_MINIMUM_SNR'} > 0.0 ) {
         orac_say( "    Minimum signal-to-noise for comparisons set to $RECPARS{'FLAT_MINIMUM_SNR'}.", "yellow" );
      } else {
         orac_say( "    No minimum signal-to-noise for comparisons.", "yellow" );
      }
   }
}
