=head1 NAME

_INDEX_BAD_RECEPTORS_

=head1 DESCRIPTION

This primitive identifies receptors whose data are entirely bad for
an observation, but are not flagged as bad, and records such receptors
in the bad_receceptor index.

=head1 ARGUMENTS

=over 4

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS timeseries data.

=item *

This primitive is suitable for spectral-line observations.

=back

=back

=head1 TASKS

KAPPA: STATS.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2013-2014 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use JCMT::ACSIS::Array;

# Inquire whether or not to look for bad receptor data.
my $apply = ( defined( $Frm->uhdr( "RECPAR_INDEX_BAD_RECEPTORS" ) ) ?
            $Frm->uhdr( "RECPAR_INDEX_BAD_RECEPTORS" )              :
            1 );
if ( ! $apply ) { goto RETURN }


# Form arrays of bad detectors.
# =============================

# Retrieve the list of bad detectors from the calibration system.
# The reading of INDEX also sets up the survey (survey_br).  Avoid
# MASTER because the file is not properly populated and spurious
# bad receptors may be chosen.
$Cal->bad_receptors( "INDEX" );
my @baddets = $Cal->bad_receptors_list;
orac_say( "  Receptors disabled by the calibration system: " . join( ",", sort @baddets ) );

# Store the name of the first file in the list for the index file.
my $first_file_in = $Frm->file( 1 );
my @bad_receptors;

# There are some early spectra (e.g. a20070729_00015_01, Receptor H00)
# which are virtually all bad except for the extremely noisy edges.  To
# prevent a bad receptor be deemed good this condition must be
# recognised.  One approach would be include a test on the standard
# deviation.  However, we trim such edge regions to match what will occur
# in subsequent primitives.
my $spec_percent = "~85%";
if ( defined( $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) &&
     $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) { $spec_percent = "" }

orac_say( "Check that receptors have non-bad data." );

# Obtain the offsets between the subscans to paste along the time axis
# and allocate the workspace to form the the array of spectra for each
# receptor.
my $no_times = 0;
my @time_bounds;
my ( $in, $params, $ORAC_STATUS );

foreach my $i ( 1 .. $Frm->nfiles ) {
   $in = $Frm->file( $i );
   _GET_DIMENSIONS_ FILE=$in
   my $lbnd = $_GET_DIMENSIONS_{LBOUND};
   my $ubnd = $_GET_DIMENSIONS_{UBOUND};
   push @time_bounds, $lbnd->[2] + $no_times, $ubnd->[2] + $no_times;
   $no_times += $ubnd->[2] - $lbnd->[2] + 1;
}

my $pasted = new ORAC::TempFile( 0 );
my $tempfile = new ORAC::TempFile( 0 );

# Test each receptor in turn.
my $array = new JCMT::ACSIS::Array( File => $in );

# Form set of receptors that are not bad in the master list.
my @receptors = grep{ my $x=$_; not grep { $x =~ /\Q$_/i} @baddets} $array->receptors;
@receptors = sort @receptors;

foreach my $receptor ( @receptors ) {
   my $pixel = $array->pixel( $receptor );

# Concatenate the subscans for the current receptor.
   foreach my $i ( 1 .. $Frm->nfiles ) {

# Form a profile for each receptor throughout a whole observation.  The
# whole gives a better handle on the normal non-linearity level.
      $in = $Frm->file( $i );
      if ( $i == 1 ) {
         $params = "in=$in($spec_percent,$pixel,) out=$pasted";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

      } else {

# Shift the origin on the time axis during concatenation.
         my $time_origin = $time_bounds[-2] - 1;
         $params = "shift=[0,0,$time_origin] ";
         $params .= "in=$pasted p1=$in($spec_percent,$pixel,) out=$tempfile";
         $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

# Ready for the next subscan to concatenate.  Another, but brave, way
# is to to make the input and output the same on PASTE.
         $params = "in=$tempfile out=$pasted";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
      }
   }

# Check that the receptor is not completely bad.
   $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$pasted" );
   ( $ORAC_STATUS, my $numpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );
   ( $ORAC_STATUS, my $numbad ) = $Mon{'kappa_mon'}->get( "stats", "numbad" );

# Report the findings.
   orac_print( "  Receptor $receptor" );
   if ( $numbad >= 0.999 * $numpix ) {
      orac_say(" has mostly or entirely bad data." );
      push @bad_receptors, $receptor;
   } else {
      orac_say( " is valid." );
   }
}

# Make sure each bad detector is mentioned only once.
my %seen = ();
my @bad_receptors_uniq = ();

foreach my $item ( @bad_receptors ) {
   push( @bad_receptors_uniq, $item ) unless $seen{$item}++;
}

my $lofreq = $Frm->hdr( "LOFREQS" );
my $survey_br = defined( $Frm->uhdr( "SURVEY_BR" ) ) ? $Frm->uhdr( "SURVEY_BR" ) : 'Telescope';

# Sort out bad receptors.  They'll be added to the calibration system
# for either the specific survey or for everything, and only for the
# current LOFREQ +/- 1 GHz.
if ( scalar( @bad_receptors ) > 0 ) {
   my %recep_hash = ( %{$Frm->hdr },
                      LOFREQ_MAX => $lofreq + 1,
                      LOFREQ_MIN => $lofreq - 1,
                      DETECTORS => ( join ',',@bad_receptors_uniq ),
                      SURVEY_BR => $survey_br,
                    );

   orac_say( " Masking receptor(s) " .
             join( ",", sort @bad_receptors_uniq ) . " for survey $survey_br." );

   $Cal->bad_receptors_qa_index->add( $first_file_in, \%recep_hash );

}

# Tidy-up output.
orac_print "\n";

RETURN:
