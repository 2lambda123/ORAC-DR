# -*-cperl-*-

=head1 NAME

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009, 2012 Science and Technology Facilities Council.  All
Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Verify recipe parameters.
ORAC::Recipe::Parameters::verify_parameters( \%RECPARS, [ 'BASELINE_LINEARITY',
                                                          'BASELINE_LINEARITY_CLIP',
                                                          'BASELINE_LINEARITY_LINEWIDTH',
                                                          'BASELINE_LINEARITY_MINRMS',
                                                          'BASELINE_LINEARITY_SCALELENGTH',
                                                          'BASELINE_ORDER',
                                                          'CREATE_MOMENTS_USING_SNR',
                                                          'CUBE_WCS',
                                                          'FLATFIELD',
                                                          'HIGHFREQ_INTERFERENCE',
                                                          'HIGHFREQ_INTERFERENCE_EDGE_CLIP',
                                                          'HIGHFREQ_INTERFERENCE_THRESH_CLIP',
                                                          'LOWFREQ_INTERFERENCE',
                                                          'LOWFREQ_INTERFERENCE_EDGE_CLIP',
                                                          'LOWFREQ_INTERFERENCE_THRESH_CLIP',
                                                          'MOMENTS',
                                                          'MOMENTS_LOWER_VELOCITY',
                                                          'MOMENTS_UPPER_VELOCITY',
                                                          'PIXEL_SCALE',
                                                          'REBIN',
                                                          'RESTRICT_LOWER_VELOCITY',
                                                          'RESTRICT_UPPER_VELOCITY',
                                                          'SPREAD_FWHM_OR_ZERO',
                                                          'SPREAD_METHOD',
                                                          'SPREAD_WIDTH' ] );

if( scalar keys %RECPARS >= 1 ) {
  orac_say( "\nRecipe parameter overrides:", "yellow" );
}

# This variable is used to reform comma-separated lists turned into
# stringified array reference.
my $commasep;

# Put recipe parameters into our uhdr.

# Bad-baseline non-linearity parameters
if ( defined( $RECPARS{'BASELINE_LINEARITY'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_LINEARITY", $RECPARS{'BASELINE_LINEARITY'} );
  if ( $RECPARS{'BASELINE_LINEARITY'} ) {
    orac_say( " Rejects receptors with mostly or all non-linear baselines.", "yellow" );

    if ( defined( $RECPARS{'BASELINE_LINEARITY_CLIP'} ) ) {
      $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_CLIP", $RECPARS{'BASELINE_LINEARITY_CLIP'} );

# If the user enters a single value, the recipe parameter's value can be
# used directly.  However, should a comma-separated list be supplied, the
# returned value is a stringified ARRAY(address).  To circumvent this
# convert the reference to an array, and reassemble the pieces.
      if ( ref( $RECPARS{'BASELINE_LINEARITY_CLIP'} ) eq 'ARRAY' ) {
        $commasep = join( ",", @{ $RECPARS{'BASELINE_LINEARITY_CLIP'} } );
      } else {
        $commasep = $RECPARS{'BASELINE_LINEARITY_CLIP'};
      }
      orac_say( "    Setting baseline clipping levels to $commasep standard deviations.", "yellow" );
    }

    if ( defined( $RECPARS{'BASELINE_LINEARITY_LINEWIDTH'} ) ) {
      $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_LINEWIDTH", $RECPARS{'BASELINE_LINEARITY_LINEWIDTH'} );
      orac_say( "    Setting central hole to $RECPARS{'BASELINE_LINEARITY_LINEWIDTH'} km/s.", "yellow" );
    }

    if ( defined( $RECPARS{'BASELINE_LINEARITY_MINRMS'} ) ) {
      $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_MINRMS", $RECPARS{'BASELINE_LINEARITY_MINRMS'} );
      orac_say( "    Setting minimum rms non-linearity to $RECPARS{'BASELINE_LINEARITY_MINRMS'}.", "yellow" );
    }

    if ( defined( $RECPARS{'BASELINE_LINEARITY_SCALELENGTH'} ) ) {
      $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_SCALELENGTH", $RECPARS{'BASELINE_LINEARITY_SCALELENGTH'} );
      orac_say( "    Setting smoothing scalength to $RECPARS{'BASELINE_LINEARITY_SCALELENGTH'} pixels.", "yellow" );
    }

  } else {
    orac_say( " Retains receptors with mostly or all non-linear baselines.", "yellow" );
  }
}

if( defined( $RECPARS{'BASELINE_ORDER'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_ORDER", $RECPARS{'BASELINE_ORDER'} );
  orac_say( " Setting baseline order to $RECPARS{'BASELINE_ORDER'}.", "yellow" );
}

if( defined( $RECPARS{'CREATE_MOMENTS_USING_SNR'} ) ) {
  $Frm->uhdr( "RECPAR_MOMENTS_SNR", $RECPARS{'CREATE_MOMENTS_USING_SNR'} );
  orac_say( " Will create signal-to-noise cube for moments map creation.", "yellow" );
}

if( defined( $RECPARS{'CUBE_WCS'} ) ) {
  $Frm->uhdr( "RECPAR_SYSTEM", uc( $RECPARS{'CUBE_WCS'} ) );
  orac_say( " Setting cube coordinate system to $RECPARS{'CUBE_WCS'}.", "yellow" );
}

if( defined( $RECPARS{'FLATFIELD'} ) ) {
  $Frm->uhdr( "RECPAR_FLATFIELD", $RECPARS{'FLATFIELD'} );
  if( $RECPARS{'FLATFIELD'} ) {
    orac_say( " Turning on flat-fielding.", "yellow" );
  } else {
    orac_say( " Turning off flat-fielding.", "yellow" );
  }
}

# Remove spectra with high-frequency interference?
if ( defined( $RECPARS{'HIGHFREQ_INTERFERENCE'} ) ) {
  $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE", $RECPARS{'HIGHFREQ_INTERFERENCE'} );
  if ( $RECPARS{'HIGHFREQ_INTERFERENCE'} ) {
    orac_say( " Will detect and mask spectra with high-frequency interference.", "yellow" );

    if ( defined( $RECPARS{'HIGHFREQ_INTERFERENCE_EDGE_CLIP'} ) ) {
      $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_EDGE_CLIP", $RECPARS{'HIGHFREQ_INTERFERENCE_EDGE_CLIP'} );
      if ( ref( $RECPARS{'HIGHFREQ_INTERFERENCE_EDGE_CLIP'} ) eq 'ARRAY' ) {
        $commasep = join( ",", @{ $RECPARS{'HIGHFREQ_INTERFERENCE_EDGE_CLIP'} } );
      } else {
        $commasep = $RECPARS{'HIGHFREQ_INTERFERENCE_EDGE_CLIP'};
      }
      orac_say( "    Setting clipping levels to determine dispersion in noise profile to $commasep standard deviations.", "yellow" );
    }

    if ( defined( $RECPARS{'HIGHFREQ_INTERFERENCE_THRESH_CLIP'} ) ) {
      $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_THRESH_CLIP", $RECPARS{'HIGHFREQ_INTERFERENCE_THRESH_CLIP'} );
      orac_say( "    Setting clipping level to select bad spectra to $RECPARS{'HIGHFREQ_INTERFERENCE_THRESH_CLIP'} standard deviations.", "yellow" );
    }

  } else {
    orac_say( " Will ignore high-frequency interference.", "yellow" );
  }
}

# Remove spectra with low-frequency interference?
if ( defined( $RECPARS{'LOWFREQ_INTERFERENCE'} ) ) {
  $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE", $RECPARS{'LOWFREQ_INTERFERENCE'} );
  if ( $RECPARS{'LOWFREQ_INTERFERENCE'} ) {
    orac_say( " Will detect and mask spectra with low-frequency interference.", "yellow" );

    if ( defined( $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'} ) ) {
      $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_EDGE_CLIP", $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'} );
      if ( ref( $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'} ) eq 'ARRAY' ) {
        $commasep = join( ",", @{ $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'} } );
      } else {
        $commasep = $RECPARS{'LOWFREQ_INTERFERENCE_EDGE_CLIP'};
      }
      orac_say( "    Setting clipping levels to determine dispersion in noise profile to $commasep standard deviations.", "yellow" );
    }

    if ( defined( $RECPARS{'LOWFREQ_INTERFERENCE_THRESH_CLIP'} ) ) {
      $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_THRESH_CLIP", $RECPARS{'LOWFREQ_INTERFERENCE_THRESH_CLIP'} );
      orac_say( "    Setting clipping level to select bad spectra to $RECPARS{'LOWFREQ_INTERFERENCE_THRESH_CLIP'} standard deviations.", "yellow" );
    }

  } else {
    orac_say( " Will ignore low-frequency interference.", "yellow" );
  }
}

if( defined( $RECPARS{'MOMENTS'} ) ) {
  my $moments = $RECPARS{'MOMENTS'};
  if( ref( $moments ) eq 'ARRAY' ) {
    $moments = join ",", @$moments;
  }
  $Frm->uhdr( "RECPAR_MOMENTS", $moments );
  my $str = " Will create $moments moments map";
  if( ref( $RECPARS{'MOMENTS'} ) eq 'ARRAY' ) {
    $str .= "s";
  }
  $str .= ".";
  orac_say( $str, "yellow" );
}

if( defined( $RECPARS{'MOMENTS_LOWER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_MOMENTS_LOWER", $RECPARS{'MOMENTS_LOWER_VELOCITY'} );
  orac_say( " Restricting lower velocity bound for moments maps to $RECPARS{'MOMENTS_LOWER_VELOCITY'} km/s.", "yellow" );
}

if( defined( $RECPARS{'MOMENTS_UPPER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_MOMENTS_UPPER", $RECPARS{'MOMENTS_UPPER_VELOCITY'} );
  orac_say( " Restricting upper velocity bound for moments maps to $RECPARS{'MOMENTS_UPPER_VELOCITY'} km/s.", "yellow" );
}


if( defined( $RECPARS{'PIXEL_SCALE'} ) ) {
  $Frm->uhdr( "RECPAR_PIXSIZE", $RECPARS{'PIXEL_SCALE'} );
  orac_say( " Setting pixel scale to $RECPARS{'PIXEL_SCALE'} arcseconds per pixel.", "yellow" );
}

if( defined( $RECPARS{'REBIN'} ) ) {
  my $rebin = $RECPARS{'REBIN'};
  if( ref( $rebin ) eq 'ARRAY' ) {
    $rebin = join ",", @$rebin;
  }
  $Frm->uhdr( "RECPAR_REBIN", $rebin );
  orac_say( " Will rebin final cubes to $rebin km/s resolution.", "yellow" );
}

if( defined( $RECPARS{'RESTRICT_LOWER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_RESTRICT_LOWER", $RECPARS{'RESTRICT_LOWER_VELOCITY'} );
  orac_say( " Restricting lower velocity bound to $RECPARS{'RESTRICT_LOWER_VELOCITY'} km/s.", "yellow" );
}

if( defined( $RECPARS{'RESTRICT_UPPER_VELOCITY'} ) ) {
  $Frm->uhdr( "RECPAR_RESTRICT_UPPER", $RECPARS{'RESTRICT_UPPER_VELOCITY'} );
  orac_say( " Restricting upper velocity bound to $RECPARS{'RESTRICT_UPPER_VELOCITY'} km/s.", "yellow" );
}

if( defined( $RECPARS{'SPREAD_METHOD'} ) ) {
  $Frm->uhdr( "RECPAR_SPREAD_METHOD", uc( $RECPARS{'SPREAD_METHOD'} ) );
  orac_say( " Setting MAKECUBE spread method to $RECPARS{'SPREAD_METHOD'}.", "yellow" );
}

if( defined( $RECPARS{'SPREAD_WIDTH'} ) ) {
  $Frm->uhdr( "RECPAR_PARAM1", $RECPARS{'SPREAD_WIDTH'} );
  orac_say( " Setting MAKECUBE spread width to $RECPARS{'SPREAD_WIDTH'} arcseconds.", "yellow" );
}

if( defined( $RECPARS{'SPREAD_FWHM_OR_ZERO'} ) ) {
  $Frm->uhdr( "RECPAR_PARAM2", $RECPARS{'SPREAD_FWHM_OR_ZERO'} );
  orac_say( " Setting MAKECUBE spread FWHM or zero to $RECPARS{'SPREAD_FWHM_OR_ZERO'} arcseconds.", "yellow" );
}

if( scalar keys %RECPARS >= 1 ) {
  orac_say "";
}

