=head1 NAME                                     -*-perl-*-

_GROUP_MOSIAC_ - Examine files within a group - mosaic together those
that need mosaicking.

=head1 DESCRIPTION

If the frame is the last in the group, and there is
more than one frame in the group, mosaic the frames together.

=head1 ARGUMENTS

=over

=item PARAMS = STRING (Given)

An optional array which consists of additional parameters required by
the Sinc, SincSinc, SincCos, SincGauss, Somb, SombCos, and Gauss
spreading methods (see parameter METHOD). See documentation for the
METHOD parameter for WCSMOSAIC. ['']

=item MAXSIZE = INTEGER (Given)

The maximum size, in bytes, of the data array of the output cube. This
value does not include any extra information, such as variance or
weight arrays, FITS headers, or any other NDF extensions. [512000000]

=item METHOD = STRING (Given)

The interpolation method to use when regridding the cube. This can be
any of those allowed by WCSMOSAIC, listed in the METHOD
parameter. ['nearest']

=back

=head1 AUTHOR

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research
Council. All Rights Reserved.

=cut

# Handle parameters.
my $bytes_per_pixel = ( defined( $_COADD_FRAME_TO_GROUP_{'BYTES_PER_PIXEL'} ) ?
                        $_COADD_FRAME_TO_GROUP_{'BYTES_PER_PIXEL'}            :
                        4 );

my $maxsize = ( defined( $_COADD_FRAME_TO_GROUP_{'MAXSIZE'} ) ?
                $_COADD_FRAME_TO_GROUP_{'MAXSIZE'}            :
                512_000_000 );

my $method = ( defined( $_COADD_FRAME_TO_GROUP_{'METHOD'} ) ?
               $_COADD_FRAME_TO_GROUP_{'METHOD'}            :
               'nearest' );

my $wcsmosaic_params = ( defined( $_COADD_FRAME_TO_GROUP_{'PARAMS'} ) ?
                         $_COADD_FRAME_TO_GROUP_{'PARAMS'}            :
                         '' );

#######################
# Check that we are processing the last frame of the group
# and that there are some frames to coadd.

if( $Grp->firstmember( $Frm ) ) {

  # Delete the group file.
  unlink( $Grp->file );

}

if( $Grp->lastmember( $Frm ) ) {
# Process if we're the last member of the Grp.

  orac_print "Creating group file:\n";

  if( $Grp->firstmember( $Frm ) ) {
  # If we're the first member, NDFCOPY the Frm file to the Grp file.

    my $in = $Frm->file;
    my $out = $Grp->file;
    orac_print " Copying $in to $out...";
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out title=!" );
    orac_print "done.\n";

    # Update the Grp object.
    $Grp->file( $out );

    # Set the Grp uhdr SPARSE_CUBE header to whatever the Frm is.
    $Grp->uhdr( "SPARSE_CUBE", $Frm->uhdr( "SPARSE_CUBE" ) );

  } else {

    # WCSMOSAIC the current Frame to the current Group. Variance
    # weighting means that simply coadding them will work right.

    my $infrm = $Frm->file;
    my $ingrp = $Grp->file;

    # Create a temporary file to hold the output of WCSMOSAIC.
    my $tmp = new ORAC::TempFile;
    my $tmpfile = $tmp->file;

    # Create a textfile that will hold all of the files to be
    # WCSMOSAIC'ed.
    my $infile = new ORAC::TempFile( OPEN => 1,
                                     SUFFIX => '.lis' );
    my $tmp_fh = $infile->handle;

    # The order in which the files appear depends on if there are any
    # sparse cubes...
    if( ! $Grp->uhdr( "SPARSE_CUBE" ) ) {
      print $tmp_fh $ingrp . "\n";
      print $tmp_fh $infrm . "\n";
    } elsif( ! $Frm->uhdr( "SPARSE_CUBE" ) ) {
      print $tmp_fh $infrm . "\n";
      print $tmp_fh $ingrp . "\n";
    } else {

      # We need to create a 3x3 reference sky image with a 6-arcsecond
      # pixel scale, then MANIC that into a 3x3xN cube (where N is the
      # number of channels in our Group frame), then attach the
      # SpecFrame from the Group frame to that reference sky cube,
      # then WCSMOSAIC the sparse Group frame onto that, then use that
      # resampled Group frame as the reference in the input file to
      # WCSMOSAIC.

      my $refimg = new ORAC::TempFile;
      my $refimgfile = $refimg->file;

      my $params = "lbound=\[1,1\] ubound=\[3,3\] mode=bl out=$refimgfile title=RefImage";
      $Mon{'kappa_mon'}->obeyw( "creframe", "$params" );

      # Get the WCS from the Group file.

      # Get the coordinates of the reference pixel.
      $params = "ndf=$ingrp mode=get name=skyref";
      $Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "$params" );
      my ( $ORAC_STATUS, $skyref ) = $Mon{'ndfpack_mon'}->get( "wcsattrib", "value" );
      my( $xref, $yref ) = split /,/, $skyref, 2;

      print "xref: $xref yref: $yref\n";

      # Get the coordinate system.
#      $params = "ndf=$ingrp mode=get name=system";
#      $Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "$params" );
#      ( $ORAC_STATUS, my $system ) = $Mon{'ndfpack_mon'}->get( "wcsattrib", "value" );

#      print "system: $system\n";

      # Get the epoch of observation.
      $params = "ndf=$ingrp mode=get name=epoch";
      $Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "$params" );
      ( $ORAC_STATUS, my $epoch ) = $Mon{'ndfpack_mon'}->get( "wcsattrib", "value" );

      print "epoch: $epoch\n";

      # Get the equinox.
      $params = "ndf=$ingrp mode=get name=equinox";
      $Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "$params" );
      ( $ORAC_STATUS, my $equinox ) = $Mon{'ndfpack_mon'}->get( "wcsattrib", "value" );
      if( $equinox eq "2000.0" ) {
        $equinox = "J2000";
      } elsif( $equinox eq "1950.0" ) {
        $equinox = "B1950";
      } else {
        orac_throw "Unsupported equinox $equinox, possible programming error";
      }
      print "equinox: $equinox\n";

      # Create an Astro::Coords object to convert the sexagesimal
      # reference position into radians.
      my $coords = new Astro::Coords( ra => $xref,
                                      dec => $yref,
                                      units => 'sex',
                                      type => $equinox );
      my $x0 = $coords->ra( format => 'rad' );
      my $y0 = $coords->dec( format => 'rad' );

      # Add the Sky frame.
      $params = "coords=EQUATORIAL($equinox) epoch=$epoch refcode=pixel pixelref=\[1.5,1.5\] pixelsize=\['6s','6s'\] orient=0 positions=! projtype=gnom lon=${x0}r lat=${y0}r";
      $Mon{'ndfpack_mon'}->obeyw( "setsky", "ndf=$refimgfile $params" );
    }

    $infile->handle->close;

    # Set up the arguments to WCSMOSAIC for an initial runthrough with
    # no output file so that we can see if we have enough size or
    # not. Currently, if we don't have enough size we just won't
    # bother doing to coadd, but eventually we'll create tiles and do
    # fancy things...
    my $params = "in='^" . $infile->file . "' out=! ref=! ";
    $params   .= "lbnd=! ubnd=! method=$method variance=true";

    if( uc( $method ) ne 'NEAREST' ) {
      $params .= " params=$wcsmosaic_params";
    }

    # Run WCSMOSAIC.
    orac_print " Running initial WCSMOSAIC to test for output group file size...";
    $Mon{'kappa_mon'}->obeyw( "wcsmosaic", "$params" );
    orac_print "done.\n";

    # Retrieve the output cube size from WCSMOSAIC.
    ( my $ORAC_STATUS, my @lbound ) = $Mon{'kappa_mon'}->get( "wcsmosaic", "lbound" );
    ( $ORAC_STATUS, my @ubound ) = $Mon{'kappa_mon'}->get( "wcsmosaic", "ubound" );

    my $x_length = abs( $ubound[0] - $lbound[0] + 1 );
    my $y_length = abs( $ubound[1] - $lbound[1] + 1 );
    my $f_length = abs( $ubound[2] - $lbound[2] + 1 );

    # Set up initial parameters for second WCSMOSAIC runthrough.
    $params  = "in='^" . $infile->file . "' out=$tmpfile ref=! ";
    $params .= " method=$method variance=true";

    if( $x_length * $y_length * $f_length * $bytes_per_pixel > $maxsize ) {

      orac_print " Mosaicking together files to create group cube would result in a file too large for this computer to handle.\n";

      # Calculate the maximum number of available frequency channels.
      my $max_freq_chan = int( $maxsize / ( $x_length * $y_length * $bytes_per_pixel ) );

      my $ratio = $max_freq_chan / $f_length;

      # We need to remove ( 1 - $ratio ) * $f_range / 2 from each end.
      my $upper = int( $ubound[2] - ( 1 - $ratio ) * $f_length / 2 );
      my $lower = int( $lbound[2] + ( 1 - $ratio ) * $f_length / 2 );

      $params .= " lbnd=[$lbound[0],$lbound[1],$lower]";
      $params .= " ubnd=[$ubound[0],$ubound[1],$upper]";

    } else {

      $params .= " lbnd=! ubnd=!";

    }

    # Run WCSMOSAIC for the second time.
    orac_print " Coadding $infrm to $ingrp...";
    $Mon{'kappa_mon'}->obeyw( "wcsmosaic", "$params" );

    # NDFCOPY the output to the group file.
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$tmpfile out=$ingrp" );

    orac_print "done.\n";

    # Update the Grp object.
    $Grp->file( $ingrp );

  }

}

# Tidy up output.
orac_print "\n";
