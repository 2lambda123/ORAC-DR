# -*-cperl-*-

=head1 NAME

_CALCULATE_HYBRID_OVERLAP_ - Calculate size of overlap region for
hybrid-mode observations.

=head1 DESCRIPTION

This primitive calculates the size of the overlap region for two files
in a hybrid-mode observation. It does so by doing a WCSALIGN in-situ,
then finding the upper and lower NDF bounds in the frequency axis for
each file.

=head1 ARGUMENTS

=over 4

=item AXIS = INTEGER (Given)

Which axis is the frequency axis. [1]

=item FILE1 = STRING (Given)

The first filename to check overlap for.

=item FILE2 = STRING (Given)

The second filename to check overlap for.

=item LBOUND = INTEGER (Returned)

The lower bound of the overlap region.

=item UBOUND = INTEGER (Returned)

The upper bound of the overlap region.

=back

=head1 NOTES

=over 4

=item *

Both FILE1 and FILE2 arguments must be passed. If this is not the
case, an error will be thrown.

=back

=head1 OUTPUT DATA

None.

=head1 TASKS

KAPPA: WCSALIGN.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Handle parameters.
my $axis = get_prim_arg( $_PRIM_ARGS_, "AXIS", 1 );
my $file1 = get_prim_arg( $_PRIM_ARGS_, "FILE1", undef );
my $file2 = get_prim_arg( $_PRIM_ARGS_, "FILE2", undef );

if( ! defined( $file1 ) ||
    ! defined( $file2 ) ) {

  orac_throw "Programming error: both FILE1 and FILE2 arguments to _CALCULATE_HYBRID_OVERLAP_ must be defined";
}

# First, do a WCSALIGN in-situ to get the frequency channels on the
# same scale.
my $params = "in='$file1,$file2' insitu lbnd=! ubnd=! ref=! abort";
my $WCSALIGN_STATUS = $Mon{'kappa_mon'}->obeyw( "wcsalign", "$params" );

# About 10% of the time for old GSD data converted to ACSIS format
# WCSALIGN complains about an in-situ bug when there is a small
# displacement from integer pixel shifts between the adjacent
# sub-bands.  It's not clear whether this is coming from the initial
# setup for the observation, or there's a bug in GSD2ACSIS.  The shifts
# are small (few percent error) and SPECX would ignore them.  WCSALIGN
# with in situ restricted to 0.1 pixel error in linearity and shift
# of origin.  For DAS it appears to be a shift of origin.
if ( $WCSALIGN_STATUS == 257327114 ) {

# Emulate the in situ correction by aligning with the nearest neighbour
# and copying back as if nothing had gone wrong.  In effect this
# determines the pixel offset of the second file with respect to the
# first, and shifts the pixel origin of the second file into the same
# pixel co-ordinates.
   my $tempfile1 = new ORAC::TempFile( 0 );
   my $tempfile2 = new ORAC::TempFile( 0 );
   my @tfiles;
   push @tfiles, $tempfile1;
   push @tfiles, $tempfile2;
   my $outlist = write_file_list( @tfiles );
   $params = "in='$file1,$file2' insitu=f lbnd=! ubnd=! ref=! ";
   $params .=  "method=nearest out=^$outlist";
   $Mon{'kappa_mon'}->obeyw( "wcsalign", "$params" );
   $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$tempfile1 out=$file1" );
   $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$tempfile2 out=$file2" );
}

# Now retrieve the NDF bounds.
my @lbounds;
my @ubounds;
_GET_DIMENSIONS_ FILE=$file1
push @lbounds, $_GET_DIMENSIONS_{LBOUND};
push @ubounds, $_GET_DIMENSIONS_{UBOUND};
_GET_DIMENSIONS_ FILE=$file2
push @lbounds, $_GET_DIMENSIONS_{LBOUND};
push @ubounds, $_GET_DIMENSIONS_{UBOUND};

my $perlaxis = $axis - 1;
my ( $low, $high );
if( $ubounds[0]->[0] > $lbounds[0]->[0] ) {
  if( $lbounds[1]->[0] > $lbounds[0]->[0] ) {
    $low = $lbounds[1]->[0];
    $high = $ubounds[0]->[0];
  } else {
    $low = $lbounds[0]->[0];
    $high = $ubounds[1]->[0];
  }
} else {
  if( $ubounds[1]->[0] > $ubounds[0]->[0] ) {
    $low = $ubounds[1]->[0];
    $high = $lbounds[0]->[0];
  } else {
    $low = $ubounds[0]->[0];
    $high = $lbounds[1]->[0];
  }
}

# Set return values.
$_PRIM_ARGS_->{LBOUND} = $low;
$_PRIM_ARGS_->{UBOUND} = $high;
