# -*-perl-*-

=head1 NAME

_CALCULATE_HYBRID_OVERLAP_ - Calculate size of overlap region for
hybrid-mode observations.

=head1 DESCRIPTION

This primitive calculates the size of the overlap region for two files
in a hybrid-mode observation. It does so by doing a WCSALIGN in-situ,
then finding the upper and lower NDF bounds in the frequency axis for
each file.

=head1 ARGUMENTS

=over 4

=item AXIS = INTEGER (Given)

Which axis is the frequency axis. [1]

=item LBOUND = INTEGER (Returned)

The lower bound of the overlap region.

=item UBOUND = INTEGER (Returned)

The upper bound of the overlap region.

=back

=head1 NOTES

=over 4

=item *

This primitive can only handle the case where there are two subbands
in the hybrid-mode observation.

=back

=head1 OUTPUT DATA

None.

=head1 TASKS

KAPPA: WCSALIGN.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Handle parameters.
my $axis = get_prim_arg( $_PRIM_ARGS_, "AXIS", 1 );

if( $Frm->uhdr( "ISHYBRID" ) &&
    $Frm->nfiles == 2 ) {

  # First, do a WCSALIGN in-situ to get the frequency channels on the
  # same scale.
  my $params = "in='" . ( join ",", $Frm->files ) . "' insitu=true lbnd=! ubnd=! ref=!";
  $Mon{'kappa_mon'}->obeyw( "wcsalign", "$params" );

  # Now retrieve the NDF bounds.
  my @lbounds;
  my @ubounds;
  foreach my $file ( $Frm->files ) {
    _GET_DIMENSIONS_ FILE=$file
    push @lbounds, $_GET_DIMENSIONS_{LBOUND};
    push @ubounds, $_GET_DIMENSIONS_{UBOUND};
  }

  my $perlaxis = $axis - 1;
  my ( $low, $high );
  if( $ubounds[0]->[0] > $lbounds[0]->[0] ) {
    if( $lbounds[1]->[0] > $lbounds[0]->[0] ) {
      $low = $lbounds[1]->[0];
      $high = $ubounds[0]->[0];
    } else {
      $low = $lbounds[0]->[0];
      $high = $ubounds[1]->[0];
    }
  } else {
    if( $ubounds[1]->[0] > $ubounds[0]->[0] ) {
      $low = $ubounds[1]->[0];
      $high = $lbounds[0]->[0];
    } else {
      $low = $ubounds[0]->[0];
      $high = $lbounds[1]->[0];
    }
  }

  # Set return values.
  $_PRIM_ARGS_->{LBOUND} = $low;
  $_PRIM_ARGS_->{UBOUND} = $high;

}
