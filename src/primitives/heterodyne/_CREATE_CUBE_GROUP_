# -*-cperl-*-

=head1 NAME

_CREATE_CUBE_GROUP_ -- Create a cube from a group of time-series ACSIS
observations.

=head1 DESCRIPTION

This primitive takes time-series ACSIS cubes from each observation in
the current group and runs MAKECUBE on them to create a
spatial/spectral cube.

=head1 ARGUMENTS

=over 4

=item BYTES_PER_PIXEL = INTEGER (Given)

The number of bytes per pixel. [4]

=item CHUNKSIZE = INTEGER (Given)

The maximum sum of file sizes in megabytes of files to process
simultaneously in MAKECUBE to avoid a timeout.  The choice is
affected by processor speed and memory.  The minimum allowed value
is 100.

This argument can be overridden by the RECPAR_CHUNKSIZE uhdr via the
recipe parameter system.  [5120]

=item MAXSIZE = INTEGER (Given)

The maximum size, in megabytes, of the output cube. This value does not
include extra information such as variance or weight arrays, FITS
headers, or any other NDF extensions.  This argument can be overridden
by the RECPAR_MAXSIZE uhdr via the recipe parameter system.  [512]

=item PARAM1 = REAL (Given)

The first parameter required by the spreading method. This parameter
is required by all methods, and specifies how many arcseconds on
either side of the output position are to receive contributions from
the input pixel. A value of zero indicates that a suitable number
should be calculated automatically.

This argument can be overridden by the RECPAR_PARAM1 uhdr via the
recipe parameter system.  [0]

=item PARAM2 = REAL (Given)

The second parameter required by the spreading method, but only for
SombCos, Gauss, SincSinc, SincCos, and SincGauss schemes. For the
SombCos, SincSinc, and SincCos schemes, it specifies the number of
arcseconds at which the envelope of the function goes to zero. The
minimum value is 1.0 pixels, and the run-time default value is 2.0
pixels.  For the Gauss and SincGauss scheme, it specifies the
full-width at half-maximum (FWHM) of the Gaussian envelope.  The
minimum value is 0.1 pixels, and the run-time default is 1.0
pixels. Note that these numbers are given in pixels and this parameter
takes the number of requested arcseconds. This is done because the
pixel scale could be automatically determined from the data.

This argument can be overridden by the RECPAR_PARAM1 uhdr via the
recipe parameter system.  []


=item PIXSIZE = REAL (Given)

The output pixel scale. If not defined, this value is automatically
determined from the data.

This argument can be overridden by the RECPAR_PIXSIZE uhdr via the
recipe parameter system.  []


=item OVERRIDE = LOGICAL (Given)

Whether or not specific arguments can be overridden by the recipe
parameter system. [1]

=item SPREAD = STRING (Given)

The interpolation method to use when regridding the cube. This can be
any of those allowed by MAKECUBE, listed in the SPREAD
parameter.

This argument can be overridden by the RECPAR_SPREAD_METHOD uhdr via the
recipe parameter.  ['nearest']

=item SYSTEM = STRING (Given)

The celestial coordinate system for the output cube. Can be any one of
ICRS, GAPPT, FK5, FK4, FK4-NO-E, AZEL, GALACTIC, or ECLIPTIC. A
special value of TRACKING can also be given, in which case the system
used will be that used as the tracking system during the
observation.

If this argument is not defined, then the system is determined from
the data and is typically set to 'tracking'. The only case where this
does not apply is if the observation is a scan and the scanning was
done in AZ/EL, in which case the system will be set to 'AZEL'.

This argument can be overridden by the RECPAR_SYSTEM uhdr via the
recipe parameter system. [undef]

=item TAG = BOOLEAN (Given)

Whether or not to tag the resulting cube(s) as 'reduced'. See the
_TAG_AS_REDUCED_PRODUCT_ primtive. [0]

=item TILE = LOGICAL (Given)

Whether or not to break the spectral cubes into tiles.  [1]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS.

=item *

If MAKECUBE cannot create a VARIANCE component, say because of nonsense
Tsys values, the primitive creates one using the noise in the spectra.
It first removes the slowly varying signal, filters noise spikes,
leaving the noise, which is then copied back into the created spectral
cube.

=back

=head1 OUTPUT DATA

=over 4

=item *

A cube (or set of cubes) whose filename is of the form
gaYYYYMMDD_NN_SS_cubeMMM.sdf, where YYYYMMDD is the UT date, NN is the
observation number, SS is the zero-padded subsystem number, and MMM is
the zero-padded tile number. Tiles are numbered starting from 1 and
increasing monotonically, counting from the bottom-left corner in
spatial extent and proceeding in a raster fashion from left to right.

=back

=head1 TASKS

KAPPA: BLOCK, MATHS, NDFCOPY, NDFTRACE, SETVAR, STATS.
SMURF: MAKECUBE.

=head1 REQUIRED PERL MODULES

Math::Trig
File::Copy

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2010-2011, 2013 Science and Technology Facilities Council.
Copyright (C) 2006-2007 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either Version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307, USA.

=cut

use Math::Trig;
use File::Copy;

#  Define the scale factor to determine the pixel size in arcsec given
#  the observed frequency in Ghz.  This assumes a Nyquist sampling of
#  four pixels across the beam and a standard radiation pattern.  The
#  beam size is 1.2 * lambda / D radians, where D is the JCMT aperture of
#  15m.  Thus the factor is 1.2 * c/10**9 * ( 3600*180/pi ) / (4 * 15),
#  where c is the velocity of light in m/s.  The value has more
#  precision than needed, but it shows that the value is floating point.
use constant FREQ2PIXSIZE => 1236.7;
use constant MEGABYTE => 1048576;

# Deal with parameters.
my $system_arg = get_prim_arg( $_PRIM_ARGS_, "SYSTEM", undef );
my $spread = uc( get_prim_arg( $_PRIM_ARGS_, "SPREAD", 'NEAREST' ) );
my $sp_param1 = get_prim_arg( $_PRIM_ARGS_, "PARAM1", 0 );
my $sp_param2 = get_prim_arg( $_PRIM_ARGS_, "PARAM2", undef );
my $ppixsize = get_prim_arg( $_PRIM_ARGS_, "PIXSIZE", undef );
my $tag = get_prim_arg( $_PRIM_ARGS_, "TAG", 0 );
my $maxsize = get_prim_arg( $_PRIM_ARGS_, "MAXSIZE", 512 );
my $bytes_per_pixel = get_prim_arg( $_PRIM_ARGS_, "BYTES_PER_PIXEL", 4 );
my $chunksize = get_prim_arg( $_PRIM_ARGS_, "CHUNKSIZE", 5120 );
my $override = get_prim_arg( $_PRIM_ARGS_, "OVERRIDE", 1 );
my $tile = get_prim_arg( $_PRIM_ARGS_, "TILE", 1 );

# Override various parameters via the recipe parameter system.
if( $override ) {
  $chunksize = ( defined( $Frm->uhdr( "RECPAR_CHUNKSIZE" ) ) ?
                  $Frm->uhdr( "RECPAR_CHUNKSIZE" )            :
                  $chunksize );
  $maxsize = ( defined( $Frm->uhdr( "RECPAR_CUBE_MAXSIZE" ) ) ?
               $Frm->uhdr( "RECPAR_CUBE_MAXSIZE" )            :
               $maxsize );
  $sp_param1 = ( defined( $Frm->uhdr( "RECPAR_PARAM1" ) ) ?
                 $Frm->uhdr( "RECPAR_PARAM1" )            :
                 $sp_param1 );
  $sp_param2 = ( defined( $Frm->uhdr( "RECPAR_PARAM2" ) ) ?
                 $Frm->uhdr( "RECPAR_PARAM2" )            :
                 $sp_param2 );
  $ppixsize = ( defined( $Frm->uhdr( "RECPAR_PIXSIZE" ) ) ?
                $Frm->uhdr( "RECPAR_PIXSIZE" )            :
                $ppixsize );
  $spread = ( defined( $Frm->uhdr( "RECPAR_SPREAD_METHOD" ) ) ?
              $Frm->uhdr( "RECPAR_SPREAD_METHOD" )            :
              $spread );
  $system_arg = ( defined( $Frm->uhdr( "RECPAR_SYSTEM" ) ) ?
                  $Frm->uhdr( "RECPAR_SYSTEM" )            :
                  $system_arg );
  $tile = ( defined( $Frm->uhdr( "RECPAR_TILE" ) ) ?
            $Frm->uhdr( "RECPAR_TILE" )            :
            $tile );
}
$chunksize = max( 100, $chunksize );

# No need to keep the border as MAKECUBE deals with smoothing border
# internally.
my $tileborder = 0;

# Only process if we're on the last member of a group.
if( $Grp->lastallmembers( $Frm ) ) {

  # We don't need to go through with all of this if there's only one
  # member of the group.
  if( $Grp->uhdr( "COPY_FRAME_CUBE" ) ) {

    # Keep the product around so we can set it once we're done.
    my $prod = $Frm->product;

    # Retrieve the tagged frame and copy them into the Group object.
    _RETRIEVE_TAG_ TAG=POST_CREATE_CUBE_FRAME

    # Now copy over each of the Frame files.
    foreach my $i ( 1 .. $Frm->nfiles ) {

      my $in = $Frm->file( $i );
      ( undef, my $out ) = $Grp->inout( "_cube", $i );

      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );

      $Grp->allow_header_sync( 1 );
      $Grp->file( $i, $out );
      $Grp->sync_headers( $i );

      orac_print "$in to $out:\n";
      orac_print " Copied to Group file.\n";

    }

    # Set Frame back to whatever it was before.
    _RETRIEVE_TAG_ TAG=PREVIOUS
    $Frm->product( $prod );
    $Frm->sync_headers;

  } else {

    # Create the command-line parameters for MAKECUBE.
    # ================================================

    # We want to go through each member Frm in the Grp and determine
    # the MAKECUBE parameters individually. Then, we'll take the
    # smallest pixelscale and use that for the output cube.

    my $obstype = $Frm->uhdr( "ORAC_OBSERVATION_TYPE" );
    my %pixsize;
    my %crota;
    my %system;
    my %usedetpos;
    foreach my $Frm ( $Grp->members ) {

      _GET_MAKECUBE_PARAMS_ TYPE=$obstype
      my $mc_params = $_GET_MAKECUBE_PARAMS_{PARAMS};
      my $mc_hash = $_GET_MAKECUBE_PARAMS_{HASH};

      if( lc( $obstype ) ne 'raster' ) {

        # If we're not doing a raster, then we have to run MAKECUBE in
        # autogrid, then determine the pixel scale from the result of
        # that. _GET_MAKECUBE_PARAMS_ returns autogrid=yes for
        # anything that isn't a raster.

        my $inlist = write_file_list ( $Frm->files );

        orac_print "Determining parameters for output cube...";
        $Mon{'smurf_mon'}->obeyw( "makecube", "$mc_params in='^$inlist' out=!" );
        orac_print "done.\n";

        # Get the returned pixsize and crota, but only if this isn't a
        # sparse cube.
        my ( $ORAC_STATUS, $sparse ) = $Mon{'smurf_mon'}->get( "makecube", "sparse" );
        if( uc( $sparse ) eq 'FALSE' ) {
          ( $ORAC_STATUS, my $pixsize ) = $Mon{'smurf_mon'}->get( "makecube", "pixsize" );
          ( $ORAC_STATUS, my $crota ) = $Mon{'smurf_mon'}->get( "makecube", "crota" );

          # Stick these into the hash.
          $pixsize{$Frm->file(1)} = $pixsize;
          $crota{$Frm->file(1)} = $crota;
        }
      } else {
        # Raster parameters come directly from the
        # _GET_MAKECUBE_PARAMS_ primitive results.
        $pixsize{$Frm->file} = ( defined( $ppixsize ) ? $ppixsize : $mc_hash->{pixsize} );
        $crota{$Frm->file} = $mc_hash->{crota};
      }
      $usedetpos{$Frm->file(1)} = defined( $mc_hash->{usedetpos} ) ? $mc_hash->{usedetpos} : 'no';
      $system{$Frm->file(1)} = $mc_hash->{system};
    }

    # Define a variable that'll hold parameters to MAKECUBE.
    my $params = '';

    # We have a hash with a bunch of systems in it. If they're all the
    # same, use that. Otherwise set the system to 'ICRS'.
    my %seen = ();
    my @uniq = grep { ! $seen{$_} ++ } values %system;
    my $system = ( $#uniq == 0 ? $uniq[0] : 'ICRS' );

    $system = ( defined( $system_arg ) ? $system_arg : $system );

    # Ditto with USEDETPOS, but default to 'no'.
    %seen = ();
    @uniq = grep { ! $seen{$_} ++ } values %usedetpos;
    my $usedetpos = ( $#uniq == 0 ? $uniq[0] : 'no' );
    my $tiledims;
    my $sp_params;

    # Check to see if we have any pixel sizes back from the previous
    # MAKECUBE runs. If we don't have any, then all of the resulting
    # cubes will be sparse, so set autogrid=yes and ignore
    # tiling. Otherwise, we want to find the smallest pixel size and
    # go with that.
    if ( scalar values %pixsize == 0 ) {

      orac_warn "Resulting cube will be sparse.\n";
      $Grp->uhdr( "SPARSE", 1 );
      $params = "autogrid system=$system";

    } else {

      $Grp->uhdr( "SPARSE", 0 );

      # Set arbitrary maximum pixel size in arcseconds.
      my $pixsize = 1000;
      if( ! defined( $ppixsize ) ) {
        foreach my $value ( values %pixsize ) {
          $pixsize = ( $value > $pixsize ) ? $pixsize : $value;
        }

        # Check the pixel size. If it's smaller than a quarter of the
        # beamsize, set it to a quarter of the beamsize.
        my $lofreqs = defined( $Frm->hdr( "LOFREQS" ) ) ?
                      $Frm->hdr( "LOFREQS" )            :
                      $Frm->jcmtstate( "FE_LOFREQ" );

        my $min_pixsize = int( FREQ2PIXSIZE / $lofreqs + 0.5 );
        $pixsize = ( $pixsize < $min_pixsize ) ? $min_pixsize : $pixsize;
      } else {
        $pixsize = $ppixsize;
      }

      # We have a hash with a bunch of rotation angles in it. Set the
      # rotation angle to be the average of all of these. Deal with
      # the wrap-around by averaging the sin and cos instead of the angle.
      my $sin_a = 0;
      my $cos_a = 0;

      map { $sin_a += sin( $_ * pi/180.0 ) } values %crota;
      map { $cos_a += cos( $_ * pi/180.0 ) } values %crota;

      $sin_a /= scalar values %crota;
      $cos_a /= scalar values %crota;
      my $crota = sprintf "%6.2f", atan2($sin_a, $cos_a) * 180.0/pi;
      $crota =~ s/^\s+//;
      $crota = 0.00 if ( abs($crota) < 0.2 );

      # However! If we have a user-defined system, set the CROTA to 0.
      if( defined( $system_arg ) ) {
        $crota = 0;
      }

      # Find out how big our tiles are going to be.  Since we do not
      # want the tile dimensions to vary in order to enable tiles from
      # each chunk to be combined, disable the ability to adjust the
      # tile dimensions arbitrarily.  This is achieved by setting the
      # dimension negative.
      if ( $tile ) {
         _GET_TILE_DIMENSIONS_ TILEBORDER=$tileborder MAXSIZE=$maxsize BYTES_PER_PIXEL=$bytes_per_pixel
         $tiledims = -1 * $_GET_TILE_DIMENSIONS_{TILEDIMS};
      }

      # Get the parameter string to send to makecube.
      _GET_SPREAD_PARAMS_ METHOD=$spread PARAM1=$sp_param1 PARAM2=$sp_param2 PIXSIZE=$pixsize
      $sp_params = $_GET_SPREAD_PARAMS_{PARAMSTRING};

      # Set up MAKECUBE parameters.
      if ( $sp_params eq  "''" ) {
         $params  = "pixsize=$pixsize crota=$crota spread=$spread usedetpos=$usedetpos";
      } else {
         $params  = "pixsize=$pixsize crota=$crota spread=$spread params=$sp_params usedetpos=$usedetpos";
      }
      if ( $tile ) {
         $params .= " tiledims=$tiledims system=$system autogrid tileborder=$tileborder trim=n trimtiles";
      } else {
         $params .= " tiledims=! system=$system autogrid trim=n";
      }
    }

    # Always use badmask=and.
    $params .= " badmask=and";

    # Quick hack for hybrid-mode observations.
    if( $Frm->uhdr( "ISHYBRID" ) ) {
      $params .= " specunion";
    }

    # If the data units are Kelvin, then we can generate a variance
    # from TSYS. Otherwise, we can generate a variance from the spread
    # of the input data values contributing to each output pixel.
    $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=" . $Frm->file(1) . " fullframe" );
    my ( $ORAC_STATUS, $units ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "units" );
    if( $units eq 'K' ) {
      $params .= " genvar=tsys inweight";
    } else {
      $params .= " genvar=spread inweight=f";
    }

    # Determine the reference sky co-ordinates and spectral bounds for all the files
    # ==============================================================================

    # Form a list of all the input filenames and determine their total size in
    # megabytes.  Also store the filenames in a GRP list text file.
    my @infiles;
    my $totalsize = 0;
    foreach my $Frm ( $Grp->members ) {
      foreach my $i ( 1 .. $Frm->nfiles ) {
        push @infiles, $Frm->file( $i );
        my $fullname = $Frm->file( $i ) . ".sdf";
        $totalsize += ( -s $fullname ) / MEGABYTE;
      }
    }
    my $inlist = write_file_list( @infiles );

    # Rather than just fill chunks to the maximum, and then possibly
    # have a final chunk much smaller than the rest, creates chunks that
    # are the average chunksize.
    my $num_chunk = int( $totalsize / $chunksize ) + 1;
    my $mean_chunksize = $totalsize / $num_chunk;

    # Do not create the output file, thus this is a quick operation.
    $Mon{'smurf_mon'}->obeyw( "makecube", "$params in='^$inlist' out=!" );

    # The reference co-ordinates are needed so that the same reference
    # position applies to all chunks.
    ( $ORAC_STATUS, my $reflon ) = $Mon{'smurf_mon'}->get( "makecube", "reflon" );
    ( $ORAC_STATUS, my $reflat ) = $Mon{'smurf_mon'}->get( "makecube", "reflat" );
    ( $ORAC_STATUS, my @pixref ) = $Mon{'smurf_mon'}->get( "makecube", "pixref" );
    ( $ORAC_STATUS, my @flbnd ) = $Mon{'smurf_mon'}->get( "makecube", "flbnd" );
    ( $ORAC_STATUS, my @fubnd ) = $Mon{'smurf_mon'}->get( "makecube", "fubnd" );
    ( $ORAC_STATUS, my @lbound ) = $Mon{'smurf_mon'}->get( "makecube", "lbound" );
    ( $ORAC_STATUS, my @ubound ) = $Mon{'smurf_mon'}->get( "makecube", "ubound" );

    # Remove unnecessary precision that only serves to exhaust the
    # number of characters allowed in a command line.
    my $prx = sprintf( "%.3f", $pixref[0] );
    my $pry = sprintf( "%.3f", $pixref[1] );
    my $prlb = sprintf( "%.3f", $flbnd[2] );
    my $prub = sprintf( "%.3f", $fubnd[2] );

    my $specbounds = "'" . $prlb . "," . $prub . "'";
    $params .= " reflon=$reflon reflat=$reflat specunion specbounds=$specbounds";
    $params .= " lbnd=[" . $lbound[0] . "," . $lbound[1] . "]";
    $params .= " ubnd=[" . $ubound[0] . "," . $ubound[1] . "]";

    # Disable autogrid and use previously calculated reference pixel.
    # This is per DSB's advice (20110326) to avoid double counting
    # pixels when chunking and mosaicking.  MAKECUBE sometimes
    # sometimes gives borders one pixel more than would be expected.
    $params .= " refpix1=$prx refpix2=$pry";
    $params =~ s/autogrid /autogrid=n / if ( $totalsize > $chunksize );

    # Obtain the total number of tiles.
    ( $ORAC_STATUS, my $totaltile ) = $Mon{'smurf_mon'}->get( "makecube", "ntile" );

    # Store the parameters for later use, but only if we don't have a
    # sparse cube.
    if ( ! $Frm->uhdr( "SPARSE" ) ) {
       $Grp->uhdr( "MAKECUBE_GROUP_PARAMETERS", $params );
    }

    # Chunking not required
    # =====================

    my ( $in, $out ) = $Grp->inout( "_cube" );
    if ( $totalsize <= $chunksize ) {
      orac_print "Creating cube from " . join( ", ", @infiles ) . "... ";

      $Mon{'smurf_mon'}->obeyw( "makecube", "$params in='^$inlist' out=$out" );

      # Look for and handle missing a VARIANCE component, say from nonsense
      # Tsys values.
      foreach my $j ( 1 .. $totaltile ) {
        my $makecube_outfile = ( $totaltile == 1 ) ? $out : "${out}_$j";
        if ( -e "${makecube_outfile}.sdf" ) {

          $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$makecube_outfile" );
          ( $ORAC_STATUS, my $var ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "variance" );
          if ( uc( $var ) eq 'FALSE' ) {

            # Supply the VARIANCE component based upon the detrended spectra.
            my $smoothed = new ORAC::TempFile( 0 );
            my $flattened = new ORAC::TempFile( 0 );
            my $filtered = new ORAC::TempFile( 0 );

            # Remove most if not all of the trends.  MFITTREND does not do too
            # well for particularly wobbly spectra associated with nonsense Tsys,
            # even a spline fit with plenty of knots.  However, subtracting a
            # broadly smoothed version seems to work moderately well.  This
            # step assumes that there are a good deal more than 51 elements
            # in each spectrum.
            $params = "in=$makecube_outfile out=$smoothed box=[1,1,51]";
            $Mon{'kappa_mon'}->obeyw( "block", "$params" );

            $params = "ia=$makecube_outfile ib=$smoothed out=$flattened ";
            $params .= "exp=abs(ia-ib)";
            $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

            # Reduce the effect of noise spikes and random fluctuations that
            # will give rise to overestimates and underestimates respectively
            # of the errors
            $params = "in=$smoothed out=$filtered box=[1,1,11] estimator=median";
            $Mon{'kappa_mon'}->obeyw( "block", "$params" );

            # Transfer the detrended and filtered data to a new VARIANCE component
            # in the original cube.
            $params = "ndf=$makecube_outfile from=$filtered comp=Data";
            $Mon{'ndfpack_mon'}->obeyw( "setvar", "$params" );
            orac_say( " Creating VARIANCE component in $makecube_outfile" );
          }
        }
      }

      orac_say "done.";

    } else {

      my $fileref = \@infiles;
      _CHUNK_AND_MOSAIC_CUBE_ FILES=$fileref CHUNKSIZE=$chunksize NUM_CHUNK=$num_chunk MEAN_CHUNKSIZE=$mean_chunksize TOTALSIZE=$totalsize TOTALTILE=$totaltile MAKECUBE_PARAMS=$params TILE=$tile
    }
    undef $inlist;

    # Get DATE-OBS and DATE-END from the members of the group. Find the
    # earliest DATE-OBS and the latest DATE-END and stick these into the
    # Grp header.
    my @utstart = sort map { $_->uhdr( "ORAC_UTSTART" ) } $Grp->members;
    my @utend = sort map { $_->uhdr( "ORAC_UTEND" ) } $Grp->members;
    my $dateobs = $utstart[0]->datetime;
    my $dateend = $utend[-1]->datetime;

    # We need to rename the output cube(s), as MAKECUBE creates _N and
    # we want _cubeNNN.
    my @files;
    my $numbad = 0;
    my $outfilenumber = 1;
    if( $totaltile > 1 ) {
      foreach my $j ( 1 .. $totaltile ) {
        my $makecube_outfile = "${out}_$j.sdf";
        my $outfile = sprintf( "$out%03d", $outfilenumber ) . ".sdf";

        if( -e $makecube_outfile ) {

          # Run STATS to find out if this tile is blank or not.
          $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$makecube_outfile" );
          ( my $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
          if( $numgood == 0 ) {
            unlink( $makecube_outfile );
            $numbad++;
            next;
          }

          rename( $makecube_outfile, $outfile ) or die "Could not rename $makecube_outfile to $outfile: $!\n";
          $outfile =~ s/\.sdf$//;

          _SET_FILE_FITS_ITEM_ FILE=$outfile KEY=DATE-OBS VALUE=$dateobs
          _SET_FILE_FITS_ITEM_ FILE=$outfile KEY=DATE-END VALUE=$dateend

          push( @files, $outfile );
          $outfilenumber++;
        }
      }

    # The number of tiles is only one.  MAKECUBE does not append a _1
    # suffix.  Again we still want CUBENNN naming.
    } else {
      my $outfile = "${out}001.sdf";
      rename( $out . ".sdf", $outfile ) or die "Could not rename " . $out . ".sdf to $outfile: $!\n";
      $outfile =~ s/\.sdf$//;

      _SET_FILE_FITS_ITEM_ FILE=$outfile KEY=DATE-OBS VALUE=$dateobs
      _SET_FILE_FITS_ITEM_ FILE=$outfile KEY=DATE-END VALUE=$dateend

      push( @files, $outfile );
    }

    $totaltile -= $numbad;

    orac_print " " . scalar( @files ) . " cube" . ( $totaltile > 1 ? 's' : '' ) . " formed: ";

    $Grp->allow_header_sync( 1 );
    $Grp->product( "cube" );
    $Grp->files( @files );
    my $filestring = join ", ", @files;
    orac_print "$filestring\n";

  }

  # Tag as reduced, if requested.
  if( $tag ) {
    orac_say "";
    _TAG_AS_REDUCED_PRODUCT_ GROUP=1 UPDATE=1 FLAG_QUAL_BAD=1
  }

  $Grp->readhdr;

  $Display->display_data( $Grp ) if defined $Display;

}

# Tidy-up output.
orac_print "\n";
