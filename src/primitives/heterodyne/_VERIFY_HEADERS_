# -*-cperl-*-

=head1 NAME

_VERIFY_HEADERS_ - Verify the existence of some FITS headers.

=head1 DESCRIPTION

This primitive checks to see if FITS headers missing from old data are
in fact missing, and then creates them.

=head1 ARGUMENTS

None.

=head1 NOTES

=over 4

=item *

The OBSIDSS header is formed by joining OBSID and SUBSYSNR with an
underscore, if that header is missing.

=item *

If any of the BASEC1, BASEC2, or TRACKSYS headers are missing, they
will be filled in with values from the JCMTSTATE structure.

=item *

If the BWMODE header is missing then a modern style BWMODE is
guessed based on the IFCHANSP header.

=back

=head1 OUTPUT DATA

None.

=head1 TASKS

None.

=head1 REQUIRED PERL MODULES

Astro::PAL.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 Science and Technology Facilities Council.  All
Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use Astro::PAL qw/ :constants /;

if( ! defined( $Frm->hdr( "OBSIDSS" ) ) &&
    defined( $Frm->hdr( "OBSID" ) ) &&
    defined( $Frm->hdr( "SUBSYSNR" ) ) ) {

  $Frm->hdr( "OBSIDSS", join( "_",
                              $Frm->hdr( "OBSID" ),
                              $Frm->hdr( "SUBSYSNR" ) ) );
}

if( ! defined( $Frm->hdr( "BASEC1" ) ) ) {
  if ($Frm->can("jcmtstate") ) { # PICARD can not
    $Frm->hdr( "BASEC1", $Frm->jcmtstate( "TCS_TR_BC1", 'start' ) * DR2D );
    orac_warn "BASEC1 header not defined in file. Using TCS_TR_BC1 from JCMTSTATE structure. Setting BASEC1 to " . $Frm->hdr( "BASEC1" ) . "\n";
  }
}
if( ! defined( $Frm->hdr( "BASEC2" ) ) ) {
  if ($Frm->can("jcmtstate") ) { # PICARD can not
    $Frm->hdr( "BASEC2", $Frm->jcmtstate( "TCS_TR_BC2", 'start' ) * DR2D );
    orac_warn "BASEC2 header not defined in file. Using TCS_TR_BC2 from JCMTSTATE structure. Setting BASEC2 to " . $Frm->hdr( "BASEC2" ) . "\n";
  }
}
if( ! defined( $Frm->hdr( "TRACKSYS" ) ) ) {
  if ($Frm->can("jcmtstate") ) { # PICARD can not
    $Frm->hdr( "TRACKSYS", $Frm->jcmtstate( "TCS_TR_SYS", 'start' ) );
    orac_warn "TRACKSYS header not defined in file. Using TCS_TR_SYS from JCMTSTATE structure. Setting TRACKSYS to " . $Frm->hdr( "TRACKSYS" ) . "\n";
  }
}

unless (defined $Frm->hdr('BWMODE')) {
  # Note these are currently just the the modern style BWMODE values,
  # regardless of the age of the data file.
  my %bwmodes = (
    976562 => '1000MHzx1024',
    488281 => '1000MHzx2048',
     61035 => '250MHzx4096',
     30517 => '250MHzx8192',
  );

  my $ifchansp = $Frm->hdr('IFCHANSP');

  if (defined $ifchansp) {
    my $bwmode = $bwmodes{abs(int($ifchansp))};

    if (defined $bwmode) {
      $Frm->hdr('BWMODE', $bwmode);
      orac_warn("BWMODE header not defined in file. Using IFCHANSP ($ifchansp) and setting BWMODE to (modern style) value $bwmode\n");
    }
    else {
      orac_warn("BWMODE header not defined and IFCHANSP ($ifchansp) not recognised\n");
    }
  }
  else {
    orac_warn("BWMODE header not defined and neither is IFCHANSP\n");
  }
}


$Frm->sync_headers;
