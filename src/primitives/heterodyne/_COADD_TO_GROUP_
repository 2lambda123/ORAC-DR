# -*-cperl-*-
# Hey emacs, we're Perl!

=head1 NAME

_COADD_TO_GROUP_

=head1 DESCRIPTION

This primitive combines all members of the current Group, by
first aligning them to the first member, where each output NDF
just encompasses the corresponding input NDF.  Otherwise it uses
the current parameter values for WCSALIGN.  Then the primitive
coadds and averages then aligned cubes.

=head1 ARGUMENTS

None

=head1 NOTES

=over 4

=item *

This primitive is suitable for heterodyne observations.

=back

=head1 OUTPUT DATA

=over 4

=item *

The aligned spectral cubes with suffix C<_align>.

=item *

The Group file contains the mean of the aligned spectral cubes.

=back

=head1 TASKS

KAPPA: MATHS, NDFCOPY, WCSALIGN.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2004 Particle Physics and Astronomy Research Council.

Copyright (C) 2018 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Get a list of all the files in the Group.
my @members = $Grp->members;

if ( scalar( @members ) > 1 ) {

  # Create a list of input and output images.
  my $inputlist = "inlist.list$$";
  my $outputlist = "outlist.list$$";
  unlink( $inputlist, $outputlist );

  open( my $fh_inlist, ">$inputlist" ) ||
    orac_throw "Unable to open $inputlist to create a list of spectra to align. Error: $!\n";
  open( my $fh_outlist, ">$outputlist" ) ||
    orac_throw "Unable to open $outputlist to create a list of spectra to align. Error: $!\n";

  # Write filenames to the two lists and create the parameter list for
  # subsequent coaddition.
  my $maths_list = '';
  my $maths_eq = 'exp=\'(';
  my $maths_index = "a";
  foreach my $member (@members) {

    my $infile = $member->file;
    my $outfile;
    ( $outfile = $infile ) =~ s/_([a-zA-Z]+)$/_align/;

    print $fh_inlist $infile, "\n";
    print $fh_outlist $outfile, "\n";

    orac_print "$infile to $outfile: Aligning spectrum.\n";

    $maths_list .= "i" . $maths_index . "=$outfile ";
    $maths_eq .= "i" . $maths_index . "+";
    $maths_index = chr( ord($maths_index) + 1 );

  }

  # Close the filehandles.
  close( $fh_inlist );
  close( $fh_outlist );

  # Set up the parameters for WCSALIGN.
  my $param1 = "in='^$inputlist' out='^$outputlist' lbnd=! accept";

  # Do the align.
  $Mon{'kappa_mon'}->obeyw( "wcsalign", "$param1" );

  # Remove the file lists.
  unlink( $inputlist, $outputlist );

  # Now average together the output files.
  my $out = $Grp->file;
  $maths_eq =~ s/\+$/)/;
  $maths_eq .= "/" . scalar( @members ) . "'";
  $Mon{'kappa_mon'}->obeyw( "maths", "$maths_eq $maths_list out=$out" );

  # Report.
  orac_print( "Group members averaged to form $out.\n" );

} else {

  # Simply copy the one file into the group file.
  my $in = $Frm->file;
  my $out = $Grp->file;
  $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$in out=$out" );

  # Report.
  orac_print( "$in copied to form $out.\n" );

}

# Tidy up output.
orac_print "\n";
