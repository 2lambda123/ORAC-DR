# -*-perl-*-

=head1 NAME

_CREATE_CHANNEL_MAP_

=head1 DESCRIPTION

This primitive creates a channel map from a cube.

=head1 ARGUMENTS

=over 4

=item AXIS = INTEGER (Given)

The axis along which to collapse the NDF. [3]

=item ESTIMATOR = STRING (Given)

The method to use for estimating the output pixel values when
collapsing to form the individual channels. This can be any of those
allowed for the ESTIMATOR parameter for the KAPPA/CHANMAP
method. ['INTEG']

=item GROUP = LOGICAL (Given)

Whether or not to use the Group object to create the channel map
from. [0]

=item NCHAN = INTEGER (Given)

The number of channels to appear in the channel map. [16]

=item SHAPE = INTEGER (Given)

The number of channels along the x axis of the output NDF. [4]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for true 3-D data. This primitive will not
create a channel map from data that are functionally 3-D but only have
one pixel in any of the three dimensions.

=back

=head1 OUTPUT DATA

=over 4

The channel map image with _chan suffix.

=back

=head1 TASKS

KAPPA: CHANMAP.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Handle parameters.
my $axis = ( defined( $_CREATE_CHANNEL_MAP_{AXIS} ) ?
             $_CREATE_CHANNEL_MAP_{AXIS} :
             3 );
my $estimator = ( defined( $_CREATE_CHANNEL_MAP_{ESTIMATOR} ) ?
                  $_CREATE_CHANNEL_MAP_{ESTIMATOR} :
                  'INTEG' );
my $group = ( defined( $_CREATE_CHANNEL_MAP_{GROUP} ) ?
              $_CREATE_CHANNEL_MAP_{GROUP} :
              0 );
my $nchan = ( defined( $_CREATE_CHANNEL_MAP_{NCHAN} ) ?
              $_CREATE_CHANNEL_MAP_{NCHAN} :
              16 );
my $shape = ( defined( $_CREATE_CHANNEL_MAP_{SHAPE} ) ?
              $_CREATE_CHANNEL_MAP_{SHAPE} :
              4 );

# Figure out which object we're dealing with, the Frame or the Group,
# and set up the input and output filenames correspondingly.
my $Obj;
my $in;
my $out;
if( $group ) {
  $Obj = $Grp;
  $in = $Grp->file;
  $out = $Grp->file . "_chan";
} else {
  $Obj = $Frm;
  ( $in, $out ) = $Frm->inout( "_chan" );
}

# Only create a channel map if we're on the last member of the Group
# (if in Group mode), or the current Frame (if not in Group mode).
if( $group && $Grp->lastallmembers( $Frm ) ||
    ! $group ) {

  # Check the dimensionality.
  _GET_DIMENSIONS_
  my $dims = $_GET_DIMENSIONS_{DIMS};

  my $degen = 0;
  foreach ( @$dims ) {
    $degen = ( $_ == 1 );
    last if $degen;
  }

  # Only run CHANMAP if we don't have a degenerate cube.
  if( ! $degen ) {

    # Set up the parameters to CHANMAP.
    my $params = "in=$in out=$out estimator=$estimator axis=$axis nchan=$nchan shape=$shape";

    # Run CHANMAP.
    $Mon{'kappa_mon'}->obeyw( "chanmap", "$params" );

    # Report to user.
    orac_print "$in to $out:\n";
    orac_print " Created $nchan-channel channel map.\n";

    # Check the stats. Do not display if there are no good pixels.
    $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$out" );
    ( my $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
    if( $numgood > 0 ) {

      # Display, if necessary. Temporarily update the Object with the
      # output file so that the display system works.
      $Obj->file( $out );
      $Display->display_data( $Obj ) if defined $Display;
      $Obj->file( $in );
    }

    # Tidy-up output.
    orac_print "\n";

  }
}
