=head1 NAME

_MASK_BAD_BASELINE_LINEARITY_

=head1 DESCRIPTION

This primitive identifies bad detectors by comparing the deviation from
linearity of each detector's baseline.

It first creates a mean spectrum for each detector by collapsing the
time axis using a 2-sigma-clipped-mean estimator from all the subfiles
in the observation.  Then it filters the mean spectra:
  - thresholding to +/-20 to exclude strong spikes;
  - masking a central region where the astronomical line may be present
    (see LINEWIDTH argument); and
  - determines the background level, effectively smoothing to remove
    structure smaller than a nominated scale (see SCALELENGTH argument).

The script then fits linear baselines to the smoothed spectra and
calculates the rms residuals.  From these it determines a mean rms
residual per detector for the central 85%.  This trimming excludes the
ends of the spectra that are known to be unreliable and exhibit random
large variations that would swamp the non-linearity signal the
primitive is attempting to detect.  The mean rms residual per detector
is printed.

The primitive then evaluates the median and standard deviation of the
distribution of mean rms residuals from the entire observation, and
performs iterative sigma clipping above the median to reject those
detectors whose deviations from linearity are anomalous.

The rejected receptors are then marked bad in the output cube, and
recorded in the bad_receptors_qa calibration.

=head1 ARGUMENTS

=over 4

=item CLIP = STRING (Given)

The maximum number of standard deviations above the median rms
deviations for which a detector's non-linearity is regarded as
acceptable.  The minimum allowed is 2.  A comma-separated list will
perform iterative sigma clipping of outliers, but standard deviations
in the list should not decrease.  This argument can be overridden by
the RECPAR_BASELINE_LINEARITY_CLIP uhdr via the recipe parameter
system.  ["2.0,2.3,3.0"]

=item LINEWIDTH = REAL (Given)

The extent of the source spectral line measured in km/s.  This may be
given as either a velocity range, the bounds being separated by a
colon; or as a single value being the width about zero.  For instance
"-20:50" would excise the region -20 to +50 km/s, and "30" would
exclude the -15 to +15 km/s range.  This argument can be overridden by
the RECPAR_BASELINE_LINEARITY_LINEWIDTH uhdr via the recipe parameter
system.  ["25.0"]

=item MASK = LOGICAL (Given)

Whether or not to mask bad detectors.  Masking is needed if a
subsequent bad-baseline removal technique is employed.  [1]

=item MINRMS = REAL (Given)

The minimum rms deviation from linearity for a receptor to be flagged
as bad.  It avoids rejection of good receptors where one or two are
slighlty more uneven than most or just have some transient baseline
issues.  This argument sets an absolute limit, not just rejection
based upon an intercomparison.  Values between 0.05 and 0.2 are normal.
Most good receptors will be in 0.02 to 0.05 range.  [0.1]

=item SCALELENGTH = INTEGER (Given)

The smoothing scale length in pixels.  Features narrower than this are
filtered out during the background-level determination.  It should be
should be odd (if an even value is supplied, the next higher odd value
will be used) and sufficiently large to remove the noise while not
removing the low-frequency patterns in the spectra. The minimum
allowed is 51.  This argument can be overridden by the
RECPAR_BASELINE_LINEARITY_SCALELENGTH uhdr via the recipe parameter
system.  [101]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS timeseries data.

=item *

This primitive is suitable for spectral-line observations.

=item *

This primitive will not run if the BASELINE_LINEARITY recipe parameter
is set false (0).

=item *

The 85% trimming of the spectra is the same trim applied in the
QA primitives.

=back

=head1 OUTPUT DATA

=over 4

=item *

A cleaned version of the supplied time-series cube in which the noisy
detectors are set to bad.  It has the suffix _bllmasked (for
BaseLine Linearity).

=back

=head1 TASKS

CUPID: FINDBACK;
KAPPA: ADD, ARDMASK, CDIV, CHPIX, CMULT, COLLAPSE, MATHS, MFITTREND,
       NDFCOPY, STATS, THRESH.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array, Statistics::Descriptive.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2012 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use JCMT::ACSIS::Array;
use Statistics::Descriptive;

# Inquire whether or not  non-linear baseline filtering is required.
my $apply = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY" ) ) ?
            $Frm->uhdr( "RECPAR_BASELINE_LINEARITY" )              :
            1 );
if ( ! $apply ) { goto RETURN }

# Handle arguments.
# =================

my $linear_clip = get_prim_arg( $_PRIM_ARGS_, "CLIP", "2.0,2.3,3.0" );
my $mask = get_prim_arg( $_PRIM_ARGS_, "MASK", 1 );
my $central_mask = get_prim_arg( $_PRIM_ARGS_, "LINEWIDTH", "25.0" );
my $smooth_scale = get_prim_arg( $_PRIM_ARGS_, "SCALELENGTH", 101 );
my $min_rms = get_prim_arg( $_PRIM_ARGS_, "MINRMS", 0.1 );

# Handle recipe parameter overrides.

# Generate a comma-separated list if this has been turned into a stringified
# ARRAY reference.
$linear_clip = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_CLIP" ) ) ?
               $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_CLIP" )              :
               $linear_clip );
if ( ref( $linear_clip ) eq 'ARRAY' ) { $linear_clip = join( ",", @{ $linear_clip } ) };

$central_mask = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_LINEWIDTH" ) ) ?
                $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_LINEWIDTH" )         :
                $central_mask );

$smooth_scale = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_SCALELENGTH" ) ) ?
                $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_SCALELENGTH" )       :
                $smooth_scale );

$min_rms = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_MINRMS" ) ) ?
             $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_MINRMS" )       :
             $min_rms );

# Convert list of standard-deviation clip levels to an array.
my @clips = split( ',', $linear_clip );

# Constrain parameters to allowed values.
# ---------------------------------------

# Ensure that a round number like the default of 25 km/s is interpreted
# by the NDF section as a velocity not pixels by giving it a decimal
# place.
my @cbounds = split( /:/, $central_mask );
my @central_bounds;
foreach ( @cbounds ) {
   if ( /^[+-]?\d+$/ ) { $_ = sprintf( "%.1f", $_ ) }
   push @central_bounds, $_;
}

# A single value means use this width symmetric about zero.
if ( scalar( @central_bounds ) == 1 ) {
   $central_bounds[1] = 0.5 * $central_bounds[0];
   $central_bounds[0] = - $central_bounds[1];
}

$smooth_scale = max( 51, $smooth_scale );

# Sigma clipping levels should not decrease. Do not set the initial
# threshold too low lest we exclude acceptable but slightly deviant
# detectors in an otherwise good set.
my @clip_sigma = ();
my $last = 2.0;
foreach ( @clips ) {
   push @clip_sigma, max( $last, $_ );
}

# Specify output and temporary filenames.
# =======================================
my $params;
my @bad_receptors;

# Store the name of the first file in the list for the index.qa file.
my $osuffix = "_bllmasked";
my ( $first_file_in, $first_file_out)  = $Frm->inout( $osuffix, 1 );

# Form the time-collapsed profile.
# ================================

# The profile for the whole observation, not just chunks is needed.
# otherwise some transient bad baselines in a chunk, especially in
# the last can look relatively worse, and hence the whole receptor
# is incorrectly removed.  Instead those should be left for
# _FLAG_LOWFREQ_INTERFERENCE_SPECTRA_ to filter.
my $sum_over_time = new ORAC::TempFile( 0 );
my $mean_over_time = new ORAC::TempFile( 0 );
my $no_times = 0;

foreach my $i ( 1 .. $Frm->nfiles ) {
   my $in = $Frm->file( $i );

# Set/get filenames.
   orac_say( "Perform bad-baseline detection comparing trend with linear fit for $in." );

   my $temp1file = new ORAC::TempFile( 0 );
   my $temp2file = new ORAC::TempFile( 0 );
   my $temp3file = new ORAC::TempFile( 0 );

   _GET_DIMENSIONS_ FILE=$in
   my $dims = $_GET_DIMENSIONS_{DIMS};
   my $norm = $dims->[2];
   $no_times += $norm;

# Collapse time axis using a clipped mean to form average spectrum for
# each detector.  Although would like to use variance weighting, the
# covariance matrix becomes huge.
   orac_say( " Collapsing time-series cube..." );
   $params = "in=$in out=$temp1file estimator=Cmean clip=2.0";
   $params .= " axis=time trim wlim=0.0 variance=false";
   $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# Form weighted sum of the profiles.
   $Mon{'kappa_mon'}->obeyw( "cmult", "in=$temp1file scalar=$norm out=$temp2file" );

   if ( $i == 1 ) {
      $params = "in=$temp2file out=$sum_over_time";
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

   } else {
      $params = "in1=$sum_over_time in2=$temp2file out=$temp3file";
      $Mon{'kappa_mon'}->obeyw( "add", "$params" );

      $params = "in=$temp3file out=$sum_over_time";
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
   }
}

# Now we have the weighted mean spectra by receptor.
$Mon{'kappa_mon'}->obeyw( "cdiv", "in=$sum_over_time scalar=$no_times out=$mean_over_time" );

# Form arrays of bad detectors.
# =============================

# The master index is far too underpopulated and can lead to picking an
# entry that is months before or after the date of the observation being
# processed.  Valid receptors can then be rejected and bad ones included.
# Enter a null (H14) entry in $ORAC_DATA_CAL/index.bad_receptors if
# a night has no bad receptors.  Another possibility is make this
# selection a recipe parameter, so could select by "INDEX" and rely on
# the current data.
$Cal->bad_receptors( "MASTER" );
my @baddets = $Cal->bad_receptors_list;
orac_say( " Receptors disabled by the calibration system: " . join( ",", sort @baddets ) );

# Still need to invoke the bad_receptors_list method although the
# resulting array is not used.
$Cal->bad_receptors( "INDEXORMASTER" );
my @tmpdets = $Cal->bad_receptors_list;
orac_say( " Receptors indexed by the calibration system: " . join( ",", sort @tmpdets ) );

# Form residuals from linear baseline.
# =====================================

my @bad_receptors_local;

_GET_DIMENSIONS_ FILE=$mean_over_time
my $dims = $_GET_DIMENSIONS_{DIMS};

my $temp4file = new ORAC::TempFile( 0 );
my $temp5file = new ORAC::TempFile( 0 );
my $temp6file = new ORAC::TempFile( 0 );
my $temp7file = new ORAC::TempFile( 0 );
my $temp8file = new ORAC::TempFile( 0 );

# Apply threshold to exclude spikes in the spectra.
my $semirange = 20;
orac_say( "  Thresholding the spectra at +/- $semirange to exclude spikes." );
$Mon{'kappa_mon'}->obeyw( "stats", "ndf=$mean_over_time order" );
my ( $ORAC_STATUS, $median) = $Mon{'kappa_mon'}->get( "stats", "median" );
my $thr_low = sprintf( "%.1f", $median - $semirange );
my $thr_high = sprintf( "%.1f", $median + $semirange );

$params = "in=$mean_over_time out=$temp4file thrlo=$thr_low newlo=bad thrhi=$thr_high newhi=bad";
$Mon{'kappa_mon'}->obeyw( "thresh", "$params" );

# Mask out the central region to exclude narrow astronomical line, but
# even that has wings.  Allow for variable spectral range by using a
# velocity range.
orac_say( "  Masking the velocity range $central_bounds[0] to $central_bounds[1] km/s to exclude astronomical lines." );
my $chpix_section = "$central_bounds[0]:$central_bounds[1],,";
$params = "in=$temp4file out=$temp5file section='$chpix_section' newval=bad";
$Mon{'kappa_mon'}->obeyw( "chpix", "$params" );

# Find the trends in the background of each receptor.  This step prevents the
# rms from a baseline fit being swamped by the noise.  The goal is to find
# whether the linear fit is a good match to global shape of the baseline.  This
# aims to identify ripples or turned-up ends of the spectra.  Note that FINDBACK
# Parameter BOX should only supply elements up to the number of significant
# dimensions.
orac_say( " Determine the smooth trends of the spectra using a filter width of $smooth_scale pixels." );
my $boxparam = "[$smooth_scale,1]";
if ( $dims->[1] == 1 ) { $boxparam = "$smooth_scale" }
$params = "in=$temp5file out=$temp6file box=$boxparam sub=false accept";
$Mon{'cupid_mon'}->obeyw( "findback", "$params" );

# Subtract linear baselines from smoothed spectrum for each detector.
orac_say( " Fit linear baselines and subtract these from the trends." );
$params = "in=$temp6file out=$temp7file modifyin=false subtract auto";
$params .= " order=1 axis=spec method=single";
$Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

# Get average rms deviations for each receptor not in the bad_receptors list.
# ===========================================================================

my %receptor_stats;
my %receptor_rms;
my $array_stats = new Statistics::Descriptive::Sparse;
my $array = new JCMT::ACSIS::Array( File => $temp7file );

# Form set of receptors that are not bad in the master list.
my %keep;
@keep{ $array->receptors } = ( );
delete @keep{ @baddets };
my @receptors = keys %keep;

foreach my $receptor ( @receptors ) {
   my $pixel = $array->pixel( $receptor );
   $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp7file(,$pixel)" );
   my ( $ORAC_STATUS, $nel ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

# Calculate rms from the linear fit for the current receptor.  Exclude
# the ends of each spectrum where the noise increases dramatically,
# and could swamping the signal being measured.
   if ( $nel > 0 ) {
      $params = "ia=$temp7file(,$pixel) out=$temp8file exp='IA*IA/$nel'";
      $Mon{'kappa_mon'}->obeyw( "maths", "$params" );
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp8file(~85%,)" );
      ( $ORAC_STATUS, my $ms ) = $Mon{'kappa_mon'}->get( "stats", "total" );
      my $rms = sqrt( $ms );

      if ( ! defined( $receptor_stats{$receptor} ) ) {
         $receptor_stats{$receptor} = new Statistics::Descriptive::Sparse;
      }

      if ( $rms > 0 ) {
         $receptor_stats{$receptor}->add_data( $rms );
      }
   }
}

foreach my $receptor ( keys %receptor_stats ) {
   if ( $receptor_stats{$receptor}->count != 0 ) {
      $receptor_rms{$receptor} = $receptor_stats{$receptor}->mean();
   } else {
      $receptor_rms{$receptor} = 'bad';
   }
}

my $type = "RMS from linear baseline";
_PRETTYPRINT_RECEPTOR_QA_ HASH=\%receptor_rms TYPE=$type

# Identify receptors with outlying deviations from linearity.
# ===========================================================

# Measure the median and standard deviation of the residuals from the
# linear trend across the detectors.
my @values;
my $sigma;
my $loop = 1;
my $i = 0;

while ( $i <= $#clip_sigma && $loop ) {
   my $stat = Statistics::Descriptive::Full->new();

# Assume no rejection.
   $loop = 0;

# Extract the rms values from the hash.
   while ( my ($k,$v) = each %receptor_rms ) {
      if ( $v ne "bad" ) { push @values, $v }
   }

# Remove the flagged values before adding the values to the statistics
# object.
   $stat->add_data( @values );

   if ( $stat->count != 0 ) {
      $sigma = $stat->standard_deviation();
      $median = $stat->median();
   }

# Flag those detectors whose rms deviation from the linear trend exceeds
# median plus the current sigma-clipping level.  This may cut too much
# if all the baselines are excellent, but one is a little worse yet
# otherwise fine.  Thus impose an absolute cutoff.
   my $threshold = max( $min_rms, $median + $clip_sigma[$i] * $sigma );
   orac_say( " Turning off detectors with spectral rms from the trend above " . sprintf( "%.3f", $threshold ) );
   orac_say( " corresponding to the median plus $clip_sigma[$i] standard deviations." );

# This would be cleaner if there were a remove_data method in
# Statistics::Descriptive::Full.
   while ( my ($k,$v) = each %receptor_rms ) {
      if ( $v ne 'bad' ) {
         if ( $v > $threshold ) {
            push @bad_receptors_local, $k;
            $receptor_rms{$k} = 'bad';

# Continue iteratively clipping as a detector has been flagged for
# removal.
            $loop = 1;
         }
      }
   }
   $i++;
   undef $stat;
   undef @values;
}

my $in = $Frm->file( 1 );
@bad_receptors_local = sort( @bad_receptors_local );
orac_say( " List of bad receptors for file $in: " .
          join( ",", @bad_receptors_local ) );
orac_print "\n";

# Add the bad receptors for this frame to the master list.
foreach my $receptor ( @bad_receptors_local ) { push ( @bad_receptors, $receptor ) }

# Make sure each bad detector is mentioned only once.
my %seen = ();
my @bad_receptors_uniq = ();

foreach my $item ( @bad_receptors ) {
   push( @bad_receptors_uniq, $item ) unless $seen{$item}++;
}

# Create masked cube.
# ===================

if ( $mask && scalar( @bad_receptors_uniq ) > 0 ) {
   foreach my $i ( 1 .. $Frm->nfiles ) {
      my ( $in, $out ) = $Frm->inout( $osuffix, $i );

# Retrieve pixel bounds.
      _GET_DIMENSIONS_ FILE=$in
      my $lbound = $_GET_DIMENSIONS_{LBOUND};
      my $ubound = $_GET_DIMENSIONS_{UBOUND};

# Create the ARDMASK for the given receptors and file.
      my $array = new JCMT::ACSIS::Array( File => $in );
      my @pixels = $array->pixel( @bad_receptors_uniq );

      open my $ardmask_fh, ">", "ardmask$$.dat" or orac_term "Could not open ARDMASK input file ardmask$$.dat: $!\n";
      print $ardmask_fh "DIMENSION(3)\n";

      foreach my $pixel ( @pixels ) {
         my $str = "RECT(" . ( join ",", $lbound->[0] - 1,
                                         $pixel - 1,
                                         $lbound->[2] - 1,
                                         $ubound->[0],
                                         $pixel,
                                         $ubound->[2]
                             ) . ")\n";
         print $ardmask_fh $str;
      }
      close $ardmask_fh;

# Mask the regions.
      $Mon{'kappa_mon'}->obeyw( "ardmask", "in=$in ardfile=ardmask$$.dat out=$out" );
      unlink( "ardmask$$.dat" );

# Provide commentary.
      orac_say "$in to $out:";
      orac_say " Masked receptor" . ( scalar( @pixels ) > 1 ? "s" : "" ) . " " . ( join ",", sort @bad_receptors_uniq ) . ".";

# Set the product.
      $Frm->product( "Non-linear baseline masked" );

# Update the Frm object.
      $Frm->file( $i, $out );

# Display if necessary.
      $Display->display_data( $Frm ) if defined $Display;
   }
}

# Update the bad-receptor calibration.
# ====================================

my $lofreq = $Frm->hdr( "LOFREQS" );
my $survey_br = defined( $Frm->uhdr( "SURVEY_BR" ) ) ? $Frm->uhdr( "SURVEY_BR" ) : 'Telescope';

# Sort out bad receptors.  They'll be added to the calibration system
# for either the specific survey or for everything, and only for the
# current LOFREQ +/- 1 GHz.
if ( scalar( @bad_receptors ) > 0 ) {
   my %recep_hash = ( %{$Frm->hdr },
                      LOFREQ_MAX => $lofreq + 1,
                      LOFREQ_MIN => $lofreq - 1,
                      DETECTORS => ( join ',',@bad_receptors_uniq ),
                      SURVEY_BR => $survey_br,
                    );

   orac_say( " Masking receptor(s) " .
             join( ",", sort @bad_receptors_uniq ) . " for survey $survey_br." );

   $Cal->bad_receptors_qa_index->add( $first_file_in, \%recep_hash );

}

# Tidy-up output.
orac_print "\n";

RETURN:
