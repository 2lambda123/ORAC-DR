# -*-perl-*-

=head1 NAME

_REMOVE_BASELINE_

=head1 DESCRIPTION

This primitive removes the baseline from each spectrum in a cube,
using spectral windows that are assumed to be free of spectral lines.

=head1 ARGUMENTS

=over 4

=item EDGES = REAL (Given)

Percentage of the full range to fit on either edge of the spectrum. [0]

=item GROUP = LOGICAL (Given)

Whether or not to operate on the current Group object. [0]

=item ORDER = INTEGER (Given)

The order of the fit to use for the baseline. Zero (the default) is a
constant, one is linear, etc. [0]

=item METHOD = STRING (Given)

The method used to define the baseline regions in automatic mode. The
allowed values are 'region', 'single', and 'global'. This is not used
if the EDGES argument is defined. ['region']

=item TAG = LOGICAL (Given)

Whether or not to tag the resulting cubes as 'reduced'. [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS observations.

=item *

This primitive is suitable for spectral line observations. Removing
the baseline from continuum observations may not be desirable.

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

KAPPA: MFITTREND, NDFTRACE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research Council.
Copyright (C) 2008 Science and Technology Facilities Council.
All Rights Reserved.

=cut

# Deal with arguments.
my $edges = get_prim_arg( $_PRIM_ARGS_, "EDGES", 0 );
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $method = uc( get_prim_arg( $_PRIM_ARGS_, "METHOD", "REGION" ) );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 0 );
my $tag = get_prim_arg( $_PRIM_ARGS_, "TAG", 0 );

# Handle group/file.
my $Obj;
if( $group ) {
  $Obj = $Grp;
} else {
  $Obj = $Frm;
}

# Create an array to hold the baselined regions for each individual
# file.
my @bl_regions;

if( ! $group ||
    $group && $Grp->lastmember( $Frm ) ) {

  if( $group == 1 && $Grp->uhdr( "COPY_FRAME_CUBE" ) ) {

    # Retrieve the baselined Frame.
    _RETRIEVE_TAG_ TAG=BASELINED_FRAME

    foreach my $i ( 1 .. $Frm->nfiles ) {
      my $in = $Frm->file( $i );
      ( undef, my $out ) = $Grp->inout( "_bl", $i );
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );
      orac_say "$in to $out:";
      orac_say " Copied to Group file.";

      $Grp->allow_header_sync( 1 );
      $Grp->file( $i, $out );
      $Grp->sync_headers( $i );
    }

    if( $tag ) {
      _TAG_AS_REDUCED_PRODUCT_ UPDATE=1 GROUP=1
    }

    # Reset the tag.
    _RETRIEVE_TAG_ TAG=PREVIOUS

  } else {

    my @baseline_masks;

    foreach my $i ( 1 .. $Obj->nfiles ) {

      my ( $in, $out ) = $Obj->inout( "_bl", $i );
      ( undef, my $mask ) = $Obj->inout( "_blmask", $i );

      $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
      ( my $ORAC_STATUS, my @lbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "lbound" );
      ( $ORAC_STATUS, my @ubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "ubound" );
      ( $ORAC_STATUS, my @flbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "flbnd" );
      ( $ORAC_STATUS, my @fubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fubnd" );
      my $section = "'$lbnd[0]:$ubnd[0],$lbnd[1]:$ubnd[1],'";

      # Set up parameters for MFITTREND.
      my $params = "in=$in out=$out modifyin=false subtract=true";
      $params   .= " order=$order axis=3 section=$section method=$method";

      # If we're in 'SINGLE' method, we can get masks out.
      if( $method eq 'SINGLE' ) {
        $params .= " mask=$mask";
      }

      # Add ranges parameter, if necessary.
      if( $edges ) {
        my $extent = $fubnd[2] - $flbnd[2] + 1;
        my $low1 = int( $flbnd[2] );
        my $high1 = int( $flbnd[2] + ( $extent * $edges / 100 ) );
        my $low2 = int( $fubnd[2] - ( $extent * $edges / 100 ) );
        my $high2 = int( $fubnd[2] );
        $params .= " ranges='$low1,$high1,$low2,$high2' auto=false";
      } else {
        $params .= " auto=true";
      }

      # Run MFITTREND.
      $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

      # Report to user.
      orac_print "$in to $out:\n";
      orac_print " Removed baseline using $order-order polynomial.\n";

      if( $method eq 'REGION' && ! $edges ) {
        ( $ORAC_STATUS, my @regions ) = $Mon{'kappa_mon'}->get( "mfittrend", "aranges" );
        push( @bl_regions, \@regions );
        orac_print " Baseline regions: [";
        orac_print join ",", ( grep { defined } map { $_ % 2 ? undef : join ":", $regions[$_], $regions[$_+1] } 0..$#regions );
        orac_print "]\n";

      }

      # Update the product.
      $Obj->product( "bl" );

      # Update Frame object;
      $Obj->file( $i, $out );

      # Store the mask, if in 'SINGLE' method.
      if( $method eq 'SINGLE' ) {
        $baseline_masks[$i] = $mask;
        orac_say " $mask: baseline region mask created.";
      }

    }

    # Put the baselined regions in the Frame's user header.
    if( $method eq 'REGION' ) {
      $Obj->uhdr( "BASELINE_REGIONS", \@bl_regions );
    }

    # Store the baseline mask names, if we're in 'SINGLE' method.
    if( $method eq 'SINGLE' ) {
      $Obj->uhdr( "BASELINE_MASKS", \@baseline_masks );
    }

    # Display.
    $Display->display_data( $Obj ) if defined $Display;

    # Tidy-up output.
    orac_say "";

    # Tag, if requested.
    if( $tag ) {
      _TAG_AS_REDUCED_PRODUCT_ GROUP=$group UPDATE=1
    }

    if( ! $group ) {
      _SET_TAG_ TAG=BASELINED_FRAME
    } else {
      _SET_TAG_ TAG=BASELINED_GROUP
    }

    # Tidy-up output.
    orac_print "\n";

  }
}
