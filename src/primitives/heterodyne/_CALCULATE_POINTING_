# -*-perl-*-

=head1 NAME

_CALCULATE_POINTING_

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item CACHE = LOGICAL (Given)

Whether or not to cache the results in internal headers. [0]

=item REPORT = LOGICAL (Given)

Whether or not to report results to the user. [1]

=item TYPE = STRING (Given)

The type of pointing being calculated. This is purely for bookkeeping
purposes, and should be either CONTINUUM or LINE. This argument is
case-insensitive. ['LINE']

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

None.

=back

=head1 TASKS

KAPPA: CENTROID, WCSATTRIB.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2009 Science and Technology Facilities Council.
Copyright (C) 2007 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

if( ! $Frm->uhdr( "SPARSE_CUBE" ) ) {

  # Handle arguments.
  my $cache = get_prim_arg( $_PRIM_ARGS_, "CACHE", 0 );
  my $report = get_prim_arg( $_PRIM_ARGS_, "REPORT", 1 );
  my $type = uc( get_prim_arg( $_PRIM_ARGS_, "TYPE", 'LINE' ) );

  # Check the JIGL_CNT header. If it's five or smaller, then do the
  # fivepoint pointing calculation. We don't check for equality to
  # five because of a bug in ACSIS's data handling system that can
  # throw off the JIGL_CNT header. We've seen that it can be 4 for a
  # fivepoint, but checking for less than five seems to be safer.
  if( $Frm->hdr( "JIGL_CNT" ) <= 5 ) {

    _CALCULATE_FIVEPOINT_POINTING_ CACHE=$cache REPORT=$report TYPE=$type

  } else {

    my $in = $Frm->file;

    # Read the reference WCS so that we can work out how to reset the frameset
    # after we have called centroid
    my $wcs = $Frm->read_wcs( $in );

    # Set the offset coordinate system to Origin and the formatting of axes to arcseconds
    # with 4 decimal places
    my $newformat = "s.4";
    $Mon{ndfpack_mon}->obeyw("wcsattrib", "ndf=$in mode=mset setting='SkyRefIs=Origin,Format(1)=$newformat,Format(2)=$newformat'");

    # Calculate the centroid, using the centre of the array as the
    # initial position of the object.
    my $params = "ndf=$in init='0,0' mode=Interface cerror=true maxshift=26";
    $Mon{'kappa_mon'}->obeyw( "centroid", "$params" );

    # Retrieve the x and y centre.
    ( my $ORAC_STATUS, my $xcen ) = $Mon{'kappa_mon'}->get( "centroid", "xcen" );
    ( $ORAC_STATUS, my $ycen ) = $Mon{'kappa_mon'}->get( "centroid", "ycen" );
    ( $ORAC_STATUS, my $xerr ) = $Mon{'kappa_mon'}->get( "centroid", "xerr" );
    ( $ORAC_STATUS, my $yerr ) = $Mon{'kappa_mon'}->get( "centroid", "yerr" );

    # Make them pretty for output.
    my $p_xcen = sprintf( "%.2f", $xcen );
    my $p_ycen = sprintf( "%.2f", $ycen );
    my $p_xerr = sprintf( "%.2f", $xerr );
    my $p_yerr = sprintf( "%.2f", $yerr );

    # Display the results to the user.
    orac_say( "Pointing results using CENTROID:", "blue" ) if $report;
    orac_say( " DAZ: $p_xcen +/- $p_xerr\n DEL: $p_ycen +/- $p_yerr", "blue" ) if $report;

    # Display a warning if values are large.
    if( abs( $xcen ) > 10 ) {
      orac_err "Absolute DAZ pointing value greater than 10 arcseconds.\n" if $report;
    } elsif( abs( $xcen ) > 5 ) {
      orac_warn "Absolute DAZ pointing value greater than 5 arcseconds.\n" if $report;
    }
    if( abs( $ycen ) > 10 ) {
      orac_err "Absolute DEL pointing value greater than 10 arcseconds.\n" if $report;
    } elsif( abs( $ycen ) > 5 ) {
      orac_warn "Absolute DEL pointing value greater than 5 arcseconds.\n" if $report;
    }

    # Store with the calibration system.
    my %pointinghash = ( DAZ => $xcen,
                         DEL => $ycen,
                         DAZ_ERR => $xerr,
                         DEL_ERR => $yerr,
                         POINTING_TYPE => $type,
                         METHOD => 'CENTROID',
                       );

    my %calhash = ( %{$Frm->hdr},
                    %pointinghash,
                  );
    $Cal->pointingindex->add( $Frm->file, \%calhash );

    # Start a log file.
    my $logfile = "log.pointing";
    my $log = new ORAC::LogFile( $logfile );
    my $time = gmtime();
    $log->header( "Pointing log file - created on $time",
                  "\n#    Time         DAZ    DEL   Method    Type",
                  "------------------------------------------------------",
                );
    $log->addentry( sprintf( "%-4d %11.2f %6.2f %6.2f %9s %s",
                             $Frm->number,
                             $Frm->hdr( "ORACTIME" ),
                             $xcen,
                             $ycen,
                             "centroid",
                             lc( $type ) ) );

    if( $cache ) {
      if( ! defined( $Frm->uhdr( "POINTING_INFO" ) ) ) {
        $Frm->uhdr( "POINTING_INFO", [] );
      }
      my $pointing_info = $Frm->uhdr( "POINTING_INFO" );
      push @$pointing_info, \%pointinghash;
      $Frm->uhdr( "POINTING_INFO", $pointing_info );
    }

    # Tidy up the output so we have differentiation between CENTROID and PSF.
    orac_say "";

    # Now do the PSF pointing calculation.
    #
    # Find the location of the peak pixel.
    $Mon{'ndfpack_mon'}->obeyw( "setaxis", "ndf=$in mode=wcs dim=1" );
    $Mon{'ndfpack_mon'}->obeyw( "setaxis", "ndf=$in mode=wcs dim=2" );
    $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$in" );
    ( $ORAC_STATUS, my @maxcoord ) = $Mon{'kappa_mon'}->get( "stats", "maxcoord" );
    my $x_max = $maxcoord[0] * 3600;
    my $y_max = $maxcoord[1] * 3600;

    # Create an input positions list file.
    my $psfcat = new ORAC::TempFile;
    my $psfcatfile = $psfcat->file;
    open(my $psfcatfile_h, ">", $psfcatfile)
        or orac_throw "Cannot open temporary file for writing PSF input position list: $!";
    printf($psfcatfile_h "%.6f %.6f\n",$x_max, $y_max);
    close $psfcatfile_h;

    # Set up the parameters for PSF.
    $params = "in=$in incat=! cofile=$psfcatfile device=! gauss=false out=!";

    # Run PSF.
    my $PSF_STATUS = $Mon{'kappa_mon'}->obeyw( "psf", "$params" );

    # Integer error code for known bad conditions
    if ( $PSF_STATUS == 257327122   # KAP__PSFSN
        || $PSF_STATUS == 257327130 # KAP__PSFNO
        ) {
      orac_warn "Unable to fit a PSF profile in the current image\n"
    } elsif ($PSF_STATUS == ORAC__OK) {

      # Retrieve the position.
      ( $ORAC_STATUS, my $psf_xcen ) = $Mon{'kappa_mon'}->get( "psf", "xcen" );
      ( $ORAC_STATUS, my $psf_ycen ) = $Mon{'kappa_mon'}->get( "psf", "ycen" );

      # Make these pretty for output.
      my $p_psf_xcen = sprintf( "%.2f", $psf_xcen );
      my $p_psf_ycen = sprintf( "%.2f", $psf_ycen );

      # Display the results to the user.
      orac_say( "Pointing results using PSF:", "blue" ) if $report;
      orac_say( " DAZ: $p_psf_xcen\n DEL: $p_psf_ycen", "blue" ) if $report;

      # Display a warning if values are large.
      if( abs( $psf_xcen ) > 10 ) {
        orac_err "Absolute DAZ pointing value greater than 10 arcseconds.\n" if $report;
      } elsif( abs( $psf_xcen ) > 5 ) {
        orac_warn "Absolute DAZ pointing value greater than 5 arcseconds.\n" if $report;
      }
      if( abs( $psf_ycen ) > 10 ) {
        orac_err "Absolute DEL pointing value greater than 10 arcseconds.\n" if $report;
      } elsif( abs( $psf_ycen ) > 5 ) {
        orac_warn "Absolute DEL pointing value greater than 5 arcseconds.\n" if $report;
      }

      # Store with the calibration system.
      %pointinghash = ( DAZ => $psf_xcen,
                        DEL => $psf_ycen,
                        DAZ_ERR => 0,
                        DEL_ERR => 0,
                        POINTING_TYPE => $type,
                        METHOD => 'PSF',
                      );
      %calhash = ( %{$Frm->hdr},
                   %pointinghash,
                 );
      $Cal->pointingindex->add( $Frm->file, \%calhash );

      # Add to the logfile.
      $log->addentry( sprintf( "%-4d %11.2f %3d %6.2f %6.2f %9s %s",
                               $Frm->number,
                               $Frm->hdr( "ORACTIME" ),
                               $psf_xcen,
                               $psf_ycen,
                               "psf",
                               lc( $type ) ) );

      if( $cache ) {
        if( ! defined( $Frm->uhdr( "POINTING_INFO" ) ) ) {
          $Frm->uhdr( "POINTING_INFO", [] );
        }
        my $pointing_info = $Frm->uhdr( "POINTING_INFO" );
        push @$pointing_info, \%pointinghash;
        $Frm->uhdr( "POINTING_INFO", $pointing_info );
      }

    } else {
      # some untrappable error
      $ORAC_STATUS = $PSF_STATUS;
    }

    # Set SkyRefIs and Format back to what they were before.
    my $skyrefis = $wcs->Get("SkyRefIs");
    my $format1 = $wcs->Get("Format(1)");
    my $format2 = $wcs->Get("Format(2)");

    $Mon{'ndfpack_mon'}->obeyw( "wcsattrib", "ndf=$in mode=mset setting='SkyRefIs=$skyrefis,Format(1)=$format1,Format(2)=$format2'" );

    # Tidy-up output.
    orac_say "";

  }

} else {

  orac_say "Currently unable to calculate pointing values for a sparse cube.";

  # Tidy-up output.
  orac_say "";

}

