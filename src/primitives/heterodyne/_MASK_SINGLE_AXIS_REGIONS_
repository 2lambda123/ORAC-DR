=head1 NAME

_MASK_SINGLE_AXIS_REGIONS_

=head1 DESCRIPTION

This primitive allows specified regions along a single axis to be
masked.  It uses ranges of pixel co-ordinates accessed by reference
(see Argument RANGES).

=head1 ARGUMENTS

=over 4

=item INVERSE = BOOLEAN (Given)

If set to false (0), the chosen regions are masked.  If true (1)
all but the regions (i.e. the inverse) are masked.  [0]

=item RANGES = ARRAY REFERENCE (Given)

The list of regions to mask along the axis given by Argument USEAXIS. 
Alternate values are lower then upper bounds in pixels.  If it not
defined, an error will be thrown.

=item SUFFIX = STRING (Given)

The suffix to apply to the output masked file..  ["regmask"].

=item USEAXIS = INTEGER (Given)

The index of the axis to mask.  This should be 1 to 7.  If it not defined,
an error will be thrown.  [1]

=back

=head1 NOTES

=over 4

=item *

The Frame to be masked can have from one to seven dimensions.

=back

=head1 OUTPUT DATA

=over 4

The masked NDF with suffix _regmask.

=back

=head1 TASKS

KAPPA: ARDMASK, NDFTRACE.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2013 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Process arguments.
# ==================
my $inverse = get_prim_arg( $_PRIM_ARGS_, "INVERSE", 0 );
my $ref_regions = get_prim_arg( $_PRIM_ARGS_, "REGIONS", undef, 1 );
my $suffix = get_prim_arg(  $_PRIM_ARGS_, "SUFFIX", "_regmask" );
my $useaxis = get_prim_arg(  $_PRIM_ARGS_, "USEAXIS", 1 );

if ( $useaxis < 1 || $useaxis > 7  ) {
   orac_err "_MASK_SINGLE_AXIS REGIONS_: Supplied axis is not numeric " .
            "or in the range 1 to 7 (Possible programming error).\n";
}

# Process each range along the axis.
# ==================================
if ( defined( $ref_regions ) ) {
   my @regions = @$ref_regions;

   foreach my $i ( 1 .. $Frm->nfiles ) {
      my( $in, $out ) = $Frm->inout( $suffix, $i );

# Retrieve the dimensions of the input Frame object.
      $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
      my ( $ORAC_STATUS, @lbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "lbound" );
      ( $ORAC_STATUS, my @ubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "ubound" );
      my $ndim = scalar( @lbnd );

# Retrieve the baselined regions for this Frame.
      my @bl_regions = @{$regions[$i-1]};
orac_warn "count of bl_regions is $#bl_regions with $ndim dimensions\n";

# Form region definition file.
# ============================

# Create a temporary file to hold the ARD mask.
      my $ardmask = new ORAC::TempFile;

# Inform ARD of the dimensionality of the data to be masked.
      print {$ardmask->handle} "DIMENSION($ndim)\n";

# Process each region range.
      for ( my $j = 0; $j <= $#bl_regions ; $j += 2 ) {

# Form rectangular region definition.  First set the lower bounds...
         my $ard = "RECT( ";
         for ( my $i = 0; $i < $ndim ; $i++ ) {
            if ( $i == $useaxis - 1 ) {
               $ard .= $bl_regions[$j] . ", ";
            } else {
               my $coord = $lbnd[$i] - 1;
               $ard .= $coord . ", ";
            }
         }

# then the upper bounds.
         for ( my $i = 0; $i < $ndim ; $i++ ) {
            if ( $i == $useaxis - 1 ) {
               $ard .= "$bl_regions[$j+1]";
            } else {
               $ard .= "$ubnd[$i]";
            }

# Close the ARD expression.
            my $connect = ( $i == $ndim - 1 ) ? " )\n" : ", ";
            $ard .= "$connect";
         }

# Append the region to the text file.
         print {$ardmask->handle} "$ard";

      }

# Mask the input data file.
# =========================
      my $params = "in=$in out=$out ardfile=" . $ardmask->file;
      if ( $inverse ) {
        $params .= " inside=false";
      }
      $Mon{'kappa_mon'}->obeyw( "ardmask", "$params" );

# Report progress.
      orac_print "$in to $out:\n";
      orac_print " Masked ";
      if ( $inverse ) {
         orac_print "outside ";
      }
      orac_print "the regions.\n";

# Update the product.
      $Frm->product( $suffix );

# Update the Frame object.
      $Frm->file( $i, $out );
   }

# Display if necessary.
   $Display->display_data( $Frm ) if defined( $Display );

# Tidy-up output.
   orac_print "\n";

}
