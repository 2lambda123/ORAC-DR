=head1 NAME                                     -*-cperl-*-

_IDENTIFY_SPECBOUNDS_ - Determine the spectral bounds of the emission
within a spectral cube.

=head1 DESCRIPTION

The Frame object (which should contain a spectral axis) is collapsed
along each non-spectral axis to form a single spectrum. This is done
using a "MAX" estimator so that regions of emission are not diluted by
combining them with other regions of non-emission (such as would
happen if, say, a "MEAN" estimator were used). A background curve is
then estimated and subtracted from this collapsed spectrum, and the
regions of emission are then identified using CUPID:FINDCLUMPS.

=head1 PARAMETERS

=over 4

=item BOUNDS = ARRAY REFERENCE (Returned)

An array reference to a list of arrays holding the bounds of detected
emission, in pixelspace.

=item FILE = STRING (Given)

The file to detect lines in. Must be defined.

=item MINIMUM_WIDTH = INTEGER (Given)

The minimum width of a line, in channels. This argument can be
overridden by the RECPAR_MINIMUM_LINE_WIDTH uhdr via the recipe
parameter system. [7]

=item RMS = REAL (Given)

The RMS above which a line will be detected. [3.0]

=back

=head1 AUTHORS

David Berry <d.berry@jach.hawaii.edu>,
Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research
Council. (C) 2009 Science and Technology Facilities Council. All
Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

my $file = get_prim_arg( $_PRIM_ARGS_, "FILE", undef, 1 );
my $minwidth = get_prim_arg( $_PRIM_ARGS_, "MINIMUM_WIDTH", 7 );
my $rms = get_prim_arg( $_PRIM_ARGS_, "RMS", 3.0 );

# Override various parameters via the recipe parameter system.
$minwidth = ( defined( $Frm->uhdr( "RECPAR_MINIMUM_LINE_WIDTH" ) ) ?
              $Frm->uhdr( "RECPAR_MINIMUM_LINE_WIDTH" )            :
              $minwidth );

# Collapse along the first axis, then the second (which is the first
# in the collapsed image).
my $temp1 = new ORAC::TempFile( 0 );
my $temp1file = $temp1->file;
my $params = "in=$file out=$temp1file axis=1 estimator=max wlim=0.0";
$Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

my $temp2 = new ORAC::TempFile( 0 );
my $temp2file = $temp2->file;
$params = "in=$temp1file out=$temp2file axis=1 estimator=max wlim=0.0";
$Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# Retrieve bounds so we know what to set the boxsize to for FINDBACK.
_GET_DIMENSIONS_ FILE=$temp2file
my $lbound = $_GET_DIMENSIONS_{'LBOUND'};
my $ubound = $_GET_DIMENSIONS_{'UBOUND'};

# The boxsize for FINDBACK will be one quarter of the length of the
# spectrum.
my $boxsize = int( 0.25 * ( $ubound->[0] - $lbound->[0] ) );

# Use CUPID:FINDBACK to identify and remove any background features
# that have scale size larger than one quarter of the length of the
# usable part of the spectrum (i.e. twice the size of the margin).
my $temp3 = new ORAC::TempFile( 0 );
my $temp3file = $temp3->file;
$params = "in=$temp2file out=$temp3file box=$boxsize sub accept";
$Mon{'cupid_mon'}->obeyw( "findback", $params );

# Use CUPID:FINDCLUMPS to identify the regions with emission higher
# than the requested threshold.
my $temp4 = new ORAC::TempFile( 0 );
my $temp4file = $temp4->file;
$params = "in=$temp3file out=$temp4file outcat=! method=fellwalker ";
$params .= "config='noise=rms,mindip=1.0E10,minheight=$rms*RMS,minpix=$minwidth' accept";
$Mon{'cupid_mon'}->obeyw( "findclumps", $params );

# Loop round all the clumps found above, using a one-based index as
# required by CLUMPINFO.
my @bounds;
my ( $ORAC_STATUS, $nclump ) = $Mon{'cupid_mon'}->get('findclumps', 'NCLUMPS');
for( my $iclump = 1; $iclump <= $nclump; $iclump++ ) {

# Use CUPID:CLUMPINFO to get the upper and lower bounds of the
# spectral bounding box containing the current clump. Concatentate
# them into the @bounds array in the order lbnd1, ubnd1, lbnd2, ubnd2,
# etc.
  my @clump_bounds;
  $params = "ndf=$temp4file clumps=$iclump";
  $Mon{'cupid_mon'}->obeyw( "clumpinfo", $params );

  ($ORAC_STATUS, $clump_bounds[ 0 ] ) = $Mon{'cupid_mon'}->get('clumpinfo', 'lbound');
  ($ORAC_STATUS, $clump_bounds[ 1 ] ) = $Mon{'cupid_mon'}->get('clumpinfo', 'ubound');
  $bounds[ $iclump - 1 ] = [ @clump_bounds ];
}

$_IDENTIFY_SPECBOUNDS_{'BOUNDS'} = \@bounds;

