# -*-perl-*-

=head1 NAME

_CREATE_TIMESERIES_MASK_

=head1 DESCRIPTION

This primitive creates a mask that masks out regions of emission in
time-series data. It does so by retrieving a baseline mask as created
in the _REMOVE_BASELINE_THROUGH_SMOOTHING_ primitive, then running it
through UNMAKECUBE using the original time-series data as references.

=head1 ARGUMENTS

=over 4

=item INTERP = STRING (Given)

The method to use when resampling the input sky cube pixel
values. ['nearest']

=item PARAM1 = REAL (Given)

The first parameter required by the spreading method. This parameter
is required by all methods, and specifies how many arcseconds on
either side of the output position are to receive contributions from
the input pixel. A value of zero indicates that a suitable number
should be calculated automatically. [0]

=item PARAM2 = REAL (Given)

The second parameter required by the spreading method, but only for
SombCos, Gauss, SincSinc, SincCos, and SincGauss schemes. For the
SombCos, SincSinc, and SincCos schemes, it specifies the number of
arcseconds at which the envelope of the function goes to zero. The
minimum value is 1.0 pixels, and the run-time default value is 2.0
pixels.  For the Gauss and SincGauss scheme, it specifies the
full-width at half-maximum (FWHM) of the Gaussian envelope.  The
minimum value is 0.1 pixels, and the run-time default is 1.0
pixels. Note that these numbers are given in pixels and this parameter
takes the number of requested arcseconds. This is done because the
pixel scale could be automatically determined from the data. []

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=item *

The input baseline masks are found in the Group uhdr BASELINE_MASKS,
which is an array reference.

=item *

The output baseline mask names are stored in the Group uhdr
TIMESERIES_MASKS, which is a hash reference. Keys are the raw
time-series data, values are the corresponding time-series baseline
mask.

=item *

This primitive creates output masks for every Frame member in the
current Group.

=item *

Neither the Frame nor Group object are updated.

=back

=head1 OUTPUT DATA

=over 4

=item *

Time-series masks with the suffix _tsmask.

=back

=head1 TASKS

SMURF: UNMAKECUBE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Handle parameters.
my $interp = get_prim_arg( $_PRIM_ARGS_, 'INTERP', 'NEAREST' );
my $param1 = get_prim_arg( $_PRIM_ARGS_, 'PARAM1', 0 );
my $param2 = get_prim_arg( $_PRIM_ARGS_, 'PARAM2', undef );

my @ref;
my @tsmask;
my %tsmask;
my @maskin;
foreach my $Frm ( $Grp->members ) {
  foreach my $i ( 1 .. $Frm->nfiles ) {
    my ( $in, $out ) = $Frm->inout( "_tsmask", $i );
    push @ref, $in;
    push @tsmask, $out;
    $tsmask{$Frm->file($i)} = $out;
  }
}

foreach my $i ( 1 .. $Grp->nfiles ) {
  push @maskin, $Grp->uhdr( "BASELINE_MASKS" )->[$i];
}

# Create input list files for the various parameters to UNMAKECUBE.
my $inlist = "inlist$$.lis";
my $reflist = "reflist$$.lis";
my $outlist = "outlist$$.lis";
open my $inlist_fh, ">", $inlist;
open my $reflist_fh, ">", $reflist;
open my $outlist_fh, ">", $outlist;
print $inlist_fh join "\n", @maskin;
print $reflist_fh join "\n", @ref;
print $outlist_fh join "\n", @tsmask;
close $inlist_fh;
close $reflist_fh;
close $outlist_fh;

# Get parameter string for UNMAKECUBE. To do this we need the pixel
# scale of one of the input NDFs.
$Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=" . $Frm->file(1) );
my( $ORAC_STATUS, @fpixsize ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fpixscale" );
my $pixsize = sqrt( $fpixsize[0] * $fpixsize[0] + $fpixsize[1] * $fpixsize[1] );
_GET_SPREAD_PARAMS_ PARAM1=$param1 PARAM2=$param2 INTERP=$interp PIXSIZE=$pixsize
my $interp_params = $_GET_SPREAD_PARAMS_{PARAMSTRING};

# Set up parameters to UNMAKECUBE.
my $params = "in='^$inlist' ref='^$reflist' out='^$outlist' interp=$interp params=$interp_params";

# And run UNMAKECUBE.
$Mon{'smurf_mon'}->obeyw( "unmakecube", "$params" );

# We now have the timeseries masks. Don't update the Group object or
# the Frame object or anything, just stick their names in the Group
# uhdr.
$Grp->uhdr( "TIMESERIES_MASKS", \%tsmask );

# Report to the user.
orac_print "Created timeseries masks in " . ( join ", ", @tsmask ) . "\n";

# Remove list files.
unlink $inlist;
unlink $reflist;
unlink $outlist;

# Tidy-up output.
orac_print "\n";
