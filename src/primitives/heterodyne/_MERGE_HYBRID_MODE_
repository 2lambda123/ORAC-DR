# -*-cperl-*-

=head1 NAME

_MERGE_HYBRID_MODE_ - Merge hybrid mode observations in the frequency
domain.

=head1 DESCRIPTION

This primitive operates on hybrid-mode observations.  It first
determines a DC-level offset between corresponding subband
observations, using the median of entire spectra.  The DC offset is
added to or removed from the subband spectra, and the corresponding
subband spectra are mosaicked together to form time-series cubes with
a greater frequency extent.

=head1 ARGUMENTS

=over 4

None.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data taken in hybrid mode.

=item *

This primitive only operates if the ISHYBRID user header is set for
the current Frame object.

=back

=head1 OUTPUT DATA

=over 4

=item *

The DC-corrected time-series cubes with suffix _dc.

=item *

The merged time-series cube with suffix _merge.

=back

=head1 TASKS

KAPPA: CADD, SUB, STATS, WCSMOSAIC.

=head1 REQUIRED PERL MODULES

File::Basename.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2013 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

use File::Basename;

if ( $Frm->uhdr( "ISHYBRID" ) ) {

  orac_print "Hybrid mode observations. Merging spectra.\n";

  my @newfrmout;
  my @outfiles;
  my $params;

  # Retrieve WCS lower bounds for the files.
  my @lbounds;
  foreach my $i ( 1 .. $Frm->nfiles ) {
    my $file = $Frm->file( $i );
    _GET_DIMENSIONS_ FILE=$file
    my $flb = $_GET_DIMENSIONS_{FLBOUND};
    push @lbounds, $flb->[0];
  }

  # The files may not be in increasing bounds order, so provide an index
  # to the bounds-sorted order to merge adjacent sub-bands.  Frm file
  # indexing starts from 1, so increment the index by one.
  my @bounds_order = map{ $_ + 1 }
                     sort { $lbounds[$a] <=> $lbounds[$b] }
                     0 .. scalar( @lbounds ) - 1;

  # Previous subband is the initially the first.
  my $last_dc_corrected = $Frm->file( $bounds_order[0] );

  # Retrieve bounds for the first file.
  _GET_DIMENSIONS_ FILE=$last_dc_corrected
  my $lbounds1 = $_GET_DIMENSIONS_{LBOUND};
  my $ubounds1 = $_GET_DIMENSIONS_{UBOUND};

  # Record initial subband for mosaicking as we do not apply a DC offset to it.
  push @outfiles, $last_dc_corrected;
  foreach my $nsubband ( 1 .. $Frm->nfiles - 1 ) {

    my $next_subband = $Frm->file( $bounds_order[$nsubband] );
    orac_say " Calculating overlap for subband $nsubband.";
    orac_say " Comparing $next_subband with $last_dc_corrected";

    # Get the overlap range.
    _CALCULATE_HYBRID_OVERLAP_ FILE1=$last_dc_corrected FILE2=$next_subband
    my $low = $_CALCULATE_HYBRID_OVERLAP_{LBOUND};
    my $high = $_CALCULATE_HYBRID_OVERLAP_{UBOUND};

    # Retrieve bounds for the next subband file.
    _GET_DIMENSIONS_ FILE=$next_subband
    my $lbounds2 = $_GET_DIMENSIONS_{LBOUND};
    my $ubounds2 = $_GET_DIMENSIONS_{UBOUND};

    orac_print sprintf( "  Overlap range: [%d:%d]\n", $low, $high );

    my $range = "";
    if ( $low > $high ) {
      orac_warn "No overlap between the input cubes.";
    }

    my $temp1file = new ORAC::TempFile( 0 );

    # Compare the differences element by element in the overlap region.
    $params = "in1=$last_dc_corrected($range,,) in2=$next_subband($range,,) ";
    $params .= "out=$temp1file";
    $Mon{'kappa_mon'}->obeyw( "sub", "$params" );

    $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp1file order" );
    my ( $ORAC_STATUS, $median ) = $Mon{'kappa_mon'}->get( "stats", "median" );

    # Apply the DC level adjustment.  It is applied incrementally to the
    # next subband.  Thus the first subband level is unaltered and
    # subsequent bands are corrected to its level.
    ( undef, my $out ) = $Frm->inout( "_dc", $bounds_order[$nsubband] );
    $params = "in=$next_subband out=$out scalar=$median";
    $Mon{'kappa_mon'}->obeyw( "cadd", "$params" );
    my $fs_median = sprintf( "%.4f", $median );

    orac_print "  Removed DC-level offset:\n";
    orac_print "   $next_subband with offset $fs_median to $out.\n";

    # Record the DC-corrected spectra for mosaicking.
    push @outfiles, $out;

    # Want to offset against the already corrected nth subband.
    $last_dc_corrected = $out;

    # The upper subband now becomes the lower.
    $lbounds1 = $lbounds2;
    $ubounds1 = $ubounds2;
  }

  # We have $nsubband DC-corrected files.  Form text file listing
  # the NDFs to mosaic.
  my $mos_file = write_file_list( @outfiles );
  my $mos_filename = basename( $mos_file->file );
  ( undef, my $out ) = $Frm->inout( "_merge", 1 );
  $params = "in='^$mos_filename' out=$out method=nearest";
  $params .= " lbnd=! ubnd=! ref=! variance genvar=false wlim=0";
  $Mon{'kappa_mon'}->obeyw( "wcsmosaic", "$params" );

  orac_print join ',', @outfiles;
  orac_print " to $out:\n";
  orac_print " Merged hybrid-mode files.\n";

  push @newfrmout, $out;

  $Frm->product( "merge" );
  $Frm->files( @newfrmout );

  # Tidy-up output.
  orac_print "\n";
}
