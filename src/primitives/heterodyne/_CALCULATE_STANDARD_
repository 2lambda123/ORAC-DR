# -*-cperl-*-

=head1 NAME

_CALCULATE_STANDARD_

=head1 DESCRIPTION

This primitive calculates the peak and integrated intensity for a flux
standard and reports these numbers. It also compares them with
standard values, giving the percentage difference between the two.

=head1 ARGUMENTS

=over 4

=item RETRIEVE = LOGICAL (Given)

Whether or not to retrieve information from the calibration system. By
default this information will be retrieved. [1]

=back

=head1 NOTES

=over 4

This primitive is suitable for ACSIS cubes.

=back

=head1 OUTPUT DATA

=over 4

=item *

A log file containing information about the standard in log.standard.

=back

=head1 TASKS

KAPPA: COLLAPSE, NDFTRACE, STATS.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie <mjc@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2009, 2013, 2014, 2017 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Handle parameters.
my $retrieve = get_prim_arg( $_PRIM_ARGS_, "RETRIEVE", 1 );

# Set up some variables that will be used for calibration information.
my ( $low, $high, @flbnd, @fubnd, $cal_integ, $cal_peak );
( my $molecule = $Frm->hdr( "MOLECULE" ) ) =~ s/[\s\-]//g;
( my $transition = $Frm->hdr( "TRANSITI" ) ) =~ s/\s//g;
( my $object = $Frm->hdr( "OBJECT" ) ) =~ s/\s//g;

# Retrieve standard information from calibration system.
if( ! $retrieve ) {

  orac_print "Not retrieving standard calibration information.\n";

} else {


  my $stdref = $Cal->standard;
  if( ! defined $stdref ) {

    orac_warn "No standard calibration information could be found for this observation.\n";

  } else {

    # Pick out info from the calibration system.
    $low = $stdref->{'L_BOUND'};
    $high = $stdref->{'H_BOUND'};
    $cal_integ = $stdref->{'INTEGINT'};
    $cal_peak = $stdref->{'PEAK'};
    $molecule = $stdref->{'MOLECULE'};
    $transition = $stdref->{'TRANSITION'};
    $object = $stdref->{'OBJECT'};

    orac_say "Retrieved calibration information for $object from database.";
  }
}

my $file = $Frm->file;


# Check that the velocity range lies within the current spectral range.
# This is to cater for errors in the tuning.
my $know_range = defined( $low ) && defined( $high );
my $use_range = 1;
my $ORAC_STATUS;
if ( $know_range ) {
  $Mon{ndfpack_mon}->obeyw( "ndftrace", "ndf=$file" );
  ( $ORAC_STATUS, @flbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "flbnd" );
  ( $ORAC_STATUS, @fubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fubnd" );

  $use_range = ( $low  >= $flbnd[2] && $low  <= $fubnd[2] ) &&
               ( $high >= $flbnd[2] && $high <= $fubnd[2] );

  my $lower = sprintf( "%.2f", $flbnd[2] );
  my $upper = sprintf( "%.2f", $fubnd[2] );

  orac_warn "Possible tuning error during observation: the standard's emission line " .
            "located between $low and $high km/s lies beyond the spectral range " .
            "($lower to $upper km/s).  Flux and peak measurement will not be " .
            "made.\n" if ( !$use_range );

} else {
  $Mon{ndfpack_mon}->obeyw( "ndftrace", "ndf=$file(,,~90\%)" );
  ( $ORAC_STATUS, @flbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "flbnd" );
  ( $ORAC_STATUS, @fubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fubnd" );
  $low = sprintf( "%.2f", $flbnd[2] );
  $high = sprintf( "%.2f", $fubnd[2] );
}

if ( $use_range ) {

  # Attempt to find the best position to analyse.
  my $temppeakfind = new ORAC::TempFile( 0 );
  $Mon{ndfpack_mon}->obeyw( "ndfcopy", "in=$file(,,$low:$high) out=$temppeakfind" );
  _FIND_TRUE_PEAK_ FILE=$temppeakfind
  my $peakloc = $_FIND_TRUE_PEAK_{PEAK};

  my $xpos = $peakloc->[0];
  my $ypos = $peakloc->[1];

  orac_print("Using spatial position ($xpos, $ypos) for analysis.\n");

  # Calculate the integrated intensity.
  my $temp1 = new ORAC::TempFile( 0 );
  my $params = "in=$file($xpos,$ypos,~90\%) out=$temp1 axis=spec estimator=integ wlim=0.0";
  if ( $know_range ) {
    $params .= " low=$low high=$high";
  }
  $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp1" );
  my ( $ORAC_STATUS, $integ ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );

  # And the peak value.
  if ( $know_range ) {
    $params = "ndf=$file($xpos,$ypos,$low:$high)";
  } else {
    $params = "ndf=$file($xpos,$ypos,~90\%)";
  }
  $Mon{'kappa_mon'}->obeyw( "stats", "$params" );
  ( $ORAC_STATUS, my $peak ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );

  # Compare to standard values, if we have them.
  my $integ_perc;
  if ( defined( $cal_integ ) && $cal_integ != 0 ) {
    $integ_perc = ( $integ - $cal_integ ) / $cal_integ * 100;
  }
  my $peak_perc;
  if ( defined( $cal_peak ) && $cal_peak != 0 ) {
    $peak_perc = ( $peak - $cal_peak ) / $cal_peak * 100;
  }

  # Report to user.
  orac_say "Flux calibration information for $object $molecule $transition:";
  my @result_text = ();

  if ( defined( $cal_integ ) ) {
    orac_say sprintf   " Reference integrated intensity: %.2fK", $cal_integ;
  }
  orac_print sprintf " Measured integrated intensity:  %.2fK", $integ;
  push @result_text, sprintf ' integrated %.2fK', $integ;

  if ( defined( $integ_perc ) ) {
    orac_say sprintf ( " (%.2f%% " . ( $integ_perc > 0 ? "higher" : "lower" ) . ")", abs( $integ_perc ) );
    $result_text[-1] .= sprintf( " (%.2f%% " . ( $integ_perc > 0 ? "high" : "low" ) . ")", abs( $integ_perc ) );

    # Handle warnings.
    if ( abs( $integ_perc ) > 20 ) {
      orac_say( " Integrated intensity differs by more than 20%", "red" );
    } elsif( abs( $integ_perc ) > 10 ) {
      orac_say( " Integrated intensity differs by more than 10%", "yellow" );
    }
  } else {
    orac_say "";
  }

  # And the peak.
  if ( defined( $cal_peak ) ) {
    orac_say sprintf   " Reference peak flux: %.2fK", $cal_peak;
  }
  orac_print sprintf " Measured peak flux:  %.2fK", $peak;
  push @result_text, sprintf ' peak %.2fK', $peak;

  if ( defined( $peak_perc ) ) {
    orac_say sprintf ( " (%.2f%% " . ( $peak_perc > 0 ? "higher" : "lower" ) . ")", abs( $peak_perc ) );
    $result_text[-1] .= sprintf( " (%.2f%% " . ( $peak_perc > 0 ? "high" : "low" ) . ")", abs( $peak_perc ) );

    if ( abs( $peak_perc ) > 20 ) {
      orac_say( " Peak flux differs by more than 20%", "red" );
    } elsif ( abs( $peak_perc ) > 10 ) {
      orac_say( " Peak flux differs by more than 10%", "yellow" );
    }
  } else {
    orac_say "";
  }

  orac_result(
    "$object $molecule $transition:" .
    join(', ', @result_text) .
    "\n");

  # Write this information to a separate logging file.
  my $obsdate = $Frm->uhdr( "ORAC_UTSTART" )->datetime;
  my $obsnum = $Frm->uhdr( "ORAC_OBSERVATION_NUMBER" );
  my $obsid = $Frm->uhdr( "ORAC_OBSERVATION_ID" );
  my $inst = $Frm->uhdr( "ORAC_INSTRUMENT" );
  my $lofreq = $Frm->hdr( "LOFREQS" );
  my $mode = $Frm->uhdr( "ORAC_SWITCH_MODE" );
  my $bandwidth = $Frm->uhdr( "ORAC_BANDWIDTH_MODE" );
  my $sideband = $Frm->hdr( "OBS_SB" );
  my $tau = ( defined( $Frm->hdr( "TAU225ST" ) ) ) ?  $Frm->hdr( "TAU225ST" ) : -1;
  my $elevation = $Frm->uhdr( "ORAC_ELEVATION_START" );

  my $logfile = "log.standard";
  my $log = new ORAC::LogFile( $logfile );
  $log->header( "OBSDATE OBSNUM OBSID INST LOFREQ SOURCE MOLECULE LINE MODE BANDWIDTH SIDEBAND TAU ELEVATION INTEGINT PEAK L_BOUND H_BOUND" );
  $log->addentry( sprintf( "%s %02d %s %s %.3f %s %s %s %s %s %s %.3f %.2f %.2f %.2f %.2f %.2f",
                           $obsdate,
                           $obsnum,
                           $obsid,
                           $inst,
                           $lofreq,
                           $object,
                           $molecule,
                           $transition,
                           $mode,
                           $bandwidth,
                           $sideband,
                           $tau,
                           $elevation,
                           $integ,
                           $peak,
                           defined( $low ) ? $low : 0,
                           defined( $high ) ? $high : 0 ) );

  orac_say " Calibration information written to $logfile";
}
orac_say "";

