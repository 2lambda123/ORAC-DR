# -*-perl-*-

=head1 NAME

_PRETTYPRINT_RECEPTOR_QA_ - Pretty-print quality assurance numbers.

=head1 DESCRIPTION

This primitive takes a hash of ACSIS quality assurance numbers and
prints them in a pleasing manner.

=head1 ARGUMENTS

=over 4

=item HASH = HASH REFERENCE (Given)

A hash reference pointing to the receptor-specific quality assurance
numbers. Keys are receptor names and values are the specific
value. This argument must be defined.

=item TYPE = STRING (Given)

The type of statistic passed to this primitive. This string is only
used for output. ['RMS']

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=back

=head1 OUTPUT DATA

None.

=head1 TASKS

None.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

my $hash = get_prim_arg( $_PRIM_ARGS_, "HASH", undef );
if( ! defined( $hash ) ) {
  orac_throw "HASH argument to _PRETTYPRINT_RECEPTOR_QA_ must be defined: programming error";
}
my $type = get_prim_arg( $_PRIM_ARGS_, "TYPE", "RMS" );

my $dstring = '';
my $rstring = '';
my @dstrings;
my @rstrings;

foreach my $receptor ( sort keys %$hash ) {

  my $value = $hash->{$receptor};

  if( $value ne 'bad' ) {
    $rstring .= sprintf( " %8.3f", $value );
  } else {
    $rstring .= "      bad";
  }

  $dstring .= "      $receptor";

  if( length( $dstring ) > 72 ) {
    push @dstrings, $dstring;
    push @rstrings, $rstring;
    $dstring = '';
    $rstring = '';
  }

}

push @dstrings, $dstring;
push @rstrings, $rstring;

orac_say " $type values for each receptor:";
foreach my $i ( 0 .. $#dstrings ) {
  orac_say "$dstrings[$i]\n$rstrings[$i]";
}
