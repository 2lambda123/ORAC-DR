# -*-perl-*-

=head1 NAME

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item PARAMS = STRING (Returned)

The parameters that can be passed to MAKECUBE for the given
observation. The parameters do not include the IN or OUT parameters.

=item PASS = INTEGER (Given)

The MAKECUBE pass number. 1 for first pass, 2 for second pass. The
first pass is typically used to determine output bounds without
creating a cube in order to determine whether or not to create
tiles. [1]

=item TYPE = STRING (Given)

The type of observation done. This must be one of 'jiggle', 'raster',
'pointing', 'focus', or 'grid'. Case-insensitive. ['']

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

=item *

None.

=back

=head1 TASKS

None.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007-2008 Science and Technology Facilities
Council.  All Rights Reserved.

=cut

# Handle parameters.
orac_throw "_GET_MAKECUBE_PARAMS_ must be given a TYPE argument"
    unless exists $_PRIM_ARGS_->{TYPE};
my $type = get_prim_arg($_PRIM_ARGS_, "TYPE", undef);
if( ! defined( $type ) ) {
  orac_throw "Observation type not defined for _GET_MAKECUBE_PARAMS_. Programming error."
}
$type = uc( $type );

my $pass = get_prim_arg( $_PRIM_ARGS_, "PASS", 1);

orac_print "Determining MAKECUBE parameters for $type.\n";

# Set up some defaults.
my %return_hash = ( 'system' => 'tracking',
                    'autogrid' => 'yes',
                    'badmask' => 'and',
                    'alignsys' => 'yes',
                  );

if( $type eq 'RASTER' or $type eq 'SCAN' ) {

  _GET_MAKECUBE_PARAMS_SCAN_

  %return_hash = ( %return_hash, %{$_GET_MAKECUBE_PARAMS_SCAN_{HASH}} );

} elsif( $type eq 'JIGGLE' ) {

  # JIGGLEs always use autogrid.
  $return_hash{'autogrid'} = 'yes';
  $return_hash{'usedetpos'} = 'no';

  # HARP4 and HARP5 jiggles get their pixel scale set to 7.5 or 6,
  # respectively.
  my $jiggle_name = ( defined( $Frm->hdr( "JIGL_NAM" ) ) ?
                      $Frm->hdr( "JIGL_NAM" )            :
                      "" );
  if( $jiggle_name =~ /harp([45])/i ) {
    my $pixsize = ( $1 == 4 ? 7.5 : 6 );
    $return_hash{'pixsize'} = $pixsize;
  }

} elsif( $type eq 'GRID' ) {

  # GRIDs just use autogrid.
  $return_hash{'autogrid'} = 'yes';
  $return_hash{'usedetpos'} = 'no';

} elsif( $type eq 'POINTING' ) {

  _GET_MAKECUBE_PARAMS_POINTING_ PASS=$pass

  %return_hash = ( %return_hash, %{$_GET_MAKECUBE_PARAMS_POINTING_{HASH}} );

} elsif( $type eq 'FOCUS' ) {

  # Just use autogrid for FOCUS observations.
  $return_hash{'autogrid'} = 'yes';

} else {
  orac_throw "Unable to determine MAKECUBE parameters for observation type $type."
}

# Override USEDETPOS for RxW.
if( $Frm->uhdr( "ORAC_INSTRUMENT" ) =~ /rxw/i ) {
  $return_hash{'usedetpos'} = "yes";
}

# Form the parameter string and wrap it in spaces.
my $params = join " ", map { join( "=", $_, $return_hash{$_} ) } keys %return_hash;
$params = " $params ";


# And set the return value.
$_PRIM_ARGS_->{PARAMS} = $params;
$_PRIM_ARGS_->{HASH} = \%return_hash;
