# 		-*-perl-*-

# Podule
# ======

=head1 NAME

_WAVELENGTH_CALIBRATE_ -- Wavelength calibrates all rows of an approximately straightened IFU arc spectrum.

=head1 DESCRIPTION

This primitive runs Iarc on an IFU arc spectrum in order to find the 
wavelength calibration which should be applied to each row of subsequent
IFU frames.

The input frame should have been approximately straightened (to a pixel
or so), probably by the _EXTRACT_SLICES_ primitive. A previously
generated arlines file, listing the wavelengths of the spectral lines for
the appropriate lamp, grism etc is obtained via the calibration system
and copied to the current directory for use with Iarc.

The resulting .iar file is filed with the calibration system for use
with subsequent IFU frames. The entry in the index file is in the format
filename:lambda_min:lambda_max where lambda_min and lambda_max are the minimum
and maximum wavelengths that should be used when the frame is scrunched. These
are calculated by the _CALCULATE_WAVELENGTH_RANGE_PRIMITIVE_

The .iar file is read. If any rows have not been fitted or if
the maximum rms on the wavelength fit exceeds a threshold value
(currently 1.0) the user will be warned.

=head1 NOTES

=over 4

=item *

The frame should previously have been approximately straightened.

=item *

The fitting starts from the central row of a central slice, obtained 
from the user headers IFU_start, IFU_end, IFU_xshift and IFU_yshift.
The number of slices should be in the IFU_slices user header.

=item *

The arlines calibration files are intended to be static. They are 
stored in $ORAC_DATA_CAL/arcs/ and the index file is in $ORAC_DATA_CAL.


=back

=head1 OUTPUT DATA

No output frame is produced, and no changes are made to the input frame.
The only output is a .iar file for use in calibrating subsequent IFU
data. This is filed with the calibration system.

=back

=head1 TASKS

figaro3: iarc

=head1 AUTHORS

Stephen Todd <spt@roe.ac.uk>

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

use File::Copy;

my $in = $Frm->file();

# Get the number of slices so we can determine the central row.
my $n_slices = $Frm->uhdr("IFU_slices");
unless (defined $n_slices) {
  orac_throw("uhdr IFU_slices undefined.\n");
}
my $row = ( ($Frm->uhdr("IFU_start")->[int($n_slices/2)-1]) +
            ($Frm->uhdr("IFU_end")->[int($n_slices/2)-1]));
$row = int($row/2);

# Find out what the shift is between our input image and the reference
# spectrum using cross-correlation.
_CROSS_CORRELATE_
my $shift = $_CROSS_CORRELATE_{SHIFT};

# Warn if the shift is greater than 20 pixels.
if( abs( $shift ) > 20 ) {
  orac_warn("Cross-correlation shift is $shift. Possible error with arc.\n");
  orac_warn("Continuing with wavelength calibration.\n");
}

# Get the appropriate arlines file from the calibration system. Note that
# these are intended to be static and therefore the arlines files and the
# arlines.index file are stored in the $ORAC_DATA_CAL directory.

my $arlines = $ENV{ORAC_DATA_CAL} . "/" . $Cal->arlines;
orac_print "Using arlines file: $arlines \n";

# Iarc always uses arlines.lis in the current directory, so need to copy
# correct arlines file to here

copy ("$arlines", "arlines.lis");

# Do the Iarc, starting from the centre of a central slice
orac_print "Running IARC on $in, starting at row $row.\n";

my $param1;
my $param2;
if( starversion_gt('figaro', '5.6-1') ) {
  $param1 = "image=$in rstart=$row file=$in.iar chanshift=$shift";
  $param2 = "rwidth=1 rsigma=3 spread=t lock=f xcorr=f gap=1 sigmin=5";
} else {
  orac_warn "FIGARO is v5.6-1 or earlier. Will not use cross-correlation results in arcline fitting.\n";
  $param1 = "image=$in rstart=$row file=$in.iar";
  $param2 = "rwidth=1 rsigma=20 spread=t lock=f xcorr=f gap=1 sigmin=5";
}
$Mon{'figaro3'}->obeyw("iarc", "$param1 $param2");

# Look to see how good Iarc thought the fit was

open (my $iar, "$in.iar") or die "Cannot open $in.iar\n";

while (<$iar>) {
    if (m/Number of rows that could not be fitted =\s*(\d+)/) {
	if ($1 > 0) {
	    orac_warn("IARC has failed to fit $1 rows of the spectrum.\nExamine the scrunched arc spectrum to see what effect this has had.\n");
	}
    }

    if (m/Maximum RMS error =\s*([\d\.]+)/) {
	# This number might need refining, but 1 seems a reasonable guess
	if ($1 > 1.0) {
	    orac_warn("Maximum RMS error of $1 reported by IARC seems rather high.\nExamine the scrunched arc spectrum to see what effect this has had.\n");
	}
    } 
}  


_CALCULATE_WAVELENGTH_RANGE_

my $min = $Frm->uhdr( "LAMBDA_MIN");
my $max = $Frm->uhdr( "LAMBDA_MAX");

# Add this frame to the index of iar frames.
$Cal->iar( "$in.iar:$min:$max" );
$Cal->iarindex->add("$in.iar:$min:$max", {%{$Frm->hdr}, %{$Frm->uhdr}} );

# Report the processing status.
orac_print "$in.iar filed as the current IARC calibration.\n\n";

