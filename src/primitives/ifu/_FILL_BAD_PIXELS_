# Podule
# ======

=head1 NAME

_FILL_BAD_PIXELS_ -- Fills bad pixels by smoothing an IFU arc frame.

=head1 DESCRIPTION

It is useful to fill bad pixels before running Iarc to wavelength calibrate
an arc file (Iarc does not recognise bad pixels at present). The bad pixels
are filled by smoothing the frame with a 1x6 box. This seems to be the most
reliable way to replace bad pixels which fall on arc lines with a sensible
value. Routines such as KAPPA fillbad or glitch tend to underestimate these
values, which can move the centroid of the arc line, making a significant
difference to the higher order coefficients of the wavelength fit.

The slices are all treated separately to prevent the introduction of
cross-talk from one slice to another when the value of a pixel near the
edge of a slice is estimated.

=head1 NOTES

=over 4

=item *

The locations of the slices and the shifts which should be applied are
obtained from the user headers IFU_start, IFU_end, IFU_xshift and
IFU_yshift. Each of these is an array with an element for each slice
The number of slices should be in the IFU_slices user header.

=item *

The bad pixels in each slice are filled separately.

=back

=head1 OUTPUT DATA

=over 4

=item *

The output frame is the result of smoothing the input frame with a 1x6 box
so that bad pixels are filled.

=item *

Output frame has _bpf suffix

=back

=head1 TASKS

kappa_mon: paste, block
ndfpack_mon: ndfcopy

=head1 AUTHORS

SPT: Stephen Todd <spt@roe.ac.uk>

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut


(my $in, my $out) = $Frm->inout( "_bpf" );

orac_print "Filling bad pixels.\n";


# and create a temporary file
my $tmp = new ORAC::TempFile;
my $tmp_file = $tmp->file;
my $tmp2 = new ORAC::TempFile;
my $tmp_paste = $tmp2->file;


# Get number of slices and check that the user headers have been defined
my $n_slices = $Frm->uhdr("IFU_slices");
unless (defined $n_slices) {
    die "uhdr IFU_slices undefined.\n" .
	"This should probably have been written by _LOCATE_SLICES_.\n";
}

orac_print "Working on slice: ";

# Loop over all slices
for my $n (0..($n_slices-1)) {
    orac_print "$n, ";

    # Find the start, end, xshift and yshift of each slice from the uhdr which
    # should have been written by _LOCATE_SLICES_ (and check that they're
    # defined).

    my $ystart = $Frm->uhdr->{"IFU_start"}->[$n];
    unless (defined $ystart) {
	die "uhdr IFU_start[$n] undefined.\n" .
	    "Something wrong in _LOCATE_SLICES_ ?\n";
    }

    my $yend = $Frm->uhdr->{"IFU_end"}->[$n];
    unless (defined $yend) {
	die "uhdr IFU_yend[$n] undefined.\n" .
	    "Something wrong in _LOCATE_SLICES_ ?\n";
    }

    # Fill the bad pixels, copying the slice to temporary file
    #my $param = "in=$in(,$ystart:$yend) out=$tmp_file niter=6";
    #$Mon{"kappa_mon"}->obeyw( "fillbad", "$param" );

    # Currently just smoothing eith 1x6 box filter. Seems to work quite well
    # **TODO** QUANTIFY PERFORMANCE
    my $param = "in=$in(,$ystart:$yend) out=$tmp_file box=[1,6] wlim=0.1 estimator=median";
    $Mon{"kappa_mon"}->obeyw("block", "$param");

    #my $param = "in=$in(,$ystart:$yend) out=$tmp_file mode=bad";
    #$Mon{"kappa_mon"}->obeyw("glitch", "$param");


    # If this is not the first slice then paste it onto what we've
    # already got (stored in the other temporary file) and write it
    # to $out.
    if ($n > 0) {
        $param = "$tmp_paste $tmp_file out=$out title=ifu_data";
        $Mon{"kappa_mon"}->obeyw("paste", "$param");

	# Copy the current $out to $tmp_paste for use next time round.
	$param = "in=$out out=$tmp_paste";
        $Mon{"ndfpack_mon"}->obeyw( "ndfcopy", "$param" );
    } else {
	# If it is the first slice then just copy it to $tmp_paste
	# ready for use next time round and set $flag to true.
        $param = "in=$tmp_file out=$tmp_paste";
        $Mon{"ndfpack_mon"}->obeyw( "ndfcopy", "$param" );
    }
}

# Make display tidy
orac_print "\n\n";

# Set the output name
$Frm->file( $out );


