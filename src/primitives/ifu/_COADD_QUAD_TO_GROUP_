# -*- perl -*-


# Podule
# ======

=head1 NAME

_COADD_QUAD_TO_GROUP_ -- Coadds a quad to its group.

=head1 DESCRIPTION

This primitive coadds the current quad to its group. If the group file
does not exist, the current quad is copied into the appropriate file.

Coaddition is done using CCDPACK/MAKECAL, and as such, any of the
combination methods for CCDPACK/MAKECAL can be used. This primitive
defaults to using a broadened median method, which is suitable for
normal operations.

=head1 ARGUMENTS

=over 4

=item METHOD = CHARACTER (Given)

The method for combining quads. This parameter can be any of the methods
listed for frame combination in CCDPACK/MAKECAL (see SUN/139). [broadened]

=back

=head1 AUTHOR

Brad Cavanagh (JAC) <b.cavanagh@jach.hawaii.edu>
Malcolm J. Currie <mjc@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research Council.
Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Perform operations if it is time to do so.
if ($Frm->uhdr("QUAD_COMPLETE")) {

  # Obtain the value for the combination method.
  my $method = ( $_COADD_QUAD_TO_GROUP_{METHOD} || "broadened" );

  # The group file name - we use the ->raw one here, as subsequent steps
  # (eg extraction) will update the ->file and we want none of that here
  my $groupfile = $Grp->raw;
  $Grp->file($groupfile);

  # Get the filename for the sky subtracted pair (ignore $out)
  my ($in, $out) = $Frm->inout("_junk");
  my $obsnum = $Frm->number;

  # Flag this file as being the one that was quad combined.
  $Frm->tagretrieve( 'QUAD_COMBINE' );
  $Frm->tagset( 'QUAD_COMBINE' );

  # If it doesn't exist, create the group file
  if (!($Grp->file_exists)) {

    # Create the group file by copying the sky subtracted pair into it
    orac_print "Creating group $groupfile with $in.\n";
    $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$in out=$groupfile title=$groupfile");

  } else {
    # The group file does exist. Coadd the current pair into it.

    # Get a list of the group members so far, and only use those that
    # have the 'QUAD_COMPLETE' uhdr set to 1.
    my $subgrp = $Grp->subgrp(QUAD_COMPLETE => 1);

    my @members = $subgrp->members;

    # We want to combine all of the members of $subgrp into the
    # output file. These need to be written into a temporary file
    # so that the command-line for makemos doesn't get too large.
    my $inputlist = "inlist.list$$";
    unlink( $inputlist );
    open( my $fh_inlist, ">$inputlist" ) ||
      orac_throw "Unable to open $inputlist to create a list of frames to coadd. Error: $!\n";
    foreach my $member (@members) {

      # Retrieve the filename from the quad combination step.
      $member->tagretrieve( 'QUAD_COMBINE' );
      my $file = $member->file;
      $Mon{ "ndfpack_mon" }->obeyw( "wcsframe", "ndf=$file frame=GRID" );
      print $fh_inlist $file, "\n";
    }
    close( $fh_inlist );

    # Set up the parameters for MAKECAL.
    my $param1 = "in='^$inputlist' out=$groupfile title=!";
    my $param2 = "method=$method alpha=0 expose=1 keepin=true minpix=0";

    # Delete the existing output file.
    unlink( $groupfile );

    # Combine the images.
    $Mon{'ccdpack_red'}->obeyw("makecal", "$param1 $param2");

    # Delete the list of input files.
    unlink( $inputlist );

    # Reset the WCS to AXIS.
    foreach my $member (@members) {
      $member->tagretrieve( 'QUAD_COMBINE' );
      my $file = $member->file;
      $Mon{ "ndfpack_mon" }->obeyw( "wcsframe", "ndf=$file frame=AXIS" );
    }
    $Mon{ "ndfpack_mon" }->obeyw( "wcsframe", "ndf=$groupfile frame=AXIS" );

    # Need to know how many pairs are in the group
    my $nobs = scalar( @{ scalar($Grp->coadds) } ) + 1;

    # Report to the user.
    orac_print "$in coadded to $groupfile by $method method.\n";
    orac_print "Group $groupfile now contains $nobs quads: ";

    my $membersstring = join ", ", ( map { $_->file } @members );

    orac_print "$membersstring\n";

    # Now update the FITS header to reflect the new end airmass, using the
    # value from the current frame.  Using the internal header, obtain the
    # name of the external keyword.

    my $amendname = "ORAC_AIRMASS_END";
    my %am_translated = $Frm->translate_hdr( $amendname );
    while( my ( $key, $value ) = each %am_translated ) {
      _SET_GROUP_FITS_ITEM_ KEY=$key VALUE=$value
    }

    # Do likewise for the end UT time.
    my $utendname = "ORAC_UTEND";
    my %ut_translated = $Frm->translate_hdr( $utendname );
    while( my ( $key, $value ) = each %ut_translated ) {
      _SET_GROUP_FITS_ITEM_ KEY=$key VALUE=$value
    }
  }

  # Update the group object.  Use the _dif file for the product since
  # it's easier to recognise and it is no longer the raw file, which
  # the sync_headers() method will ignore and hence there would be no
  # PRODUCT header written.
  $Grp->coaddspush( $obsnum );
  $Grp->file( $groupfile );

  my $suffix = "dif";
  ( undef, $out ) = $Grp->inout( "_" . $suffix );
  $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$groupfile out=$out" );
  $Grp->file( $out );
  $Grp->readhdr;

  # Store the PRODUCT keyword and comment.
  my $product = "stacked";
  my $comment = "Stacked scrunched spectra";
  $Grp->product( $product, $comment );

  # Update the headers with the PRODUCT.
  $Grp->allow_header_sync( 1 );
  $Grp->sync_headers( 1 );
  $Grp->allow_header_sync( 0 );

  # Create the preview images and create the jsa:product keyword within them.
  my $preview_suffix = $suffix . "_rimg";
  _TAG_AS_REPRESENTATIVE_ UPDATE=0 GROUP=1 PRODUCT=$product SUFFIX=$preview_suffix COMMENT=$comment

  # Restore the original `extensionless' group file.
  $Grp->file( $groupfile );

  # Display if necessary.
  $Display->display_data($Grp) if defined $Display;

  # Tidy up output.
  orac_print "\n";

}
