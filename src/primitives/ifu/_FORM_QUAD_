# -*-perl-*-

=head1 NAME

_FORM_QUAD_ - Forms a quad by averaging together two pairs.

=head1 DESCRIPTION

This primitive forms a quad by averaging together two pairs. It determines
which pairs to average by examining the QUAD_STEP argument. This argument
refers to an internal header set by one of the preceding primitives, such that
this primitive will use the output of that primitive.

=head1 PARAMETERS

=over 4

=item QUAD_STEP = CHARACTER (Given)

The name of the internal header and tag that this primitive will use
to do averaging. The tag must be set to this primitive can refer
to a specific file, and the header must be set so a subgroup can be
formed. If one (or both) of the header and tag is not set, then
errors will happen. [SCRUNCH_RESULT]

=back

=AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Obtain the tag to use.
my $tag = $_FORM_QUAD_{QUAD_STEP} || "SCRUNCH_RESULT";

$Frm->uhdr( "QUAD_AVERAGE_RESULT", 0 );

# Perform operations if it is time to do so.
if( $Frm->uhdr( "QUAD_COMPLETE" ) ) {

  # Output will be _quad.
  my ( $in, $out ) = $Frm->inout("_quad");

  # At this point we're ready to form a quad out of the previous
  # two sky-subtracted frames.

  my $subGrp = $Grp->subgrp($tag => 1);
  my @members = $subGrp->members;

  # Take the most recent two members.
  my $first = $members[-1];
  $first->tagretrieve( $tag );
  my $second = $members[-2];
  $second->tagretrieve( $tag );

  # Average these two together into a quad.
  my $firstFile = $first->file;
  my $secondFile = $second->file;
  my $param = "exp='(IA+IB)/2' ia=$firstFile ib=$secondFile out=$out";
  $Mon{ "kappa_mon" }->obeyw( "maths", "$param" );

  # Update the Frm object.
  $Frm->file( $out );

  # Tag the frame as being the quad.
  $Frm->uhdr("QUAD_AVERAGE_RESULT", 1);
  $Frm->tagset( "QUAD_AVERAGE_RESULT" );

  # Print message.
  orac_print "$firstFile and $secondFile averaged to give $out\n\n";

}
