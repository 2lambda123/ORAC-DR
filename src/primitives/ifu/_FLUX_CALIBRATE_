# -*-cperl-*-

=head1 NAME

_FLUX_CALIBRATE_ - Flux calibrate an IFU observation.

=head1 DESCRIPTION

Flux calibrate an IFU observation that has been divided by a standard star by
multiplying by an appropriate scaling factor. This scaling factor depends
on the magnitude and spectral type of the standard star.

This primitive works on either 1D, 2D, or 3D observations. If a 1D observation
is flux calibrated, the resulting file ends in _sp_fc. If a 2D observation is
flux calibrated, the resulting file ends in _im_fc. If a 3D observation is
flux calibrated, the resulting file ends in _cube_fc.

=head1 NOTES

=over 4

=item *

Sets the Frame internal header FLUX_CALIBRATED to true (1).

=back

=head1 AUTHORS

Paul Hirst <p.hirst@jach.hawaii.edu>
Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2004 Particle Physics and Astronomy Research Council.
Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

if ($Frm->uhdr("PAIR_COMPLETE")) {

  my $raw = $Grp->raw;
  my $in = $Grp->file;
  my $out;

# The output filename depends on the dimensions of the
# group. 1D is _sp_fc, 2D is _im_fc, 3D is _cube_fc.
  $Mon{'ndfpack_mon'}->obeyw("ndftrace", "ndf=$in");
  my ( $ORAC_STATUS, @dims ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "dims" );
  my $suffix = "fc";
  if( defined( $dims[2] ) ) {
    # We've got a cube.
    $out = $raw . "_cube_" . $suffix;
  } elsif ( defined( $dims[1] ) ) {
    # We've got an image.
    $out = $raw . "_im_" . $suffix;
  } else {
    # We've got a spectrum.
    $out = $raw . "_sp_" . $suffix;
  }

  # Find me a standard.
  my $std = $Cal->standard;
  orac_print "Standard: $std will be used\n";

  # Need to find the mag of the std in the band that we're observing in.

  # Get the index entry for that standard.
  my $stdidx = $Cal->standardindex->indexentry( $std );

  # Get the VMAG and SPECTYPE from it.
  my $stdvmag = $stdidx->{'VMAG'};
  my $stdspec = $stdidx->{'SPECTYPE'};

  if( ( defined( $stdvmag ) && defined( $stdspec ) ) &&
      ( $stdvmag ne 'UNKNOWN' && $stdspec ne 'UNKNOWN' ) ) {

    # Get the waveband name.
    my $wband = $Frm->uhdr( "WAVEBAND" );

    # Now get the mag of the std in that band...
    _GET_REFERENCE_MAGNITUDE_ BAND=$wband SPECTRAL_TYPE=$stdspec VMAG=$stdvmag
    my $mag = $_GET_REFERENCE_MAGNITUDE_{MAG};

    # and the reference flux.
    _GET_REFERENCE_FLUX_ BAND=$wband
    my $flux = $_GET_REFERENCE_FLUX_{FLUX};

    if ( $mag ne "UNKNOWN" && $flux ne "UNKNOWN" ) {

      # It is OK to proceed.

      # Convert this into W/m2/um.  Set the label and units.
      my $stdflux = 10**( -0.4 * $mag ) * $flux;

      $Mon{'kappa_mon'}->obeyw("cmult", "in=$in out=$out scalar=$stdflux title=$out");
      $Mon{'ndfpack_mon'}->obeyw("setunits", "ndf=$out units='W/m**2/um'");
      $Mon{'ndfpack_mon'}->obeyw("setlabel", "ndf=$out label=Flux");
      $Grp->uhdr( "FLUX_CALIBRATED", 1 );

      orac_print "$in to $out: Flux calibrated\n";

      $Grp->file($out);

      # Create the PRODUCT keyword and comment, and preview suffix
      # appropriate for the dimensionality.
      my $product = "reduced";
      my ( $comment, $preview_suffix );
      if ( defined( $dims[2] ) ) {

        # Set the product comment.
        $comment = "Flux-calibrated cube";

      } elsif ( defined( $dims[1] ) ) {

        # Set the product name.
        $comment = "Flux-calibrated white-light image";
        $preview_suffix = $suffix . "_rimg";

      } else {

        # Set the product comment.
        $comment = "Flux-calibrated spectrum";
        $preview_suffix = $suffix . "_rsp";

      }
      $Grp->product( $product, $comment );

      # Update the headers with the PRODUCT.
      $Grp->allow_header_sync( 1 );
      $Grp->sync_headers( 1 );
      $Grp->allow_header_sync( 0 );

      # Display the spectrum.
      $Display->display_data( $Grp ) if defined $Display;

      # Create the preview images and set the jsa;product keyword therein.
      if ( ! defined( $dims[2] ) ) {
         _TAG_AS_REPRESENTATIVE_ UPDATE=0 GROUP=1 SUFFIX=$product PRODUCT=$preview_suffix COMMENT=$comment
      }

    } else {
      orac_print "Could not flux calibrate\n";
    }

  } else {

    orac_print "Do not have one of V magnitude, spectral type, or temperature for standard.\nWill not flux calibrate.\n\n";

  }

  # Tidy up output.
  orac_print "\n";

}
