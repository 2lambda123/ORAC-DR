
# 		-*-cperl-*-

=head1 NAME

_SCRUNCH_TO_COMMON_WAVELENGTH_SCALE_ -- Straightens and wavelength calibrates an IFU frame.

=head1 DESCRIPTION

This primitive scrunches an IFU frame, simultaneously straightening
the spectra and applying a wavelength calibration to them. The .iar
file used for the calibration should have been previously generated
from an IFU arc spectrum and filed in the calibration system

The input frame should have been approximately straightened (to a pixel
or so), probably by the _EXTRACT_SLICES_ primitive. The wavelength range
to which the frame should be scrunched is obtained from the grism data
file returned by the calibration system. 


=head1 NOTES

=over 4

=item *

The frame should previously have been approximately straightened.

=item *

The wavelength calibrations previously measured from an arc spectrum
are applied, and simultaneously straighten the spectra.

=item *

The file containing the wavelengths to be applied is obtained from the
calibration system. The format of the entry in index.iar is
file.iar:min:max where min and max are the minimum and maximum
wavelengths that should be used when the frame is scrunched.

=item *

The variance array is scrunched separately and copied back into the
output frame (not strictly correct because errors on adjacent pixels
are correlated after resampling, but better than nothing).

=item *

Sets the ORAC_GRATING_WAVELENGTH to the central wavelength in
Angstroms (with one digit after decimal point so that it is not
interpreted as a pixel coordinate in later routines.

=item *

Updates the FITS header for the centre of the wavelength range and
the dispersion.

=back

=head1 OUTPUT DATA

=over 4

=item *

The output frame is scrunched to a linear wavelength scale, common to
all slices. The output file has a suffix of _scr.

=back

=head1 TASKS

figaro3: iscrunch
ndfpack_mon: ndftrace, ndfcopy
kappa_mon: thresh

=head1 AUTHORS

SPT: Stephen P. Todd (Edinburgh University/UKATC)

=head1 COPYRIGHT

Copyright (C) 1998-2005 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Bring in Starlink::HDSPACK
use Starlink::HDSPACK qw/ copy_hdsobj create_hdsobj /;

# We're going to need some temporary files
use ORAC::TempFile;

(my $in, my $out) = $Frm->inout( "_scr" );

# get the appropriate iar file
my ($iarfile, $min, $max) = split(':', $Cal->iar);


orac_print "Using $iarfile to wavelength calibrate $in and straighten frame.\n";

unless (-e $iarfile) {
    die "$iarfile does not exist.\n";
}

my $numpix = 1024;

orac_print "Scrunching $in to $numpix pixels from $min to $max Angstroms.\n";

# And scrunch it
my $param = "image=$in file=$iarfile wstart=$min wend=$max bins=$numpix output=$out log=f quad=t density=f";
$Mon{'figaro3'}->obeyw("iscrunch", "$param");

# Iscrunch does not complain, even if it has failed, so we should check
# that it has created an output file
unless (-e "$out.sdf") {
  orac_throw "ISCRUNCH failed. Probable cause is IARC failing to find proper fit in wavelength calibration.\nPossible solution is to tweak rsigma parameter in _WAVELENGTH_CALIBRATE_\n"
};

# We need to copy the variance array and scrunch it separately
$Mon{ "ndfpack_mon" }->obeyw( "ndftrace", "ndf=$in" );
(my $ORAC_STATUS, my $variance) = $Mon{ "ndfpack_mon" }->get( "ndftrace", "variance" );

orac_print "Variance = $variance\n";

if ( $variance eq "TRUE" ) {
# create some temporary files
    orac_print "Scrunching variance array in $in.\n";

    my $tmpfile1 = new ORAC::TempFile;
    my $tmp = $tmpfile1->file;

    my $tmpfile2 = new ORAC::TempFile;
    my $tmp2 = $tmpfile2->file;

    my $tmpfile3 = new ORAC::TempFile;
    my $tmp3 = $tmpfile3->file;

    my $tmpfile4 = new ORAC::TempFile;
    my $tmp4 = $tmpfile4->file;

    my $tmpfile5 = new ORAC::TempFile;
    my $tmp5 = $tmpfile5->file;

    my $ORAC_STATUS = ( create_hdsobj( $tmp, 'NDF', [ 0 ] ) ? ORAC__OK : ORAC__ERROR );

    $ORAC_STATUS = ( copy_hdsobj( "$in.VARIANCE", "$tmp.DATA_ARRAY" ) ? ORAC__OK : ORAC__ERROR );

    # Scrunch the variance array.
    my $param = "image=$tmp file=$iarfile wstart=$min wend=$max bins=$numpix output=$tmp2 log=f quad=t density=f";
    $Mon{'figaro3'}->obeyw("iscrunch", "$param");

    # Threshold anomalous values.
    $Mon{'kappa_mon'}->obeyw("thresh", "in=$tmp2 out=$tmp3 thrlo=0 newlo=bad thrhi=1E5 newhi=bad");

    # Copy the bad pixels flagged in the variance array to the data array.
    $Mon{'kappa_mon'}->obeyw("copybad", "in=$out ref=$tmp3 out=$tmp4");

    # Copy the variance array over to the output file.
    $ORAC_STATUS = ( copy_hdsobj( "$tmp3.DATA_ARRAY", "$tmp4.VARIANCE" ) ? ORAC__OK : ORAC__ERROR );

    $Mon{'kappa_mon'}->obeyw("thresh", "in=$tmp4 out=$tmp5 comp=VARIANCE thrlo=1e-15 newlo=bad thrhi=1E5 newhi=bad");

    $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$tmp5 out=$out");

}

# Convert from angstrom to micron.
$Mon{'ndfpack_mon'}->obeyw("setaxis", "ndf=$out mode=expression exprs='CENTRE/10000' dim=1");
$Mon{'ndfpack_mon'}->obeyw("axunits", "ndf=$out dim=1 units=Micron");
$Mon{'ndfpack_mon'}->obeyw("wcsframe", "ndf=$out frame=axis");

orac_print "$in to $out: Scrunched, wavelengths in microns.\n";

$min /= 10000;
$max /= 10000;

# Set the name of the output frame
$Frm->file( $out );

$Frm->uhdr( "ORAC_GRATING_WAVELENGTH" => sprintf("%.12f", ($max + $min)/2));
orac_print "ORAC_GRATING_WAVELENGTH set to " . sprintf("%.4f", ($max + $min)/2) . "\n";

$Frm->uhdr( "ORAC_GRATING_DISPERSION" => sprintf("%.12f", ($max - $min)/1023));
orac_print "ORAC_GRATING_DISPERSION set to " . sprintf("%.7f", ($max - $min)/1023) . "\n";

$Frm->uhdr( "LAMBDA_MIN" => "$min");
$Frm->uhdr( "LAMBDA_MAX" => "$max");

# Update the FITS headers in the file.
my $cenwavname = "ORAC_GRATING_WAVELENGTH";
my $cenwav = $Frm->uhdr( $cenwavname );
my %keywords = $Frm->translate_hdr( $cenwavname );
my @cenwavkey = keys( %keywords );
  {
    no warnings 'misc';
    _SET_FRAME_FITS_ITEM_ KEY=$cenwavkey[0] VALUE=$cenwav
  }

my $dispname = "ORAC_GRATING_DISPERSION";
my $disp = $Frm->uhdr( $dispname );
%keywords = $Frm->translate_hdr( $dispname );
my @dispkey = keys( %keywords );
  {
    no warnings 'misc';
    _SET_FRAME_FITS_ITEM_ KEY=$dispkey[0] VALUE=$disp
  }

# Fix the FITS WCS headers while we're at it. Central
# wavelength is in CRVAL1, dispersion is in CDELT1.
  {
    no warnings 'misc';
    _SET_FRAME_FITS_ITEM_ KEY=CRVAL1 VALUE=$cenwav
    _SET_FRAME_FITS_ITEM_ KEY=CDELT1 VALUE=$disp
  }

# Copy the history over from the input.
$ORAC_STATUS = ( copy_hdsobj( "$in.HISTORY", "$out.HISTORY" ) ? ORAC__OK : ORAC__ERROR );

# Add a comment reflecting scrunching was performed.
$Mon{'ndfpack_mon'}->obeyw("hiscom", "ndf=$out mode=interface comment='Scrunched via FIGARO/ISCRUNCH'");

# And display it
$Display->display_data($Frm) if defined $Display;

# Tag it so we can access this frame later.
$Frm->tagset('SCRUNCH_RESULT');
$Frm->uhdr('SCRUNCH_RESULT' => 1);
