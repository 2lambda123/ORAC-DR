# 		-*-perl-*-

#+
#
#
#-

(my $in, my $out) = $Frm->inout( "_str" );

my $line = 1;
my $fwhm = 1.8;
my $param;
my $ORAC_STATUS;
my @centre;

$Mon{'ndfpack_mon'}->obeyw("ndftrace", "$in");
($ORAC_STATUS, my @dims) = $Mon{'ndfpack_mon'}->get("ndftrace", "dims");

my $ymin = 1;
my $ymax = $dims[1];


orac_print("$ymin -> $ymax \n");




my $grism1=$Frm->hdr("GRISM1");
my $grism2=$Frm->hdr("GRISM2");
my $grism;

if ($grism1 ne "Open" && $grism2 eq "Open") {$grism=$grism1;}
if ($grism1 eq "Open" && $grism2 ne "Open") {$grism=$grism2;}


open(GRISMS, $ORAC_DATA_CAL . "/grism_offset.dat");
my $offset;
my $name;
my @fit;
my $arline;
my $krline;

 LINE2: while (my $str = <GRISMS>) {
     # Skip lines which don't start with the grism name
     next LINE2 if (index ($str, $grism) < 0);
     ($name, $offset, $fit[0], $fit[1], $fit[2], $arline, $krline) = split(' ' , $str);
 }
close GRISMS;

my $true_line= (-$fit[1]-sqrt($fit[1]**2 - 4*$fit[2]*($fit[0]-$arline))) / (2*$fit[2]); 
my $line=$true_line;

my $mask1 = $line - 10;
my $mask2 = $line + 10;

orac_print "Fit: $fit[0], $fit[1], $fit[2]    Ar line $arline at $line";


# Estimate continuum level as approx median level of image
$Mon{'kappa_mon'}->obeyw("histat", "ndf=$in percentiles=!");
($ORAC_STATUS, my $median) = $Mon{'kappa_mon'}->get("histat", "median");

orac_print("Continuum level estimated to be $median \n");

my $total = 0;
my $num = 0;

#$Mon{'kappa_mon'}->obeyw("stats", "$in($mask1:$mask2,1)");
#($ORAC_STATUS, $line, my $junk) = $Mon{'kappa_mon'}->get("stats", "maxcoord");

# Fit a gaussian to each row
for (my $n=$ymin; $n<=$ymax; $n++) {
    orac_print("$n, ");
    
    $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$in($mask1:$mask2,$n) out=tmp");
    $Mon{'kappa_mon'}->obeyw("stats", "tmp");
    ($ORAC_STATUS, $num) = $Mon{'kappa_mon'}->get("stats", "numgood");
    
    if ($num > 0) {
	$param = "dialog=f in=tmp device=! mask1=$mask1 mask2=$mask2 ncomp=1 cont=$median centre=$line peak=4000 fwhm=$fwhm cf=0 pf=0 wf=0 reguess=n fitgood=y comp=0 logfil=!"; 
	$Mon{'figaro4'}->obeyw("fitgauss", "$param");
	($ORAC_STATUS, $centre[$n]) = $Mon{'figaro4'}->get("fitgauss", "fcentre");
	$line = $centre[$n];
    } else {
	$centre[$n] = $centre[$n-1];
	$line = $centre[$n];
    }
    
    $total += $centre[$n];

}
my $mean=$total/$#centre;

# Write the results into an ndf file
use Env (ORAC_DATA_OUT);
open(OFFSETS, ">$ORAC_DATA_OUT/offsets.dat");
my $offset;

for (my $n =$ymin ; $n<=$ymax ; $n++) {
    printf OFFSETS ("%d  %f  \n",$n, $true_line-$centre[$n]) ;
}
close OFFSETS;


