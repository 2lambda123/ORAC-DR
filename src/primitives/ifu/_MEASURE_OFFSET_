# 		-*-perl-*-

=head1 NAME

_MEASURE_OFFSET_ -- measures the vertical offset which must be applied to an IFU profile.

=head1 DESCRIPTION

This primitive measures the y-offset which must be applied to the IFU
profile stored in the calibration directory. This value is then filed 
in the calibration system for use when reducing further observations. 

This primitive should be run on an IFU frame of a uniform source. A flat-field
image would probably be best for this, though arc spectra or even sky 
background would probably be possible. 

The frame is compressed in the x-direction then shifted one pixel at a time
to find the best overlap with the positions of the slices given by the
profile. 

=head1 NOTES

=over 4

=item *

This primitive is written for the UIST IFU.

=item *

The measured offset is filed with the calibration system for later use.

=head1 OUTPUT DATA

=over 4

=item *

No output frame is generated. 

=back

=head1 TASKS

figaro1: ystract
figaro4: ascout

=head1 AUTHORS

SPT: Stephen P. Todd (Edinburgh University/UKATC)

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut



# We're going to need some temporary files
use ORAC::TempFile;

my $in = $Frm->file;
my $grism = $Frm->hdr("GRISM");
orac_print "Measuring offset from profile using $in (Grism: $grism)\n";


# Defines the region compressed in the x-direction to measure the profile
my $xstart = 200;
my $xend = 800;

# Set the minimum and maximum offsets to try 
my $offset_min = -10;
my $offset_max = 20;



# create a temporary file
my $tmp_file1 = new ORAC::TempFile;
my $tmp1 = $tmp_file1 ->file;

# compress the image in the x direction
my $param = "image=$in xstart=$xstart xend=$xend spectrum=$tmp1";
$Mon{'figaro1'}->obeyw("ystract", "$param");


# turn the 'spectrum' into a text file, and read it back in to @measured
my @measured;

if (-e $tmp1) {unlink $tmp1}
$Mon{'figaro4'}->obeyw("ascout", "in=$tmp1 out=$tmp1 bad=0 width=no");

open(my $TMP, "$tmp1") or die "Failed to read $tmp1\n";

# read it into @measured so that the intensity at pixel n is in 
# $measured[n+0.5], ie: array starts at 1, compatable with Starlink pixel
# index.
$measured[0] = 0;
 
while (my $line=<$TMP>) {
    if ($line =~ /^\s*-?[\d\.]+\s+(-?[\d\.b]+)/) {
	push @measured, $1;
    }
}

close $TMP;


# Load the profile from the calibration directory
my $profile_file = $ENV{ORAC_DATA_CAL} . "/ifu_profile.dat";

# initialise the array
my @profile = (0) x 1025;

# Read the data into array so that array[n] = 1 if n is within a slice
# and 0 if it is not.
open(my $PROFILE, $profile_file) || die "Could not open $profile_file \n";

while (my $str = <$PROFILE>) {
      next if $str eq "\n";

      my ($start, $end) = (split /\s+/, $str ) ;
      @profile[$start..$end] = (1) x ($end - $start + 1) ;   
}
close $PROFILE;



# For each possible offset measure the total intensity allowed through the 
# 'mask' of the profile
my $max = 0;
my $best_offset;

for my $offset ($offset_min..$offset_max) {
    my $sum = 0;
    my $y1 = ($offset < 1) ? 1 : $offset;
    my $y2 = ($offset < 1) ? 1023 + $offset : 1024;

    
    for my $n ($y1..$y2) {
	if (! defined($profile[$n - $offset])) {
	    orac_print "$n  $offset \n";
	}
	$sum += $measured[$n] * $profile[$n - $offset];
    }

    if ($sum > $max) {
	$max = $sum;
	$best_offset = $offset;
    }
}

orac_print "The offset for $grism is $best_offset pixels \n";

# File this value with the calibration system for future use
$Cal->offsetindex->add("$best_offset", {%{$Frm->hdr}, %{$Frm->uhdr}} );
orac_print "Filed with calibration system.\n\n";

