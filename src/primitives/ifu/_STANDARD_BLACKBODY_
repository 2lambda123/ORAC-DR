=head1 NAME

_STANDARD_BLACKBODY_ - Divide a standard star spectrum by a blackbody model.

=head1 DESCRIPTION

This primitive

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>
Brad Cavanagh <b.cavanagh@jach.hawaii.edu>
Malcolm J. Currie <mjc@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2004 Particle Physics and Astronomy Research Council.
Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Get the temperature from the headers.
my $temp = $Grp->uhdr("TEMPERATURE");

# If we have an actual temperature, proceed with the blackbody division.
if( defined( $temp ) && $temp ne 'UNKNOWN' ) {

# Get the base filename and the current group filename.
  my $base = $Grp->raw;
  my $in = $Grp->file;

# Set up the output filename, which depends on the dimensions
# of the group file. 1D is _sp_dbs, 2D is _im_dbs, 3D is
# _cube_dbs.
  my $out;
  my $suffix = "dbs";
  $Mon{'ndfpack_mon'}->obeyw("ndftrace", "ndf=$in");
  my ( $ORAC_STATUS, @dims ) = $Mon{'ndfpack_mon'}->get("ndftrace", "dims");
  if( defined( $dims[2] ) ) {
    # We've got a cube.
    $out = $base . "_cube_" . $suffix;
  } elsif( defined( $dims[1] ) ) {
    # We've got an image.
    $out = $base . "_im_" . $suffix;
  } else {
    # We've got a spectrum.
    $out = $base . "_sp_" . $suffix;
  }

# Create a blackbody spectrum (temporary file for this).
  my $bb = new ORAC::TempFile;
  my $bbfile = $bb->file;

# And another temporary file.
  my $tmp = new ORAC::TempFile;
  my $tmpfile = $tmp->file;

# Copy the input spectrum into a temp file and make sure the Axis
# label and units are such that FIGARO can understand them.
  $Mon{'ndfpack_mon'}->obeyw("ndfcopy", "in=$in out=$tmpfile");
  $Mon{'ndfpack_mon'}->obeyw("axlabel", "ndf=$tmpfile dim=1 label=Wavelength");
  $Mon{'ndfpack_mon'}->obeyw("axunits", "ndf=$tmpfile dim=1 units=Micron");

# Make the black body spectrum
  $Mon{'figaro4'}->obeyw("bbody", "in=$tmpfile out=$bbfile temp=$temp logar=false");

# This is in silly units (Jy/sr) Convert it to F-lambda back into the tmp file
  $Mon{'figaro2'}->obeyw("fwconv", "spectrum=$bbfile flux_unit=erg output=$tmpfile");

# Normalise it to 1 at the waveband centre.
  my $gwlen = $Frm->uhdr("WAVEBAND_CENTRE");
  if( $gwlen =~ /UNKNOWN/ ) {
    $gwlen = $Frm->uhdr("ORAC_GRATING_WAVELENGTH");
  }

  $Mon{'kappa_mon'}->obeyw("stats", "ndf=$tmpfile($gwlen~1)");
  ($ORAC_STATUS, my $mean) = $Mon{'kappa_mon'}->get("stats", "mean");

  $Mon{'kappa_mon'}->obeyw("cdiv", "in=$tmpfile scalar=$mean out=$bbfile");

# Bodge on a variance component
  $Mon{'ndfpack_mon'}->obeyw("setvar", "ndf=$bbfile variance=0");

# Divide by the black-body specrum
  $Mon{'kappa_mon'}->obeyw("div", "in1=$in in2=$bbfile out=$out title=$out");
  orac_print "$in to $out: Divided by Black Body Standard Star Model\n";
  $Grp->file($out);

# Set the PRODUCT keyword for the reformatted data divided by the standard.
  my $product = "dbs";
  my ( $comment, $preview_suffix );
  if ( defined( $dims[2] ) ) {
     $comment = "Cube divided by standard blackbody";
  } elsif ( defined( $dims[1] ) ) {
     $comment = "White-light image divided by standard blackbody";
     $preview_suffix = $suffix . "_rimg";
  } else {
     $comment = "Spectrum divided by standard blackbody";
     $preview_suffix = $suffix . "_rsp";
  }
  $Grp->product( $product, $comment );

# Update the headers with the PRODUCT.
  $Grp->allow_header_sync( 1 );
  $Grp->sync_headers( 1 );
  $Grp->allow_header_sync( 0 );

# Create the preview images and create the jsa:product keyword within them.
  if ( ! defined( $dims[2] ) ) {
     _TAG_AS_REPRESENTATIVE_ UPDATE=0 GROUP=1 PRODUCT=$product SUFFIX=$preview_suffix COMMENT=$comment
  }

} else {

  orac_warn "Unable to determine temperature of standard. Will not divide by black body.\n";

}

orac_print "\n";
