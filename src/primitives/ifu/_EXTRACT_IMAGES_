# -*- perl -*-

# Podule
# ======

=head1 NAME

_EXTRACT_IMAGES_ -- Extract images from a datacube

=head1 DESCRIPTION

Extract images from a datacube, subtract a continuum image if required
and display the image. The wavelength ranges to be extracted are given
in a file named F<extract.images> in the reduced data directory. This file
has the following format:

=over 4

=item *

Blank lines and lines starting with a # are ignored.

=item *

Lines with the format:
    ext lambda_1 lambda_2
will result in an image formed by collapsing the datacube from lambda_1 to
lambda_2 in a file with the extension _ext.

=item *

Lines with the format:
    ext lambda_1 lambda_2 lambda_3 lambda_4
will result in a continuum subtracted image where the line emission is
in the range lambda_1 to lambda2 and the continuum image is in the range
lambda_3 to lambda_4. The file will have an extension of _ext.

=back

The primitive also creates representative image from which it generates
preview graphics files.

=head1 PARAMETERS

=over 4

=item NOGRP = LOGICAL (Given)

If this parameter is true (1) then the current Frame object will
be used to extract an image from. Otherwise, the current Group
object will be used. [0]

=item SUFFIX = STRING (Given)

The suffix to be appended to the raw filename. ["_im"]

=back

=head1 TASKS

KAPPA: COLLAPSE, SUB.

=head1 AUTHORS

Stephen P. Todd <spt@roe.ac.uk> (Edinburgh University/UKATC)
Brad Cavanagh <b.cavanagh@jach.hawaii.edu> (JAC)
Malcolm J. Currie <mjc@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2004 Particle Physics and Astronomy Research Council.
Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut


# We're going to need some temporary files
use ORAC::TempFile;

my $data_file = "extract.images";

# Obtain parameters. NOGRP defaults to 0, SUFFIX defaults to "_im".
my $nogrp= ($_EXTRACT_IMAGES_{NOGRP}) ? 1 : 0;

my $suffix = defined ( $_EXTRACT_IMAGES_{SUFFIX} ) ?
             $_EXTRACT_IMAGES_{SUFFIX} :
             "_im";

my $root;
my $in;

my $Object;

if ($nogrp) {
    # Get the input filename and obtain the root of the filename (ie all
    # except the final suffix) by using the inout method to attach a suffix
    # of _Z and a substitution to remove the _Z (is there a more direct way
    # to do this?)

    ($in, $root) = $Frm->inout("_Z");
    $root =~ s/_Z$//;
    $Object = $Frm;

} else {
    $root = $Grp->raw;
    $in = $Grp->file;

    $Object = $Grp;
}


# Extract a white-light image.
if (defined $Frm->uhdr("LAMBDA_MIN") && defined $Frm->uhdr("LAMBDA_MAX")) {
    my ($min, $max) = ($Frm->uhdr("LAMBDA_MIN"), $Frm->uhdr("LAMBDA_MAX") );
    my $out = $root . $suffix;

# Cut three percent off the ends so we don't get erroneous data creeping
# in from the interpolated/shifted slices.
    $min = ( $max - $min ) * 0.03 + $min;
    $max = $max - ( $max - $min ) * 0.03;

    orac_print "Forming image from $in with wavelengths $min to $max.\n";
    my $param = "in=$in out=$out axis=3 low=$min high=$max";
    $Mon{'kappa_mon' }->obeyw("collapse", "$param");
    orac_print "Written to $out.\n\n";

# Set the product name.  At present recipes seem to make the flux-calibrated
# cube before calling this primitive.  In case this is wrong or may change
# check that it is indeed flux-calibrated.  Another approach would be
# to compare the NDF label (which would be set to "flux").   Although there
# is similar code in _FLUX_CALIBRATE_ to set different products depending
# whether it is a cube, image, or spectrum, it appears that that
# primitive processes cubes and the image and spectrum are made later.
# It is coded in both places if this proves to be a superficial analysis.
    my ( $product, $comment );
    if ( $Object->uhdr( "FLUX_CALIBRATED" ) ) {
       $product = "reduced";
       $comment = "Flux-calibrated white-light image" ;
    } elsif ( $out =~ /_im$/ ) {
       $product = "image";
       $comment = "White-light image";
    }

# Temporarily define $Object to point to the new file so we can
# display it if necessary, and to assign the product correctly.
    $Object->file( $out );
    $Object->product( $product, $comment );

# Update the headers with the PRODUCT.
    $Object->allow_header_sync( 1 );
    $Object->sync_headers( 1 );
    $Object->allow_header_sync( 0 );

    if ( ! $nogrp ) {

       # The file names may have an extra extension name to distinguish
       # image and spectral products.  Once we make a rimg we know it
       # is an image; the _im is superfluous.  First need to know if
       # there is more than one extension, i.e. _im_<suffix>, or just
       # _im.  For multiple extension create a new suffix to replace
       # _im_<suffix> as used throughout the IFU code, but _<suffix>i.
       # The important point is to avoid creating a file which already
       # exists.

       # Split the file name on underscores.
       my @extensions = split( /_/, $out );
       my $rename = $extensions[-1] ne "im" && $out =~ /_im/;
       if ( $rename ) {
          my $trimname = $out;
          $trimname =~ s/_im//;
          $trimname .= "i";

       # Copy to the revised name and create the previews with names derived
       # from the trimmed name.  There is no need to create a new group as
       # the group file name is returned to its value on inout to this primitive.
          $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "in=$out out=$trimname" );
          orac_say "Copied $out to $trimname to remove unnecessary _im.";
          $Object->file( $trimname );
       }

       # Create the preview images and set the PRODUCT keyword therein.
       _TAG_AS_REPRESENTATIVE_ UPDATE=0 GROUP=1 SUFFIX=rimg PRODUCT=$product COMMENT=$comment

       # Remove the temporary file needed to create the rsp.
       $Object->erase if ( ! exists( $ENV{ORAC_KEEP} ) && $rename );
    }

    $Display->display_data($Object) if defined $Display;
    $Object->file( $in );
}

if (-e $data_file) {
  open (my $FILE, $data_file) or
	  die "$data_file exists but cannot be read.\n";

  my $line = 0;

  while (<$FILE>) {
    $line++;

    # Skip this line if it starts with a # (comment) or contains nothing
    # but blank space.
    next if (m/^\#/);
    next if (m/^\s*$/);

    my ($ext, @lambda) = split;

    my $error_flag = 0;

    # Check that the file extension is defined and consists only of
    # alphanumeric characters.
    next unless (defined ($ext));
    unless ($ext =~ m/^[[:alnum:]]+$/) {
	    orac_warn "$ext is not a suitable file extension.\nIt should contain only alphanumeric characters.\n";
	    $error_flag++;
    }

    # Check that lambda contains 2 or 4 wavelengths, and that they are
    # within the range of wavelengths of the datacube.

    if ($error_flag == 0 and (@lambda == 2 or @lambda == 4)) {
	    foreach (@lambda) {

        # If the entry contains only digits then add .0 on the
        # end so that kappa interprets it as a wavelength and not
        # as a pixel index.
        if ($_ =~ m/^[[:digit:]]+$/) {
          $_ .= ".0";
        }

        # Check that it looks like a floating point number now
        # and that it is within the range of wavelengths of the
        # current frame.
        if ($_ =~ m/^\d+\.\d+$/) {
          unless ($_ >= $Frm->uhdr("LAMBDA_MIN") and
                  $_ <= $Frm->uhdr("LAMBDA_MAX")) {
            orac_warn "$_ is outside the wavelength range of this datacube\n(line $line of $data_file).\n";
            $error_flag++;
          }
        } else {
          orac_warn "$_ is not a valid wavelength.\n";
          $error_flag++;
        }
	    }
    } else {
	    orac_warn "Each line of $data_file should contain two or four wavelengths.\n";
	    $error_flag++;
    }

    # Skip to the next line if we've found any problems.
    next if ($error_flag > 0);

    my $out = $root . "_$ext";

    if (@lambda == 2) {
	    # We have two wavelengths - just extract an image

	    orac_print "Forming image from $in with wavelengths $lambda[0] to $lambda[1]\n";
	    my $param = "in=$in out=$out axis=3 low=$lambda[0] high=$lambda[1]";
	    $Mon{'kappa_mon' }->obeyw("collapse", "$param");
	    orac_print "Written to $out.\n\n";

	    $Object->file( $out );
	    $Display->display_data($Object) if defined $Display;
	    $Object->file( $in );

    } elsif (@lambda == 4) {
      # We have four wavelengths. Extract two images and subtract the
	    # second from the first.

	    # and create some temporary files
	    my $tmp_file1 = new ORAC::TempFile;
	    my $tmp_file2 = new ORAC::TempFile;
	    my $file1 = $tmp_file1->file;
	    my $file2 = $tmp_file2 ->file;

	    orac_print "Forming image from $in with wavelengths $lambda[0] to $lambda[1]...\n";
	    my $param = "in=$in out=$file1 axis=3 low=$lambda[0] high=$lambda[1]";
	    $Mon{'kappa_mon' }->obeyw("collapse", "$param");

	    $param = "in=$in out=$file2 axis=3 low=$lambda[2] high=$lambda[3]";
	    $Mon{'kappa_mon' }->obeyw("collapse", "$param");

	    orac_print "...subtracting continuum with wavelengths $lambda[2] to $lambda[3].\n";

	    $param = "$file1 $file2 $out";
	    $Mon{'kappa_mon' }->obeyw("sub", "$param");

	    orac_print "Written to $out.\n\n";

	    $Object->file( $out );
	    $Display->display_data($Object) if defined $Display;
	    $Object->file( $in );
    }
  }

  close $FILE;

} else {
  orac_print "$data_file not found. No other images will be extracted from the datacube.\n\n";
}
