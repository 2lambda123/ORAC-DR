# -*- perl -*-

# Podule
# ======

=head1 NAME

_EXTRACT_IMAGES_ -- Extract images from a datacube

=head1 DESCRIPTION

Extract images from a datacube, subtract a continuum image if required
and display the image. The wavelength ranges to be extracted are given
in a file named extract.images in the reduced data directory. This file
hase the following format:

=over 4

=item *

Blank lines and lines starting with a # are ignored.

=item *

Lines with the format: 
    ext lambda_1 lambda_2 
will result in an image formed by collapsing the datacube from lambda_1 to
lambda_2 in a file with the extension _ext.

=item *

Lines with the format: 
    ext lambda_1 lambda_2 lambda_3 lambda_4 
will result in a continuum subtracted image where the line emission is
in the range lambda_1 to lambda2 and the continuum image is in the range
lambda_3 to lambda_4. The file will have an extension of _ext.

=back

=head1 TASKS

kappa_mon: collapse, sub

=head1 AUTHORS

Stephen P. Todd <spt@roe.ac.uk> (Edinburgh University/UKATC)

=head1 COPYRIGHT

Copyright (C) 1998-2002 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut


# We're going to need some temporary files
use ORAC::TempFile;

my $data_file = "extract.images";

my $nogrp= ($_EXTRACT_IMAGES_{NOGRP}) ? 1 : 0;

my $root;
my $in;

my $Object;

if ($nogrp) {
    # Get the input filename and obtain the root of the filename (ie all
    # except the final suffix) by using the inout method to attach a suffix
    # of _Z and a substitution to remove the _Z (is there a more direct way
    # to do this?)

    ($in, $root) = $Frm->inout("_Z");
    $root =~ s/_Z$//;
    $Object = $Frm;

} else {
    $root = $Grp->raw;
    $in = $Grp->file;

    $Object = $Grp;
}


# Extract a white light image
if (defined $Frm->uhdr("lambda_min") && defined $Frm->uhdr("lambda_max")) {
    my ($min, $max) = ($Frm->uhdr("lambda_min"), $Frm->uhdr("lambda_max") );
    my $out = $root . "_im";

# Cut three percent off the ends so we don't get erroneous data creeping
# in from the interpolated/shifted slices.
    $min = ( $max - $min ) * 0.03 + $min;
    $max = $max - ( $max - $min ) * 0.03;

    orac_print "Forming image from $in with wavelengths $min to $max.\n";
    my $param = "in=$in out=$out axis=3 low=$min high=$max";
    $Mon{'kappa_mon' }->obeyw("collapse", "$param");
    orac_print "Written to $out.\n\n";
    $Mon{'ndfpack_mon'}->obeyw("wcsframe", "ndf=$out frame=axis");

    $Object->file( $out );
    $Display->display_data($Object) if defined $Display;
    $Object->file( $in );
}

if (-e $data_file) {
    open (my $FILE, $data_file) or 
	die "$data_file exists but cannot be read.\n";

    my $line = 0;

    while (<$FILE>) {
	$line++;

	# Skip this line if it starts with a # (comment) or contains nothing
	# but blank space.
	next if (m/^\#/);
	next if (m/^\s*$/);

	my ($ext, @lambda) = split;

	my $error_flag = 0;

	# Check that the file extension is defined and consists only of 
	# alphanumeric characters.
	next unless (defined ($ext));
	unless ($ext =~ m/^[[:alnum:]]+$/) {
	    orac_warn "$ext is not a suitable file extension.\nIt should contain only alphanumeric characters.\n";
	    $error_flag++;
	}

	# Check that lambda contains 2 or 4 wavelengths, and that they are
	# within the range of wavelengths of the datacube.
	
	if ($error_flag == 0 and (@lambda == 2 or @lambda == 4)) {
	    foreach (@lambda) {

		# If the entry contains only digits then add .0 on the 
		# end so that kappa interprets it as a wavelength and not
		# as a pixel index.
		if ($_ =~ m/^[[:digit:]]+$/) {
		    $_ .= ".0";
		}
		
		# Check that it looks like a floating point number now
		# and that it is within the range of wavelengths of the
		# current frame.
		if ($_ =~ m/^\d+\.\d+$/) {
		    unless ($_ >= $Frm->uhdr("lambda_min") and 
			    $_ <= $Frm->uhdr("lambda_max")) {
			orac_warn "$_ is outside the wavelength range of this datacube\n(line $line of $data_file).\n";
			$error_flag++;
		    }
		} else {
		    orac_warn "$_ is not a valid wavelength.\n";
		    $error_flag++;
		}
	    }
	} else {    
	    orac_warn "Each line of $data_file should contain two or four wavelengths.\n";
	    $error_flag++;
	}
    
	     

	# Skip to the next line if we've found any problems.
	next if ($error_flag > 0);
	
	my $out = $root . "_$ext";
	
	if (@lambda == 2) {
	    # We have two wavelengths - just extract an image

	    orac_print "Forming image from $in with wavelengths $lambda[0] to $lambda[1]\n";
	    my $param = "in=$in out=$out axis=3 low=$lambda[0] high=$lambda[1]";
	    $Mon{'kappa_mon' }->obeyw("collapse", "$param");
	    orac_print "Written to $out.\n\n";
            $Mon{'ndfpack_mon'}->obeyw("wcsframe", "ndf=$out frame=axis");
	    $Object->file( $out );
	    $Display->display_data($Object) if defined $Display;
	    $Object->file( $in );

	} elsif (@lambda == 4) {
	    # We have four wavelengths. Extract two images and subtract the 
	    # second from the first.

	    # and create some temporary files
	    my $tmp_file1 = new ORAC::TempFile;
	    my $tmp_file2 = new ORAC::TempFile;
	    my $file1 = $tmp_file1->file;
	    my $file2 = $tmp_file2 ->file;

	    orac_print "Forming image from $in with wavelengths $lambda[0] to $lambda[1]...\n";
	    my $param = "in=$in out=$file1 axis=3 low=$lambda[0] high=$lambda[1]";
	    $Mon{'kappa_mon' }->obeyw("collapse", "$param");

	    my $param = "in=$in out=$file2 axis=3 low=$lambda[2] high=$lambda[3]";
	    $Mon{'kappa_mon' }->obeyw("collapse", "$param");

	    orac_print "...subtracting continuum with wavelengths $lambda[2] to $lambda[3].\n";

	    my $param = "$file1 $file2 $out";
	    $Mon{'kappa_mon' }->obeyw("sub", "$param");


	    orac_print "Written to $out.\n\n";
            $Mon{'ndfpack_mon'}->obeyw("wcsframe", "ndf=$out frame=axis");

	    $Object->file( $out );
	    $Display->display_data($Object) if defined $Display;
	    $Object->file( $in );
	} 
    }

    close $FILE;


} else {
    orac_print "$data_file not found. No other images will be extracted from the datacube.\n\n";
}

