# -*-cperl-*-

=head1 NAME

_DIVIDE_BY_STANDARD_

=head1 DESCRIPTION

Asks the calibration system for a suitble standard star, and divides by it.

=head1 ARGUMENTS

=over 4

=item FRAME = BOOLEAN (Given)

If this argument is true, then the current Frame object is divided by the
standard. If it is false, then the current Group object is divided by the
standard. [1]

=back

=head1 NOTES

=over 4

=item *

The input frames should have been normalised to 1 second exposures.

=item *

Processing will only take place if the C<PAIR_COMPLETE> internal header
is true.

=item *

The resulting file will have a _dbs suffix.

=item *

A spectrum, 2D image, or 3D cube may be passed to this primitive.

=back

=head1 AUTHOR

Paul Hirst <p.hirst@jach.hawaii.edu>
Stephen Todd <spt@roe.ac.uk>
Brad Cavanagh (JAC) <b.cavanagh@jach.hawaii.edu>
Malcolm J. Currie <mjc@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research Council.
Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Obtain arguments
my $frame = $_DIVIDE_BY_STANDARD_{FRAME};
if( ! defined( $frame ) ) {
  $frame = 1;
}

if ($Frm->uhdr("PAIR_COMPLETE")) {

  my ( $in, $out );
  my $iscube = 0;
  my $suffix = "dbs";
  my ( $ORAC_STATUS, @dims );
  if( $frame ) {

    # We need to get $in set first in order to set the output suffix..
    $in = $Frm->file;

    # Find out the dimensions of the input Frame.
    $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
    ( $ORAC_STATUS, @dims ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "dims" );

    # The output file's suffix depends on the file's dimensionality.
    if( defined( $dims[2] ) ) {
      # cube
      ( $in, $out ) = $Frm->inout( "_cube_" . $suffix );
      $iscube = 1;
    } elsif( defined( $dims[1] ) ) {
      # image
      ( $in, $out ) = $Frm->inout( "_im_" . $suffix );
    } else {
      # spectrum
      ( $in, $out ) = $Frm->inout( "_sp_" . $suffix );
    }

  } else {

    $in = $Grp->file;

    # Find the dimensions of the input Group.
    $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
    ( $ORAC_STATUS, @dims ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "dims" );

    if( defined( $dims[2] ) ) {
      # cube
      $out = $Grp->raw . "_cube_" . $suffix;
      $iscube = 1;
    } elsif( defined( $dims[1] ) ) {
      # image
      $out = $Grp->raw . "_im_" . $suffix;
    } else {
      # spectrum
      $out = $Grp->raw . "_sp_" . $suffix;
    }
  }

  # Find me a standard
  my $std = $Cal->standard;
  orac_print "Standard: $std will be used\n";

  # If we've got a cube, we need to check the dimensions of both the
  # standard and the object to make sure they match. If they don't,
  # then grow the standard in the spatial directions to match those
  # of the object.

  # We need to create a temporary file here so it can stick around
  # for the division.
  my $tempFrm = new ORAC::TempFile;
  my $tempfile = $tempFrm->file;

  if( $out =~ /_cube_dbs/ ) {
    my ( $ORAC_STATUS, @obj_dims, @std_dims, @lbound );
    $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
    ( $ORAC_STATUS, @obj_dims ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "dims" );
    ( $ORAC_STATUS, @lbound ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "lbound" );
    $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$std" );
    ( $ORAC_STATUS, @std_dims ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "dims" );

    my $x_len = $obj_dims[0];
    my $y_len = $obj_dims[1];
    my $wave_len = $obj_dims[2];

    $Mon{'kappa_mon'}->obeyw( "pixdupe", "in=$std(1:1,1:1,1:$wave_len) out=$tempfile expand=[$x_len,$y_len,1]" );

    # Set the origin of the new standard cube to be that of the object.
    my $xorigin = $lbound[0];
    my $yorigin = $lbound[1];
    my $zorigin = $lbound[2];
    $Mon{'ndfpack_mon'}->obeyw( "setorigin", "ndf=$tempfile origin=[$xorigin,$yorigin,$zorigin]" );

    orac_print "Standard $std grown to [$x_len,$y_len,$wave_len] to match dimensions of object cube and placed in $tempfile.\n";

    $std = $tempfile;

  }

  # Divide by it.
  $Mon{'kappa_mon'}->obeyw("div", "in1=$in in2=$std out=$out title=!");
  orac_print "$in to $out: Divided by standard.\n";

  # Update and display.
  if( $frame ) {
    $Frm->file( $out );
    $Display->display_data( $Frm ) if defined $Display;
  } else {
    $Grp->file( $out );
    $Display->display_data( $Grp ) if defined $Display;
  }

  # Set the PRODUCT keyword for the reformatted data divided by the standard.
  if ( $iscube && ! $frame ) {
     my $product = "dbs";
     my ( $comment, $preview_suffix );
     if ( defined( $dims[2] ) ) {
        $comment = "Cube divided by standard blackbody";
      } elsif ( defined( $dims[1] ) ) {
        $comment = "White-light image divided by standard blackbody";
        $preview_suffix = $product . "_rimg";
     } else {
        $comment = "Spectrum divided by standard blackbody";
        $preview_suffix = $product . "_rsp";
     }
     $Grp->product( $product, $comment );

     # Update the headers with the PRODUCT.
     $Grp->allow_header_sync( 1 );
     $Grp->sync_headers( 1 );
     $Grp->allow_header_sync( 0 );

# Create the preview images and create the jsa:product keyword within them.
     if ( ! defined( $dims[2] ) ) {
        _TAG_AS_REPRESENTATIVE_ UPDATE=0 GROUP=1 PRODUCT=$product SUFFIX=$preview_suffix COMMENT=$comment
     }
  }

  # Tidy up output.
  orac_print "\n";
}

