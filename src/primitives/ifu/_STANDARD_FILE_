# -*-cperl-*-

=head1 NAME

_STANDARD_FILE_

=head1 DESCRIPTION

This primitive takes the current group, copies it into a standard spectrum,
files that, grows that into a standard image, files that, then grows
the spectrum into a standard cube and files that as well.

=head1 ARGUMENTS

=over 4

=item CUBE_XDIM = INTEGER (Read)

The size of the x-dimension in the final standard cube. [14]

=item CUBE_YDIM = INTEGER (Read)

The size of the y-dimension in the final standard cube. [54]

=item IMAGE_YDIM = INTEGER (Read)

The size of the y-dimension in the final standard image. [658]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for UIST in IFU mode.

=item *

Negative data are thresholded to bad pixels before filing with the calibration system.

=back

=head1 AUTHORS

Paul Hirst <p.hirst@jach.hawaii.edu>
Stephen Todd <spt@roe.ac.uk>
Brad Cavanagh (JAC) <b.cavanagh@jach.hawaii.edu>
Malcolm J. Currie <mjc@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.
Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=cut

# Grab the parameters.
my $cube_xdim = ( $_STANDARD_FILE_{CUBE_XDIM} || 14 );
my $cube_ydim = ( $_STANDARD_FILE_{CUBE_YDIM} || 54 );
my $image_ydim = ( $_STANDARD_FILE_{IMAGE_YDIM} || 658 );

my $in = $Grp->file;
my $base = $Grp->raw;

my $num = $Frm->group;
my $ndims = $Frm->uhdr( "NDIMS" );

my $std = "std_" . $num . "_sp";

# Copy the spectrum to the std_ file, thresholding to remove negative values
$Mon{'kappa_mon'}->obeyw( "thresh", "in=$in out=$std thrlo=0 newlo=bad accept" );
orac_print "$in copied to $std\n";

$Frm->hdr("NDIMS", 1);
$Frm->uhdr("NDIMS", 1);

# Add to index
$Cal->standardindex->add($std, {%{$Frm->hdr}, %{$Frm->uhdr}});
orac_print "$std added to standard calibration index.\n";

# We copy the std_ file to the long form with _standard suffix
# to help the science archive wrapper script, but removing the
# superfluous extra _sp suffix.
{
   my $Grp = new $Grp;
   $Grp->file( $in );
   my (undef, $full_std ) = $Grp->inout( "_standard" );
   $full_std =~ s/_sp//;
   $Mon{ "ndfpack_mon" }->obeyw( "ndfcopy", "in=$std out=$full_std" );
   $Grp->file( $full_std );

# Create the PRODUCT keyword.
   my $product = "standard";
   my $comment = "Spectral standard star";
   $Grp->product( $product, $comment );

# Update the headers with the PRODUCT.
   $Grp->allow_header_sync( 1 );
   $Grp->sync_headers( 1 );
   $Grp->allow_header_sync( 0 );

# Create the preview images and create the jsa:product keyword within them.
   my $preview_suffix = $product . "_rsp";
   _TAG_AS_REPRESENTATIVE_ UPDATE=0 GROUP=1 PRODUCT=$product SUFFIX=$preview_suffix COMMENT=$comment

}

# Grow into an image. To do this we'll first copy the spectrum into a
# temporary file, then set the bounds of that file so that it'll have
# a second dimension, then pixdupe into the full image size.

# Form the name of the output image.
my $std_im = "std_" . $num . "_im";

# Get the dimensions of the spectrum.
$Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
my ( $ORAC_STATUS, @dims ) = $Mon{'ndfpack_mon'}->get( 'ndftrace', 'dims' );
my $wavelen = $dims[ 0 ];

# Set up a temporary file.
my $tempfile = new ORAC::TempFile;
my $tempspec = $tempfile->file;

# Do the processing.
$Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$tempspec" );
$Mon{'ndfpack_mon'}->obeyw( "setbound", "ndf=$tempspec(1:$wavelen,1:1)" );
$Mon{'kappa_mon'}->obeyw( "pixdupe", "in=$tempspec out=$std_im expand=[1,$image_ydim]" );

orac_print "$in grown to ($wavelen, $image_ydim) and stored in $std_im.\n";

# File the image with the calibration system.
$Frm->hdr( "NDIMS", 2 );
$Frm->uhdr("NDIMS", 2);
$Cal->standardindex->add( $std_im, {%{$Frm->hdr}, %{$Frm->uhdr}} );
orac_print "$std_im added to standard calibration index.\n";

# Grow into a cube. To do this we'll first copy the spectrum into a
# temporary file, then set the bounds of that file so that it'll have
# a third dimension, then pixdupe into the full cube size.

# Form the name of the output cube.
my $std_cube = "std_" . $num . "_cube";

# Set up another temporary file.
my $tempfile2 = new ORAC::TempFile;
my $tempspec2 = $tempfile2->file;

# Do the processing.
$Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$tempspec" );
$Mon{'ndfpack_mon'}->obeyw( "setbound", "ndf=$tempspec(1:$wavelen,1:1,1:1)" );
$Mon{'kappa_mon'}->obeyw( "permaxes", "in=$tempspec out=$tempspec2 perm=[3,2,1] title=!" );
$Mon{'kappa_mon'}->obeyw( "pixdupe", "in=$tempspec2 out=$std_cube expand=[$cube_xdim,$cube_ydim,1]" );

orac_print "$in grown to ($cube_xdim,$cube_ydim,$wavelen) and stored in $std_cube.\n";

# File the cube with the calibration system.
$Frm->hdr( "NDIMS", 3 );
$Frm->uhdr("NDIMS", 3);
$Cal->standardindex->add( $std_cube, {%{$Frm->hdr}, %{$Frm->uhdr}} );
orac_print "$std_cube added to standard calibration index.\n";

# Reset the Frm uhdr.
$Frm->hdr( "NDIMS", $ndims );
$Frm->uhdr( "NDIMS", $ndims );

# Tidy up output.
orac_print "\n";
