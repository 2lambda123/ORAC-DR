# Read offsets in a datacube and convert RA and dec to offsets along and
# across the IFU and set the origin of the datacube accordingly

my $Object;

my $raoff = $Frm->uhdr("ORAC_RA_TELESCOPE_OFFSET");
my $decoff= $Frm->uhdr("ORAC_DEC_TELESCOPE_OFFSET");

my $offset = sqrt($raoff**2 + $decoff**2);

# If we're on source,
if ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "OBJECT" && $offset < 30) {
   # This is the object / main-beam frame
    
    $Object = $Frm;
} else {
    # The previous frame is the main beam frame
    $Object = ($Grp->members)[-2];
    orac_print "This is not an OBJECT - trying " . $Object->file . "\n";
    if ($Object->uhdr("ORAC_OBSERVATION_TYPE") ne "OBJECT") {
	# it's not.
	undef $Object;
    }
}


if (defined $Object) {

    my $in = $Frm->file;

    # Obtain the telescope offsets.
    my $raoff = $Object->uhdr("ORAC_RA_TELESCOPE_OFFSET");
    my $decoff= $Object->uhdr("ORAC_DEC_TELESCOPE_OFFSET");
    my $angle = $Object->hdr("SLIT_PA") * 2 * 3.1416/360;

    my $yoff = -1 * ($decoff * cos($angle) + $raoff * sin($angle));
    my $xoff = ($raoff * cos($angle) - $decoff * sin($angle));
    
    orac_print "RA off: $raoff   Dec off: $decoff\n";
    
    # Convert to pixels 
    $yoff /= 0.12;
    $xoff /= 0.24;  
    
    $xoff = sprintf("%.0f", $xoff);
    $yoff = sprintf("%.0f", $yoff);

    $Frm->uhdr("X_OFFSET" => $xoff); 
    $Frm->uhdr("Y_OFFSET" => $yoff);
    
    orac_print "Offset: x = $xoff  y = $yoff pixels\n\n"; 
}
