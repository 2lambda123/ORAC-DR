# -*-perl-*-

=head1 NAME

_COMPONENT_EXISTS_ - Check whether or not a given NDF component exists.

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item COMPONENT = STRING (Given)

=item EXISTS = LOGICAL (Returned)

=item FILE = STRING (Given)

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

use NDF;
use Starlink::HDSPACK qw/ retrieve_locs /;

# Retrieve parameters.
my $component = $_PRIM_ARGS_->{COMPONENT};
my $file = $_PRIM_ARGS_->{FILE};

if( ! defined( $component ) ) {
  orac_throw "Programming error: COMPONENT parameter to _COMPONENT_EXISTS_ must be given";
}

if( ! defined( $file ) ) {
  orac_throw "Programming error: FILE parameter to _COMPONENT_EXISTS_ must be given";
}

$component = uc($component);

# The parent is everything up to the last dot. If we haven't been
# given a heirarchy, then the parent is the file and the child is what
# we've been given as the component.
my ( $parent, $child );
if( $component !~ /\./ ) {
  $parent = '';
  $child = $component;
} else {
  $component =~ /(.*)\.(\w+)/;
  $parent = ".$1";
  $child = $2;
}

# Start NDF status off as good.
my $status = &NDF::SAI__OK;

# Begin error handling.
err_begin( $status );

# Retrieve the locators and check to see if the child exists using the
# last locator in the list.
( $status, my @locs ) = retrieve_locs( "$file$parent", 'READ', $status );
my $there = 0;
dat_there( $locs[-1], "$child", $there, $status );

# Annull the locators in reverse order.
dat_annul( $_, $status ) for reverse @locs;

# Handle errors.
if( $status != &NDF::SAI__OK ) {
  my $errstr = err_flush_to_string( $status );
  err_annul( $status );
  err_end( $status );
  orac_throw( "Error finding NDF component: $errstr" );
}

err_end( $status );

# Set return value.
$_PRIM_ARGS_->{EXISTS} = $there;

