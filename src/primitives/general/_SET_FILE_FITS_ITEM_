# _SET_FRAME_FITS_ITEM_   -*-perl-*-
#
# adds or modifies a fits header for the file given in the FILE parameter

my $file = ($_SET_FILE_FITS_ITEM_{'FILE'} || undef);
my $key = ($_SET_FILE_FITS_ITEM_{'KEY'} || undef);
my $value = ($_SET_FILE_FITS_ITEM_{'VALUE'} || undef);
my $comment = ($_SET_FILE_FITS_ITEM_{'COMMENT'} || undef);

if( !defined( $file ) ) {
  orac_warn "Must supply file that will have FITS header modified.\n";
} elsif((!defined($key)) || (!defined($value))) {
  orac_warn "Must specify key/value pair for FITS header.\n";
} else {

  # get the fits header

  my ($hashref, $status) = NDF::fits_read_header($file);

  # modify the comment (set to null if undefined, replace | with a space,
  # put single quotes around it)

  if(!defined($comment)) { $comment = '\$C'; }
  $comment =~ s/\|/ /g;
  $comment = "\'" . $comment . "\'";

  if(exists($$hashref{$key})) {

    # the key exists, so update with the new value (and comment if necessary)

    my $pars = "edit=update position=! string=false";
    $Mon{'ndfpack_mon'}->obeyw("fitsmod","ndf=$file keyword=$key value=$value comment=$comment $pars");

  } else {

    # the key doesn't exist, so add the new value (and comment if necessary)

    my $pars = "edit=write position=! string=false";
    $Mon{'ndfpack_mon'}->obeyw("fitsmod","ndf=$file keyword=$key value=$value comment=$comment $pars");

  }

}
