# -*-cperl-*-

=head1 NAME

_CALC_SNR_IMAGE_ - calculate a signal-to-noise ratio image

=head1 SYNOPSIS

 _CALC_SNR_IMAGE_

 _CALC_SNR_IMAGE_ GROUP=1 STORE=1

=head1 DESCRIPTION

Creates a signal-to-noise ratio image using the data and variance
components of a given file. Some basic statistics are reported on
completion if requested, and the full list of results returned in the
primitive hash.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<GROUP>

Flag to denote whether to use the current Group or Frame file. Default
is 0 (use the current Frame).

=item B<IN>

Name of input image. Use file determined by the B<GROUP> parameter
above if not specified.

=item B<OUT>

Name of output image. Default is to use the C<inout> method to create
an output file with the suffix C<_snr>.

=item B<REGION>

Size of a square region in pixels use to determine the statistics if
requested. Default is 0 (use the whole image).

=item B<STATS>

A flag to indicate whether or not the statistics of the SNR image
should be calculated. Default is 1 (true).

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 1 (yes).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

MAKESNR, NDFTRACE, SETLABEL

=item ORAC-DR PRIMITIVES

_FIND_IMAGE_STATISTICS_

=back

=head1 OUTPUT DATA

The current object is updated with the SNR image and tagged
C<snr>. The product is also set to C<snr>.

The primitive hash contains a single new entry with the key C<RESULTS>
which holds a reference to the hash of results from
L<_FIND_IMAGE_STATISTICS_|_FIND_IMAGE_STATISTICS_>.

=head1 OUTPUT FILES

By defaults creates a file with the suffix C<_snr>, but that may be
overridden by the B<OUT> parameter.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2014 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Is the input file from the current Frame or Group?
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;

my $proceed = 1;
if ( $group ) {
  $proceed = ($Grp->file_exists) ? 1 : 0;
}

if ( $proceed ) {
  # Verbose flag
  my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

  # Obtain input image - default to current file in given object
  my $in = get_prim_arg($_PRIM_ARGS_, "IN", $Obj->file);

  # Output SNR image name
  my $snrmap = get_prim_arg($_PRIM_ARGS_, "OUT", scalar($Obj->inout("_snr")));

  # Only run makesnr if the file actually has a VARIANCE component
  $Mon{ndfpack_mon}->obeyw("ndftrace", "ndf=$in");
  my ($ORAC_STATUS, $hasvar) = $Mon{ndfpack_mon}->get("ndftrace", "variance");

  my $results;
  if( $hasvar eq "TRUE" ) {
    # Use all data by setting minvar=0
    $Mon{kappa_mon}->obeyw("makesnr","in=$in out=$snrmap minvar=0");

    # Return statistics of SNR image?
    my $stats = get_prim_arg($_PRIM_ARGS_, "STATS", 1);

    # Report some basic statistics if requested
    if ($stats) {
      my $region = get_prim_arg($_PRIM_ARGS_, "REGION", 0);
      _FIND_IMAGE_STATISTICS_ IMAGE=$snrmap VERBOSE=0 HISTAT=0 REGION=$region
      $results = $_FIND_IMAGE_STATISTICS_{RESULTS};
      if ($verbose) {
        my $min = sprintf "%5.2f", $results->{MIN};
        my $max = sprintf "%5.2f", $results->{MAX};
        my $sigma = sprintf "%5.2f", $results->{SIGMA};
        my $numgood = $results->{NUMGOOD};
        orac_print "SNR image range $min to $max: sigma = $sigma from $numgood pixels\n";
      }
    }

    # Update PRODUCT and store filenames in object
    $Obj->force_product_update( "snr", $snrmap );
    $Obj->tagset("snr");

    # Set the file label too
    $Mon{ndfpack_mon}->obeyw("setlabel","ndf=$snrmap label='Signal-to-noise ratio'");
  } else {
    orac_warn "No SNR created: input file, $in, has no variance component\n";
  }
  $_CALC_SNR_IMAGE_{RESULTS} = $results;
}
