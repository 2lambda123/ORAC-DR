# -*-cperl-*-

=head1 NAME

_GET_RECPAR_CONFIG_ - name of config file for SMURF routines

=head1 SYNOPSIS

 _GET_RECPAR_CONFIG_ CONFIG=RESIST

=head1 DESCRIPTION

This primitive checks for the existence of a specified configuration
file used by various tasks. The user must specify the type of config
file through a string which matches the relevant recipe parameter. For
example, if the recipe parameter is C<RESIST_CFG>, then B<CONFIG> must
be C<RESIST>. See the recipe documentation for supported recipe
parameters.

=head1 ARGUMENTS

This primitive supports the following mandatory argument:

=over 2

=item B<CONFIG>

Type of configuration file to define. The given string must correspond
to the recipe parameter supported by the current recipe. The primitive
is a no-op if none given.

=back

=head1 EXTERNAL TASKS

None.

=head1 OUTPUT DATA

The Frame uhdr has a single new entry C<RECPAR_CONFIG_CFG> (where
C<CONFIG> is as given by the B<CONFIG> parameter above) which either
contains the name of the relevant config file, or C<undef> if no file
was given. However, this entry will B<not> be defined if B<CONFIG> is
not given.

=head1 OUTPUT FILES

None.

=head1 NOTES

=over 2

=item *

The file must exist in a standard task-specific location
(e.g. C<STARLINK_DIR/share/smurf> for SMURF tasks), the current
working directory, C<ORAC_DATA_OUT> or a directory defined by
C<CONFTYPE_CONFIG_DIR>, where C<CONFYTPE> is the config file type
defined by the B<CONFIG> parameter above.

=item *

Does not offer a default value - only attempts to use the given config
file name.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2014 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $conftype = uc(get_prim_arg($_PRIM_ARGS_, "CONFIG", undef));

if ($conftype) {
  my $confname = $conftype . "_CFG";
  my $recpar = "RECPAR_" . $confname;

  ### Check if the given config type has been specified
  if (defined $RECPARS{$confname}) {
    my $config;
    if (File::Spec->file_name_is_absolute( $RECPARS{$confname} )) {
      $config = $RECPARS{$confname};
    } else {
      # Some tasks allow for multiple config files - return a suitable
      # default location for those tasks if appropriate
      my $get_config_location = sub {
	my $config_type = shift;
	my $default_dir;
	if ($config_type =~ /makemap|resist|noise/i) {
	  $default_dir = File::Spec->catdir($ENV{STARLINK_DIR},"share","smurf");
	}
	return $default_dir;
      };

      # OK not an absolute path - check in current working dir, and
      # other known locations if necessary. Use the first match.
      use Cwd;
      my $default_location = $get_config_location->($conftype);
      my @locations = ($default_location) if (defined $default_location);
      push( @locations, ( getcwd(), $ENV{ORAC_DATA_OUT},
			  $ENV{$conftype."_CONFIG_DIR"} ) );
      foreach my $testlocation ( @locations ) {
	my $new_config = File::Spec->catfile($testlocation,$RECPARS{$confname});
	if ( -e $new_config ) {
	  $config = $new_config;
	  last;
	}
      }
    }
    # Check given file exists...
    if ($config && -e $config) {
      orac_print "Using user-specified $conftype config: $RECPARS{$confname}\n", "yellow";
      $Frm->uhdr("$recpar", $config);
    } else {
      $Frm->uhdr("$recpar", undef);
      orac_warn "Given config file name, $RECPARS{$confname}, does not exist: using defaults\n";
    }
  }
}
