# -*-cperl-*-

=head1 NAME

_ALIGN_IMAGES_ - Align all images to a reference image

=head1 SYNOPSIS

 _ALIGN_IMAGES_

 _ALIGN_IMAGES_ EXTEN=$exten COMPS=$complist

 _ALIGN_IMAGES_ EXTEN=$exten COMPS=$complist METHOD=bilinear

=head1 DESCRIPTION

This primitive takes all the images within a Frame object and aligns
them to a common coordinate system as defined by a reference image. By
default this primitive operates on files within the current Frame, but
this can be over-ridden by supplying an optional Frame object.

The user may choose resampling or rebinning and can specify the
relevant options supported by C<wcsalign>. Default behaviour is to use
resampling with nearest-neighbour, taking the coordinate system from
the first file in the Frame object.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<COMPS>

List of NDF components to align. Default behaviour is to align the
data/variance components only.

=item B<FRAME>

An ORAC-DR Frame object with files to be aligned. If left unset, the
current Frame is used.

=item B<METHOD>

Keyword specifying the method for determing how the output pixels are
populated. The default is nearest-neighbour resampling
(C<NEAREST>). See the documentation for WCSALIGN for further
details. The recommended choices are C<NEAREST>, C<BILINEAR>, or
C<SINCSINC>.

=item B<REBIN>

A flag to determine whether to rebin or resample. Default is 0
(resample). See the WCSALIGN documentation for further information.

=item B<REFIMAGE>

The name of the reference image to use for alignment in the SKY
domain. Default is to use the first file in the Frame object.

=item B<PARAMS>

Optional parameters if B<METHOD> is not C<NEAREST> or
C<BILINEAR>. Should be specified as a string of 1 or 2 values
(separated by a comma). See documentation for wcsalign for further
details.

=item B<VERBOSE>

Flag to control the number of messages seen by the user. The default
is 0 (no extra messages).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

WCSALIGN, WCSATTRIB

=item ORAC-DR PRIMITIVES:

_COMPONENT_EXISTS_FILES_

=back

=head1 OUTPUT DATA

The aligned files are stored in the given Frame object and tagged with
C<aligned>.

=head1 OUTPUT FILES

Creates an output image per input image with a suffix of C<_al>.

=head1 NOTES

=over 4

=item *

The NDF components must contain their own WCS information. The
existence of each component is verified before proceeding but not
whether it has WCS.

=back

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>,
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2004-2007 Particle Physics and Astronomy Research
Council.
Copyright (C) 2004-2008,2014 the University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Determine the Frame object to use
my $Frmobj = get_prim_arg( $_PRIM_ARGS_, "FRAME", $Frm );

# Check that it's really a Frame object
unless ( UNIVERSAL::isa($Frmobj, "ORAC::Frame") ) {
  orac_throw "Error: input FRAME is not an ORAC-DR Frame object\n";
}

# Proceed if the files in the Frame object have not already been aligned
unless ( $Frmobj->tagexists("aligned") ) {
  # Rebin or resample? Default is resample (rebin = 0).
  my $rebin = get_prim_arg( $_PRIM_ARGS_, "REBIN", 0 );
  # Redefine rebin as true or false for wcsalign
  $rebin = ( $rebin ) ? "true" : "false";

  # Method for determining the output pixel values
  my $method = lc(get_prim_arg( $_PRIM_ARGS_, "METHOD", "nearest" ));

  # Set reference image if specified
  my $refimage = get_prim_arg( $_PRIM_ARGS_, "REFIMAGE", "!" );

  # NDF extension and list of other components to align
  my $exten = get_prim_arg( $_PRIM_ARGS_, "EXTEN", undef );
  my $complist = get_prim_arg( $_PRIM_ARGS_, "COMPS", undef);

  # PARAMS for wcsalign
  my $params = get_prim_arg( $_PRIM_ARGS_, "PARAMS", undef );
  my $parstring = "[$params]" if (defined $params);

  # Verbose?
  my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 0 );

  my ($inlist, $outlist, @out) = write_file_list_inout( $Frmobj, "_al" );

  my $nfiles = $Frmobj->nfiles;
  orac_print("Aligning $nfiles ".( ($nfiles == 1) ? "image" : "images")." to common coordinate frame...\n") if $verbose;

  # Use a code-ref to set the WCS attributes for moving sources
  my $set_moving = sub {
    my $in = shift;
    my $args = "ndf=$in mode=mset setting='skyrefis=origin,alignoffset=1'";
    $Mon{ndfpack_mon}->obeyw("wcsattrib","$args");
  };

  # Check the desired coordinate system to see if it's a moving
  # system: either check the reference image if given or use the first
  # file in the Frame. If so then set the relevant attributes for all
  # files in the Frame before aligning.
  my $image = ($refimage ne "!") ? $refimage : $Frmobj->file;
  $Mon{ndfpack_mon}->obeyw("wcsattrib","ndf=$image mode=get name=system(1)");
  my ($ORAC_STATUS, $cosys) = $Mon{ndfpack_mon}->get("wcsattrib", "value");
  my $moving = 0;
  if ($cosys =~ /azel|gappt/i) {
    $set_moving->($_) foreach ($Frmobj->files);
    $moving = 1;
  }

  # Align data (and variance) components first
  my $args = "ref=$refimage lbnd=! ubnd=! method=$method out=^$outlist in=^$inlist rebin=$rebin";
  $args .= " params=$parstring" if ($params);
  $Mon{kappa_mon}->obeyw("wcsalign","$args");

  # If we are also aligning any sub-components then do that now
  if ( $exten && $complist ) {
    my @comps = split(/,/, $complist);
    foreach my $ndfcomp ( @comps ) {
      my $fullcomp = join(".","more", $exten, $ndfcomp);
      orac_print "Aligning $ndfcomp ($fullcomp)... " if ($verbose);
      my $infiles = [$Frmobj->files];
      _COMPONENT_EXISTS_FILES_ COMPONENT=$fullcomp FILES=$infiles
      if ($_COMPONENT_EXISTS_FILES_{COMPFILES}) {
	my @alignfiles = @{$_COMPONENT_EXISTS_FILES_{COMPFILES}};
	my @in = map { join(".", $_, $fullcomp) } @alignfiles;
	# Set SkyRefIs and AlignOffset attributes for moving sources.
	# Note that the NDF components have separate WCS and must
	# therefore be modified separately for moving sources
	if ( $moving ) {
	  orac_print "Setting attributes for moving sources... " if ($verbose);
	  $set_moving->($_) foreach (@in);
	}
	$inlist = write_file_list( @in );
	$outlist = write_file_list( map { join(".", $_, $fullcomp) } @out );

	$args = "ref=$refimage lbnd=! ubnd=! method=$method out=^$outlist in=^$inlist";
	$args .= " params=$parstring" if ($params);
	$Mon{kappa_mon}->obeyw("wcsalign","$args");
      }
    }
  }

  # Register new file names and tag
  $Frmobj->files( @out );
  $Frmobj->tagset("aligned");

  orac_print("done.\n") if $verbose;
}
