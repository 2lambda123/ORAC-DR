# -*-cperl-*-

=head1 NAME

_GET_SPREAD_PARAMS_ - Return a string containing a properly-formatted
parameter string for SPREAD/INTERP types.

=head1 DESCRIPTION

When dealing with the various spreading methods in tasks such as
SMURF/MAKECUBE, a parameter string is needed which gives one or two
parameters for the given spreading method. This primitive takes zero,
one, or two parameters and turns them into a properly-formatted string
that can be passed to these tasks.

=head1 ARGUMENTS

=over 4

=item PARAM1 = REAL (Given)

The first parameter required by the spreading method. This parameter
is required by all methods, and specifies how many arcseconds on
either side of the output position are to receive contributions from
the input pixel. A value of zero indicates that a suitable number
should be calculated automatically. [0]

=item PARAM2 = REAL (Given)

The second parameter required by the spreading method, but only for
SombCos, Gauss, SincSinc, SincCos, and SincGauss schemes. For the
SombCos, SincSinc, and SincCos schemes, it specifies the number of
arcseconds at which the envelope of the function goes to zero. The
minimum value is 1.0, and the run-time default value is 2.0.  For the
Gauss and SincGauss scheme, it specifies the full-width at
half-maximum (FWHM) of the Gaussian envelope.  The minimum value is
0.1, and the run-time default is 1.0. []

=item PARAMSTRING = STRING (Returned)

The formatted parameter string.

=item PIXSIZE = REAL (Given)

The pixel scale. This is needed to transform the parameter values,
given in arcseconds, to units of pixels. [1]

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

None.

=back

=head1 TASKS

None.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Handle parameters.
my $method = uc( get_prim_arg( $_PRIM_ARGS_, 'METHOD', 'NEAREST' ) );
my $param1 = get_prim_arg( $_PRIM_ARGS_, 'PARAM1', 0 );
my $param2 = get_prim_arg( $_PRIM_ARGS_, 'PARAM2', undef );
my $pixsize = get_prim_arg( $_PRIM_ARGS_, 'PIXSIZE', 1 );

# Sort out the spread parameters. These were given in arcseconds and
# we want to convert them to pixels. $sp_param1 is easy, we just
# divide it. $sp_param2's default depends on the spread function, so
# that takes a little more work to calculate.
my $param1_pixel = $param1 / $pixsize;
my $param2_pixel;
if( defined( $param2 ) ) {
  $param2_pixel = $param2 / $pixsize;
} else {
  if( $method =~ /^(SOMBCOS|SINCSINC|SINCCOS)$/ ) {
    $param2_pixel = 2;
  } elsif( $method =~ /^(GAUSS|SINCGAUSS)$/ ) {
    $param2_pixel = 1;
  }
}
my $params;
if( $method =~ /^(LINEAR|NEAREST)$/ ) {
  $params = "''";
} elsif( $method =~ /^(SINC|SOMB)$/ ) {
  $params = "[$param1_pixel]";
} elsif( $method =~ /^(SOMBCOS|SINCSINC|SINCCOS|GAUSS|SINCGAUSS)$/ ) {
  $params = "[$param1_pixel,$param2_pixel]";
}

# Return.
$_GET_SPREAD_PARAMS_{PARAMSTRING} = $params;

