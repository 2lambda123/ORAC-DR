# -*-cperl-*-

=head1 NAME

_FIND_IMAGE_STATISTICS_ - determine the statistics of an image

=head1 SYNOPSIS

 _FIND_IMAGE_STATISTICS_

 _FIND_IMAGE_STATISTICS_ CLIP=2,2 IMAGE=$Frm->file

 _FIND_IMAGE_STATISTICS_ HISTAT=1 IMAGE=$image

=head1 DESCRIPTION

This primitive calculates the statistics of a given image, or
optionally, its variance or error component. It is expected that this
primitive will usually be called from another, and thus will pass in
the B<IMAGE> argument. The method by which certain parameters (such as
the median and mode) are derived is user-controllable.

The results are stored in the primitive hash so the calling primitive
may retrieve the desired values.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<CLIP>

A comma-separated list of up to 5 numbers specifying the clip levels
at which to evaluate the statistics. See the documentation for KAPPA
C<stats> for further details. Default is blank (no clipping).

=item B<COMP>

Component of input image to obtain statistics for. Valid values are
C<DATA>, C<VAR> and C<ERR>. Default is C<DATA>.

=item B<GROUP>

If true, use the current Group file as input, otherwise use the
current Frame. Default is 0 (false: use current Frame).

=item B<HISTAT>

Flag to denote whether to use the Kappa HISTAT command rather than the
STATS application. Default is 0 (false).

=item B<HISTO>

Flag to indicate whether to calculate a histogram of values to
determine the mode. Default is 0 (false).

=item B<IMAGE>

Input image. No default, and an error will be given if no image is
supplied.

=item B<MODE_METHOD>

The method used by HISTAT to calculate the mode. The default is
C<MOMENTS>. Only accessed it B<HISTAT> is true.

=item B<ORDER>

Flag to indicate whether to calculate ordered statistics in KAPPA
C<stats>. Only accessed if B<HISTAT> is false. Default is 1 (true).

=item B<PERCENTILES>

Comma-separated list of percentiles to calculate. Default is the null
parameter, C<!>, which indicates no percentiles.

=item B<REGION>

Size of region in pixels (located at map centre) within which to
calculate the statistics. Default is 0 (use entire image).

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (true).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

HISTAT, NDFTRACE, STATS

=back

=head1 NOTES

Masking of known sources should probably take place before calling
this primitive.

=head1 OUTPUT DATA

On completion, the primitive hash C<%_FIND_IMAGE_STATISTICS_>
contains the following keys:

=over 4

=item RESULTS

A reference to a hash containing the following keys and values:

=over 4

=item MEAN    - mean value

=item MODE    - modal value (only if HISTOGRAM or HISTAT are true)

=item MEDIAN  - median value

=item SIGMA   - standard deviation (only if HISTAT is false)

=item SUM     - sum

=item NUMPIX  - total number of pixels

=item NUMGOOD - number of good pixels

=item MAX     - maximum value

=item MIN     - minimum value

=item PEAKWCS - position of maximum in current coordinate system

=item PEAKPOS - position of maximum in pixel coordinates

=item PERCENTILES - percentile values, either a scalar or an array
reference if multiple values requested (only if PERCENTILES is non-null)

=back

Unset items are returned as undef.

=item HISTOMODE

A true/false flag to indicate if the HISTO method returned a valid value.

=back

The Frame object is not updated.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005-2011,2014 University of British Columbia.  All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;

# Set input file
my $in = get_prim_arg( $_PRIM_ARGS_, "IMAGE", $Obj->file );

unless ( defined $in ) {
  orac_throw "Error: no input image given to _FIND_IMAGE_STATISTICS_\n";
}

# Which component of the input file are the statistics to be
# calculated for?
my $comp = get_prim_arg( $_PRIM_ARGS_, "COMP", "data" );

my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1 );

# Optional CLIP argument, default to blank (no clipping)
my $clip = get_prim_arg( $_PRIM_ARGS_, "CLIP", "" );

# Do we want to use the histogram method to get the mode?
my $histo = get_prim_arg( $_PRIM_ARGS_, "HISTO", 0 );

# Do we want to use KAPPA HISTAT or STATS?
my $histat = get_prim_arg( $_PRIM_ARGS_, "HISTAT", 0 );

# Percentiles
my $percentiles = get_prim_arg( $_PRIM_ARGS_, "PERCENTILES", "!" );

# Declare useful variables
my $ORAC_STATUS;
my @params = (qw/ mean median numgood numpix minimum maximum total maxwcs maxpos /);
# Add perval if not default
push (@params, "perval") if ($percentiles ne "!");

# Just calculate stats in a region?
my $region = get_prim_arg($_PRIM_ARGS_, "REGION", 0);
if ($region && $region > 0) {
  $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=$in");
  ($ORAC_STATUS, my $ndims) = $Mon{ndfpack_mon}->get("ndftrace","ndim");
  ($ORAC_STATUS, my @dims) = $Mon{ndfpack_mon}->get("ndftrace","dims");
  my $regionstring = "0~$region,0~$region";
  if ($ndims > 2) {
    # deal with it...
    $regionstring .= "," . join( "", map { "," } 4..$ndims);
  }
  $in = $in . "($regionstring)" if ($region < $dims[0] && $region < $dims[1]);
}

my %results;
# Call KAPPA histat if the MODE is required
if ( $histat ) {
  # Set the HISTO argument to false
  $histo = 0;
  # Default to MOMENTS method for calculating mode (as in KAPPA docs)
  my $modemethod = get_prim_arg( $_PRIM_ARGS_, "MODE_METHOD", "MOMENTS" );

  # Use HISTAT to calculate statistics
  my $args = "ndf=$in method=$modemethod comp=$comp";
  $args .= " percentiles=[$percentiles]" unless ($percentiles eq "!");
  my $HISTAT_STATUS = $Mon{kappa_mon}->obeyw("histat","$args");
  if ($HISTAT_STATUS == ORAC__OK) {
    # Retrieve the values
    push ( @params, "mode");
    ($ORAC_STATUS, %results) = $Mon{kappa_mon}->mget("histat", @params);
    $results{sigma} = -1.0;
  } elsif ($HISTAT_STATUS == 234521392 || $HISTAT_STATUS == 234521400) {
    # KPG__HSTIV: Insufficient values to compute ordered statistics.
    # KPG__SPARS: Data distribution is too sparse.
    # These errors are usually triggered by the presence of one or
    # more significant outliers - trap and fall back on stats, letting
    # the user know that the MODE will not be defined.
    orac_err "Data may be too sparse: using stats but MODE will be undefined\n";
    $histat = 0;
  } else {
    orac_err "Histat failed for an unknown reason - results will be undefined\n";
  }
}

# Call KAPPA stats either as chosen or as fallback if histat fails
if (!$histat) {
  # Use ordered statistics if the median is required
  my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
  $order = ($order) ? "order" : "noorder";

  my $args = "ndf=$in $order comp=$comp";
  $args .= " percentiles=[$percentiles]" unless ($percentiles eq "!");
  $args .= ($clip eq "") ? "" : " clip=[$clip]";
  $Mon{kappa_mon}->obeyw("stats","$args");
  push (@params, "sigma");
  # Retrieve the values
  ($ORAC_STATUS, %results) = $Mon{kappa_mon}->mget("stats", @params);
  # Mode is not defined
  $results{mode} = "NaN";
}

orac_warn "All pixels in region are bad!\n"
  if ($verbose && defined $results{numgood} && $results{numgood} == 0);

# If the user wants to use STATS and also requires a modal value
my $histomode;
if ( $histo && defined $results{sigma} && $results{numgood} ) {
  # Determine numbin from min and max to make sure that the increment
  # is more or less the same for all images. This method will probably
  # have issues with outliers and should make use of knowledge about
  # the image to determine the number of bins.
  my $delta = 1.0e-5;
  my $numbin = int( ($results{maximum} - $results{minimum})/$delta );
  _GET_MODE_FROM_HISTOGRAM_ IMAGE=$in NUMBIN=$numbin COMP=$comp
  $results{mode} = $_GET_MODE_FROM_HISTOGRAM_{MODE};
  $histomode = $_GET_MODE_FROM_HISTOGRAM_{HISTOMODE};
}

$_FIND_IMAGE_STATISTICS_{RESULTS} = { MEAN => $results{mean},
				      SIGMA => $results{sigma},
				      MODE => $results{mode},
				      MEDIAN => $results{median},
				      NUMPIX => $results{numpix},
				      NUMGOOD => $results{numgood},
				      SUM => $results{total},
				      MAX => $results{maximum},
				      MIN => $results{minimum},
				      PERCENTILES => $results{perval},
				      PEAKWCS => $results{maxwcs},
				      PEAKPOS => $results{maxpos},
				    };
$_FIND_IMAGE_STATISTICS_{HISTOMODE} = (defined $histomode) ? 1 : 0;

orac_print "Calculated image $comp statistics\n" if $verbose;
