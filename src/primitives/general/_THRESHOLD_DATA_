# -*-perl-*-

=head1 NAME

_THRESHOLD_DATA_ - Threshold data lower and/or higher than given
values.

=head1 DESCRIPTION

This recipe thresholds data values that are lower and/or higher than
given values. It is essentially a wrapper around the KAPPA THRESH
application.

=head1 ARGUMENTS;

=over 4

=item HIGH = REAL (Given)

The upper threshold value within the input array. [0]

=item LOW = REAL (Given)

The lower threshold value within the input array. [0]

=item NEWHIGH = REAL (Given)

The value to which all input values greater than the upper threshold
(HIGH parameter) are set. This can be set to "bad", in which case the
bad value is substituted. [0]

=item NEWLOW = REAL (Given)

The value to which all input values smaller than the lower threshold
(LOW parameter) are set. This can be set to "bad", in which case the
bad value is substituted. [0]

=back

=head1 NOTES

=over 4

=item *

This primitive operates on all files in the current Frame object.

=back

=head1 OUTPUT DATA

=over 4

=item *

Data files with the _thr suffix appended.

=back

=head1 TASKS

KAPPA: THRESH.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Handle params.
my $low = defined( $_PRIM_ARGS_->{LOW} ) ? $_PRIM_ARGS_->{LOW} : 0;
my $high = defined( $_PRIM_ARGS_->{HIGH} ) ? $_PRIM_ARGS_->{HIGH} : 0;
my $newlow = defined( $_PRIM_ARGS_->{NEWLOW} ) ? $_PRIM_ARGS_->{NEWLOW} : 0;
my $newhigh = defined( $_PRIM_ARGS_->{NEWHIGH} ) ? $_PRIM_ARGS_->{NEWHIGH} : 0;

foreach my $i ( 1 .. $Frm->nfiles ) {

  my ( $in, $out ) = $Frm->inout( "_thr", $i );

  my $params = "in=$in out=$out thrhi=$high newhi=$newhigh thrlo=$low newlo=$newlow";
  $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );

  # Report to user.
  orac_print "$in to $out:\n";
  orac_print " Thresholded. Values below $low set to $newlow.\n";
  orac_print "              Values above $high set to $newhigh.\n";

  # Set the product.
  $Frm->product( "thr" );

  # Update the Frame object.
  $Frm->file( $i, $out );

}

# Display, if necessary.
$Display->display_data( $Frm ) if defined $Display;

# Tidy-up output.
orac_print "\n";
