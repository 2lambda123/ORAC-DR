# -*-cperl-*-

=head1 NAME

_CHECK_HISTORY_ - check to see if given task was run on given file

=head1 SYNOPSIS

 _CHECK_HISTORY_ TASK=$task

 _CHECK_HISTORY_ TASK=$task GROUP=1

=head1 DESCRIPTION

This primitive examines the history component of a specified NDF file
and searches for the presence of the given task. The search stops when
the first match is made.

The task should be an ORAC-DR primitive or a Starlink task name, but
no checks are made that the name given corresponds to a valid name.

If a match is found, the primitive reports the string from the history
that matched (if the B<VERBOSE> flag is true).

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<DATA>

A flag to denote that the data (arguments etc) for the given task
should be returned. Default is 0 (do not return data).

=item B<GROUP>

If true, use the current Group file as input, otherwise use the
current Frame. Default is 0 (false: use current Frame).

=item B<IN>

Optional parameter for input image name. Default is the current Frame
or Group file (as determined by the B<GROUP> parameter).

=item B<TASK>

Name of the task(s) to be checked. Multiple tasks may be separated by
commas. May be an ORAC-DR primitive or a Starlink task name. No
default.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is 1 (true).

=back

=head1 EXTERNAL TASKS

No external tasks are used.

=head1 NOTES

=over 4

=item *

A partial name may be given, though the user should be aware that the
primitive will return the first match and the user feedback will only
print the partial name.

=item *

Multiple task names may be given but be aware of possible conflicts
and that the first match will be returned.

=back

=head1 OUTPUT FILES

None.

=head1 OUTPUT DATA

The primitive hash contains the following keys:

=over 4

=item C<HAS_TASK>

Will be 1 if the given task was run on the given file, or 0 if not
(for any reason, including the lack of a history component and errors
reading the history).

=item C<TASK_DATA>

A string containing the text listing the arguments to the task. It is
up to the user to parse this information.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2014 University of British Columbia.  All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Input parameters
my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 0);
my $Obj = ($group) ? $Grp : $Frm;
my $file = get_prim_arg($_PRIM_ARGS_, "IN", $Obj->file);
my $task = get_prim_arg($_PRIM_ARGS_, "TASK", undef);
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 0);
my $rtn_task_data = get_prim_arg($_PRIM_ARGS_, "DATA", 0);

if ($task) {
  use NDF;
  my $has_task = 0;
  my $task_data;
  my $status = &NDF::SAI__OK();
  # Begin new ERR and NDF contexts
  err_begin($status);
  ndf_begin();

  ndf_find( &NDF::DAT__ROOT(), $file, my $ndf, $status );
  if ($ndf) {
    # Read the History NDF component
    use constant NDF__NOHIS => 232950714;
    ndf_hnrec($ndf, my $nrec, $status);
    if ($status == &NDF::SAI__OK()) {
      $task = join("|",split(/,/,$task));
      foreach my $rec (1..$nrec) {
        ndf_hinfo($ndf, "APP", $rec, my $value, $status);
        if ($value =~ /$task/io) {
          $task = $value;
          $has_task = 1;
          # Store the task input parameters if requested
          if ($rtn_task_data) {
            # Redirect STDOUT to a log file for this block
            open (my $STDOLD, '>&', STDOUT);
            my $logfile = ORAC::TempFile->new();
            open(STDOUT, ">>", $logfile->file) || orac_err "Unable to redirect STDOUT: $!\n";
            ndf_hout($ndf, $rec, $status);
            open (STDOUT, '>&', $STDOLD);
            $task_data = join("\n", read_file_list($logfile));
          }
          last;
        }
      }
    } elsif ($status == NDF__NOHIS) {
      orac_warn "$file has no history component\n";
      err_annul($status);
    } else {
      my $errstr = err_flush_to_string( $status );
      err_annul( $status );
      err_end( $status );
      orac_err "Error reading history: $errstr";
    }
  } else {
    orac_err "Unable to read $file\n";
  }

  # End the current ERR and NDF contexts
  ndf_end($status);
  err_end($status);

  orac_say "$task ran on $file" if ($has_task && $verbose);

  $_CHECK_HISTORY_{HAS_TASK} = $has_task;
  $_CHECK_HISTORY_{TASK_DATA} = $task_data if ($task_data);
}
