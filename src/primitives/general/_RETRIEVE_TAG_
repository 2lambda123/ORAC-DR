# -*-cperl-*-

=head1 NAME

_RETRIEVE_TAG_ - Retrieve a tagged Frame.

=head1 DESCRIPTION

This primitive can be used to retrieve a Frame that has been
previously tagged with the _SET_TAG_ primitive or the tagset() Frame
method.

=head1 ARGUMENTS

=over 4

=item GROUP = INTEGER (Given)

How to process group files. 0 means use the current Frame object. 1
means use the current Group object. 2 means use each Frame member of
the current Group object. [0]

=item TAG = STRING (Given)

The tag to retrieve. This argument is mandatory, and an error will be
thrown if it is not defined. If the tag has not been previously used,
then the current frame will not be changed.

=item THROW = LOGICAL (Given)

Whether or not to throw an error if the requested tag does not
exist. [1]

=back

=head1 NOTES

=over 4

This primitive is suitable for any Frame.

=back

=head1 OUTPUT DATA

=over 4

=item *

None.

=back

=head1 TASKS

None.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities
Council.  All Rights Reserved.

=cut

my $tag = $_PRIM_ARGS_->{TAG};
if( ! defined( $tag ) ) {
  orac_throw "TAG argument not defined in _RETRIEVE_TAG_: Programming error.\n";
}
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $throw = get_prim_arg( $_PRIM_ARGS_, "THROW", 1 );

my @objs;
if( $group == 0 ) {
  push @objs, $Frm;
} elsif( $group == 1 ) {
  push @objs, $Grp;
} elsif( $group == 2 ) {
  push @objs, $Grp->members;
}

my $status = 1;
foreach my $Obj ( @objs ) {
  my $product_ref = $Obj->uhdr( "TAG_PRODUCT" );
  if( defined( $product_ref ) ) {
    my $product = $product_ref->{uc( $tag )};
    if( defined( $product ) ) {
      $Obj->product( $product );
    }
  }

  my $tempstatus = $Obj->tagretrieve( $tag );

  if( ! $status && $throw ) {
    orac_throw "Possible programming error: Requested tag $tag does not exist.\n";
  }

  $status &&= $tempstatus;

}

$_PRIM_ARGS_->{STATUS} = $status;
