# -*-cperl-*-

=head1 NAME

_MASK_AST_REGION_

=head1 DESCRIPTION

This primitive uses a previously-determined AST Region to mask data
that falls outside of the requested map area. If the AST Region does
not exist, then the input file is copied to the output file with no
modifications.

=head1 ARGUMENTS

=over 4

=item GROUP = INTEGER (Given)

This parameter defines which AST Region is used. If true, then the
Group AST Region is used. If false, then the Frame AST Region is
used. [0]

=item IN = STRING (Given)

The input file to be masked. Must be defined.

=item OUT = STRING (Given)

The masked output file. Must be defined.

=back

=head1 NOTES

=over 4

=item *

The AST Region is obtained from the MAP_ASTREGION uhdr of either the
current Frame or Group object (see the C<GROUP> argument).

=item *

If the resulting trimmed map has no pixels, then no trimming will be
done.

=back

=head1 OUTPUT DATA

=over 4

=item *

The masked file named according to the C<OUT> argument.

=back

=head1 TASKS

KAPPA: NDFCOPY, REGIONMASK.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Handle parameters.
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $in = get_prim_arg( $_PRIM_ARGS_, "IN", undef );
my $out = get_prim_arg( $_PRIM_ARGS_, "OUT", undef );

if( ! defined( $in ) ) {
  orac_throw "IN parameter to _MASK_AST_REGION_ not defined! Programming error";
}
if( ! defined( $out ) ) {
  orac_throw "OUT parameter to _MASK_AST_REGION_ not defined! Programming error";
}

# Check to see if we even have an AST region. If we don't, just copy
# the in to the out.
my $region = ( $group ? $Grp->uhdr( "MAP_ASTREGION" ) : $Frm->uhdr( "MAP_ASTREGION" ) );
if( defined( $region ) ) {

  # First write the AST region.
  my $temp1 = new ORAC::TempFile;
  _WRITE_AST_REGION_ FILE=$temp1 GROUP=$group

  my $temp2 = new ORAC::TempFile;

  # Mask the area outside of the Region.
  my $params = "in=$in out=$temp2 region=$temp1 const=bad inside=false";
  $Mon{'kappa_mon'}->obeyw( "regionmask", "$params" );

  # Calculate statistics on the resulting file. If it's all bad, just
  # copy the input to the output.
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp2" );
  my ( $ORAC_STATUS, $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

  if( $numgood != 0 ) {

    # Trim off the bad pixels.
    $params = "in=$temp2 out=$out exten=true trimbad=true";
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

  } else {

    # We didn't have any good pixels from trimmed map, so print a
    # warning and do the copy.
    orac_warn "Trimming non-map regions resulted in a blank map; not trimming map to requested map size.\n";
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );
  }

} else {

  # Print a warning and do the copy.
  orac_warn "No AST map region was defined; not trimming map to requested map size.\n";
  $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );

}
