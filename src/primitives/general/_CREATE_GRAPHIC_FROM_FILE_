# -*-cperl-*-

=head1 NAME

_CREATE_GRAPHIC_FROM_FILE_ - Create a PNG, GIF, or JPG graphic from a
given file.

=head1 DESCRIPTION

This primitive creates a PNG, GIF, or JPG graphic from the supplied
file. It currently only supports one- and two-dimenensional files.

=head1 ARGUMENTS

=over 4

=item ADDRES = LOGICAL (Given)

Whether or not to append the resolution to the filename. If true, the
output filename will have the form <file>_<xres>x<yres>.<type>, or if
the XRES and YRES parameters are equal, <file>_<xres>.<type>. [0]

=item FILE = CHARACTER (Given)

The name of the file to convert to the given graphic file. Must be
given.

=item PRODUCT = STRING (Given)

The product name used for writing a keyword in the PNGs.  The default is
the value of the PRODUCT keyword for the input file supplied by
argument FILE.  If that is absent it defaults to "reduced".  [].

=item TYPE = CHARACTER (Given)

The type of graphic to create. Can be gif, jpg, or png. ['gif']

=item VECTOR_FILE = CHARACTER (Given)

A FITS file generated by POLPACK containing polarisation vectors to
plot over the image.  VECTOR_FILE is ignored if the file does not
exist or if FILE is one-dimensional.

=item XRES = INTEGER (Given)

The number of pixels along the x-axis of the output graphic file. [64]

=item YRES = INTEGER (Given)

The number of pixels along the y-axis of the output graphic file. [64]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable only for one-dimensional and two-dimensional input files.

=item *

The graphic file will have the same root filename as the input file,
with the appropriate file extension.

A polarisation vector overlay graphic file has an additional "_vector"
between the root name and the number of pixels.

=item *

Various metadata are written to the graphics files.

=over 4

=item *

astro:RA  Centre right ascension

=item *

astro:Dec  Centre declination

=item *

astro:name  The object's name (taken from the OBJECT header)

=item *

jsa:productID  The productID (derived from the input files PRODUCT header)

=item *

astro:orientation  Orientation in degrees

=item *

astro:pixelScale  Pixel size of the PNG in arcseconds

=back

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009,2014 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

use ORAC::Bounds qw/ retrieve_bounds /;


my $file = get_prim_arg( $_PRIM_ARGS_, 'FILE', undef );
if( ! defined( $file ) ) {
  orac_throw "Programming error: Must supply FILE parameter to _CREATE_GRAPHIC_FROM_FILE_.";
}

my $vector_file = get_prim_arg( $_PRIM_ARGS_, 'VECTOR_FILE', undef );

# Obtain the product name from the file's headers..
my $tmpFrm = new $Frm;
$tmpFrm->file( $file );
my $file_product = defined( $tmpFrm->hdr( "PRODUCT" ) ) ? $tmpFrm->hdr( "PRODUCT" ) : "reduced";

my $addres = get_prim_arg( $_PRIM_ARGS_, 'ADDRES', 0 );
my $product = get_prim_arg( $_PRIM_ARGS_, 'PRODUCT', $file_product );
my $type = uc( get_prim_arg( $_PRIM_ARGS_, 'TYPE', 'GIF' ) );
my $xres = get_prim_arg( $_PRIM_ARGS_, 'XRES', 64 );
my $yres = get_prim_arg( $_PRIM_ARGS_, 'YRES', 64 );

my ( $outfile, $outvecfile );

# Only do this processing if we have KAPPA v1.10 or greater.
if( starversion_gt( 'KAPPA', 'v1.10-0' ) ) {

  # Use stats to flag if this is not a frame with constant values.
  # Set min and max to some range, since a 0-range stretch can
  # crash the display routines.
  my $zerorange = 0;
  $Mon{kappa_mon}->obeyw("stats","ndf=$file");
  my $ORAC_STATUS;
  ($ORAC_STATUS, my $sigma) = $Mon{kappa_mon}->get("stats","sigma");
  ($ORAC_STATUS, my $max) = $Mon{kappa_mon}->get("stats","maximum");
  ($ORAC_STATUS, my $min) = $Mon{kappa_mon}->get("stats","minimum");
  if ($sigma == 0) {
    $min += -1;
    $max +=  1;
    $zerorange = 1;
    orac_warn "...All pixels in ${file} have the same value.";
  }

  if( $addres ) {
    if( $xres == $yres ) {
      $outfile = "${file}_$xres." . lc( $type );
      $outvecfile = "${file}_vector_$xres." . lc( $type );
    } else {
      $outfile = "${file}_${xres}x${yres}." . lc( $type );
      $outvecfile = "${file}_vector_${xres}x${yres}." . lc( $type );
    }
  } else {
    $outfile = join ".", $file, lc( $type );
    $outvecfile = join ".", $file, "_vector", lc( $type );
  }

  # Set the x- and y-resolution. This needs to be done via an
  # environment variable, which has a different name depending on what
  # type of file we're writing.
  my $xresenv = "PGPLOT_" . $type . "_WIDTH";
  my $yresenv = "PGPLOT_" . $type . "_HEIGHT";

  $Mon{'kapview_mon'}->control( "setenv", "$xresenv=$xres" );
  $Mon{'kapview_mon'}->control( "setenv", "$yresenv=$yres" );

  # Check to see if we're one-dimensional or two-dimensional.
  _GET_DIMENSIONS_ FILE=$file
  my $dims = $_GET_DIMENSIONS_{DIMS};
  my @nondegen = grep { $_ != 1 } @$dims;
  if( $#nondegen == 0 ) {

    my $minmax = "";
    $minmax = "ybot=${min} ytop=${max}" if ($zerorange);

    my $params = "ndf=$file device=\"$outfile/$type\" margin=0 axes=no mode=histogram $minmax";
    $Mon{'kapview_mon'}->obeyw( "linplot", "$params" );

  } elsif( $#nondegen == 1 ) {

    my $minmax = "faint";
    $minmax = "scale low=${min} high=${max}" if ($zerorange);

    my $params = "in=$file device=\"$outfile/$type\" margin=0 axes=no mode=${minmax} lut=$ENV{KAPPA_DIR}/bgyrw_lut.sdf reset";
    $Mon{'kapview_mon'}->obeyw( "display", "$params" );

    # Assume that if vectors are supplied that POLPACK monolith was used
    # to create it and is active.
    if ( defined( $vector_file ) ) {
       $params = "cat=$vector_file device=\"$outvecfile" . "/$type\" noclear noaxes nokey";
       $Mon{'polpack_mon'}->control('setenv', "PGPLOT_${type}_WIDTH=$xres");
       $Mon{'polpack_mon'}->control('setenv', "PGPLOT_${type}_HEIGHT=$yres");
       $Mon{'polpack_mon'}->obeyw( "polplot", "$params" );
    }

  } else {
    orac_warn "Programming error: cannot create graphic from file that's not one- or two-dimensional.\n";
    return ORAC__OK;
  }

  orac_say "$file to $outfile: Created graphic.";

  # Try to load the Image::ExifTool module to add a header.
  my $isok = eval "use Image::ExifTool qw/ :Public /; 1; ";
  if( $isok ) {
    orac_say " Adding EXIF header to $outfile.";

    my @keywords;

    # Get the FITS header so we can add the ASN_TYPE.
    my $hdr = new Astro::FITS::Header::NDF( File => $file );

    # We will need some headers for JSA preview generation
    # so store them in the PNG file
    for my $k (qw/ asn_type asn_id obsid subsysnr /) {
      my $value = $hdr->value( uc($k) );
      push(@keywords, "jsa:$k=$value") if defined $value;
    }

    # Get the RA/Dec.
    my $bounds = retrieve_bounds( $file );
    my ( $ra, $dec );
    if ( defined $bounds->{'centre'} ) {
      $ra = $bounds->{'centre'}->ra->degrees;
      $dec = $bounds->{'centre'}->dec->degrees;

       if ( defined $ra && defined $dec ) {
         push @keywords, "astro:RA=$ra";
         push @keywords, "astro:Dec=$dec";
       }
    }

    if( defined( $hdr->value( "OBJECT" ) ) ) {
      push @keywords, "astro:name=" . $hdr->value( "OBJECT" );
    }

    if ( defined( $product ) ) {
      push @keywords, "jsa:productID=" . $product;
    }

    if ( $#nondegen == 1 && defined $dec ) {

      # Retrieve the orientation.
      my $lbound = $_GET_DIMENSIONS_{LBOUND};
      my $ubound = $_GET_DIMENSIONS_{UBOUND};
      my $wcs = $Frm->read_wcs( $file );
      my $skytemplate = Starlink::AST::SkyFrame->new( "" );
      $skytemplate->Set( 'MaxAxes' => 3,
                         'MinAxes' => 1 );
      my $skyframe = $wcs->FindFrame( $skytemplate, "" );
      $skyframe->Set( 'system' => 'ICRS' );

      my $cen_x = 0.5 + ( $lbound->[0] + $ubound->[0] ) / 2;
      my $cen_y = 0.5 + ( $lbound->[1] + $ubound->[1] ) / 2;

      # Add an arcminute to the central Dec position, then find which
      # pixel that's at, then find the angle.
      my $dec_new = $bounds->{'centre'}->dec->radians + 0.000290888209;
      my @new_pos = $skyframe->TranP( 0,
                                      [ $bounds->{'centre'}->ra->radians ],
                                      [ $dec_new ] );

      # Calculate the angle.
      my $x = $new_pos[0]->[0] - $cen_x;
      my $y = $new_pos[1]->[0] - $cen_y;
      my $angle = atan2( $y, $x );
      my $angle_deg = $angle * 180 / ( atan2( 1, 1 ) * 4 );

      # Handle quadrant.
      if( $x < 0 ) {
        if( $y < 0 ) {
          $angle_deg = 90 - $angle_deg;
        } else {
          $angle_deg = 450 - $angle_deg;
        }
      } else {
        $angle_deg = 90 - $angle_deg;
      }
      push @keywords, "astro:orientation=$angle_deg";

      # Find the pixel scale of the original NDF, then scale the pixel
      # scale accordingly.
      $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$file" );
      my ( $ORAC_STATUS, @fpixscale ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fpixscale" );
      my $pixscale_orig = sqrt( $fpixscale[0] * $fpixscale[0] +
                                $fpixscale[1] * $fpixscale[1] );
      my $longest_file = ( $nondegen[0] > $nondegen[1] ? $nondegen[0] : $nondegen[1] );
      my $longest_img = ( $xres > $yres ? $xres : $yres );
      my $pixscale_new = $longest_file * $pixscale_orig / $longest_img;
      push @keywords, "astro:pixelScale=$pixscale_new";

    }

    # Write the EXIF information.
    my $exif = new Image::ExifTool;
    foreach my $keyword ( @keywords ) {
      $exif->SetNewValue( Keywords => $keyword );
    }
    $exif->WriteInfo( $outfile );

#  my $url = "http://www.worldwidetelescope.org/wwtweb/ShowImage.aspx?scale=$pixscale_new&name=" . $hdr->value( "OBJECT" ) . "&imageurl=http://www.jach.hawaii.edu/~bradc/images/$outfile&ra=$ra&dec=$dec&rotation=$angle_deg&x=" . ( int( $xres / 2 )) . "&y=" . ( int( $yres / 2 ) );
#
#  print "URL: $url\n";

  } else {
    orac_warn "Could not load Image::ExifTool: $@\n";
  }
}
