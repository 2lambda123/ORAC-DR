# -*-perl-*-

=head1 NAME

_CREATE_GRAPHIC_FROM_FILE_ - Create a PNG, GIF, or JPG graphic from a
given file.

=head1 DESCRIPTION

This primitive creates a PNG, GIF, or JPG graphic from the supplied
file. It currently only supports 1-D and 2-D files.

=head1 ARGUMENTS

=over 4

=item ADDRES = LOGICAL (Given)

Whether or not to append the resolution to the filename. If true, the
output filename will have the form <file>_<xres>x<yres>.<type>, or if
the XRES and YRES parameters are equal, <file>_<xres>.<type>. [0]

=item FILE = CHARACTER (Returned)

The name of the file to convert to the given graphic file. Must be
given.

=item TYPE = CHARACTER (Returned)

The type of graphic to create. Can be gif, jpg, or png. ['gif']

=item XRES = INTEGER (Returned)

The number of pixels along the x-axis of the output graphic file. [64]

=item YRES = INTEGER (Returned)

The number of pixels along the y-axis of the output graphic file. [64]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable only for 1-D and 2-D input files.

=item *

The graphic file will have the same root filename as the input file,
with the appropriate file extension.

=back

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2009 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

my $file = get_prim_arg( $_PRIM_ARGS_, 'FILE', undef );
if( ! defined( $file ) ) {
  orac_throw "Programming error: Must supply FILE parameter to _CREATE_GRAPHIC_FROM_FILE_.";
}

my $addres = get_prim_arg( $_PRIM_ARGS_, 'ADDRES', 0 );
my $type = uc( get_prim_arg( $_PRIM_ARGS_, 'TYPE', 'GIF' ) );
my $xres = get_prim_arg( $_PRIM_ARGS_, 'XRES', 64 );
my $yres = get_prim_arg( $_PRIM_ARGS_, 'YRES', 64 );

my $outfile;

if( $addres ) {
  if( $xres == $yres ) {
    $outfile = "${file}_$xres." . lc( $type );
  } else {
    $outfile = "${file}_${xres}x${yres}." . lc( $type );
  }
} else {
  $outfile = join ".", $file, lc( $type );
}

# Set the x- and y-resolution. This needs to be done via an
# environment variable, which has a different name depending on what
# type of file we're writing.
my $xresenv = "PGPLOT_" . $type . "_WIDTH";
my $yresenv = "PGPLOT_" . $type . "_HEIGHT";

$Mon{'kapview_mon'}->control( "setenv", "$xresenv=$xres" );
$Mon{'kapview_mon'}->control( "setenv", "$yresenv=$yres" );

# Check to see if we're 1-D or 2-D.
_GET_DIMENSIONS_ FILE=$file
my $dims = $_GET_DIMENSIONS_{DIMS};
my @nondegen = grep { $_ != 1 } @$dims;
if( $#nondegen == 0 ) {

  my $params = "ndf=$file device=\"$outfile/$type\" margin=0 axes=no mode=histogram";
  $Mon{'kapview_mon'}->obeyw( "linplot", "$params" );

} elsif( $#nondegen == 1 ) {

  my $params = "in=$file device=\"$outfile/$type\" margin=0 axes=no mode=faint lut=$ENV{KAPPA_DIR}/bgyrw_lut.sdf accept";
  $Mon{'kapview_mon'}->obeyw( "display", "$params" );

} else {
  orac_warn "Programming error: cannot create graphic from file that's not 1-D or 2-D\n";
}

orac_say "$file to $outfile: Created graphic.";

# Try to load the Image::ExifTool module to add a header.
my $isok = eval "use Image::ExifTool qw/ :Public /; 1; ";
if( $isok ) {
  orac_say " Adding EXIF header to $outfile.";

  my @keywords;

  # Get the FITS header so we can add the ASN_TYPE.
  my $hdr = new Astro::FITS::Header::NDF( File => $file );
  my $asn_type = $hdr->value( "ASN_TYPE" );
  push @keywords, "jsa:asn_type=$asn_type";

  # Get the RA/Dec.
  my $bounds = ORAC::Bounds::retrieve_bounds( $file );
  my $ra = $bounds->{'centre'}->ra->degrees;
  my $dec = $bounds->{'centre'}->dec->degrees;

  push @keywords, "astro:RA=$ra";
  push @keywords, "astro:Dec=$dec";

  push @keywords, "astro:name=" . $hdr->value( "OBJECT" );

  if( $#nondegen == 1 ) {

    # Retrieve the orientation.
    my $lbound = $_GET_DIMENSIONS_{LBOUND};
    my $ubound = $_GET_DIMENSIONS_{UBOUND};
    my $wcs = $Frm->read_wcs( $file );
    my $skytemplate = Starlink::AST::SkyFrame->new( "" );
    $skytemplate->Set( 'MaxAxes' => 3,
                       'MinAxes' => 1 );
    my $skyframe = $wcs->FindFrame( $skytemplate, "" );
    $skyframe->Set( 'system' => 'ICRS' );

    my $cen_x = 0.5 + ( $lbound->[0] + $ubound->[0] ) / 2;
    my $cen_y = 0.5 + ( $lbound->[1] + $ubound->[1] ) / 2;

    # Add an arcminute to the central Dec position, then find which
    # pixel that's at, then find the angle.
    my $dec_new = $bounds->{'centre'}->dec->radians + 0.000290888209;
    my @new_pos = $skyframe->TranP( 0,
                                    [ $bounds->{'centre'}->ra->radians ],
                                    [ $dec_new ] );

    # Calculate the angle.
    my $x = $new_pos[0]->[0] - $cen_x;
    my $y = $new_pos[1]->[0] - $cen_y;
    my $angle = atan2( $y, $x );
    my $angle_deg = $angle * 180 / ( atan2( 1, 1 ) * 4 );

    # Handle quadrant.
    if( $x < 0 ) {
      if( $y < 0 ) {
        $angle_deg = 90 - $angle_deg;
      } else {
        $angle_deg = 450 - $angle_deg;
      }
    } else {
      $angle_deg = 90 - $angle_deg;
    }
    push @keywords, "astro:orientation=$angle_deg";

    # Find the pixel scale of the original NDF, then scale the pixel
    # scale accordingly.
    $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$file" );
    my ( $ORAC_STATUS, @fpixscale ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fpixscale" );
    my $pixscale_orig = sqrt( $fpixscale[0] * $fpixscale[0] +
                              $fpixscale[1] * $fpixscale[1] );
    my $longest_file = ( $nondegen[0] > $nondegen[1] ? $nondegen[0] : $nondegen[1] );
    my $longest_img = ( $xres > $yres ? $xres : $yres );
    my $pixscale_new = $longest_file * $pixscale_orig / $longest_img;
    push @keywords, "astro:pixelScale=$pixscale_new";

  }

  # Write the EXIF information.
  my $exif = new Image::ExifTool;
  foreach my $keyword ( @keywords ) {
    $exif->SetNewValue( Keywords => $keyword );
  }
  $exif->WriteInfo( $outfile );

#  my $url = "http://www.worldwidetelescope.org/wwtweb/ShowImage.aspx?scale=$pixscale_new&name=" . $hdr->value( "OBJECT" ) . "&imageurl=http://www.jach.hawaii.edu/~bradc/images/$outfile&ra=$ra&dec=$dec&rotation=$angle_deg&x=" . ( int( $xres / 2 )) . "&y=" . ( int( $yres / 2 ) );
#
#  print "URL: $url\n";

} else {
  orac_warn "Could not load Image::ExifTool: $@\n";
}
