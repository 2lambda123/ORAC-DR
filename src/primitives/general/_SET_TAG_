# -*-perl-*-

=head1 NAME

_SET_TAG_ - Tag the current Frame for subsequent retrieval.

=head1 DESCRIPTION

This primitive can be used to tag the current Frame for subsequent
retrieval. In conjunction with the _RETRIEVE_TAG_ primitive, this
primitive can be used to "jump back" to a previous step in processing.

=head1 ARGUMENTS

=over 4

=item GROUP = INTEGER (Given)

How to process group files. 0 means use the current Frame object. 1
means use the current Group object. 2 means use each Frame member of
the current Group object. [0]

=item TAG = STRING (Given)

The string to tag the current Frame with. This argument is mandatory,
and an error will be thrown if it is not defined.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for any Frame.

=back

=head1 OUTPUT DATA

=over 4

=item *

None.

=back

=head1 TASKS

None.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities
Council.  All Rights Reserved.

=cut

my $tag = $_PRIM_ARGS_->{TAG};
if( ! defined( $tag ) ) {
  orac_throw "TAG argument not defined in _SET_TAG_: Programming error.\n";
}

my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );

my @objs;
if( $group == 0 ) {
  push @objs, $Frm;
} elsif( $group == 1 ) {
  push @objs, $Grp;
} elsif( $group == 2 ) {
  push @objs, $Grp->members;
}

foreach my $Obj ( @objs ) {

  $Obj->tagset( $tag );

  my %product = ( uc( $tag ) => $Obj->product );
  if( defined( $Obj->uhdr( "TAG_PRODUCT" ) ) ) {
    %product = ( %product,
                 %{$Obj->uhdr( "TAG_PRODUCT" )} );
  }

  $Obj->uhdr( "TAG_PRODUCT", \%product );
}
