#+
# Name:
#    _SUBTRACT_SKY_POL_
#
# Purpose:
#    Creates sky-subtracted e- and o-beam images for polarimetry recipes.
#
# Language:
#    Perl5
#
# Description:
#    This primitive creates sky-subtracted e- and o-beam images.  The
#    images are subsets of the current frame in the appropriate region.
#    Modal sky values are determined from e- and o-beam sky areas within
#    the frame.  The sky-subtracted e- and o-beam frames are stored in two
#    groups, which are created if they do not already exist.  References
#    to the groups are stored in the main $Grp user headers called
#    EBEAM_GROUP and OBEAM_GROUP.
#
#    The primitive reports a successful sky subtraction and the frames
#    concerned.  It is a variant of _SUBTRACT_SKY_ for POL recipes.
#
# Notes:
#    -  This primitive is suitable for both UFTI and IRCAM.
#    -  Processing only occurs for object frames.
#    -  The sky-subtracted images can be displayed.
#    -  The frame title is propagated.
#
# Output Data:
#    -  Sky-subtracted e-beam and o-beam frames inheriting the frame's
#    name but with the _ess and _oss suffices respectively.
#
# Tasks:
#    KAPPA: CSUB, STATS.
#
# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# This should only be performed on OBJECT frames.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ) {

# Access the group of e-beam and o-beam frames.
# =============================================

# Does the group of e-beam frames exist?  If not report the fatal error.
       my $eGrp = $Grp->uhdr( "EBEAM_GROUP" );
       if ( ! defined( $eGrp ) ) {
          orac_err "_SUBTRACT_SKY_POL_: EBEAM_GROUP does not exist " .
                   "(probable programming error).\n";
       }

# Does the group of o-beam frames exist?  If not report the fatal error.
       my $oGrp = $Grp->uhdr( "OBEAM_GROUP" );
       if ( ! defined( $oGrp ) ) {
          orac_err "_SUBTRACT_SKY_POL_: OBEAM_GROUP does not exist " .
                   "(probable programming error).\n";
       }

# Obtain bounds of rectangular regions around the target and sky.
# ===============================================================

# Compute the pixel bounds of the target and sky e- and o-beam images.
       _DEFINE_POL_REGIONS_

# Get references to the bounds just calculated.
       my $etbref = $_DEFINE_POL_REGIONS_{ETBOUNDS};
       my $otbref = $_DEFINE_POL_REGIONS_{OTBOUNDS};
       my $esbref = $_DEFINE_POL_REGIONS_{ESBOUNDS};
       my $osbref = $_DEFINE_POL_REGIONS_{OSBOUNDS};

# Convert references into arrays.
       my @etbounds = @$etbref;
       my @otbounds = @$otbref;
       my @esbounds = @$esbref;
       my @osbounds = @$osbref;

# Find the modal skies.
# =====================

# Define the parameters.
       my $in = $Frm->file;
       my $hidden = "clip=[2,3,3]";

# Set the bounds of the section of the e-beam.
       my $header = "ndf=$in($esbounds[ 0 ]:$esbounds[ 1 ],$esbounds[ 2 ]:$esbounds[ 3 ])";

# Calculate the clipped mean of the e-beam section of sky.
       $Mon{"kappa_mon"}->obeyw("stats","$header $hidden");

# Extract the clipped mean of the frame.
       ( my $ORAC_STATUS, my $esky ) = $Mon{"kappa_mon"}->get("stats","mean");

# Now repeat for the o-beam.  Calculate and extract the clipped mean of the
# section.
       $header = "ndf=$in($osbounds[ 0 ]:$osbounds[ 1 ],$osbounds[ 2 ]:$osbounds[ 3 ])";
       $Mon{"kappa_mon"}->obeyw("stats","$header $hidden");
       ( my $ORAC_STATUS, my $osky ) = $Mon{"kappa_mon"}->get("stats","mean");

# Subtract the sky from the e-beam.
# =================================

# Define the file suffix.
       ( $in, my $e_out ) = $Frm->inout( "_ess" );

# Subtract the sky from the required section about the target in the e-beam.
       $header = "in=$in($etbounds[ 0 ]:$etbounds[ 1 ],$etbounds[ 2 ]:$etbounds[ 3 ])";
       $hidden = "out=$e_out scalar=$esky";
       $Mon{"kappa_mon"}->obeyw("csub","$header $hidden");

       orac_print "Orac says: e-beam of $in sky subtracted to make $e_out\n";

# Store the sky-subtracted e-beam frame in the group.
# ===================================================

# Create a new frame to store the differenced pair image.
       my $eFrm = $Frm->new( $e_out );

# Need to propagate the raw frame as ORAC-DR pattern matches for files
# ending in a number to set the $Frm->number, which is needed for the
# template method.
       $eFrm->raw( $Frm->raw );

# Transfer the headers to the differenced frame.
       %{$eFrm->hdr} = ( %{$Frm->hdr} );
       %{$eFrm->uhdr} = ( %{$Frm->uhdr} );

# Store the sky-subtracted e-frame in the e-beam group.
       $eGrp->push( $eFrm );

# Display the sky-subtracted e-beam frame.
       $Display->display_data( $eFrm ) if (defined $Display);

# Subtract the sky from the o-beam.
# =================================

# Define the file suffix.
       ( $in, my $o_out ) = $Frm->inout( "_oss" );

# Subtract the sky from the required section about the target in the o-beam.
       $header = "in=$in($otbounds[ 0 ]:$otbounds[ 1 ],$otbounds[ 2 ]:$otbounds[ 3 ])";
       $hidden = "out=$o_out scalar=$osky";
       $Mon{"kappa_mon"}->obeyw("csub","$header $hidden");

       orac_print "Orac says: o-beam of $in sky subtracted to make $o_out\n";

# Store the sky-subtracted o-beam frame in the group.
# ===================================================

# Create a new frame to store the differenced pair image.
       my $oFrm = $Frm->new( $o_out );

# Need to propagate the raw frame as ORAC-DR pattern matches for files
# ending in a number to set the $Frm->number, which is needed for the
# template method.
       $oFrm->raw( $Frm->raw );

# Transfer the headers to the differenced frame.
       %{$oFrm->hdr} = ( %{$Frm->hdr} );
       %{$oFrm->uhdr} = ( %{$Frm->uhdr} );

# Store the sky-subtracted o-frame in the o-beam group.
       $oGrp->push( $oFrm );

# Display the sky-subtracted o-beam frame.
       $Display->display_data( $oFrm ) if (defined $Display);

    }

# Podule
# ======

=head1 NAME

SUBTRACT_SKY_POL -- Creates sky-subtracted e- and o-beam images for polarimetry recipes.

=head1 DESCRIPTION

This primitive creates sky-subtracted e- and o-beam images.  The
images are subsets of the current frame in the appropriate region.
Modal sky values are determined from e- and o-beam sky areas within
the frame.  The sky-subtracted e- and o-beam frames are stored in two
groups, which are created if they do not already exist.  References
to the groups are stored in the main $Grp user headers called
EBEAM_GROUP and OBEAM_GROUP.

The primitive reports a successful sky subtraction and the frames
concerned.  It is a variant of _SUBTRACT_SKY_ for POL recipes.

=head1 NOTES

=over 4

=item *

This primitive is suitable for both UFTI and IRCAM.

=item *

Processing only occurs for object frames.

=item *

The sky-subtracted images can be displayed.

=item *

The frame title is propagated.

=back

=head1 OUTPUT DATA

=over 4

=item *

Sky-subtracted e-beam and o-beam frames inheriting the frame's
name but with the _ess and _oss suffices respectively.

=back

=head1 TASKS

KAPPA: CSUB, STATS.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
