# _GENERATE_OFFSETS_QUADRANT_JITTER_       -*- perl -*-
#
# Function:
#    Find the offsets between the frames in a QUADRANT_JITTER recipe.
#
# Primitives Called:
#    _GENERATE_OFFSETS_
#
# Arguments:
#    COMPLETE = REAL (Given)
#       Completeness of matched features for registration between two
#       frames to be accepted.  It must be in the range 0.2 to 1.0. [0.4]
#    MINPIX = INTEGER (Given)
#       Minimum number of contiguous pixels above the PERCENTILE level
#       to be considered a registration feature.  It must be at least 6.
#       [9]
#    PERCENTILE = REAL (Given)
#       Percentile threshold for locating objects to register frames. 
#       It must be in the range 75 to 99.9. [98]

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ||
         $Frm->hdr( "OBSTYPE" ) eq "SKY") {

# Test whether or not it is time to make a mosaic.
       $makemos = $Frm->hdr( "MAKE_MOSAIC" );
       if ( $makemos ) {

# Obtain the cycle number from the header.
          $cycleno = $Frm->hdr( "CYCLE_NUMBER" );

# Select those members in the current cycle.
          $cycleGrp = $Grp->subgrp( CYCLE_NUMBER => $cycleno );

# Make a local $Grp containing just the current cycle.
          {
             my $Grp = $cycleGrp;

# Generate the offsets
# ====================

# Obtain the parameters for the detection.
             $percentile = ( $_GENERATE_OFFSETS_{PERCENTILE} || 98 );
             $minpix = ( $_GENERATE_OFFSETS_{MINPIX} || 9 );
             $complete = ( $_GENERATE_OFFSETS_{COMPLETE} || 0.4 );

# Call the generic primitive which does most of the work.  Use central
# source as a backup.
             _GENERATE_OFFSETS_ PERCENTILE=$percentile MINPIX=$minpix COMPLETE=$complete CENTRAL_SOURCE=TRUE

# End of scope of local $Grp aka $cycleGrp.
          }
       }
    }
