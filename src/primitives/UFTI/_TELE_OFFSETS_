# _TELE_OFFSETS_       -*- perl -*-
#
#  Finds the telescope offsets from the headers and creates
#  CCDPACK/FINDOFF ".off" offset files for registration.
#
#  Arguments:
#     ANGLE = REAL (Given)
#        Rotation angle of the Declination axis with respect to the
#        frame's y axis measured counter clockwise. [0.0]
#    MOVING_TARGET = LOGICAL (Read)
#       If TRUE (1), the source is a moving target and frames are to
#       register the moving target not the fixed stars.  [0]


# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ||
         $Frm->hdr( "OBSTYPE" ) eq "SKY" ) {

# Arguments
# =========

# Is there a moving target?
       my $moving_target = $_GENERATE_OFFSETS_JITTER_{MOVING_TARGET};
       $moving_target = defined( $moving_target ) ? $moving_target : 0;

# Obtain the rotation angle in degrees.
       my $defrot = $Frm->hdr( "CROTA2" );
       $defrot = defined( $defrot ) ? $defrot : 0.0;
       my $rotangle = ( $_TELE_OFFSETS_{ANGLE} || $defrot );

# Preliminaries
# =============

# Define some useful variables to apply the rotation matrix.
       my $pi = atan2( 1, 1 ) * 4;
       my $dtor = $pi / 180.0;
       my $cosrot = cos( $rotangle * $dtor );
       my $sinrot = sin( $rotangle * $dtor );

# Obtain a list of the filenames of the group members.
       my @frames = $Grp->membernames;
       my $objlist = join( ",", @frames );

# Create text file to hold the list of input files, one per line.  This
# is needed because expanded lists of files may make the command line too
# long for the ADAM message system.
       unlink( "faolist.inlist$$" );
       open( INLIST, ">faolist.inlist$$" );
       print INLIST join( "\n", @frames ), "\n";
       close( INLIST );

# Create a file for storing the filenames of the offset files.
       my $offlist = "ssoff.lis$$";
       unlink( "$offlist" );
       open ( OFFLIST, "> $offlist" );

# Find telescope offsets for each group member.
# =============================================

# Loop through all the frames.
       foreach my $Frame ( $Grp->members ) {
          my $ndf = $Frame->file;

# Obtain the plate scales for the instrument from the headers.
          my ( $xpixelscale, $ypixelscale );
          my $instrument = $Frame->hdr( "INSTRUME" );
          if ( $instrument =~ /^UFTI/ ) {
             $xpixelscale = $Frame->hdr( "CDELT1" );
             $ypixelscale = $Frame->hdr( "CDELT2" );
          } else {
             $xpixelscale = $Frame->hdr( "PIXELSIZ" );
             $ypixelscale = $xpixelscale;
          }

# Obtain the telescope offsets.
          my ( $xoffh, $yoffh );
          if ( $instrument =~ /^UFTI/ ) {
             $xoffh = $Frame->hdr( "TRAOFF" );
             $yoffh = $Frame->hdr( "TDECOFF" );
          } else {
             $xoffh = $Frame->hdr( "RAOFF" );
             $yoffh = $Frame->hdr( "DECOFF" );
          }
          my $offtype = "telescope";

# Convert to pixel offsets of the object in the Cartesian sense.
          my $xoffs = $xoffh / $xpixelscale;
          my $yoffs = -1.0 * $yoffh / $ypixelscale;

# Apply the rotation matrix.
          my $xoffset = $xoffs * $cosrot - $yoffs * $sinrot;
          my $yoffset = $xoffs * $sinrot + $yoffs * $cosrot;

# Specify the offsets to be used.
          orac_print "Orac says: using $offtype offsets ($xoffset,$yoffset) for frame $ndf\n";

# Create an offset file as used by CCDPACK's REGISTER task.  Store the
# the frame name and offsets within the file.
          my $off_file = $ndf . ".off";
          unlink ( "$off_file" );
          open ( OFFSET, "> $off_file" );
          print OFFSET "1  $xoffset  $yoffset\n";
          close ( OFFSET );

# Record the name offset file in GRP indirection file for use by CCDEDIT.
          print OFFLIST "$off_file\n";
       }
       close ( OFFLIST );

# Moving target
# =============
       if ( $moving_target ) {
          _ADJUST_OFFSETS_TO_MOVING_TARGET_
       }

# Record the offset files within their associated frames.
# =======================================================

# Specify parameters for editing CCDPACK headers.
       my $header = "in='^faolist.inlist$$' inlist=\'^$offlist\'";
       my $hidden = "mode=alist"; 

# Associate the position-list files with the current object frames.
       $Mon{"ccdpack_reg"}->obeyw("ccdedit","$header $hidden");
       unlink( "faolist.inlist$$" );
    }
