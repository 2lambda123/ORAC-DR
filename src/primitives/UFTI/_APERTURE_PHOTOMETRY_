# _APERTURE_PHOTOMETRY_         -*- perl -*-
#
# Perform aperture photometry on a standard star.
#
# TASK: PHOTOM - AUTOPHOTOM
#
# Imports from:
#    _APERTURE_CORRECTION_: RAPTURE, CORRECTION
#    _ESTIMATE_PSF_:        CENTRE, FWHM

# Input arguments recognised by this primitive:
#    SKYEST, ZP, INNER, OUTER

# Determine whether it is time to do aperture photometry.
# We have to specify this since we have to decide whether we
# are using $Frm or $Grp and in general this routine is run
# on reduced images.
    my $do_aphot = $Frm->hdr( "DO_APHOT" );
    if ( $do_aphot ) {

# This should only be performed on OBJECT frames.
       if ( $Grp->hdr( "OBSTYPE" ) eq "OBJECT" ) {

# Obtain the FWHM of the point-spread function.
          my $fwhm = $_ESTIMATE_PSF_{FWHM};

# Convert the aperture correction to magnitudes to the nearest 
# millimagnitude.  Need to retrieve the correction factor from
# earlier primitive.
          my $correction = $_APERTURE_CORRECTION_{CORRECTION};
          my $cormag = 0.001 * nint( 1000 * ( -2.5 * log10($correction) ) );

# Obtain the filter from the FITS headers.
          my $filter = $Grp->hdr( "FILTER" );

# Obtain the mean extinction coefficient.
          my $extinction;
          SWITCH: {
             if ( $filter =~ /^J/ ) { $extinction = 0.102; last SWITCH; }
             if ( $filter =~ /^H/ ) { $extinction = 0.059; last SWITCH; }
             if ( $filter =~ /^K/ ) { $extinction = 0.088; last SWITCH; }
             $extinction = 0.0;
          }

# Obtain the airmass from the FITS headers.  Find the approximate
# mean airmass from the start and end values.  This should be
# adequate unless it is a long integration with the source crossing
# the meridian.
          my $amstart = $Grp->hdr( "AMSTART" );
          my $amend   = $Grp->hdr( "AMEND" );
          my $airmass = 0.5 * ( $amstart + $amend );
          my $extcor = $airmass * $extinction;

# Calculate the radius of the inner and outer extent of the aperture.
# Used to be calculated in _APERTURE_CORRECTION_ until I realised
# that they were not being used in _APERTURE_CORRECTION_
          my $inner = ( $_APERTURE_PHOTOMETRY_{INNER} || "2.0" );
          my $outer = ( $_APERTURE_PHOTOMETRY_{OUTER} || "4.0" );
          $inner = min( 3.0, max( $inner, 1.2 ) );
          $outer = min( 5.0, max( $inner + 0.3, $outer, 1.5 ) );

# The automatic photometry task needs a text file to control the
# type and location of the photometry, and the size and shape of the
# aperture.  In this primitive these are fixed except the size, but
# we could use parameters for these in a hierarchy of scripts.  We have a
# circular aperture obtaining the sky from an annulus between the INNER
# and OUTER times the diameter of the main aperture.
          my $rapture = $_APERTURE_CORRECTION_{RAPTURE};
          my $centre = $_ESTIMATE_PSF_{CENTRE};
          open( PHOTOM, ">photom$$.dat" );
          print PHOTOM "#ANN 1 $inner $outer\n";
          print PHOTOM "1 @$centre 0.0 0.0 0.0 0.0 OK $rapture 0.0 0.0 annulus circle\n";
          close( PHOTOM );

# Specify the user parameters.
          my $skyest = ( $_APERTURE_PHOTOMETRY_{SKY_EST} || "3" );
          my $zp = ( $_APERTURE_PHOTOMETRY_{ZP} || "23.0" );
          my $user = "skyest=$skyest skymag=$zp";
 
# Specify the other parameters for AUTOPHOTOM.
          my $header = "in=".$Grp->file." infile=photom$$.dat outfile=photom$$.res";
          my $hidden = "nocentro padu=1 biasle=0 photon=1 positive sature=12000 nousemask";

# Perform the photometry, however, for this case compute a centroid
# about which to integrate.
          $Mon{"photom_mon"}->obeyw("autophotom","$header $user $hidden");

# Extract and present the results.  The magnitude and error are the
# fourth and fifth fields in the output file.  The sky estimate is the
# sixth.
          open( PHOTOM, "photom$$.res" );
          my @results = map { (split)[3..5] } <PHOTOM>;
          close( PHOTOM );

# Format the results to give a sensible number of significant figures.
          my $fs_airmass = sprintf( "%6.4f", $extcor );
          my $fs_apdiam = sprintf( "%6.3f", $_APERTURE_CORRECTION_{APERTURE} );
          $fs_apdiam =~ s/ //;
          my $fs_apfact = sprintf( "%6.3f", $_APERTURE_CORRECTION_{APERTURE_FACTOR} );
          $fs_apfact =~ s/ //;
          my $fs_fwhm = sprintf( "%6.3f", $fwhm );
          $fs_fwhm =~ s/ //;
          my $fs_apcorr = sprintf( "%6.4f", $_APERTURE_CORRECTION_{CORRECTION} );

# Print the results.
          orac_print  "\n";
          orac_print  "Frame:                  ".$Grp->file."\n";
          orac_print  "Filter:                 $filter\n";
          orac_print  "Magnitude:              $results[0] +/- $results[1]\n";
          orac_print  "Airmass correction:     $fs_airmass\n";
          orac_print  "Sky:                    $results[2]\n";
          orac_print  "Aperture diameter:      $fs_apdiam pixels\n";
          orac_print  "Aperture ratio:         $fs_apfact FWHM ($fs_fwhm pixels)\n";
          orac_print  "Annulus inner scale:    $inner\n";
          orac_print  "Annulus outer scale:    $outer\n";
          orac_print  "Photometric correction: $fs_apcorr; $cormag mag.\n";
          orac_print  "\n";

# Remove the photometry text file.
          unlink( "photom$$.res" );
       }
    }
