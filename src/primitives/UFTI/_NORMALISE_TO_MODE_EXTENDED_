# _NORMALISE_TO_MODE_EXTENDED_  -*-perl-*-
#
# Normalises frames to the mode of a reference frame.
#
# TASK: KAPPA - CADD
#
# Arguments:
#    SKY_LEVEL() = REAL (Returned)
#       The modal sky levels of the blank sky frames.
#
# Imports:
#    _CLIPPED_MEAN_                      : RESULT

# Test whether or not this is an object frame.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ||
         $Frm->hdr( "OBSTYPE" ) eq "SKY" ) {

# Test whether or not this is an object frame or a sky frame. 
       $class = $Frm->hdr( "TARGET_OR_SKY" );

# Test whether or not this is a target frame or a sky frame.
       if ( $class eq "sky" ) {

# Find the clipped mean (effectively the mode) for the frame.
          _CLIPPED_MEAN_ CLIP=[2,2.5,3,3]
          $mode = $_CLIPPED_MEAN_{RESULT};

# Generate the input and output filenames.
          ($in, $out) = $Frm->inout("_nm");

# Determine whether or not this is the first sky frame, and hence whether or
# not a reference mode is needed.  By definition the first offset is zero.
          my $refframe = $Frm->hdr( "REFERENCE_FRAME" );
          if ( $refframe ) {
             $refmode = $mode;
             orac_print "Orac says: Mode for reference frame $in is $refmode\n";
          }

# Evaluate the normalisation factor.  
          if ( $mode > 1.0E-7 ) {
             $sky_offset = $refmode - $mode;
             orac_print "Orac says: Mode for frame $in is $mode\n";
             orac_print "Orac says: Offset for frame $in is $sky_offset\n\n";

          } else {
             orac_err "Unable to normalise frame $in.  Mode ($mode) is too small.\n";
          };

# Normalise the current frame to the current reference frame.
          $header = "in=$in out=$out scalar=$sky_offset title=\'Normalised to mode\'";
          $Mon{"kappa_mon"}->obeyw("cadd","$header");

# Record the sky level for later sky subtraction.
          push( @_NORMALISE_TO_MODE_EXTENDED_SKY_LEVEL, $mode );
          orac_print "+++ @_NORMALISE_TO_MODE_EXTENDED_SKY_LEVEL\n";

# Report the processing.
          orac_print "Orac says: $in to $out: Data normalised \n";

# Record the new file name in the frame object.
          $Frm->file( $out );                       # obligatory update step

# Display the image.
          _DISPLAY_FRAME_IMAGE_
       }
    };
