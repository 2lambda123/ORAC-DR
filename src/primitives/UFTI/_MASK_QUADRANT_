# _MASK_QUADRANT_
#
# Masks a quadrant of a frame.
#
# Tasks: KAPPA - ARDMASK
#

# Test whether or not this is an object frame.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ) {

# Determine which mask to use from the telescope offsets.  The masks 
# are stored in ARD files.  Here positive offset corresponds to the
# west and south (right and bottom) quadrant.
       my $right = $Frm->hdr( "TRAOFF" );
       my $bottom = $Frm->hdr( "TDECOFF" );
       my ( $maskfile, $quad );

       if ( $right >= 0 && $bottom >= 0 ) {
          $maskfile = "ard_quad_br.dat";
          $quad = "Bottom-right";

       } elsif ( $right >= 0 && $bottom < 0 ) {
          $maskfile = "ard_quad_tr.dat";
          $quad = "Top-right";

       } elsif ( $right < 0 && $bottom < 0 ) {
          $maskfile = "ard_quad_tl.dat";
          $quad = "Top-left";

       } elsif ( $right < 0 && $bottom >= 0 ) {
          $maskfile = "ard_quad_bl.dat";
          $quad = "Bottom-left";
       }

# Generate the input and output filenames.
       ( my $in, my $out ) = $Frm->inout( "_qm" );

# Specify the parameters.
       my $header = "in=$in out=$out title=\'$quad quadrant masked\'";
       my $hidden = "ardfile=$maskfile";

# Mask the quadrant.  Sets the masked quadrant to bad values.
       $Mon{"kappa_mon"}->obeyw("ardmask","$header $hidden");

# Report the processing.
       orac_print "Orac says: $in to $out: $quad quadrant masked\n";

# Record the new file name in the frame object.
       $Frm->file( $out );                     # obligatory update step

# Display the image.
       _DISPLAY_FRAME_IMAGE_

    }
