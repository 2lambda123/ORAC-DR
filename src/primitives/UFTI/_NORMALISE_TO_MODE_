# _NORMALISE_TO_MODE_  -*-perl-*-
#
# Normalises frames to the mode of a reference frame.
#
# TASK: KAPPA - CMULT
#

# Test whether or not this is an object frame.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ||
         $Frm->hdr( "OBSTYPE" ) eq "SKY" ) {

# Find the clipped mean (effectively the mode) for the frame.
       _CLIPPED_MEAN_
       my $mode = $_CLIPPED_MEAN_{RESULT};

# Generate the input and output filenames.
       ( my $in, my $out ) = $Frm->inout( "_nm" );

# Determine whether or not this is the first frame, and hence whether or
# not a reference mode is needed.   We need a global variable to store
# this value, and the only one we have available for the first frame
# is the frame header.  There is no group header.
       my $refframe = $Frm->hdr( "REFERENCE_FRAME" );
       my $norm_factor;
       if ( $refframe ) {
          $Frm->hdr( "REFERENCE_LEVEL", $mode );
          orac_print "Orac says: Mode for reference frame $in is $mode\n";
       }

# Define the reference mode for the reference frame.
       if ( $mode > 1.0E-7 ) {
          my $refmode;
          if ( $refframe ) {
             $refmode = $mode;

# Recall the reference level using a value derived from the reference
# frame in the first cycle.  We cannot obtain that from the Frm or
# Grp here because we may be processing a subsequent cycle not containing
# the reference frame.  So a semi-global value should be calculated
# at a level where the full group is accessible.  Here we test whether
# it is defined.

# Check that reference frame has been located.  If not fudge the
# reference level for now so the recipe completes, albeit with a poorer
# mosaic.
          } else {
             if ( defined $_NORMALISE_TO_MODE_refmode ) {
                $refmode = $_NORMALISE_TO_MODE_refmode;

             } else {
                orac_warn "There is no reference frame from which to obtain ".
                          "a reference level.  Assume a constant level.\n";
                $refmode = $mode;

             }
          }
        
# Evaluate the normalisation factor.
          $norm_factor = $refmode / $mode;
          orac_print "Orac says: Mode for frame $in is $mode\n";
          orac_print "Orac says: Normalisation for frame $in is $norm_factor\n\n";

       } else {
          orac_err "Unable to normalise frame $in.  Mode ($mode) is too small.\n";
       }

# Normalise the current frame to the current reference frame.
       my $header = "in=$in out=$out scalar=$norm_factor title=\'Normalised to mode\'";
       $Mon{"kappa_mon"}->obeyw("cmult","$header");

# Report the processing.
       orac_print "Orac says: $in to $out: Data normalised \n";

# Record the new file name in the frame object.
       $Frm->file( $out );                      # obligatory update step

# Display the image.
       _DISPLAY_FRAME_IMAGE_

    }
