#+
# Name:
#    _MAKE_FLAT_FROM_NORMALISED_GROUP_
#
# Purpose:
#    Makes a flat from the current group of masked frames.
#
# Language:
#    Perl5
#
# Description:
#    This primitive makes a self flat from the current group and files
#    it in the flat index.  Each member of the group is expected to
#    have a significant fraction (>~5) of pixels masked, say a quadrant
#    containing the major source or many large sources; and be
#    normalised to one of the frames.  The primitive uses a median to
#    combine pre-normalised frames pixel by pixel, and then divides
#    the resultant image by its mean to form the flat field.  The 
#    primitive files the resultant flat in its calibration index. 
#
# Notes:
#    -  This primitive is suitable for both UFTI and IRCAM.
#    -  Processing only occurs for object and sky frames, and when the
#    steering header MAKE_FLAT is true.
#    -  The flat is displayed.
#
# Tasks:
#    CCDPACK: MAKECAL; KAPPA: CDIV, STATS.
#
# Output Data:
#    The flat field.  It is called is "flat_<groupnumber>" for the first
#    cycle, and "flat_<groupnumber>_<cyclenumber>" for subsequent
#    cycles, where <groupnumber> is the frame number of the group, and
#    <cyclenumber> is the cycle number derived from steering header
#    CYCLE_NUMBER.

# Authors:
#    MJC: Malcolm J. Currie (JAC)
#
# Copyright:
#    Copyright (C) 1998-2000 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Selection
# =========

# This should only be performed on OBJECT frames.
    if ( $Frm->hdr( "OBSTYPE" ) eq "OBJECT" ||
         $Frm->hdr( "OBSTYPE" ) eq "SKY" ) {

# Test whether or not it is time to make a flat.
       my $makeflat = $Frm->hdr( "MAKE_FLAT" );
       if ( $makeflat ) {

# Form a list of input file names for MAKECAL from the other members
# of the group.  This is not as obvious as it sounds since we are
# trying to do this by looking at the current file values for each
# Frame object in the loop.  First time around everything is fine.
# Second time around we realise that the previous frames now have the
# wrong names since they have been flat-fielded etc.  We now have to
# construct the input names from the template.  The template is the
# current frame name.
          $Grp->template( $Frm->file );

# Make lists of files to process
# ==============================

# Form a list of input file names for CCDPACK tasks.  Set up the object
# list assuming that everything in the Group members list contains the
# file pointer to pre-flatfielded data.
          my @objects = $Grp->membernames;
          my $objlist = join( ",", @objects );

# Create text file to hold the list of input files, one per line.  This
# is needed because expanded lists of files may make the command line too
# long for the ADAM message system.
          unlink( "objlist.inlist$$" );
          open ( INLIST, ">objlist.inlist$$" );
          print INLIST join( "\n", @objects ), "\n";
          close ( INLIST );

# Make a flat which is not normalised
# ===================================

# Assign the other parameters.  Note that output flat is hardwired for
# the moment.
          my $uflat = "uflat_" . $Grp->name;
          my $header = "in='^objlist.inlist$$' out=$uflat";
          my $hidden = "sigmas=2.0 expose=1 logfile=! reset accept"; 
          my $user = "method=median";

# Median filter the intra-normalised and masked frames to produce an
# un-normalised flatfield.
          $Mon{"ccdpack_red"}->obeyw("makecal","$header $user $hidden");
          unlink( "objlist.inlist$$" );

# Normalise the flat
# ==================

# Obtain the mean of the combined frame.
          $Mon{"kappa_mon"}->obeyw("stats","ndf=$uflat");

# Extract the mean of the frame.
          ( my $ORAC_STATUS, my $mean ) = $Mon{"kappa_mon"}->get("stats","mean");

# Get the cycle number.  Supply a default for recipes not supporting
# this yet.  Can't use ( || ) syntax because 0 is the default.
          my $cycleno = $Frm->hdr( "CYCLE_NUMBER" );
          $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Generate the output flat name. Note that output flat is hardwired for the
# moment.
          my $out;
          if ( $cycleno > 0 ) {
             $out = "flat_" . $Grp->name . "_cycle" . $cycleno;
          } else {
             $out = "flat_" . $Grp->name;
          }

# Assign the parameters.
          $header = "in=$uflat out=$out scalar=$mean title=\'Flat field\'";

# Normalise the flat field to have a mean of one.
          $Mon{"kappa_mon"}->obeyw("cdiv","$header");

# Delete the non-normalised flat.
          _DELETE_A_FRAME_ FRAME=$uflat

# Record and display the flat
# ===========================

# Set the current flat in the calibration object.
          _FILE_FLAT_ NAME=$out
     
# Report the status of the processing.
          orac_print "Orac says: frames $objlist used for flat\n";

# Display the image.
          _DISPLAY_FLAT_IMAGE_

       }
    }

# Podule
# ======

=head1 NAME

_MAKE_FLAT_FROM_NORMALISED_GROUP_ -- Makes a flat from the current group of masked frames.

=head1 DESCRIPTION

This primitive makes a self flat from the current group and files
it in the flat index.  Each member of the group is expected to
have a significant fraction (E<gt>~5) of pixels masked, say a quadrant
containing the major source or many large sources; and be
normalised to one of the frames.  The primitive uses a median to
combine pre-normalised frames pixel by pixel, and then divides
the resultant image by its mean to form the flat field.  The 
primitive files the resultant flat in its calibration index. 

=head1 NOTES

=over 4

=item *

This primitive is suitable for both UFTI and IRCAM.

=item *

Processing only occurs for object and sky frames, and when the
steering header MAKE_FLAT is true.

=item *

The flat is displayed.

=back

=head1 TASKS

CCDPACK: MAKECAL; KAPPA: CDIV, STATS.

=head1 OUTPUT DATA

The flat field.  It is called is "flat_E<lt>groupnumberE<gt>" for the first
cycle, and "flat_E<lt>groupnumberE<gt>_E<lt>cyclenumberE<gt>" for subsequent
cycles, where E<lt>groupnumberE<gt> is the frame number of the group, and
E<lt>cyclenumberE<gt> is the cycle number derived from steering header
CYCLE_NUMBER.

=head1 AUTHORS

MJC: Malcolm J. Currie (JAC)

=head1 COPYRIGHT

Copyright (C) 1998-2000 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut
