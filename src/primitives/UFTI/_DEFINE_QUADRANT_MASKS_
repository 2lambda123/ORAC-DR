# _DEFINE_QUADRANT_MASKS_
#
# Create ARD files used to mask each of the quadrants of a frame.
#
# Tasks: KAPPA - NDFTRACE

# Obtain the bounds of an object frame.
# =====================================

# Test whether or not this is an object frame.
    if ( $Frm->hdr(OBSTYPE) eq "OBJECT" ) {

# First run a task to obtain details of the frame.
       $header = "ndf=".$Frm->file;
       $Mon{"ndfpack_mon"}->obeyw("ndftrace", "$header");

# Extract the bounds of the frame.
       ($ORAC_STATUS, @lbnd) = $Mon{"ndfpack_mon"}->get("ndftrace","lbound");
       ($ORAC_STATUS, @ubnd) = $Mon{"ndfpack_mon"}->get("ndftrace","ubound");

# Find the mid points.
       $xmid = nint( ( $lbnd[0] + $ubnd[0] ) / 2 );
       $ymid = nint( ( $lbnd[1] + $ubnd[1] ) / 2 );
       $xmidp1 = $xmid + 1;
       $ymidp1 = $ymid + 1;

# Form the ARD files.
# ===================

# Remove any existing quadrant files.
       unlink ("ard_quad_br.dat", "ard_quad_tr.dat");
       unlink ("ard_quad_bl.dat", "ard_quad_tl.dat");

# Create four ARD files each of which will mask a different quadrant.  
# Note that the co-ordinates supplied are pixel indices, so apply a
# half-pixel shift to convert them to pixel co-ordinates.

# Bottom-right
       open (ARDFILE, ">ard_quad_br.dat");
       print ARDFILE "OFFSET( -0.5, -0.5 )\n";
       print ARDFILE "RECT($xmidp1,$lbnd[1],$ubnd[0],$ymid)\n";
       close (ARDFILE);

# Top-right
       open (ARDFILE, ">ard_quad_tr.dat");
       print ARDFILE "OFFSET( -0.5, -0.5 )\n";
       print ARDFILE "RECT($xmidp1,$ymidp1,$ubnd[0],$ubnd[1])\n";
       close (ARDFILE);

# Top-left
       open (ARDFILE, ">ard_quad_tl.dat");
       print ARDFILE "OFFSET( -0.5, -0.5 )\n";
       print ARDFILE "RECT($lbnd[0],$ymidp1,$xmid,$ubnd[1])\n";
       close (ARDFILE);

# Bottom-left
       open (ARDFILE, ">ard_quad_bl.dat");
       print ARDFILE "OFFSET( -0.5, -0.5 )\n";
       print ARDFILE "RECT($lbnd[0],$lbnd[1],$xmid,$ymid)\n";
       close (ARDFILE);
    };
