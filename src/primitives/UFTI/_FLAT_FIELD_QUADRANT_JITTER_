# _FLAT_FIELD_QUADRANT_JITTER_      -*-perl-*-
#

# Create a group based upon the current frame name.
    $Grp->template($Frm->file);

# Record the group members at this point.
    @quad_names = $Grp->membernames;

# Make a first pass at a flat using the masked quadrant-jitter technique.
    _MAKE_FLAT_QUADRANT_JITTER_

# Reset the group names to be the ones to flat field.
    $Grp->membernames(@quad_names);

# Apply the flat field.
    _DIVIDE_BY_FLAT_FROM_GROUP_

# Test whether or not it is time to mask objects.
    $maskobjects = $Frm->hdr( "MASK_OBJECTS" );
    if ( $maskobjects ) {

# Create an array to store the names of the mask files. 
       @maskfiles = ();

# Compute a mask of the objects for each member of the flat-field
# group, using a local $Frm.
       foreach $Frm ( $Grp->members ) {
          _MAKE_OBJECTS_MASK_

# Record the mask filename into an array.
          push (@maskfiles, $_MAKE_OBJECTS_MASK_{MASKFILE});
       }

# Mask the objects in each frame.  Make a copy of the @quad_names
# so we can shift its elements.  Again use a local $Frm.
       @local_quad_names = @quad_names;
       foreach $Frm ( $Grp->members ) {
          $file = shift( @local_quad_names );
          $maskfile = shift( @maskfiles );
          $Frm->file( $file );
          _MASK_OBJECTS_ MASKFILE=$maskfile
       }

# Use the last frame created (the one with objects masked) as a template
# to form the group.
       $Grp->template($file);

# Generate the new flat field using the jittered masked frames.
       _MAKE_FLAT_FROM_GROUP_ 

# Reset the group names to be the ones to flat field.
       $Grp->membernames(@quad_names);

# Apply the better flat field.
       _DIVIDE_BY_FLAT_FROM_GROUP_

    }
