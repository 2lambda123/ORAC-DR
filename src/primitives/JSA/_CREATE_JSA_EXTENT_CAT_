# -*-perl-*-

=head1 NAME

_CREATE_JSA_EXTENT_CAT_ - Create a JSA extent catalogue.

=head1 DESCRIPTION

This primitive takes an input map and produces a JSA output extent
catalogue of that map.

The current frame will containt the 'extent' sdf -- the clump file
produced by ORAC-DR -- after running this recipe. It will also be
tagged as 'extent'. The original frame will be tagged as "emission".

=head1 ARGUMENTS

=over 4

=item GROUP

Whether to operate on the group or not.

=back

=head1 COPYRIGHT

Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut

# Determine on which object to work.
my $group = get_prim_arg($_PRIM_ARGS_, 'GROUP', 0);
my $Obj = $group ? $Grp : $Frm;

# Only continue if there is only 1 file in the object.
orac_termerr('Received an object with the wrong number of files')
  unless $Obj->nfiles() == 1;

# Tag the original file so it can be achieved.
_SET_TAG_ TAG=emission GROUP=$group

# Get the file
my $file = $Obj->file(1);


# Holder for intermediate files that should be tidied up
my @intermediates = ();

orac_say("Identifying regions of emission in $file." );

#TODO If we want to use beam size to determine the object minpix/ or use
#the built in FWHM for cupid we will need to get the pixel size here
#and use a look up to get the 'standard' SCUBA2/HARP beamsize for
#this waveband. Currently not implemented.

# Set up the names of the files.
my $jsa_tiles = $Obj->uhdr('JSA_TILES') // 0;

my $snr    =  $jsa_tiles ? $Obj->inout_jsatile('snr', 1)
                         : $Obj->inout('_snr');
my $clumps =  $jsa_tiles ? $Obj->inout_jsatile('snr_extent', 1)
                         : $Obj->inout('_snr_extent');
my $outcat = ($jsa_tiles ? $Obj->inout_jsatile('extent', 1)
                         : $Obj->inout('_extent')) . '.fits';
my $out    =  $jsa_tiles ? $Obj->inout_jsatile('extent-mask', 1)
                         : $Obj->inout('extent-mask');

my $log = $Obj->inout('extent') . '.log';
my $fc_param = "jsa_extent.par";

# Create the SNR file.
_CALC_SNR_IMAGE_ OUT=$snr STATS=0 GROUP=$group
orac_say("Created SNR map from $file." );

# Create catalogue from SNR map.
my $minheight = "5*RMS";
my $mindip = "1000*RMS";
my $noise = "3*RMS";
my $minpix = "9";

# Write out config.
open my $fc_h, ">", $fc_param;
print $fc_h "FellWalker.AllowEdge=1\n";
print $fc_h "FellWalker.FwhmBeam=0\n";
print $fc_h "FellWalker.MaxBad=1\n";
print $fc_h "FellWalker.Noise=$noise\n";
print $fc_h "FellWalker.FlatSlope=0\n";
print $fc_h "FellWalker.MinHeight=$minheight\n";
print $fc_h "FellWalker.MinDip=$mindip\n";
print $fc_h "FellWalker.CleanIter=1\n";
print $fc_h "FellWalker.MinPix=$minpix\n";
print $fc_h "FellWalker.MaxJump=0\n";
close $fc_h;

my $params = "in=$snr rms=1.0 config='^$fc_param' " .
  "method=fellwalker out=$clumps deconv=no logfile=$log wcspar=True outcat=! shape=poly";

$Mon{'cupid_mon'}->obeyw("findclumps", $params);

my ($ORAC_STATUS, $nclumps) = $Mon{cupid_mon}->get("findclumps", "nclumps");
orac_say("$nclumps contiguous regions of detected emission were" .
	   " identified in the SNR map.");

# Allow files to be tidied up.
push @intermediates, $clumps;



# If any clumps of emission were found, carry on.
if ($nclumps > 0){

    # Temporary catalogue file before being fixed up.
    my $tempoutcat = "temp-$outcat";
    push @intermediates, $tempoutcat;
    # Extract catalogue from original file so it is in flux units.
    my $ecparams = "mask=$clumps data=$file out=$out deconv=False" .
        " jsacat=$tempoutcat outcat=! wcspar=True shape=poly fwhmbeam=0";

    $Mon{'cupid_mon'}->obeyw("extractclumps", "$ecparams");
    orac_say("$nclumps contiguous regions of detected emission" .
             " were extracted  from the DATA map.");

    # Add an ID column with appropriate object names.
    # Get path to stilts
    my $stilts_path = File::Spec->catfile( $ENV{STARLINK_DIR}, "starjava", "bin", "stilts" );

    # Stilts command to create the column names & ID
    # TODO: MOVE THIS TO JSACAT IN CUPID FINDCLUMPS/EXTRACT CLUMPS!
    my $id = "addcol ID -before \$1   \"\\\"JCMTPX_J\\\"+replaceAll(degreesToHms(PEAK1,1),\\\":\\\",\\\"\\\")+replaceAll(degreesToDms(PEAK2,0),\\\":\\\",\\\"\\\")\";";
    my $ra = "replacecol -name RA -desc \"RA of peak pixel\" PEAK1 PEAK1;";
    my $dec = "replacecol -name DEC -desc \"Dec of peak pixel\" PEAK2 PEAK2;";
    my $peak = "replacecol -name PEAK_FLUX PEAK PEAK;";
    my $deletecol = "delcols \"CEN1 CEN2 SIZE1 SIZE2\";";
    my $flux = "replacecol -units \"mJy\" -name TOTAL_FLUX SUM \"SUM*AREA\";";
    my $area = "replacecol -name AREA VOLUME VOLUME;";


    push @intermediates, $tempoutcat;
    my $stilts_com = "$stilts_path tpipe in=$tempoutcat cmd=\'$id $ra $dec $deletecol $area $flux\' omode=out out=$outcat ofmt=FITS-PLUS";


    system($stilts_com);
    orac_say('Added ID column to output extent catalogue');

    # Push intermediates to frame
    $Obj->push_intermediates(@intermediates);

    # Push the output clump into the current frame.
    $Obj->files($out);
    # Tag the current state clump file
    _SET_TAG_ TAG=extent GROUP=$group

    # Push the output extent catalogue into the uhdr.
    $Obj->uhdr('JSA_EXTENT_CAT', $outcat);
}


