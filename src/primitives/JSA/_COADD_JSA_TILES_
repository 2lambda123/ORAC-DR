# vim: syn=perl

=head1 NAME

_COADD_JSA_TILES_ - co-add JSA tiles together by tile number

=head1 DESCRIPTION

This primitive takes a set of JSA tiles and groups them by
tile number.  It then co-adds the tiles for each tile.

=head1 COPYRIGHT

Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut

orac_termerr('Received a frame with the wrong number of files')
  unless $Frm->nfiles() == 1;

# Determine the association ID.
do {
  my (undef, $tempfrm) = create_suitable_frame($Frm);
  my ($file) = $Frm->files();
  $tempfrm->configure([$file]);
  my $asnid = $tempfrm->jsa_pub_asn_id();
  $Frm->uhdr('JSA_PUB_ASN_ID', $asnid);
  orac_say('Association of ' . $file . ': ' . $asnid);
};

# Wait until we have the whole group so that we can organise the files
# by tile number and association ID.
unless ($Grp->lastmember($Frm)) {
  return ORAC__OK;
}

orac_say('Grouping by tile number and association');

foreach my $subgrp ($Grp->subgrps(qw/TILENUM JSA_PUB_ASN_ID/)) {
  my @frames = $subgrp->members();
  my $tile = $frames[0]->hdrval('TILENUM');
  my $asnid = $frames[0]->uhdr('JSA_PUB_ASN_ID');
  my $instrument = $frames[0]->uhdr('ORAC_INSTRUMENT');

  do {
    # Create new temporary frame containing the files for this tile.
    my ($prefix, $Frm) = create_suitable_frame($frames[0]);
    my @files = map {$_->files()} @frames;
    $Frm->configure(\@files);
    $Frm->uhdr('JSA_TILES', 1);
    $Frm->jsa_filename_bits(1);

    # Determine output filename and title.
    my $title = "$instrument $asnid tile $tile";
    my $out = sprintf('%s%s_coadd%06d', $prefix, $asnid, $tile);

    # Mark the "coadd" file as an intermediate as we only need to
    # end up with the tagged "healpix" file.
    $Grp->push_intermediates($out);

    orac_say("Processing tile: $asnid $tile");

    # Co-add the data using the instrument-specific
    # primitive.
    _COADD_SINGLE_JSA_TILE_ OUT=$out TITLE=$title

    # Tag the file as the healpix product.
    _TAG_AS_REDUCED_PRODUCT_ GRAPHIC=1 UPDATE=1
  };
}

# To compute the ASNID we need to determine the backend so
# that we can use the corresponding frame class -- the PICARD
# frame class doesn't know about JSA public association IDs.
# Also select the filename prefix at the same time.
sub create_suitable_frame {
  my $Obj = shift;
  my $backend = $Obj->uhdr('ORAC_BACKEND');
  my ($prefix, $frmclass);

  if ($backend eq 'SCUBA-2') {
    $prefix = 's';
    require 'ORAC/Frame/SCUBA2.pm';
    $frmclass = 'ORAC::Frame::SCUBA2';
  }
  elsif ($backend eq 'ACSIS') {
    $prefix = 'a';
    require 'ORAC/Frame/ACSIS.pm';
    $frmclass = 'ORAC::Frame::ACSIS';
  }
  else {
    orac_termerr("Unknown backend: ${backend}\n");
  }

  return ($prefix, $frmclass->new());
}
