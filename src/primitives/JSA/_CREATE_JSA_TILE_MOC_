# vim: syn=perl

=head1 NAME

_CREATE_JSA_TILE_MOC_ - create a MOC for a JSA tile

=head1 DESCRIPTION

This primitive takes one or more JSA tiles and creates a description
of the coverage of each in MOC (FITS) format.

=head1 NOTE

The input tile should be un-trimmed.

=head1 ARGUMENTS

=over 4

=item GROUP

Select group or frame mode.

=item MAXORDER

The maximum HEALPix order to include in the MOC.  If unspecified,
then no restriction is imposed.

=item PRODUCT

Product name to set in the MOC file.

=item SUFFIX

File suffix to use.

=back

=head1 COPYRIGHT

Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut

my $group = get_prim_arg($_PRIM_ARGS_, 'GROUP', 0);
my $maxorder = get_prim_arg($_PRIM_ARGS_, 'MAXORDER', '!');
my $product = get_prim_arg($_PRIM_ARGS_, 'PRODUCT', undef);
my $suffix = get_prim_arg($_PRIM_ARGS_, 'SUFFIX', 'moc');

my $Obj = $group ? $Grp : $Frm;

orac_termerr('Received an object with the wrong number of files')
    unless $Obj->nfiles() == 1;

my ($in, $out) = $Obj->inout_jsatile($suffix, 1);

$out .= '.fits';

system($ENV{'SMURF_DIR'} . '/jsatilemoc.py',
       "IN=$in",
       "OUT=$out",
       "MAXORDER=$maxorder");

if ($?) {
    orac_termerr('jsatilemoc exited with code ' . ($? >> 8))
}

_COPY_JSA_HEADERS_TO_FITS_FILE_ IN=$in OUT=$out PRODUCT=$product GROUP=$group
