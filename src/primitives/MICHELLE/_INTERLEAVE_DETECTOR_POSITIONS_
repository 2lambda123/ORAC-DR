# -*-cperl-*-

# _INTERLEAVE_DETECTOR_POSITIONS_
#
# interleaves exposures taken at different detector positions into
# one sub-image

=head1 NAME

INTERLEAVE_DETECTOR_POSITIONS - interleaves oversampled exposures into one sub-frame

=head1 DESCRIPTION

This primitive interleaves exposures taken at different detector positions into
one sub-image.  It does no co-adding of exposures taken at the same detector position.

=head1 PARAMETERS

=over 4

=item none

=back

=head1 ORAC

=head2 Engines referenced

KAPPA

=head2 Tasks called

=over 4

=item kappa_mon

pixdupe, ardmask, paste, mosaic, cdiv

=item ndfpack_mon

ndfcopy, erase, setorigin

=back

=head2 Objects addressed

$Frm

=head1 NOTES

This primitive is not to be confused with COADD_MULTIPLE_EXPOSURES, which coadds sub-images
into one.  To get the same functionality of CGS4's "coadd integrations", use this recipe
followed directly by COADD_MULTIPLE_EXPOSURES.

=head2 REVISION

$Id$

=head1 AUTHOR

b.cavanagh@jach.hawaii.edu

=head1 COPYRIGHT

Copyright 1998-2001 Particle Physics and Astronomy Research Council.
All Rights Reserved.

=cut

my $nsubs = $Frm->nsubs;                      # number of i-files
my $nscanpos = $Frm->hdr("DETNINCR");         # number of scan positions
my $pixinc = $Frm->hdr("DETINCR");            # increment (pixels) betw scan positions
my $expansion;                                # expansion factor
if($nscanpos == 1) {             # need this loop in case headers are screwy
  $expansion = 1;
} else {
  $expansion = int(1/$pixinc);
}
my $xdim = $Frm->hdr("DCOLUMNS");             # number of columns in array
my $ydim = $Frm->hdr("DROWS");                # number of rows in array
my $oversamp = $nscanpos / $expansion;        # the oversampling
my $overoversamp = $nsubs / $nscanpos;        # the 'overoversampling'

my $newxdim;
if($nscanpos == 1) {
  $newxdim = $xdim;
} else {
  $newxdim = ( $xdim + 1 ) * $expansion;
}

# operate on each set of images

my @files;
my @output;
my @outputname;

if($nscanpos == 1) {
  foreach my $i (1..$Frm->nfiles) {
    my($in,$out) = $Frm->inout("_in",$i);
    $Mon{'ndfpack_mon'}->obeyw("ndfcopy","in=$in out=$out");
    push @files, $out;
  }
} else {

# create the ARD files, as they'll be used for all files

  my @ard;
  my @ardname;

  foreach my $i (1..$expansion) {
    $ard[$i] = new ORAC::TempFile;
    foreach my $j (1..($expansion*$xdim)) {
      if((($j - $i) % $expansion) != 0) {
	my $ardstr = "COLUMN($j)\n";
	print {$ard[$i]->handle} $ardstr;
      }
    }
    $ard[$i]->handle->close;
    $ardname[$i] = $ard[$i]->file;
  }

  foreach my $i (1..$overoversamp) {
    my $merged = new ORAC::TempFile;
    my $mergedname = $merged->file;
    my @paste;
    my @pastename;
    foreach my $j (1..$nscanpos) {
      my $fileno = $j + ($i - 1) * $nscanpos;
      my($in,$out) = $Frm->inout("_in",$fileno);
      my $position = $Frm->hdr->{$fileno}->{"DINDEX"};

      my $exp = new ORAC::TempFile;
      my $expname = $exp->file;
      $Mon{'kappa_mon'}->obeyw("pixdupe","in=$in out=$expname expand=\[$expansion,1\]");

      my $ardfile = (($j - 1) % $expansion) + 1;
      my $blank = new ORAC::TempFile;
      my $blankname = $blank->file;
      $Mon{'kappa_mon'}->obeyw("ardmask","in=$expname out=$blankname ardfile=$ardname[$ardfile]");

      my $neworigin = int(($j-1) / $expansion) * $expansion + 1;
      $Mon{'ndfpack_mon'}->obeyw("setorigin","ndf=$blankname origin=\[$neworigin,1\]");

      my $pasteinto = int(($j-1) / $expansion) + 1;
      if((($j-1) % $expansion) == 0) {
	$paste[$pasteinto] = new ORAC::TempFile;
	$pastename[$pasteinto] = $paste[$pasteinto]->file;
	$Mon{'ndfpack_mon'}->obeyw("ndfcopy","in=$blankname out=$pastename[$pasteinto]");
      } else {
	my $temp = new ORAC::TempFile;
	my $tempname = $temp->file;
	$Mon{'kappa_mon'}->obeyw("paste","in=$pastename[$pasteinto] p1=$blankname out=$tempname transp=true confine=false");
	$Mon{'ndfpack_mon'}->obeyw("erase","object=$pastename[$pasteinto] ok=true");
	$Mon{'ndfpack_mon'}->obeyw("ndfcopy","in=$tempname out=$pastename[$pasteinto]");
      }
    }
    foreach my $j (1..$oversamp) {
      if($j == 1) {
	$Mon{'ndfpack_mon'}->obeyw("ndfcopy","in=$pastename[$j] out=$mergedname");
      } else {
	my $xoffset = ($j-1) * $expansion;
	my $temp = new ORAC::TempFile;
	my $tempname = $temp->file;
	$Mon{'kappa_mon'}->obeyw("mosaic","number=2 average=false inpic1=$mergedname inpic2=$pastename[$j] outpic=$tempname xoffset=$xoffset yoffset=0");
	$Mon{'ndfpack_mon'}->obeyw("erase","object=$mergedname ok=true");
	$Mon{'ndfpack_mon'}->obeyw("ndfcopy","in=$tempname out=$mergedname");
      }
    }
    if($overoversamp == 1) {
      $Frm->files($Frm->file);
      my($in,$out) = $Frm->inout("_in");
      my $output = new ORAC::TempFile;
      my $outputname = $output->file;
      $Mon{'kappa_mon'}->obeyw("cdiv","in=$mergedname scalar=$oversamp out=$outputname");
      $Mon{'ndfpack_mon'}->obeyw("ndfcopy","in=$outputname out=$out title=$out");
      orac_print ("Frames interleaved into $out\n");
      $Frm->file($out);
      $Frm->mergehdr;
    } else {
      my($in, $out) = $Frm->inout("_in",$i);
      $Mon{'kappa_mon'}->obeyw("cdiv","in=$mergedname scalar=$oversamp out=$out title=$out");
      push @files, $out;
    }
  }
}

# update the Frm object (this has already been done if there's only one set of files)

if(!(($overoversamp == 1) && ($nscanpos != 1))) {
  $Frm->files($Frm->file);
  my ($in, $out) = $Frm->inout("_in");
  $Frm->files(@files);
  $Frm->mergehdr;
  orac_print ("Frames interleaved into $out\n");
}


