# -*-perl-*-

# _MAKE_BPM_BY_THRESHOLDING_STD_
#
# this primitive marks all data above a certain user-specified sigma limit as being bad

my $std = orac_read("Mark as bad all pixels above how many sigmas?>");

my $in = $Frm->file;
my $out = "bpm_".$Frm->number;

# set all values above the provided limit to bad

$Mon{'kappa_mon'}->obeyw("errclip","in=$in out=tmp$$ limit=$std mode=sigma");

# set all (good) values to 0
# note that UFTI does not use the same convention
# the value of 0 for good pixels was chosen by THK for similarity with CGS4
# this might be changed if it does not work out....

$Mon{'kappa_mon'}->obeyw("thresh","in=tmp$$ out=$out thrlo=0 thrhi=0 newhi=0 newlo=0 title=$out");
$Mon{'ndfpack_mon'}->obeyw("setbad","ndf=$out value=true");

# delete temporary file

$Mon{'ndfpack_mon'}->obeyw("erase","object=tmp$$ ok");

# print congratulatory message

orac_print("The bad pixel mask $out has been created.\n");



