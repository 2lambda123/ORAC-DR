# -*-perl-*-

# _MAKE_BPM_BY_THRESHOLDING_STD_
#
# this primitive marks all data above a certain user-specified sigma limit as being bad


=head1 NAME

MAKE_BPM_BY_THRESHOLDING_STD - mark data above a certain standard deviation limit as 
being bad

=head1 DESCRIPTION

Flags pixels above a certain user-defined standard deviation limit as being bad.  Good 
pixels will be given a value of zero, following CGS4 convention.

=head1 PARAMETERS

=over 4

none

=back

=head1 ORAC

=head2 Engines referenced

KAPPA

=head2 Tasks called

=over 4

=item kappa_mon

errclip, thresh

=item ndfpack_mon

setbad

=back

=head2 Objects addressed

$Frm

=head1 NOTES

Follows CGS4 convention where good pixels are given a value of zero.

=head2 REVISION

  $Id$

=head1 AUTHOR

b.cavanagh@jach.hawaii.edu

=cut


my $std = orac_read("Mark as bad all pixels above how many sigmas?>");

my $in = $Frm->file;
my $out = "bpm_".$Frm->number;
my $temp = new ORAC::TempFile;
my $tmp = $temp->file;

# set all values above the provided limit to bad

$Mon{'kappa_mon'}->obeyw("errclip","in=$in out=$tmp limit=$std mode=sigma");

# set all (good) values to 0
# note that UFTI does not use the same convention
# the value of 0 for good pixels was chosen by THK for similarity with CGS4
# this might be changed if it does not work out....

$Mon{'kappa_mon'}->obeyw("thresh","in=$tmp out=$out thrlo=0 thrhi=0 newhi=0 newlo=0 title=$out");
$Mon{'ndfpack_mon'}->obeyw("setbad","ndf=$out value=true");

# print congratulatory message

orac_print("The bad pixel mask $out has been created.\n");



