package ORAC::Index::Extern;

=head1 NAME

ORAC::Index::Extern - routines for manipulating external index files

=head1 SYNOPSIS

  use ORAC::Index::Extern;
  $ind = new ORAC::Index::Extern;

=head1 DESCRIPTION

This module provides methods for manipulating ORAC-style index
files that have been generated by an external program. 

Standard ORAC::Index files keep the index in memory and only write
updates to disk. This means that external programs can not edit
the index file whilst the program that owns the index file is running.
In this implementation, the master index file is on disk and the 
version in memory is updated whenever the index file has been
modified by an external program.

=cut

use Carp;
use strict;
use vars qw/$VERSION/;

require ORAC::Index;
use base qw( ORAC::Index );

$VERSION = '0.10';

=head1 PUBLIC METHODS

This class is a subclass of ORAC::Index. Most methods are inherited
from the base class. 

=head2 New methods

The following methods are new in this sub-class:

=over 4

=item last_read

Time the index file was last read. This is used to determine whether
the index file should be re-read.

Relies on the object being based on a hash.

=cut

sub last_read {
  my $self = shift;
  if (@_) { $self->{External_LastRead} = shift; }
  return $self->{External_LastRead};
}

=back

=head2 Sub-classed methods

These methods override the base class methods.

=over 4

=item indexref

Returns or sets the reference to the hash containing the index.
If the index file has been modified since the last update from disk,
the index is re-read.

=cut

sub indexref {
  my $self = shift;

  if (@_) { 
    my $arg = shift;
    croak("Argument is not a hash") unless ref($arg) eq "HASH";
    $self->{IndexEntries} = $arg;
  }

  # At this point we should check the modification date.
  # Note that if we then call slurpindex we have to make sure
  # that we dont go into an infinite loop of re-reading
  
  my $mtime = (stat $self->indexfile)[9];
  $mtime = 0 unless defined $mtime; # -w fix
  my $last = $self->last_read;
  $last = 0 unless defined $last;
  if ($mtime > $self->last_read) {

    # Re-read the index file
    # This is okay since we modify slurpindex so that it always
    # updates the object with the current read-time
    $self->slurpindex;

  }

  return $self->{IndexEntries};
}


=item slurpindex

Modified routine for reading the index file into the object.
Calls the base class method but makes sure that the time of the
read is stored in the object.

Currently this method automatically generates keys for the index
file (rather than reading them from the file). Should be an option.

=cut

sub slurpindex {
  my $self = shift;
  
  # Update read time
  $self->last_read(time());

  # Run the base class method for read
  $self->SUPER::slurpindex(0);

}


=back

=head1 SEE ALSO

L<ORAC::Index>

=head1 AUTHORS

Tim Jenness (t.jenness@jach.hawaii.edu)
and Frossie Economou  (frossie@jach.hawaii.edu)

=cut
