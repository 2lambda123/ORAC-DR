=head1 Name

Introduction to ORAC-DR - an ORAC-DR HowTo.

=head1 Description

This document gives a general introduction to the pipeline, what it
does and what it will not do. For information on instrument
specific functions, see SUN/231 for SCUBA and SUN/232 for IRCAM and UFTI.

=head1 What it is

The ORAC-DR data reduction system is intended to be a pipeline reducer
for incoming data. It is in use for online data reduction at UKIRT and
JCMT for a variety of instruments. There are a number of differences
between the ORAC-DR method of reduction and other systems currently in
use and observers should not expect ORAC-DR to behave or be used in
the same way as those systems.

Firstly, ORAC-DR aims to reduce data to a point where its quality can
be assessed; it will not generally produce publication-quality results
(though in certain circumstances it may do).  Secondly, although
ORAC-DR also works offline, it is expected that observers will use
their own preferred data reduction package if they wish to work
interactively work on their data. The rest of this document summarizes
and accounts for the operational differences between the pipeline and
existing packages.

=head1 It pipes, therefore it is

This is crucial. Everything else about the package is clear once this
is grasped. This is not a reduction package like CGS4DR; it is a
reduction black box which knows the incoming data types (by their
headers) and transparently applies a reduction recipe to them. There
is nothing preventing you from running three simultaneous instances of
the pipeline, for example to (i) reduce the incoming data in real
time, (ii) re-reduce a previous group of files using a different
reduction recipe and (iii) reduce and file a single previous
observation as a dark. You do this by running three versions of
oracdr, using the command-line switches to alter their behavior
(recipe, start and end observation numbers to process, graphics
options, etc.). Each instance of the pipeline will go through the
required files (existing ones or files just arriving on disk as
specified on the command line) and reduce them. Once its remit of
reduction is complete, it will exit.

=head1 Control

The behavior of ORAC-DR is entirely controlled by the command line
options entered at startup. From that point on, the system either
takes its reduction recipe instructions from the file headers (this is
the default) or uses a hardwired recipe given on the command line
itself. The recipe is, in fact, the only allowed parameter on the
command line - all the rest are options. Once you start an instance of
oracdr up, there is no further control over it; this is a considerable
change from the situation with CGS4DR, for example, where the same
package remains up once you start it, and changes are made within the
package. Corollary: if the pipeline fails to find a required
calibration frame, for example, the only logical thing for it to do is
exit cleanly, telling you why it did so. There is no control from
within the pipeline. Note that once the full ORAC system is available,
there will be plenty of pre-checking that your calibration frames will
indeed exist and be appropriate. Until that point, the behavior of
the system is logical if you understand the underlying philosophy and
do not expect to be able to control the pipeline in real time.


=head1 Document info

=begin man

Original author: adamson

$Id$

=end man

=cut
