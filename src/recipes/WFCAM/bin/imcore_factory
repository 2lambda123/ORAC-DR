#!/usr/local/bin/perl

my $instruction_list = $ARGV[0];
open FF,"$instruction_list";
$instructions = "";
while (<FF>) {
    chop;
    $instructions .= $_;
}
close FF;
eval $instructions;
unlink $instruction_list;

# Get all the input parameters

my $IPIX = $$VAR1{ipix};
my $THRESH = $$VAR1{thresh};
my $GRID = $$VAR1{grid};
my $CATTYPE = $$VAR1{cattype};
my $ICROWD = $$VAR1{icrowd};
my $RCORE = $$VAR1{rcore};
my $infile = $$VAR1{infile};
my $cpm = $$VAR1{cpm};

# Load some modules. First, everyone else's

use Astro::FITS::CFITSIO qw(:constants :longnames);
use File::Basename;
use FileHandle;

# Now mine

use Cirdr::Primitives qw(:constants :routines);

# Work out an output table name

($name,$path,$suffix) = fileparse($infile,".fit");
my $catbase = sprintf("%s_cat%s",$name,$suffix);
unlink $catbase if (-f $catbase);

# Do the image detection

my ($retval,$errmsg);
$infilesub = $infile . "[1]";
$cpmsub = $cpm . "[1]";
$catsub = $catbase . "[1]";
$retval = cir_imcore($infilesub,$cpmsub,$IPIX,$THRESH,$ICROWD,$RCORE,$GRID,
		     $catsub,"",0,$CATTYPE,$errmsg);
if ($retval != CIR_OK) {
    my $msg_fh = new FileHandle;
    $msg_fh->open(">imcore_$name.err");
    printf $msg_fh "Error doing imcore on %s -- %s\n",$infile,$errmsg;
    printf $msg_fh "infile: %s\n",$infile;
    printf $msg_fh "cpm: %s\n",$cpm;
    printf $msg_fh "ipix: %s\n",$IPIX;
    printf $msg_fh "thresh: %s\n",$thresh;
    printf $msg_fh "icrowd: %s\n",$icrowd;
    printf $msg_fh "rcore: %s\n",$rcore;
    printf $msg_fh "grid: %s\n",$grid;
    close $msg_fh;
}

	
